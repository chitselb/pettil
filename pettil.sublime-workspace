{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "core/src/core-vm.a65",
			"settings":
			{
				"buffer_size": 50689,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 32 files for \"^tags=\" (regex)\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-double.a65:\n    6  name=D+\n    7  stack=( d1 d2 -- d1+d2 )\n    8: tags=forth-83,double,todo\n    9  Add two double precision numbers\n   10  \n   ..\n   34  name=D-\n   35  stack=( d1 d2 -- d1-d2 )\n   36: tags=forth-83,double,math\n   37  Subtract \"d2\" from \"d1\" leaving the result on the stack\n   38  \n   ..\n   47  name=DSUB\n   48  stack=( d1 d2 -- d1-d2 )\n   49: tags=forth-83,double,math\n   50  Perform `d1 - d2`\n   51  \n   ..\n   74  name=DNEGATE\n   75  stack=( d -- -d )\n   76: tags=forth-83,double,primitive\n   77  Negate the double on the stack\n   78  #endif\n   ..\n   98  name=M+\n   99  stack=( d1 n -- d2 )\n  100: tags=forth-83,double,primitive\n  101  Adds sign-extended `n` to `d1` yielding sum `d2`\n  102  \n  ...\n  120  name=DABS\n  121  stack=( d -- +d )\n  122: tags=forth-83,double,primitive\n  123  Returns the absolute value of double \"d\"\n  124  #endif\n  ...\n  134  name=2DUP\n  135  stack=( n1 n2 -- n1 n2 n1 n2 )\n  136: tags=double,stack,forth-83,primitive\n  137  Make a copy of the double on top of stack\n  138  #endif\n  ...\n  144  name=2OVER\n  145  stack=( n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2 )\n  146: tags=primitive,double,stack,forth-83\n  147  Copy the double underneath the double on top of stack to become the new top of stack\n  148  #endif\n  ...\n  173  name=2ROT\n  174  stack=( lo3 hi3 lo2 hi2 lo1 hi1 -- lo2 hi2 lo1 hi1 lo3 hi3 )\n  175: tags=forth-83,double,primitive,ext\n  176  Rotate the three doubles on the stack\n  177  \n  ...\n  223  name=2SWAP\n  224  stack=( hi2 lo2 hi1 lo1 -- hi1 lo1 hi2 lo2 )\n  225: tags=double,primitive,ext\n  226  Swap the two doubles on the stack\n  227  #endif\n  ...\n  249  name=2!\n  250  stack=( d addr -- )\n  251: tags=forth-83,memory,double,primitive,ext\n  252  Store the 32-bit double `d` at `addr`.\n  253  \n  ...\n  273  name=D2/\n  274  stack=( d -- d/2 )\n  275: tags=double,primitive,math\n  276  Divides double \"d\" by 2, unsigned\n  277  #endif\n  ...\n  287  name=D2*\n  288  stack=( d -- d*2 )\n  289: tags=double,primitive,math\n  290  Multiply the double \"d\" by 2\n  291  #endif\n  ...\n  301  name=DMIN\n  302  stack=( d1 d2 -- d3 )\n  303: tags=double,forth-83\n  304  Returns d1 or d2, whichever is smaller (signed)\n  305  #endif\n  ...\n  328  name=DMAX\n  329  stack=( d1 d2 -- d3 )\n  330: tags=double,ext\n  331  Returns the larger of two doubles, signed\n  332  #endif\n  ...\n  355  name=2R@\n  356  stack=( -- x1 x2 ) ( R; x1 x2 -- x1 x2 )\n  357: tags=double,stack,ext\n  358  Copy cell pair x1 x2 from the return stack. Semantically equivalent to `R> R> 2DUP >R >R SWAP`\n  359  #endif\n  ...\n  380  name=PICK\n  381  stack=( an ... a3 a2 a1 n -- an ... a3 a2 a1 an )\n  382: tags=forth-83,nucleus\n  383  \n  384  \n  ...\n  401  name=ROLL\n  402  stack=( an ... a3 a2 a1 n -- an-1 ... a3 a2 a1 an )\n  403: tags=forth-83,nucleus\n  404  Remove the nth stack element (excluding n itself) to TOS, dropping n\n  405  \n  ...\n  460  name=3R>!\n  461  stack=( addr -- )\n  462: tags=double,primitive,ext,memory,forth-83\n  463  pop 6 bytes from the return stack to `addr`\n  464  \n  ...\n  478  name=3@>R\n  479  stack=( addr -- )\n  480: tags=double,primitive,ext,memory,forth-83\n  481  stash 6 bytes on the return stack\n  482  \n  ...\n  495  name=2@\n  496  stack=( addr -- hi lo )\n  497: tags=double,primitive,ext,memory,forth-83\n  498  Retrieve the double stored at \"addr\" to the stack\n  499  \n  ...\n  520  name=2R>\n  521  stack=( -- x1 x2 ) ( R; x1 x2 -- )\n  522: tags=double,stack,ext\n  523  \n  524  Transfer cell pair x1 x2 from the return stack. Semantically equivalent to `R> R> SWAP`\n  ...\n  541  name=R>\n  542  stack=( -- n ) ( R; n -- )\n  543: tags=forth-83,nucleus,stack\n  544  Remove the top value from the return stack and leave it on the\n  545          computation stack. See >R and R@\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-extra.a65:\n    6  name=VIDRAM\n    7  stack=( -- $8000 )\n    8: tags=i/o,const\n    9  Constant, address of PET video memory $8000\n   10  #endif\n   ..\n   17  name=EOSCR\n   18  stack=( -- $83E8 )\n   19: tags=i/o,const\n   20  Constant, address of PET `vidram b/scr +`\n   21  #endif\n   ..\n   28  name=BENJAMIN\n   29  stack=( -- $100 )\n   30: tags=i/o,const\n   31  Constant, 256\n   32  \n   ..\n   40  name=MON\n   41  stack=( -- )\n   42: tags=system,ext\n   43  Restores BASIC zero page and exits to the TIM monitor\n   44  \n   ..\n   54  name=XYZZY\n   55  stack=( -- )\n   56: tags=extra\n   57  This word doesn't do much (executes a [[NEXT]].  It is used as\n   58  a VICE xpet debugger breakpoint.\n   ..\n   83  #if 0\n   84  name=CMDOFF\n   85: tags=i/o,kernel\n   86  stack=( -- )\n   87  Restore default I/O channels\n   ..\n   98  name=@SWAP!\n   99  stack=( addr1 addr2 -- )\n  100: tags=extra\n  101  Exchanges the 16-bit values at `addr1` and `addr2`\n  102  \n  ...\n  134  name=PAUSE\n  135  stack=( flag -- )\n  136: tags=nucleus,ext\n  137  Waits for a keypress from the user before exiting\n  138  \n  ...\n  168  name=?PAUSE\n  169  stack=( -- )\n  170: tags=nucleus,ext\n  171  Scans keyboard and if 'space' was pressed, pauses until any key\n  172  is pressed.\n  ...\n  202  name=JIFFY@\n  203  stack=( -- d )\n  204: tags=device,system,ext\n  205  The number of jiffies since powerup or midnight as a double\n  206  \n  ...\n  228  name=JIFFIES\n  229  stack=( u -- )\n  230: tags=events\n  231  #endif\n  232  #include \"align.i65\"\n  ...\n  258  name=RANDMASK\n  259  stack=( n -- mask )\n  260: tags=events\n  261  returns the next power of 2 mask >= n\n  262  \n  ...\n  295  name=RNDMAX\n  296  stack=( max -- rnd )\n  297: tags=events\n  298  generate a random unsigned byte less than `max`\n  299  \n  ...\n  355  name=40/MOD\n  356  stack=( u -- u%40 u/40 )\n  357: tags=math\n  358  [[Routine courtesy of Mike B.|http://forum.6502.org/viewtopic.php?f=2&t=3051#p34802]]\n  359  Thank you sir!\n  ...\n  385  name=2NIP\n  386  stack=( d2 d1 -- d1 )\n  387: tags=forth-83,double,primitive\n  388  discards the 2nd double on the stack\n  389  \n  ...\n  400  name=40*\n  401  stack=( u -- u*40 )\n  402: tags=math\n  403  Fast integer unsigned TOS multiply by 40, no overflow checking\n  404  \n  ...\n  429  name=(LITS)\n  430  stack=( a b c d e f n == ; -- a b c d e f )\n  431: tags=system,startup,nosymbol\n  432  Works like `(LIT)` but for a group, will pile several inline literal\n  433  constants onto the stack.  Think if `(lits)` as `list` (of literals),\n  ...\n  469  name=CSWAP\n  470  stack=( ab -- ba )\n  471: tags=extra\n  472  Swaps high and low byte of TOS\n  473  \n  ...\n  493  name=LSB\n  494  stack=( u -- c )\n  495: tags=extra\n  496  Returns the low byte of a cell\n  497  #endif\n  ...\n  504  name=MSB\n  505  stack=( u -- c )\n  506: tags=extra\n  507  Returns the most significant byte of a cell\n  508  #endif\n  ...\n  517  name=+@EXECUTE\n  518  stack=( addr idx -- )\n  519: tags=extra\n  520  `execute` the cfa at the `idx`-th word above `addr`, an ON-GOSUB-like capability\n  521  \n  ...\n  568  name=$INDEX\n  569  stack=( addr char -- +index|0 )\n  570: tags=primitive,string,extra\n  571  returns the (1-based) index of char within the counted string at `addr`.\n  572  otherwise returns `0`\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-inner.a65:\n    6  name=C!\n    7  stack=( 8b addr -- )\n    8: tags=forth-83,nucleus,memory\n    9   The least-significant 8 bits of 16b are stored into the byte\n   10   at addr.\n   ..\n   20  name=!\n   21  stack=( n addr -- )\n   22: tags=forth-83,nucleus,fig,memory\n   23  \n   24  Store 16 bits of n at address.\n   ..\n   40  name=2DROP\n   41  stack=( d -- )\n   42: tags=stack,forth-83\n   43  Discard the top two items on the stack\n   44  #endif\n   ..\n   50  name=DROP\n   51  stack=( n -- )\n   52: tags=stack,forth-83\n   53  Discard the top item on the stack\n   54  #endif\n   ..\n   66  name=SLIDE\n   67  stack=( n -- )\n   68: tags=nosymbol\n   69  !!!Subroutine\n   70  Drop the top stack item\n   ..\n   84  name=4DROP\n   85  stack=( a b c d -- )\n   86: tags=stack,ext\n   87  Discard the top four stack items\n   88  #endif\n   ..\n   94  name=3DROP\n   95  stack=( a b c -- )\n   96: tags=stack,ext\n   97  Discard the top three stack items\n   98  #endif\n   ..\n  105  name=C@\n  106  stack=( addr -- 8b )\n  107: tags=forth-79,nucleus,memory,forth-83\n  108  \n  109  !!! pronounced: \"c-fetch\"\n  ...\n  119  name=@\n  120  stack=( addr -- 16b )\n  121: tags=forth-79,nucleus,memory,fig,forth-83\n  122  Leave the 16 bit contents of address.\n  123  \n  ...\n  148  name=DO2CONST\n  149  stack=( -- d )\n  150: tags=nosymbol,inner\n  151  Runtime behavior of a word defined by 2CONSTANT\n  152  #endif\n  ...\n  168  name=DOCONST\n  169  stack=( -- n )\n  170: tags=nosymbol,inner,primitive\n  171  Child runtime action of words defined by `constant`\n  172  #endif\n  ...\n  178  name=DOCCONST\n  179  stack=( -- c )\n  180: tags=nosymbol,inner,primitive\n  181  Child runtime action of words defined by `cconstant`\n  182  \n  ...\n  211  name=SP!\n  212  stack=( -- )\n  213: tags=fig\n  214  Initializes the data stack pointer to the value in user\n  215  variable SP0\n  ...\n  225  name=(?:)\n  226  stack=( flag -- )\n  227: tags=inner,nosymbol,pads\n  228  The runtime of `?:`, invokes one of the two high-level Forth words\n  229  following this word depending on `flag`\n  ...\n  289  #if 0\n  290  name=EXECUTE\n  291: tags=inner,forth-83\n  292  stack=( cfa -- )\n  293  Executes the word whose code field address is on the stack.\n  ...\n  308  name=HEX\n  309  stack=( -- )\n  310: tags=forth-83,number,i/o\n  311  Sets the system number base to hexadecimal\n  312  #endif\n  ...\n  320  name=DECIMAL\n  321  stack=( -- )\n  322: tags=number,i/o,forth-83\n  323  Sets the system number base to decimal\n  324  #endif\n  ...\n  333  name=RP!\n  334  stack=( -- )\n  335: tags=fig\n  336  Ordinarily the 6502 machine stack (aka PETTIL return stack) is\n  337  initialized to $01FF by BASIC, but the value stored at RP0 defaults\n  ...\n  352  name=?EXIT\n  353  stack=( flag -- )\n  354: tags=extension\n  355  Exits the calling word if the flag is true\n  356  \n  ...\n  376  name=?STACK\n  377  stack=( -- )\n  378: tags=inner\n  379  Check the  data stack pointer for sanity, abort if trouble\n  380  #endif\n  ...\n  391  name=SYSERR\n  392  stack=( -- )\n  393: tags=nosymbol,inner\n  394  General-purpose error handler, callable from primitives, used\n  395  to print a system error message and abort\n  ...\n  407  name=FAIL\n  408  stack=( error -- )\n  409: tags=inner\n  410  Outputs an [[error message|Error messages]], then [[ABORT]]\n  411  \n  ...\n  427  name=(?ERROR)\n  428  stack=( error# == ; flag -- )\n  429: tags=compiler,extension,nosymbol\n  430  Aborts with the inline numbered error if the flag is true\n  431  \n  ...\n  447  name=.ERR\n  448  stack=( err# -- ; performs `restart` )\n  449: tags=system,startup,nosymbol\n  450  `pettil-core` has no texty error messages.  This simplified error\n  451  handler will print the error number, followed by a `pause` before `restart`\n  ...\n  481  name=(\")\n  482  stack=( -- addr )\n  483: tags=inner,nosymbol,pads\n  484  Returns the address of an inline string\n  485  #endif\n  ...\n  498  name=(.\")\n  499  stack=( -- )\n  500: tags=inner,nosymbol,pads\n  501  Displays an inline string\n  502  \n  ...\n  542  name=PADJUST3\n  543  stack=( -- )\n  544: tags=pads,nosymbol\n  545  !!!Subroutine\n  546  \n  ...\n  554  name=PADJUST\n  555  stack=( -- )\n  556: tags=pads,nosymbol\n  557  !!!Subroutine\n  558  Allows primitives to adjust `IP` when there are inline arguments,\n  ...\n  587  #if 0\n  588  name=WYRDTHING\n  589: tags=inner,nosymbol\n  590  stack=( -- )\n  591  A weird vectoring flow of control experimental thing:\n  ...\n  607  #if 0\n  608  name=(DOES)\n  609: tags=inner,nosymbol\n  610  stack=( -- )\n  611  Runtime behavior of a word built with `<BUILDS ... DOES>`\n  ...\n  635  name=ENTER\n  636  stack=( -- )\n  637: tags=nosymbol,inner,pads\n  638  The business end of words defined by `:`, pushes the IP to the return stack\n  639  and executes a secondary\n  ...\n  660  name=(+LOOP)\n  661  stack=( n -- )\n  662: tags=inner,nosymbol\n  663  Add `n` to inner loop index.  If loop index exceeds loop limit,\n  664  then iterate back to (do), otherwise exit the loop.  PETTIL uses\n  ...\n  698  name=(LOOP)\n  699  stack=( -- )\n  700: tags=inner,nosymbol\n  701  Compiled by [[LOOP]], this is the runtime routine to increment\n  702  the inner loop index `zi`.  If loop index exceeds loop limit\n  ...\n  722  name=UNLOOP\n  723  stack=( -- )\n  724: tags=nosymbol,inner,control\n  725  Exits from a [[DO]]-[[LOOP]], either because the index exceeded the limit, or\n  726  early exit due to [[LEAVE]] or [[?LEAVE]]\n  ...\n  738  name=EXIT\n  739  stack=( -- )\n  740: tags=inner,nosymbol,pads,forth-83\n  741  The runtime behavior of ;\n  742  Exits a colon definition, unnesting to the next higher level of\n  ...\n  767  #if 0\n  768  name=>FORTH\n  769: tags=inner,nosymbol,pads\n  770  stack=( -- )\n  771  Passes control from 6502 assembly to high level Forth following the\n  ...\n  801  name=DOPAGE\n  802  stack=( -- )\n  803: tags=nosymbol,pads\n  804  Page boundary crossing is handled by the compiler inserting 'page'\n  805  when the DP gets to $xxFD or $xxFE.  IP = $xxFF is never supposed\n  ...\n  820  #if 0\n  821  name=(CLIT)\n  822: tags=inner,nosymbol,pads\n  823  stack=( -- n )\n  824  Runtime behavior of `literal`. Pushes the single byte following IP\n  ...\n  833  #if 0\n  834  name=(LIT)\n  835: tags=inner,nosymbol,pads\n  836  stack=( -- n )\n  837  Runtime behavior of `literal`, puts a number `n` on the stack\n  ...\n  858  name=?BRANCH\n  859  stack=( flag -- )\n  860: tags=inner,nosymbol\n  861  If the flag is zero, take the branch\n  862  #endif\n  ...\n  875  name=BRANCH\n  876  stack=( -- )\n  877: tags=inner,nosymbol,pads\n  878  Compiles an unconditional branch operation. When used in the form:\n  879  [[COMPILE]] [[BRANCH]] , an unconditional branch operation is compiled.\n  ...\n  911  name=(?LEAVE)\n  912  stack=( flag -- )\n  913: tags=inner,nosymbol\n  914  If flag is nonzero, exit the do loop early\n  915  #endif\n  ...\n  927  name=(?DO)\n  928  stack=( end begin -- )\n  929: tags=inner,nosymbol,pads\n  930  Performs a do-loop if end<>begin\n  931  \n  ...\n  939  name=(DO)\n  940  stack=( end begin -- )\n  941: tags=inner,nosymbol,pads\n  942  runtime code for [[DO]] [[LOOP]]\n  943  #endif\n  ...\n  980  #if 0\n  981  name=I\n  982: tags=inner,forth-83\n  983  stack=( -- index )\n  984  Push the inner loop index of a DO LOOP to the stack\n  ...\n  993  name=PUSHYA\n  994  stack=( --  n )\n  995: tags=stack,nosymbol\n  996  pass YA = value to push on stack\n  997  \n  ...\n 1011  name=SP@\n 1012  stack=( -- sp )\n 1013: tags=fig\n 1014  Fetch the data stack pointer\n 1015  \n ....\n 1025  name=DLIT\n 1026  stack=( -- d )\n 1027: tags=nosymbol,inner\n 1028  Runtime behavior of DLITERAL\n 1029  \n ....\n 1066  name=R@\n 1067  stack=( -- n ) ( R; n -- n )\n 1068: tags=forth-83,nucleus,stack\n 1069  Copy the top of the return stack to the data stack\n 1070  \n ....\n 1078  name=J\n 1079  stack=( -- index )\n 1080: tags=inner,forth-83\n 1081  Push the outer loop index of a DO LOOP to the stack (alias for [[R@]])\n 1082  #endif\n ....\n 1093  name=CALLER\n 1094  stack=( -- n )\n 1095: tags=ext\n 1096  Used by the business end of defining words to retrieve the address of the child\n 1097  word from the return stack.\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-io.a65:\n    6  name=EMIT\n    7  stack=( c -- )\n    8: tags=forth-83,i/o\n    9  #endif\n   10  emit\n   ..\n   21  name=?KEY\n   22  stack=( -- c )\n   23: tags=i/o\n   24  Get a character from the keyboard, or 0 if no key pressed\n   25  \n   ..\n   34  name=KEY\n   35  stack=( -- c )\n   36: tags=forth-83,i/o\n   37  Wait for a keypress by the user\n   38  \n   ..\n   51  name=CR\n   52  stack=( -- )\n   53: tags=forth-83,i/o\n   54  Output a carriage return, uses machine-specific ROM address\n   55  \n   ..\n   98  name=EXPECT\n   99  stack=( addr +n -- )\n  100: tags=forth-83,i/o\n  101  ''Forth-83:''//  EXPECT       addr +n --                    M,83\n  102         Receive characters and store each into memory.  The transfer\n  ...\n  144  name=SPACE\n  145  stack=( -- )\n  146: tags=forth-83,i/o\n  147  Emits a space character\n  148  \n  ...\n  166  name=SPACES\n  167  stack=( n -- )\n  168: tags=forth-83,i/o\n  169  Emits \"n\" spaces\n  170  \n  ...\n  203  name=TYPE\n  204  stack=( addr count -- )\n  205: tags=forth-83,i/o\n  206  #endif\n  207  type\n  ...\n  233  name=$.\n  234  stack=( addr -- )\n  235: tags=string\n  236  Outputs a string\n  237  \n  ...\n  251  name=HOLD\n  252  stack=( char -- )\n  253: tags=numword,forth-83\n  254  \n  255  \n  ...\n  284  name=<#\n  285  stack=( -- )\n  286: tags=numword,forth-83\n  287  \n  288  see also: [[HOLD]] [[HLD]]\n  ...\n  311  name=#>\n  312  stack=( d -- hld size )\n  313: tags=numword,forth-83\n  314  Terminates pictured numeric output, discarding the double `d` and returning\n  315  the starting address and size of the output string.\n  ...\n  346  name=SIGN\n  347  stack=( n -- )\n  348: tags=numword,forth-83\n  349  \n  350   If n is negative, an ASCII \"-\" (minus sign) is appended to the\n  ...\n  377  name=(DIGIT)\n  378  stack=( n -- c )\n  379: tags=numword,nosymbol\n  380  \n  381  pronounced: 'paren-digit'\n  ...\n  394  name=#\n  395  stack=( +d1 -- +d2 )\n  396: tags=numword,forth-83\n  397  \n  398   +d1 is divided by BASE and the quotient is\n  ...\n  432  name=#S\n  433  stack=( d -- )\n  434: tags=numword,forth-83\n  435  \n  436  pronounced: 'sharp-s'\n  ...\n  456  name=(UD.)\n  457  stack=( d -- )\n  458: tags=numword,nosymbol\n  459  Print an unsigned double\n  460  \n  ...\n  482  name=(D.)\n  483  stack=( d -- )\n  484: tags=numword,nosymbol\n  485  Print a signed double\n  486  \n  ...\n  514  name=(U.)\n  515  stack=( u -- )\n  516: tags=numword,nosymbol\n  517  Print an unsigned number\n  518  \n  ...\n  536  name=(.)\n  537  stack=( n -- )\n  538: tags=nosymbol,i/o,inner\n  539  Print a signed number\n  540  \n  ...\n  558  name=UD.\n  559  stack=( ud -- )\n  560: tags=numword\n  561  \n  562  #endif\n  ...\n  573  name=D.\n  574  stack=( d -- )\n  575: tags=numword\n  576  \n  577  #endif\n  ...\n  588  name=U.\n  589  stack=( n -- )\n  590: tags=numword,forth-83\n  591  \n  592  #endif\n  ...\n  603  name=.\n  604  stack=( n -- )\n  605: tags=numword,forth-83\n  606  \n  607  \n  ...\n  626  name=U.R\n  627  stack=( u w -- )\n  628: tags=numword\n  629  \n  630   u is converted using the value of BASE and then\n  ...\n  649  name=.R\n  650  stack=( n1 w -- )\n  651: tags=numword\n  652  \n  653  #endif\n  ...\n  666  name=UD.R\n  667  stack=( d w -- )\n  668: tags=numword\n  669  \n  670  #endif\n  ...\n  683  name=D.R\n  684  stack=( d n -- )\n  685: tags=numword\n  686  \n  687  #endif\n  ...\n  711  name=?\n  712  stack=( addr -- )\n  713: tags=i/o,memory\n  714  Fetches the value at `addr` and outputs it via [[.]]\n  715  \n  ...\n  729  name=IRQ!\n  730  stack=( irqhandler -- )\n  731: tags=device\n  732  Called by the editor (and anything else) to flip the IRQ vector\n  733  on and off between two different values\n  ...\n  753  #if 0\n  754  name=^IRQS\n  755: tags=nosymbol,subroutine\n  756  Toggle the BRK vector between Sweet16 <--> TIM\n  757  \n  ...\n  767  #if 0\n  768  name=^IRQBRK\n  769: tags=startup,nosymbol\n  770  * toggle Sweet16 BRK vector at ($0090)\n  771  \n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-locals.a65:\n    5  #if 0\n    6  name=HARVESTS10\n    7: tags=subroutine,locals,nosymbol\n    8  Sets up five locals in the N area\n    9  \n   ..\n   16  #if 0\n   17  name=HARVESTS8\n   18: tags=subroutine,locals,nosymbol\n   19  Sets up four locals in the N area\n   20  \n   ..\n   27  #if 0\n   28  name=HARVESTS6\n   29: tags=subroutine,locals,nosymbol\n   30  Sets up three locals in the N area\n   31  \n   ..\n   38  #if 0\n   39  name=HARVESTS4\n   40: tags=subroutine,locals,nosymbol\n   41  Sets up two locals in the N area\n   42  \n   ..\n   49  #if 0\n   50  name=HARVESTS2\n   51: tags=subroutine,locals,nosymbol\n   52  Sets up one local in the N area\n   53  \n   ..\n   59  #if 0\n   60  name=HARVESTS\n   61: tags=subroutine,locals,nosymbol\n   62  Pops cells from the split stack to N area, working backwards.\n   63  Used for setting up primitives that consume multiple arguments\n   ..\n  102  #if 0\n  103  name=PLANTS10\n  104: tags=subroutine,locals,nosymbol\n  105  puts 5 locals underneath `tos`\n  106  \n  ...\n  113  #if 0\n  114  name=PLANTS8\n  115: tags=subroutine,locals,nosymbol\n  116  puts 4 locals underneath `tos`\n  117  \n  ...\n  124  #if 0\n  125  name=PLANTS6\n  126: tags=subroutine,locals,nosymbol\n  127  puts 3 locals underneath `tos`\n  128  \n  ...\n  135  #if 0\n  136  name=PLANTS4\n  137: tags=subroutine,locals,nosymbol\n  138  Sets up two locals in the N area\n  139  \n  ...\n  146  #if 0\n  147  name=PLANTS2\n  148: tags=subroutine,locals,nosymbol\n  149  Sets up two locals in the N area\n  150  \n  ...\n  156  #if 0\n  157  name=PLANTS\n  158: tags=subroutine,locals,nosymbol\n  159  Pushes N area back onto stack ~ untested\n  160  \n  ...\n  187  name=>ZP\n  188  stack=( n -- n )\n  189: tags=primitive,locals,nosymbol\n  190  Copy `tos` to an inline zero page address.  Does not affect `tos`\n  191  \n  ...\n  206  name=<ZP\n  207  stack=( <n == ; -- @n )\n  208: tags=primitive,locals,nosymbol\n  209  Replaces TOS with 16-bit fetch from inline z.p. address\n  210  \n  ...\n  228  name==ZP\n  229  stack=( x -- @n )\n  230: tags=primitive,locals,nosymbol\n  231  Exchange `tos` with (16-bit) word at inline z.p. address\n  232  \n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-nucleus.a65:\n    6  name=UM*\n    7  stack=( u1 u2 -- ud )\n    8: tags=nucleus,math,forth-83\n    9  `ud` is the unsigned product of `u1` times `u2`.  All values and\n   10  arithmetic are unsigned.\n   ..\n   76  name=(UM*)\n   77  stack=( 0 multiplicand multiplier 0 0 -- product )\n   78: tags=nucleus,math,forth-83,nosymbol\n   79  \n   80  ```\n   ..\n  123  name=UD/MOD\n  124  stack=( ud1 u2 -- u3 ud4 )\n  125: tags=numword\n  126  \n  127  http://www.bradrodriguez.com/papers/camel09.txt\n  ...\n  183  name=UM/MOD\n  184  stack=( ud u -- rem quot )\n  185: tags=forth-83,nucleus\n  186  Perform an unsigned division of the 16-bit \"u\" into the double\n  187  \"ud\", leaving the 16-bit unsigned remainder and quotient on\n  ...\n  241  name=AND\n  242  stack=( n1 n2 -- n1&n2 )\n  243: tags=forth-83,nucleus,boolean\n  244  #endif\n  245  andx\n  ...\n  256  name=OR\n  257  stack=( n1 n2 -- n1|n2 )\n  258: tags=forth-83,nucleus,boolean\n  259  #endif\n  260  orx\n  ...\n  271  name=XOR\n  272  stack=( n1 n2 -- n1^n2 )\n  273: tags=forth-83,nucleus,boolean\n  274  #endif\n  275  xor\n  ...\n  286  name=NOT\n  287  stack=( n -- !n )\n  288: tags=forth-83,nucleus,boolean\n  289  #endif\n  290  not\n  ...\n  301  name=RSWAP\n  302  stack=( x -- y  r; y -- x )\n  303: tags=stack,ext\n  304  Exchange `tos` with top of return stack\n  305  \n  ...\n  318  name=2>R\n  319  stack=( x1 x2 -- ) ( R; -- x1 x2 )\n  320: tags=double,stack,ext\n  321  \n  322  Transfer cell pair x1 x2 to the return stack. Semantically equivalent to `SWAP >R >R` .\n  ...\n  333  name=>R\n  334  stack=( n -- ) ( R; -- n )\n  335: tags=forth-83,nucleus,stack\n  336  Move the top element of the data stack to the return stack\n  337  \n  ...\n  346  name=DUP>R\n  347  stack=( n -- n ) ( R; -- n )\n  348: tags=nucleus,stack\n  349  Copy the top of the data stack to the return stack\n  350  \n  ...\n  364  name=RDROP\n  365  stack=( -- ) ( R; a -- )\n  366: tags=nucleus,stack\n  367  Drop the top item on the return stack\n  368  \n  ...\n  379  name=2OFF\n  380  stack=( addr -- )\n  381: tags=nucleus,memory\n  382  Erase four bytes starting at `addr`\n  383  \n  ...\n  391  name=3COFF\n  392  stack=( addr -- )\n  393: tags=nucleus,memory\n  394  Erase three bytes starting at `addr`\n  395  \n  ...\n  404  name=COFF\n  405  stack=( addr -- )\n  406: tags=nucleus,memory\n  407  Store 0 char at `addr`\n  408  #endif\n  ...\n  416  name=OFF\n  417  stack=( addr -- )\n  418: tags=nucleus,memory\n  419  Store 0 at `addr`\n  420  \n  ...\n  443  name=YOFF\n  444  stack=( )\n  445: tags=nucleus,memory,subroutine,nosymbol\n  446  Erases Y bytes of register space, including `tos`\n  447  #endif\n  ...\n  457  name=ON\n  458  stack=( addr -- )\n  459: tags=nucleus,memory\n  460  Store -1 at `addr`\n  461  #endif\n  ...\n  469  name=-\n  470  stack=( n1 n2 -- difference )\n  471: tags=forth-83,nucleus\n  472  Subtract `n2` from `n1`\n  473  \n  ...\n  480  name=+\n  481  stack=( n1 n2 -- sum )\n  482: tags=forth-83,nucleus,math,fig,forth-79\n  483  registers=A:X:C:TOS=sum\n  484  Calculate the sum of n1 plus n2\n  ...\n  507  name=ABS\n  508  stack=( n -- u )\n  509: tags=forth-83,nucleus,math,fig,forth-79\n  510  Leave the absolute value of n as u.\n  511  #endif\n  ...\n  518  name=NEGATE\n  519  stack=( n -- -n )\n  520: tags=forth-83,nucleus,math\n  521  \n  522  #endif\n  ...\n  543  name=OVER\n  544  stack=( n1 n2 -- n1 n2 n1 )\n  545: tags=forth-83,nucleus,stack\n  546  \n  547  #endif\n  ...\n  555  name=SWAP\n  556  stack=( n1 n2 -- n2 n1 )\n  557: tags=forth-83,nucleus,stack,fig,forth-79\n  558  Exchange the top two values on the stack.\n  559  #endif\n  ...\n  578  name=TUCK\n  579  stack=( n1 n2 -- n2 n1 n2 )\n  580: tags=nucleus,stack\n  581  Insert the top item on the stack beneath the second.\n  582  #endif\n  ...\n  601  name=-ROT\n  602  stack=( a b c -- c a b )\n  603: tags=nucleus,stack\n  604  \n  605  #endif\n  ...\n  616  name=NIP\n  617  stack=( n1 n2 -- n2 )\n  618: tags=nucleus,stack\n  619  Remove the second item from the stack\n  620  #endif\n  ...\n  628  name=?DUP\n  629  stack=( 0 -- 0 | n -- n n )\n  630: tags=forth-83,nucleus\n  631   DUP if top of stack is nonzero\n  632  #endif\n  ...\n  640  name=DUP\n  641  stack=( n -- n n )\n  642: tags=forth-83,nucleus,stack,forth-79,fig\n  643  Duplicate the value on the stack.\n  644  \n  ...\n  655  name=SLIP\n  656  stack=( n -- n n )\n  657: tags=nosymbol,subroutine\n  658  Push TOS to the stack (DUP)\n  659  #endif\n  ...\n  671  name=+!\n  672  stack=( n addr -- )\n  673: tags=forth-83,nucleus,fig,forth-79\n  674  Add \"n\" to the value at \"addr\"\n  675  \n  ...\n  692  name=TOGGLE\n  693  stack=( addr bitmask -- )\n  694: tags=nucleus,boolean,fig\n  695  Complement the contents of addr by the bit pattern b.\n  696  #endif\n  ...\n  710  name=COUNT\n  711  stack=( addr1 -- addr2 n1 )\n  712: tags=forth-83\n  713  Leaves the address, addr2 and the character count +n of text\n  714  beginning at addr1.  addr2 is addr1+1 and n1 is the length of\n  ...\n  722  name=C@+\n  723  stack=( addr -- addr+1 c )\n  724: tags=nucleus,memory,primitive\n  725  Fetches the byte at addr, increments addr\n  726  \n  ...\n  737  name=@+\n  738  stack=( addr -- addr+2 w )\n  739: tags=nucleus,memory,primitive\n  740  Fetches word `w` at `addr`, increments addr by 2\n  741  \n  ...\n  757  name=CBIT!\n  758  stack=( mask addr -- )\n  759: tags=nucleus,boolean,memory\n  760  Turn on the `mask` bits in the byte at `addr`\n  761  \n  ...\n  773  name=CBIT@\n  774  stack=( mask addr -- flag )\n  775: tags=nucleus\n  776  \n  777   test the mask bits in the byte at address\n  ...\n  789  name=TIB\n  790  stack=( -- addr )\n  791: tags=nucleus,const,forth-83\n  792  The address of the text input buffer.  This buffer is used\n  793  to hold characters when the input stream is coming from the\n  ...\n  805  name=SIB\n  806  stack=( -- addr )\n  807: tags=nucleus,const,forth-83\n  808  The address of the screen input buffer.  This buffer is used\n  809  to hold each logical line on a screen while interpreting it.\n  ...\n  823  name=-5\n  824  stack=( -- -5 )\n  825: tags=nucleus,const\n  826  \n  827  #endif\n  ...\n  834  name=-4\n  835  stack=( -- -4 )\n  836: tags=nucleus,const\n  837  \n  838  #endif\n  ...\n  845  name=-3\n  846  stack=( -- -3 )\n  847: tags=nucleus,const\n  848  \n  849  #endif\n  ...\n  856  name=-2\n  857  stack=( -- -2 )\n  858: tags=nucleus,const\n  859  \n  860  #endif\n  ...\n  867  name=BLK@\n  868  stack=( -- blk )\n  869: tags=numword\n  870  Return the contents of user variable `blk`\n  871  \n  ...\n  879  name=9\n  880  stack=( -- 9 )\n  881: tags=nucleus\n  882  Constant: `9`\n  883  #endif\n  ...\n  889  name=8\n  890  stack=( -- 8 )\n  891: tags=nucleus\n  892  Constant: `8`\n  893  #endif\n  ...\n  899  name=7\n  900  stack=( -- 7 )\n  901: tags=nucleus\n  902  Constant: `7`\n  903  #endif\n  ...\n  909  name=6\n  910  stack=( -- 6 )\n  911: tags=nucleus\n  912  Constant: `6`\n  913  #endif\n  ...\n  919  name=EIGHTY\n  920  stack=( -- 80 )\n  921: tags=nucleus,const\n  922  Constant: `80`\n  923  #endif\n  ...\n  929  name=FORTY\n  930  stack=( -- 40 )\n  931: tags=nucleus,const\n  932  Constant: `40`\n  933  #endif\n  ...\n  939  name=TEN\n  940  stack=( -- 10 )\n  941: tags=nucleus,const\n  942  Constant: `10`\n  943  #endif\n  ...\n  949  name=BL\n  950  stack=( -- n )\n  951: tags=nucleus,const\n  952  Constant: `32`\n  953  #endif\n  ...\n  959  name=L/SCR\n  960  stack=( -- n )\n  961: tags=nucleus,const\n  962  Lines per screen, 25\n  963  Constant: `25`\n  ...\n  970  name=5\n  971  stack=( -- 5 )\n  972: tags=nucleus\n  973  Constant: `5`\n  974  #endif\n  ...\n  980  name=4\n  981  stack=( -- 4 )\n  982: tags=nucleus\n  983  Constant: `4`\n  984  #endif\n  ...\n  990  name=3\n  991  stack=( -- 3 )\n  992: tags=nucleus\n  993  Constant: `3`\n  994  #endif\n  ...\n 1000  name=2\n 1001  stack=( -- 2 )\n 1002: tags=nucleus\n 1003  Constant: `2`\n 1004  #endif\n ....\n 1010  name=1\n 1011  stack=( -- 1 )\n 1012: tags=nucleus,const\n 1013  Constant: `1`\n 1014  #endif\n ....\n 1021  name=?TERMINAL\n 1022  stack=( -- flag )\n 1023: tags=forth-83\n 1024  Leaves a flag indicating whether the [[STOP]] key was pressed by the user\n 1025  #endif\n ....\n 1033  name=ACC\n 1034  stack=( -- $00 )\n 1035: tags=assembler,vocabulary,extension\n 1036  !!!Assembler constant\n 1037  zero page scratch location\n ....\n 1047  name=0\n 1048  stack=( -- 0 )\n 1049: tags=nucleus\n 1050  Put a 0 on the stack\n 1051  #endif\n ....\n 1056  name=FALSE\n 1057  stack=( -- 0 )\n 1058: tags=nucleus\n 1059  Put a 0 (false flag) on the stack\n 1060  #endif\n ....\n 1067  name=-1\n 1068  stack=( -- -1 )\n 1069: tags=nucleus\n 1070  \n 1071  #endif\n ....\n 1076  name=TRUE\n 1077  stack=( -- -1 )\n 1078: tags=nucleus,forth-83\n 1079  #endif\n 1080  true\n ....\n 1101  name=<\n 1102  stack=( n1 n2 -- flag )\n 1103: tags=forth-83,nucleus\n 1104  Perform a signed comparison and return `true` if `n1` is less\n 1105  than `n2`\n ....\n 1120  name=BETWEEN?\n 1121  stack=( low high n -- flag )\n 1122: tags=nucleus,thinking-forth,forth200x\n 1123  Returns `true` when `low <= n < high`\n 1124  \n ....\n 1177  name=U<\n 1178  stack=( n1 n2 -- flag )\n 1179: tags=forth-83,nucleus\n 1180  #endif\n 1181  ult\n ....\n 1188  name=0=\n 1189  stack=( n -- flag )\n 1190: tags=forth-83,nucleus\n 1191  Leaves [[TRUE]] if the top of stack is zero, otherwise [[FALSE]].\n 1192  Logical [[NOT]], turns nonzero values to `$FFFF`\n ....\n 1200  name=0<>\n 1201  stack=( n -- flag )\n 1202: tags=nucleus\n 1203  Leave `FALSE` if `n` is 0, `TRUE` otherwise.  Normalizes nonzero\n 1204  values to $FFFF .   Could this word be removed? ~~\n ....\n 1216  name=0<\n 1217  stack=( n -- flag )\n 1218: tags=forth-83,nucleus\n 1219  #endif\n 1220  zlt\n ....\n 1226  name=SUB16\n 1227  stack=( n1 n2 -- flag )\n 1228: tags=nucleus,subroutine,nosymbol\n 1229  Performs a 16-bit subtraction of `2OS - TOS`\n 1230  \n ....\n 1250  name=0>\n 1251  stack=( n -- flag )\n 1252: tags=forth-83,nucleus,relational\n 1253  \n 1254  #endif\n ....\n 1261  name=DU<\n 1262  stack=( d1 d2 -- flag )\n 1263: tags=forth-83,double,primitive,logical\n 1264  Performs an unsigned compare of two doubles and leaves true if \"d1\" < \"d2\"\n 1265  \n ....\n 1273  #if 0\n 1274  name=D=\n 1275: tags=double,primitive,logical\n 1276  stack=( d1 d2 -- flag )\n 1277  Leaves `true` if the two doubles are equal\n ....\n 1298  name=<>\n 1299  stack=( n1 n2 -- flag )\n 1300: tags=nucleus,relational\n 1301  Leave a true flag if `n1` does not equal `n2`.\n 1302  \n ....\n 1310  name==\n 1311  stack=( n1 n2 -- flag )\n 1312: tags=forth-83,nucleus,relational\n 1313  Leave a true flag if \"n1\" does is equal to \"n2\".\n 1314  \n ....\n 1332  name=(=)\n 1333  stack=( n1 n2 -- n1 n2 ; returns Z flag )\n 1334: tags=nucleus,relational,nosymbol\n 1335  subroutine evaluates TOS==2OS\n 1336  \n ....\n 1357  name=D<\n 1358  stack=( d1 d2 -- flag )\n 1359: tags=forth-83,double,primitive\n 1360  Compare two signed doubles.  True if `d1` < `d2`\n 1361  \n ....\n 1370  name=>\n 1371  stack=( n1 n2 -- flag )\n 1372: tags=forth-83,double,primitive\n 1373  Compare two values.  Return `true` if `n1` > `n2`\n 1374  #endif\n ....\n 1387  name=D>\n 1388  stack=( d1 d2 -- flag )\n 1389: tags=double\n 1390  \n 1391  ```\n ....\n 1408  name=D0=\n 1409  stack=( d -- flag )\n 1410: tags=double,primitive,logical\n 1411  Leave true if the double `d` is zero\n 1412  \n ....\n 1427  name=TOS2MINUS\n 1428  stack=( n -- n-2 )\n 1429: tags=nosymbol\n 1430  !!!Subroutine\n 1431  decrements the top of stack twice\n ....\n 1437  #if 0\n 1438  name=DECTOS\n 1439: tags=nosymbol\n 1440  decrement TOS\n 1441  #endif\n ....\n 1452  name=1-\n 1453  stack=( n -- n-1 )\n 1454: tags=forth-83,nucleus\n 1455  Subtract 1 from top of stack\n 1456  #endif\n ....\n 1463  name=3-\n 1464  stack=( n -- n-3 )\n 1465: tags=nucleus\n 1466  \n 1467  #endif\n ....\n 1473  name=2-\n 1474  stack=( n -- n-2 )\n 1475: tags=nucleus,forth-83\n 1476  \n 1477  #endif\n ....\n 1485  name=2+\n 1486  stack=( n -- n+2 )\n 1487: tags=nucleus,math,forth-83\n 1488  Increment top of stack by 2\n 1489  \n ....\n 1505  name=3+\n 1506  stack=( n -- n+3 )\n 1507: tags=nucleus\n 1508  \n 1509  #endif\n ....\n 1516  name=2/\n 1517  stack=( n -- n/2 )\n 1518: tags=forth-83,nucleus\n 1519  \n 1520  \n ....\n 1529  name=2*\n 1530  stack=( n -- n*2 )\n 1531: tags=nucleus\n 1532  \n 1533  #endif\n ....\n 1541  name=ROT\n 1542  stack=( a b c -- b c a )\n 1543: tags=forth-83,nucleus\n 1544  \n 1545  \n ....\n 1570  name=THIRD\n 1571  stack=( n1 n2 n3 -- n1 n2 n3 n1 )\n 1572: tags=nucleus\n 1573  \n 1574  \n ....\n 1583  name=3DUP\n 1584  stack=( n1 n2 n3 -- n1 n2 n3 n1 n2 n3 )\n 1585: tags=nucleus\n 1586  Duplicate the top three elements on the stack\n 1587  \n ....\n 1629  name=UNDER\n 1630  stack=( n1 n2 -- n1 n1 n2 )\n 1631: tags=nucleus\n 1632  \n 1633   Make a duplicate of the second stack element beneath `TOS`\n ....\n 1646  name=+UNDER\n 1647  stack=( n1 n2 n3 -- n1+n3 n2 )\n 1648: tags=nucleus\n 1649  \n 1650   Add the top of stack to item underneath the second on stack\n ....\n 1670  name=2+UNDER\n 1671  stack=( n1 n2 -- n1+1 n2 )\n 1672: tags=nucleus,extra\n 1673  \n 1674  Add 2 to second on stack.  Equivalent to `2 +under`\n ....\n 1682  name=1+UNDER\n 1683  stack=( n1 n2 -- n1+1 n2 )\n 1684: tags=nucleus,extra\n 1685  \n 1686  Increment second on stack.  Equivalent to `1 +under`\n ....\n 1700  name=ONEPLUNDERS\n 1701  stack=( a b c d -- a b+1 c d )\n 1702: tags=nucleus,extra,subroutine,nosymbol\n 1703  Increment stack at `x`.\n 1704  #endif\n ....\n 1714  name=3-UNDER\n 1715  stack=( n1 n2 -- n1-3 n2 )\n 1716: tags=nucleus,extra\n 1717  \n 1718  Decrement second on stack, twice.  Equivalent to `-2 +under`\n ....\n 1726  name=2-UNDER\n 1727  stack=( n1 n2 -- n1-1 n2 )\n 1728: tags=nucleus,extra\n 1729  \n 1730  Decrement second on stack, twice.  Equivalent to `-2 +under`\n ....\n 1738  name=1-UNDER\n 1739  stack=( n1 n2 -- n1-1 n2 )\n 1740: tags=nucleus,extra\n 1741  \n 1742  Decrement second on stack.  Equivalent to `-1 +under`\n ....\n 1761  name=FILL\n 1762  stack=( addr +howmany value -- )\n 1763: tags=forth-83,nucleus\n 1764  \n 1765  \n ....\n 1797  name=>FILL\n 1798  stack=( addr howmany -- )\n 1799: tags=nucleus,nosymbol\n 1800  shared `does>` for `erase` and `blank`\n 1801  \n ....\n 1815  name=ERASE\n 1816  stack=( addr howmany -- )\n 1817: tags=nucleus\n 1818  \n 1819  #endif\n ....\n 1827  name=BLANK\n 1828  stack=( addr howmany -- )\n 1829: tags=nucleus\n 1830  \n 1831  #endif\n ....\n 1839  name=>-BUF\n 1840  stack=( char == ; buff max -- buff actual )\n 1841: tags=nucleus,nosymbol\n 1842  \n 1843  ```\n ....\n 1897  name=-NULLS\n 1898  stack=( addr +n1 -- addr +n2 )\n 1899: tags=nucleus\n 1900  \n 1901   The character count +n1 of a text string beginning at addr\n ....\n 1913  name=-TRAILING\n 1914  stack=( addr +n1 -- addr +n2 )\n 1915: tags=nucleus\n 1916  \n 1917   The character count +n1 of a text string beginning at addr\n ....\n 1929  name=CMOVE\n 1930  stack=( from to howmany -- )\n 1931: tags=forth-83,nucleus,memory\n 1932  \n 1933  \n ....\n 1942  name=CMOVE>\n 1943  stack=( from to howmany -- )\n 1944: tags=forth-83,nucleus,memory\n 1945   Move the u bytes beginning at address addr1 to\n 1946   addr2.  The move begins by moving the byte at\n ....\n 2024  name=MOVE\n 2025  stack=( from to howmany -- )\n 2026: tags=nucleus,memory\n 2027   Move the `howmany` bytes beginning at `from` to\n 2028   `to`.  Designed to prevent clobber if both memory regions\n ....\n 2060  name=+MOVE\n 2061  stack=( start end delta -- )\n 2062: tags=nucleus\n 2063  \n 2064   Move a block of memory between start and end (inclusive) to\n ....\n 2121  name=HERE\n 2122  stack=( -- addr )\n 2123: tags=nucleus,forth-83\n 2124  \n 2125  #endif\n ....\n 2133  name=PAD\n 2134  stack=( -- addr )\n 2135: tags=nucleus,forth-83\n 2136  \n 2137   The lower address of a scratch area used to hold data for\n ....\n 2158  name=S>D\n 2159  stack=( s -- d )\n 2160: tags=nucleus\n 2161  sign-extends a single into a double\n 2162  \n ....\n 2182  name=C>S\n 2183  stack=( c -- s )\n 2184: tags=nucleus\n 2185  sign-extends a character into a single\n 2186  #endif\n ....\n 2197  name=SGN\n 2198  stack=( n -- -1|0|1 )\n 2199: tags=nucleus\n 2200  \n 2201   return the sign of n\n ....\n 2219  name=RANDUS\n 2220  stack=( -- r )\n 2221: tags=nucleus,subroutine,nosymbol\n 2222  \n 2223   return a random byte in the range 0..255\n ....\n 2248  name=RND\n 2249  stack=( -- r )\n 2250: tags=nucleus\n 2251  \n 2252   return a random number in the range 0..65535\n ....\n 2262  name=RANDU\n 2263  stack=( -- r )\n 2264: tags=nucleus\n 2265  \n 2266   return a random number in the range 0..65535\n ....\n 2278  name=RANDOM\n 2279  stack=( -- a )\n 2280: tags=nucleus\n 2281  \n 2282   Returns the address of the 6-byte random number buffer\n ....\n 2292  name=2+!\n 2293  stack=( n -- )\n 2294: tags=nucleus\n 2295  Add 2 to the word addressed by `n`\n 2296  \n ....\n 2303  name=1+!\n 2304  stack=( n -- )\n 2305: tags=nucleus\n 2306  \n 2307   increments the word addressed by n\n ....\n 2324  name=1-!\n 2325  stack=( n -- )\n 2326: tags=nucleus\n 2327  \n 2328  Decrement the word of memory at address `n`\n ....\n 2347  name=>MINMAX\n 2348  stack=( n1 n2 -- n )\n 2349: tags=nucleus,nosymbol\n 2350  leverage similarities of [[MIN]] and [[MAX]]\n 2351  \n ....\n 2380  name=MIN\n 2381  stack=( n1 n2 -- n )\n 2382: tags=forth-83,nucleus\n 2383  Returns the lower of the two signed arguments\n 2384  \n ....\n 2396  name=MAX\n 2397  stack=( n1 n2 -- n )\n 2398: tags=forth-83,nucleus\n 2399  Returns the higher of the two signed arguments\n 2400  \n ....\n 2412  name=M*\n 2413  stack=( n1 n2 -- d )\n 2414: tags=nucleus\n 2415  Multiply two signed words, leaving the double product on the stack\n 2416  \n ....\n 2496  name=M*/\n 2497  stack=( n1 n2 n3 -- d )\n 2498: tags=nucleus\n 2499  \n 2500   multiplies n1*n2 giving an intermediate 16-bit value, and divides\n ....\n 2527  name=*\n 2528  stack=( n1 n2 -- n1*n2 )\n 2529: tags=forth-83,nucleus\n 2530  \n 2531   multiply two signed words\n ....\n 2545  name=/MOD\n 2546  stack=( n1 n2 -- n3 n4 )\n 2547: tags=forth-83,nucleus,todo\n 2548  \n 2549   n3 is the remainder and n4 the floor of the\n ....\n 2598  name=/\n 2599  stack=( n1 n2 -- n3 )\n 2600: tags=forth-83,nucleus\n 2601  \n 2602   n3 is the floor of the quotient of n1 divided\n ....\n 2613  name=M/\n 2614  stack=( n1 n2 -- n3 )\n 2615: tags=forth-83,nucleus\n 2616  \n 2617   n3 is the floor of the quotient of n1 divided\n ....\n 2632  name=MOD\n 2633  stack=( n1 n2 -- n3 )\n 2634: tags=forth-83,nucleus\n 2635  \n 2636   n3 is the remainder after dividing n1 by the\n ....\n 2649  name=*/MOD\n 2650  stack=( n1 n2 n3 -- n4 n5 )\n 2651: tags=forth-83,nucleus\n 2652  \n 2653   n1 is first multiplied by n2 producing an inter-\n ....\n 2668  name=*/\n 2669  stack=( n1 n2 n3 -- n4 )\n 2670: tags=forth-83,nucleus\n 2671  \n 2672   n1 is first multiplied by n2 producing an inter-\n ....\n 2689  name=DEPTH\n 2690  stack=( -- n )\n 2691: tags=forth-83,nucleus\n 2692  Returns the depth of the data stack\n 2693  #endif\n ....\n 2703  name=>BIT\n 2704  stack=( bit# base -- mask addr )\n 2705: tags=nucleus,ext\n 2706  Indexes `bit#` bits into a bit array starting at `base`, returns a `mask` and\n 2707  `addr` for [[CBIT!]] or [[CBIT@]]\n ....\n 2753  name=$!\n 2754  stack=( addr1 size addr2 -- )\n 2755: tags=string,nucleus,ext\n 2756  Copies `size` bytes from `addr1` to `addr2+1` as a counted string, storing\n 2757  `size` at `addr2`\n ....\n 2797  name=!+\n 2798  stack=( addr n -- addr+2 )\n 2799: tags=nucleus\n 2800  \n 2801  Stores n at addr, returns the following address\n ....\n 2855  name=C!+\n 2856  stack=( addr c -- addr+1 )\n 2857: tags=nucleus,memory,primitive\n 2858  The least-significant 8 bits of c are stored into the byte\n 2859  at addr, and addr is incremented by one\n ....\n 2873  name=DOCREATE\n 2874  stack=( -- addr )\n 2875: tags=nosymbol,inner\n 2876  The business end of words created by CREATE, returns the address\n 2877  of the calling word plus 1\n ....\n 2889  name=1+\n 2890  stack=( n -- n+1 )\n 2891: tags=forth-83,nucleus\n 2892  Add 1 to top of stack\n 2893  \n ....\n 2903  name=inctos\n 2904  stack=( n -- n+1 )\n 2905: tags=nosymbol\n 2906  increment TOS; sets the Z flag according to `tos`\n 2907  \n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-user.a65:\n    8  name=USERVAR\n    9  stack=( -- addr )\n   10: tags=uservar,nosymbol\n   11  Runtime action of all user variables.  Returns the address of\n   12  the user variable.\n   ..\n   32  name=MEMSIZ\n   33  stack=( -- addr )\n   34: tags=uservar,kernel\n   35  !!!User variable\n   36  Top of RAM, initialized at COLD from BASIC zero page variable at $34\n   ..\n   46  name=SP0\n   47  stack=( -- addr )\n   48: tags=uservar,fig\n   49  User variable\n   50  The data stack initialization value ($31)\n   ..\n   60  name=RP0\n   61  stack=( -- addr )\n   62: tags=uservar,fig\n   63  [heading]User variable[/heading]\n   64  The return stack initialization value ($01FE)\n   ..\n   72  name=STARTUP\n   73  stack=( -- addr )\n   74: tags=uservar\n   75  !!!User variable\n   76  Code field address of the word that executes on startup.  In\n   ..\n   85  name=WARNING\n   86  stack=( -- addr )\n   87: tags=uservar,fig,forth-79\n   88  User variable\n   89  A user variable containing a value controlling messages.\n   ..\n  100  name=DP\n  101  stack=( -- addr )\n  102: tags=uservar,fig\n  103  Dictionary pointer\n  104  #endif\n  ...\n  111  name=FENCE\n  112  stack=( -- addr )\n  113: tags=uservar,fig\n  114  !!!User variable\n  115  Returns the address of the user variable FENCE which defines\n  ...\n  124  name=HEIGHT\n  125  stack=( -- addr )\n  126: tags=uservar,fig\n  127  !!!User variable\n  128  user variable `height` of the screen, in physical lines\n  ...\n  137  name=WIDTH\n  138  stack=( -- addr )\n  139: tags=uservar,fig\n  140  !!!User variable\n  141  `width` of the screen minus one, in columns e.g. 39\n  ...\n  150  name=SYMTAB\n  151  stack=( -- addr)\n  152: tags=uservar,interpreter,compiler\n  153  !!!User variable\n  154  base of symbol table.  There are 16 words here, each the address of a smaller list of symbols, sorted by first character (and'ed with $0F to limit the set to 16 elements) and within that, sorted by asscending length.\n  ...\n  174  name=BASE\n  175  stack=( -- addr )\n  176: tags=uservar,fig,forth-79,forth-83\n  177  !!!User variable\n  178  Number base.  ? Reset to decimal (base 10) on ABORT\n  ...\n  187  name=FILENAME\n  188  stack=( -- addr )\n  189: tags=uservar,vm,i/o\n  190  !!!User variable\n  191  User variable that holds the address of a counted string which is\n  ...\n  201  name=SA#\n  202  stack=( -- addr )\n  203: tags=uservar,vm,i/o\n  204  !!!User variable\n  205  User variable that holds the secondary address for [[FILE]]\n  ...\n  215  name=DRV#\n  216  stack=( -- addr )\n  217: tags=uservar,vm,i/o\n  218  !!!User variable\n  219  User variable that holds the device # used by [[SAVE-BUFFERS]]\n  ...\n  230  name=VMBUF\n  231  stack=( -- addr )\n  232: tags=uservar,vm\n  233  !!!User variable\n  234  User variable that points to the bottom of the virtual memory\n  ...\n  248  #if 0\n  249  name=#BLK\n  250: tags=uservar,vm\n  251  stack=( -- addr )\n  252  !!!User variable\n  ...\n  270  name=SCR\n  271  stack=( -- addr )\n  272: tags=uservar\n  273  !!!User variable\n  274  Packet number of screen most recently LISTed or EDITed\n  ...\n  316  name=PREV\n  317  stack=( -- addr )\n  318: tags=uservar\n  319  !!!User variable\n  320  Packet number of block currently loaded\n  ...\n  333  name=BLK\n  334  stack=( -- addr )\n  335: tags=uservar,fig,forth-79,forth-83\n  336  !!!User variable\n  337  The address of a variable containing the number of the mass\n  ...\n  348  name=IN\n  349  stack=( -- addr )\n  350: tags=uservar,fig,forth-79,forth-83\n  351  User variable containing the present character offset within the input stream.\n  352  #endif\n  ...\n  359  name=LIN\n  360  stack=( -- line )\n  361: tags=uservar,fig,forth-79,forth-83\n  362  Upper half of `in`, contains current fake screen line during `load`\n  363  \n  ...\n  371  name=SPAN\n  372  stack=( -- addr )\n  373: tags=uservar,fig,forth-79,forth-83\n  374  User variable containing the count of characters actually received and\n  375  stored by the last execution of [[EXPECT]]\n  ...\n  386  name=#LINE\n  387  stack=( -- addr )\n  388: tags=uservar,fig,forth-79\n  389  User variable\n  390  Counts the number of lines output\n  ...\n  398  name=#OUT\n  399  stack=( -- addr )\n  400: tags=uservar,fig,forth-79\n  401  User variable\n  402  Counts number of characters that have been emitted\n  ...\n  409  #if 0\n  410  name=EDITING\n  411: tags=uservar,vm,editor\n  412  stack=( -- addr )\n  413  !!!User variable\n  ...\n  433  name=DPL\n  434  stack=( -- addr )\n  435: tags=uservar\n  436  !!!User variable\n  437  User variable containing the number of digits following the\n  ...\n  448  name=HLD\n  449  stack=( -- addr )\n  450: tags=uservar,fig,forth-79\n  451  !!!User variable\n  452  \n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65:\n    6  name=B/BUF\n    7  stack=( -- 1024 )\n    8: tags=const,forth-83\n    9  !!!Constant\n   10  bytes per buffer = 1024\n   ..\n   18  name=B/SCR\n   19  stack=( -- 1000 )\n   20: tags=const,vm\n   21  !!!Constant\n   22  bytes per screen.  Not what it usually means in other Forths,\n   ..\n   31  name=BLKBUF\n   32  stack=( -- addr )\n   33: tags=vm\n   34  Returns the address of the 1K virtual memory block buffer.\n   35  \n   ..\n   67  name=EDITING?\n   68  stack=( -- flag )\n   69: tags=vm,ext,nosymbol\n   70  Retrieves the EDITING user variable\n   71  \n   ..\n   83  name=ISSCR?\n   84  stack=( -- flag )\n   85: tags=vm,ext,nosymbol\n   86  Returns a `flag`, `true` when `pkt` type is screen\n   87  `false` when the `pkt` type is data\n   ..\n  101  name=UNCOMPRESSED?\n  102  stack=( -- flag )\n  103: tags=vm,ext,nosymbol\n  104  Returns a `flag`, `true` when the packet is simply stored by `cmove` or\n  105  `false` when the packet is runlength-encoded\n  ...\n  125  name=CAS1BUF\n  126  stack=( -- $027A )\n  127: tags=const,vm\n  128  !!!Constant\n  129  Address of the first tape buffer (device #1)\n  ...\n  137  name=CAS2BUF\n  138  stack=( -- $033A )\n  139: tags=const,vm\n  140  !!!Constant\n  141  Address of the second tape buffer (device #1)\n  ...\n  151  name=(CASBUF)\n  152  stack=( -- 027a|033a )\n  153: tags=vm,kernel,nosymbol\n  154  Returns the tape buffer address for most recently accessed\n  155  device `FA ($d4)`\n  ...\n  174  name=RLENCODE\n  175  stack=( from to size -- targend uncompressed? )\n  176: tags=vm,sweet16\n  177  This works a lot like `cmove` with its `from to howmany` stack signature, but\n  178  the target is a `packet` of `virtual memory` that can be permanently stored\n  ...\n  276  name=RLDECODE\n  277  stack=( from to size -- )\n  278: tags=vm,sweet16\n  279  decode length {srclen} bytes beginning at source address\n  280  {srcaddr} to the target address (targaddr).\n  ...\n  321  name=PKT.SIZE\n  322  stack=( pkt -- pkt size )\n  323: tags=vm,ext,nosymbol\n  324  Return unaltered `pkt` and `size` of this packet\n  325  \n  ...\n  345  name=PKT.THIS\n  346  stack=( -- pkt size )\n  347: tags=vm,ext,nosymbol\n  348  Return header address and size for current packet in `n8`\n  349  \n  ...\n  368  name=PKT.WRAP\n  369  stack=( -- addr )\n  370: tags=vm,ext,nosymbol\n  371  Return `addr` of 3-byte linewrap bits for current screen `pkt` in `vmbuf`\n  372  \n  ...\n  391  name=PKT.NXT\n  392  stack=( pkt -- pkt' )\n  393: tags=vm,ext,nosymbol\n  394  Return next\n  395  \n  ...\n  413  name=PSIZE\n  414  stack=( header -- addr )\n  415: tags=vm,ext,nosymbol\n  416  Return size of this packet header\n  417  \n  ...\n  431  name=>PKT\n  432  stack=( u -- )\n  433: tags=vm,ext\n  434  Set `n8` to `pkt` address of block `u`\n  435  \n  ...\n  483  name=3C@\n  484  stack=( addr -- d )\n  485: tags=nucleus\n  486  \n  487   fetches three bytes as a double.  Useful for retrieving screen\n  ...\n  535  name=3C!\n  536  stack=( d addr -- )\n  537: tags=nucleus\n  538   store low 3 bytes of d at addr in jiffy clock order\n  539  \n  ...\n  572  name=-@\n  573  stack=( nfa -- cfa )\n  574: tags=extra\n  575  decrement `tos` and fetch the value\n  576  \n  ...\n  581  name=NAME>\n  582  stack=( nfa -- cfa )\n  583: tags=compiler\n  584  Returns the Code Field Address (`cfa`) of the provided Name\n  585  Field Address (`nfa`)\n  ...\n  599  name=WRAPZAP12\n  600  stack=( -- )\n  601: tags=editor,subroutine,nosymbol\n  602  Zero R0..R5 (12 bytes)\n  603  \n  ...\n  612  name=WRAPZAPS\n  613  stack=( x -- 0 )\n  614: tags=editor,subroutine,nosymbol\n  615  |pass:|A|# of bytes to clear|\n  616  |return:|A|0|\n  ...\n  634  name=WRAPROLLS\n  635  stack=( x -- 0 )\n  636: tags=editor,subroutine,nosymbol\n  637  pass in `c` flag and `x` as starting address,\n  638  \n  ...\n  653  name=WRAPUMAX\n  654  stack=( -- )\n  655: tags=editor,subroutine,nosymbol\n  656  Iteratively double a 32-bit `wrapd` until it is left-aligned (as close to\n  657  `umax` as possible without going over)\n  ...\n  673  name=WRAP@\n  674  stack=( -- wrapd  )\n  675: tags=primitive\n  676  Retrieve the 25-bit linewrap table at `$E0..F8` as a double\n  677  \n  ...\n  697  name=WRAP!\n  698  stack=( wrapd -- )\n  699: tags=primitive\n  700  \n  701  Updates the linewrap table at $E1-F8 to reflect the low 24 bits\n  ...\n  730  name=BUF?\n  731  stack=( -- buf )\n  732: tags=vm,nosymbol\n  733  Return address of buffer\n  734  \n  ...\n  755  name=DIRTYBUF\n  756  stack=( -- )\n  757: tags=vm,nosymbol\n  758  Mark `blkbuf` dirty to force `block` to reload from `vmbuf`\n  759  \n  ...\n  777  name=#BLK!\n  778  stack=( -- )\n  779: tags=vm,nosymbol\n  780  Reset `vmbuf` pointer and `#blk` by running through all packets\n  781  \n  ...\n  846  name=MKSCR\n  847  stack=( -- addr )\n  848: tags=compiler,nosymbol\n  849  \n  850  #endif\n  ...\n  857  name=MKDATA\n  858  stack=( -- addr )\n  859: tags=compiler,nosymbol\n  860  \n  861  #endif\n  ...\n  868  name=(PKT+)\n  869  stack=( size -- size floor #blk )\n  870: tags=compiler,nosymbol\n  871  \n  872  #endif\n  ...\n  890  name=PKT+\n  891  stack=( -- )\n  892: tags=compiler,nosymbol\n  893  Append a new data or screen packet (per `editing`) to `vmbuf` tail\n  894  \n  ...\n  926  name=SCREDIDX\n  927  stack=( -- index )\n  928: tags=vm,ext,nosymbol\n  929  return `index`:\n  930  0 interpret data\n  ...\n  972  name=DWRAP@\n  973  stack=( -- wrapd  )\n  974: tags=vm,ext,nosymbol\n  975  \n  976  ```\n  ...\n  995  name=BUF.WRAP\n  996  stack=( -- addr )\n  997: tags=vm,ext,nosymbol\n  998  Return `addr` of 3-byte linewrap bits in `blkbuf`\n  999  \n ....\n 1019  name=BUF.WRAP!\n 1020  stack=( wrapd -- )\n 1021: tags=vm,ext,nosymbol\n 1022  Store 24-bit `wrapd` in `blkbuf` just beyond the screen image (+`b/scr`) \n 1023  \n ....\n 1041  name=EMPTY-BUFFERS\n 1042  stack=( -- )\n 1043: tags=i/o,forth-83\n 1044  Unassign all virtual memory.  UPDATEed blocks are not written\n 1045  to mass storage.\n ....\n 1068  name=?MKPKTS\n 1069  stack=( u -- u )\n 1070: tags=vm,nosymbol\n 1071  \n 1072  ```\n ....\n 1110  name=BLOCK\n 1111  stack=( blk -- buf )\n 1112: tags=vm,fig,forth-79,forth-83\n 1113  Unpack a screen or data packet from `vmbuf` to `blkbuf` or `vidram`\n 1114  \n ....\n 1245  name=(UPD1)\n 1246  stack=( source size b/buf vmbuf -- source vmbuf' floor from to howmany )\n 1247: tags=nosymbol\n 1248  First, `update` creates\n 1249  \n ....\n 1279  name=(UPD2)\n 1280  stack=( vmbuf' targend mask -- vmbuf' from to howmany )\n 1281: tags=nosymbol\n 1282  * set packet header\n 1283  * close gap at end of new packet\n ....\n 1311  name=SUP\n 1312  stack=( vidram|blkbuf scr|blk -- )\n 1313: tags=forth-83,vm,nosymbol\n 1314  \n 1315  \n ....\n 1428  name=VMBOTTOM\n 1429  stack=( -- addr )\n 1430: tags=vm\n 1431  Return the lowest used address of `vmbuf`, including the `STOP-DEL` / `STOP-INS` pseudopacket, if it is present. Even further down, 1026 bytes below `vmbottom`, is the floor of the replacement packet during `update`.    Think of it as the dungeon sub-basement underground parking garage, lower level, of the `vmbuf` region.  The `addr` returned by `vmbottom` is itself the floor address of the `STOP-DEL` / `STOP-INS` packet, should such a thing be present.  This other temporary packet is exactly the size of one screen (or data block! yes, data blocks may be cut/pasted intact!)\n 1432  \n ....\n 1485  name=UPDBUFBLK\n 1486  stack=( -- )\n 1487: tags=vm,nosymbol\n 1488  Update data packet in `blkbuf`\n 1489  \n ....\n 1503  name=UPDBUFSCR\n 1504  stack=( -- )\n 1505: tags=vm,nosymbol\n 1506  Update screen packet in `blkbuf`\n 1507  \n ....\n 1521  name=UPDVIDSCR\n 1522  stack=( -- )\n 1523: tags=vm,nosymbol\n 1524  Update screen packet in `vidram` (editing? true)\n 1525  \n ....\n 1539  name=TWONKY\n 1540  stack=( -- )\n 1541: tags=vm\n 1542  test area for update\n 1543  \n ....\n 1657  name=UPDATE\n 1658  stack=( -- )\n 1659: tags=forth-83,vm\n 1660  Copies and compresses from either the `vidram` or `blkbuf` into a\n 1661  [[virtual memory packet buffer|PETTIL system memory map]].  `update`\n ....\n 1918  name=STASH-FORTH\n 1919  stack=( -- )\n 1920: tags=vm,i/o,kernel,nosymbol,magic-number\n 1921  Subroutine to preserve the data stack pointer, stack, Sweet16 and\n 1922  other Forth zero page during a BASIC system call\n ....\n 1935  name=RESTORE-FORTH\n 1936  stack=( -- )\n 1937: tags=vm,i/o,kernel,nosymbol\n 1938  Restore Forth stack after BASIC system call\n 1939  \n ....\n 1948  name=DOTAPEIO\n 1949  stack=( -- )\n 1950: tags=vm,i/o,kernel,nosymbol\n 1951  Perform a ROM call framed between calls to `aloha`. This is\n 1952  needed in particular for tape I/O, which might error out to a\n ....\n 1990  name=(SAVEPRG)\n 1991  stack=( -- )\n 1992: tags=vm,i/o,kernel,nosymbol\n 1993  #endif\n 1994  psaveprg\n ....\n 2000  name=(READHEAD)\n 2001  stack=( -- )\n 2002: tags=vm,i/o,kernel,nosymbol\n 2003  #endif\n 2004  preadhead\n ....\n 2010  name=(READDATA)\n 2011  stack=( -- )\n 2012: tags=vm,i/o,kernel,nosymbol\n 2013  #endif\n 2014  preaddata\n ....\n 2020  name=CURRNAME\n 2021  stack=( -- addr )\n 2022: tags=vm,i/o\n 2023  filename\n 2024  \n ....\n 2038  name=FILE\n 2039  stack=( filename device secondary -- )\n 2040: tags=vm,i/o\n 2041  Set up parameters for file i/o\n 2042  \n ....\n 2068  name=(FILE)\n 2069  stack=( -- )\n 2070: tags=vm,i/o,nosymbol\n 2071  Called at start of tape or disk i/o, sets up zero page variables.\n 2072  Retrieves DRV# SA# and FILENAME uservariables and stores them\n ....\n 2143  name=(PRG-FILE)\n 2144  stack=( -- )\n 2145: tags=vm,i/o,nosymbol\n 2146  Turn off SA# and set up for PRG file tape i/o\n 2147  \n ....\n 2183  name=SAVE-BUFFERS\n 2184  stack=( -- )\n 2185: tags=vm,forth-83,i/o,kernel\n 2186  Writes the virtual memory area between [[VMBUF]] and [[BLKBUF]] out\n 2187  to a PRG file on cassette or disk\n ....\n 2227  name=(LOADVERIFY)\n 2228  stack=( -- )\n 2229: tags=vm,i/o,kernel,nosymbol\n 2230  Load or compare a batch of packets from tape to [[VMBUF]]\n 2231  \n ....\n 2281  name=LOAD-BUFFERS\n 2282  stack=( -- )\n 2283: tags=vm,i/o,kernel\n 2284  Load a batch of packets from the file to [[VMBUF]]\n 2285  \n ....\n 2305  name=VERIFY-BUFFERS\n 2306  stack=( -- )\n 2307: tags=vm\n 2308  Verifies the [[VMBUF]] area following a write\n 2309  \n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/pettil-core.a65:\n   18  #if 0\n   19  name=BASIC2PETTIL\n   20: tags=system,nosymbol\n   21  ! BASIC bootstrap `$0401`\n   22  \n   ..\n   46  name=RESTART\n   47  stack=( -- )\n   48: tags=system,startup,default\n   49  Performs the `startup` action.  Usually results in a `warm` boot,\n   50  when reentering PETTIL from BASIC.\n   ..\n   79  #if 0\n   80  name=ZPBUF\n   81: tags=system,nosymbol,startup,self-modifying\n   82  !Zero page buffer and NEXT routine `$0410`\n   83  \n   ..\n  137  #if 0\n  138  name=PLUGH\n  139: tags=nosymbol\n  140  An isolated RTS instruction, used only as a VICE xpet debugger breakpoint,\n  141  set in the `pettil.dbg` config file. [[XYZZY]] is the high-level Forth\n  ...\n  192  name=USERAREA\n  193  stack=( -- )\n  194: tags=system,uservar,nosymbol\n  195  !User Area\n  196  Initialization values & storage for User Variables\n  ...\n  250  name=ZPMODE\n  251  stack=( -- )\n  252: tags=system,uservar,nosymbol,data\n  253  !User Area\n  254  \n  ...\n  269  #if 0\n  270  name=COREBASE\n  271: tags=nosymbol\n  272  When changing these files, also modify `xap.rb`\n  273  \n  ...\n  312  name=COLD\n  313  stack=( -- )\n  314: tags=system,startup\n  315  COLD starts up the system and when invoked as a command will attempt\n  316  to restore the system to as pristine a condition as possible.\n  ...\n  346  #if 0\n  347  name=AUFWIEDERSEHEN\n  348: tags=startup,nosymbol\n  349  Exit Forth, restoring BASIC z.p.\n  350  #endif\n  ...\n  356  #if 0\n  357  name=ALOHARD\n  358: tags=startup,nosymbol\n  359  `aloha` invoked by `cold` and `liftoff` also closes files\n  360  #endif\n  ...\n  367  #if 0\n  368  name=ALOHA\n  369: tags=startup,nosymbol\n  370  Flips back and forth between BASIC and PETTIL modes.\n  371  \n  ...\n  405  #if 0\n  406  name=FENCEPOST\n  407: tags=system,startup,nosymbol\n  408  This is where [[FENCE]] points, and also [[DP]] after initial\n  409  build of the symbol table.  First-run startup code beyond\n  ...\n  446  #if 0\n  447  name=LIFTOFF\n  448: tags=system,startup,throwaway,nosymbol\n  449  A primitive relocator to move already-linked code to upper memory\n  450  Gets us from `pettil-core` to module LAUNCH\n  ...\n  504  name=SPLASHIRQ\n  505  stack=( -- )\n  506: tags=system,startup,nosymbol\n  507  splash screen irq handler\n  508  choose a random location\n  ...\n  571  name=?TRIGGER\n  572  stack=( -- )\n  573: tags=system,startup,nosymbol\n  574  \n  575  ```\n  ...\n  606  name=BARF\n  607  stack=( -- false )\n  608: tags=system,startup,nosymbol\n  609  primitive to fill the screen with a rapidly changing diagonal\n  610  maze effect\n  ...\n  650  name=BARF.CTR\n  651  stack=( -- false )\n  652: tags=system,startup,nosymbol\n  653  counter used by `barf`, number of times to twiddle the maze\n  654  #endif\n  ...\n  660  name=FLIPPER\n  661  stack=( -- false )\n  662: tags=system,startup,nosymbol\n  663  \n  664  ```\n  ...\n  731  name=DOLETTER\n  732  stack=( -- false )\n  733: tags=system,startup,nosymbol\n  734  installed by `splashirq` to get in there and display something during FORGET\n  735  \n  ...\n  998  name=SPLASH\n  999  stack=( -- )\n 1000: tags=system,startup,nosymbol\n 1001  Set up the loader splash screen entertainment\n 1002  #endif\n ....\n 1025  name=BANNER\n 1026  stack=( -- )\n 1027: tags=system,startup,nosymbol\n 1028  splash screen irq handler\n 1029  choose a random location\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/sweet16.a65:\n    5  #if 0\n    6  name=~ Sweet-16 interpreter\n    7: tags=nosymbol\n    8  Woz's Sweet-16 interpreter\n    9  \n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-assembler.a65:\n    8  name=ASSEMBLER\n    9  stack=( -- )\n   10: tags=assembler,vocabulary,extension\n   11  Add `assembler` vocabulary to `vocabs` context\n   12  #endif\n   ..\n   19  name=Z\n   20  stack=( -- n )\n   21: tags=assembler,vocabulary,extension\n   22  vocab=1\n   23  !!!Assembler constant\n   ..\n   36  name=UP\n   37  stack=( -- n )\n   38: tags=assembler,vocabulary,extension\n   39  vocab=1\n   40  !!!Assembler constant\n   ..\n   53  name=IP\n   54  stack=( -- n )\n   55: tags=assembler,vocabulary,extension\n   56  vocab=1\n   57  !!!Assembler constant\n   ..\n   70  name=N\n   71  stack=( -- n )\n   72: tags=assembler,vocabulary,extension\n   73  vocab=1\n   74  !!!Assembler constant\n   ..\n   87  name=TOS\n   88  stack=( -- n )\n   89: tags=assembler,vocabulary,extension\n   90  vocab=1\n   91  !!!Assembler constant\n   ..\n  104  name=STACKL\n  105  stack=( -- n )\n  106: tags=assembler,vocabulary,extension\n  107  vocab=1\n  108  !!!Assembler constant\n  ...\n  117  name=STACKH\n  118  stack=( -- n )\n  119: tags=assembler,vocabulary,extension\n  120  vocab=1\n  121  !!!Assembler constant\n  ...\n  130  name=NEXT\n  131  stack=( -- n )\n  132: tags=assembler,vocabulary,extension\n  133  vocab=1\n  134  !!!Assembler constant\n  ...\n  147  name=POP\n  148  stack=( -- n )\n  149: tags=assembler,vocabulary,extension\n  150  vocab=1\n  151  !!!Assembler constant\n  ...\n  160  name=POPTWO\n  161  stack=( -- n )\n  162: tags=assembler,vocabulary,extension\n  163  vocab=1\n  164  !!!Assembler constant\n  ...\n  173  name=PUT\n  174  stack=( -- n )\n  175: tags=assembler,vocabulary,extension\n  176  vocab=1\n  177  !!!Assembler constant\n  ...\n  190  name=PUSHYA\n  191  stack=( -- n )\n  192: tags=assembler,vocabulary,extension\n  193  vocab=1\n  194  !!!Assembler constant\n  ...\n  203  name=HARVESTS\n  204  stack=( -- n )\n  205: tags=assembler,vocabulary,extension\n  206  vocab=1\n  207  !!!Assembler constant\n  ...\n  216  name=PLANTS\n  217  stack=( -- n )\n  218: tags=assembler,vocabulary,extension\n  219  vocab=1\n  220  !!!Assembler constant\n  ...\n  229  name=ASMINDEX\n  230  stack=( -- n )\n  231: tags=assembler,ext,nosymbol\n  232  vocab=1\n  233  !!!Assembler constant\n  ...\n  244  name=MODE\n  245  stack=( -- n )\n  246: tags=assembler,vocabulary,ext,nosymbol\n  247  vocab=1\n  248  Addressing mode, one of `.a # mem ,x ,y x) )y )`\n  ...\n  261  name=>ASMMODE\n  262  stack=( -- )\n  263: tags=assembler,vocabulary,ext,nosymbol\n  264  vocab=1\n  265  !!!Subroutine\n  ...\n  284  name=OPCODE,\n  285  stack=( [ operand ... ] opcode 0|1|2|3 -- )\n  286: tags=assembler,nosymbol\n  287  vocab=1\n  288  encloses the instruction and 0, 1 or 2 bytes of operand\n  ...\n  320  name=DOCPU\n  321  stack=( -- )\n  322: tags=assembler,vocabulary,ext,nosymbol\n  323  vocab=1\n  324  !!!Assembler mode\n  ...\n  343  name=DECODE\n  344  stack=( addr-1 --  [ [arghi] arglo] opcode n )\n  345: tags=assembler,assembler,nosymbol\n  346  vocab=1\n  347  Adjusts the addressing mode\n  ...\n  413  name=M/CPU\n  414  stack=( -- )\n  415: tags=assembler,nosymbol\n  416  vocab=1\n  417  Adjusts the addressing mode\n  ...\n  464  name=IF,\n  465  stack=( -- )\n  466: tags=assembler,vocabulary,extension\n  467  vocab=1\n  468  \n  ...\n  496  name=ELSE,\n  497  stack=( -- )\n  498: tags=assembler,vocabulary,extension\n  499  vocab=1\n  500  ```\n  ...\n  547  name=THEN,\n  548  stack=( -- )\n  549: tags=assembler,vocabulary,extension\n  550  vocab=1\n  551  ```\n  ...\n  591  name=BEGIN,\n  592  stack=( -- )\n  593: tags=assembler,vocabulary,extension\n  594  vocab=1\n  595  \n  ...\n  618  name=WHILE,\n  619  stack=( -- )\n  620: tags=assembler,vocabulary,extension\n  621  vocab=1\n  622  \n  ...\n  672  name=UNTIL,\n  673  stack=( -- )\n  674: tags=assembler,vocabulary,extension\n  675  vocab=1\n  676  ```\n  ...\n  706  name=AGAIN,\n  707  stack=( addr -- )\n  708: tags=assembler,vocabulary,extension\n  709  flags=immediate\n  710  vocab=1\n  ...\n  733  name=REPEAT,\n  734  stack=( addr1 addr2 -- )\n  735: tags=assembler,vocabulary,extension\n  736  flags=immediate\n  737  vocab=1\n  ...\n  764  name=NOT\n  765  stack=( -- )\n  766: tags=assembler,vocabulary,extension\n  767  vocab=1\n  768  ```\n  ...\n  784  name=CS\n  785  stack=( \"name\" -- )\n  786: tags=assembler,vocabulary,extension\n  787  vocab=1\n  788  ```\n  ...\n  798  name=0=\n  799  stack=( -- )\n  800: tags=assembler,vocabulary,extension\n  801  vocab=1\n  802  \n  ...\n  813  name=0<\n  814  stack=( -- )\n  815: tags=assembler,vocabulary,extension\n  816  vocab=1\n  817  ```\n  ...\n  827  name=>=\n  828  stack=( -- )\n  829: tags=assembler,vocabulary,extension\n  830  vocab=1\n  831  ```\n  ...\n  842  name=VS\n  843  stack=( -- )\n  844: tags=assembler,vocabulary,extension\n  845  vocab=1\n  846  ```\n  ...\n  856  name=CODE-SETUP\n  857  stack=( \"name\" -- )\n  858: tags=assembler,vocabulary,ext,nosymbol\n  859  vocab=1\n  860  Creates a symbol table header for a new assembler definition\n  ...\n  886  name=CODE-FIXUP\n  887  stack=( -- )\n  888: tags=assembler,vocabulary,ext,nosymbol\n  889  vocab=1\n  890  Adjusts `LATEST` symbol to behave as a new assembler definition\n  ...\n  908  name=CODE\n  909  stack=( \"name\" -- )\n  910: tags=assembler,vocabulary,extension\n  911  Create a new (smudged) name and invoke the assembler vocabulary\n  912  #endif\n  ...\n  925  name=(;CODE)\n  926  stack=( -- )\n  927: tags=assembler,compiler,nosymbol\n  928  vocab=1\n  929  #endif\n  ...\n  950  name=;CODE\n  951  stack=( -- )\n  952: tags=assembler,compiler,unimplemented\n  953  flags=immediate\n  954  vocab=1\n  ...\n  980  stack=( \"name\" -- )\n  981  vocab=1\n  982: tags=assembler,vocabulary,extension\n  983  Remove [[ASSEMBLER]] vocabulary from VOCABS.  Does this by\n  984  (re)invoking the [[ASSEMBLER]] vocabulary to make it the\n  ...\n 1007  name=.A\n 1008  stack=( -- )\n 1009: tags=assembler,vocabulary,extension\n 1010  vocab=1\n 1011  !!!Assembler mode\n ....\n 1020  name=#\n 1021  stack=( -- )\n 1022: tags=assembler,vocabulary,extension\n 1023  vocab=1\n 1024  !!!Assembler mode\n ....\n 1033  name=MEM\n 1034  stack=( -- )\n 1035: tags=assembler,vocabulary,extension\n 1036  vocab=1\n 1037  !!!Assembler mode\n ....\n 1046  name=,X\n 1047  stack=( -- )\n 1048: tags=assembler,vocabulary,extension\n 1049  vocab=1\n 1050  !!!Assembler mode\n ....\n 1059  name=,Y\n 1060  stack=( -- )\n 1061: tags=assembler,vocabulary,extension\n 1062  vocab=1\n 1063  !!!Assembler mode\n ....\n 1072  name=X)\n 1073  stack=( -- )\n 1074: tags=assembler,vocabulary,extension\n 1075  vocab=1\n 1076  !!!Assembler mode\n ....\n 1085  name=)Y\n 1086  stack=( -- )\n 1087: tags=assembler,vocabulary,extension\n 1088  vocab=1\n 1089  !!!Assembler mode\n ....\n 1098  name=)\n 1099  stack=( -- )\n 1100: tags=assembler,vocabulary,extension\n 1101  vocab=1\n 1102  !!!Assembler mode\n ....\n 1111  name=BRK,\n 1112  stack=( -- )\n 1113: tags=assembler\n 1114  vocab=1\n 1115  !!!Assembler instruction\n ....\n 1124  name=CLC,\n 1125  stack=( -- )\n 1126: tags=assembler\n 1127  vocab=1\n 1128  !!!Assembler instruction\n ....\n 1137  name=CLD,\n 1138  stack=( -- )\n 1139: tags=assembler\n 1140  vocab=1\n 1141  !!!Assembler instruction\n ....\n 1150  name=CLI,\n 1151  stack=( -- )\n 1152: tags=assembler\n 1153  vocab=1\n 1154  !!!Assembler instruction\n ....\n 1163  name=CLV,\n 1164  stack=( -- )\n 1165: tags=assembler\n 1166  vocab=1\n 1167  !!!Assembler instruction\n ....\n 1176  name=DEX,\n 1177  stack=( -- )\n 1178: tags=assembler\n 1179  vocab=1\n 1180  !!!Assembler instruction\n ....\n 1189  name=DEY,\n 1190  stack=( -- )\n 1191: tags=assembler\n 1192  vocab=1\n 1193  !!!Assembler instruction\n ....\n 1202  name=INX,\n 1203  stack=( -- )\n 1204: tags=assembler\n 1205  vocab=1\n 1206  !!!Assembler instruction\n ....\n 1215  name=INY,\n 1216  stack=( -- )\n 1217: tags=assembler\n 1218  vocab=1\n 1219  !!!Assembler instruction\n ....\n 1228  name=NOP,\n 1229  stack=( -- )\n 1230: tags=assembler\n 1231  vocab=1\n 1232  !!!Assembler instruction\n ....\n 1241  name=PHA,\n 1242  stack=( -- )\n 1243: tags=assembler\n 1244  vocab=1\n 1245  !!!Assembler instruction\n ....\n 1254  name=PHP,\n 1255  stack=( -- )\n 1256: tags=assembler\n 1257  vocab=1\n 1258  !!!Assembler instruction\n ....\n 1267  name=PLA,\n 1268  stack=( -- )\n 1269: tags=assembler\n 1270  vocab=1\n 1271  !!!Assembler instruction\n ....\n 1280  name=PLP,\n 1281  stack=( -- )\n 1282: tags=assembler\n 1283  vocab=1\n 1284  !!!Assembler instruction\n ....\n 1293  name=RTI,\n 1294  stack=( -- )\n 1295: tags=assembler\n 1296  vocab=1\n 1297  !!!Assembler instruction\n ....\n 1306  name=RTS,\n 1307  stack=( -- )\n 1308: tags=assembler\n 1309  vocab=1\n 1310  !!!Assembler instruction\n ....\n 1319  name=SEC,\n 1320  stack=( -- )\n 1321: tags=assembler\n 1322  vocab=1\n 1323  !!!Assembler instruction\n ....\n 1332  name=SED,\n 1333  stack=( -- )\n 1334: tags=assembler\n 1335  vocab=1\n 1336  !!!Assembler instruction\n ....\n 1345  name=SEI,\n 1346  stack=( -- )\n 1347: tags=assembler\n 1348  vocab=1\n 1349  !!!Assembler instruction\n ....\n 1358  name=TAX,\n 1359  stack=( -- )\n 1360: tags=assembler\n 1361  vocab=1\n 1362  !!!Assembler instruction\n ....\n 1371  name=TAY,\n 1372  stack=( -- )\n 1373: tags=assembler\n 1374  vocab=1\n 1375  !!!Assembler instruction\n ....\n 1384  name=TSX,\n 1385  stack=( -- )\n 1386: tags=assembler\n 1387  vocab=1\n 1388  !!!Assembler instruction\n ....\n 1397  name=TXA,\n 1398  stack=( -- )\n 1399: tags=assembler\n 1400  vocab=1\n 1401  !!!Assembler instruction\n ....\n 1410  name=TXS,\n 1411  stack=( -- )\n 1412: tags=assembler\n 1413  vocab=1\n 1414  !!!Assembler instruction\n ....\n 1423  name=TYA,\n 1424  stack=( -- )\n 1425: tags=assembler\n 1426  vocab=1\n 1427  !!!Assembler instruction\n ....\n 1436  name=ADC,\n 1437  stack=( -- )\n 1438: tags=assembler\n 1439  vocab=1\n 1440  !!!Assembler instruction\n ....\n 1450  name=AND,\n 1451  stack=( -- )\n 1452: tags=assembler\n 1453  vocab=1\n 1454  !!!Assembler instruction\n ....\n 1464  name=CMP,\n 1465  stack=( -- )\n 1466: tags=assembler\n 1467  vocab=1\n 1468  !!!Assembler instruction\n ....\n 1478  name=EOR,\n 1479  stack=( -- )\n 1480: tags=assembler\n 1481  vocab=1\n 1482  !!!Assembler instruction\n ....\n 1492  name=LDA,\n 1493  stack=( -- )\n 1494: tags=assembler\n 1495  vocab=1\n 1496  !!!Assembler instruction\n ....\n 1506  name=ORA,\n 1507  stack=( -- )\n 1508: tags=assembler\n 1509  vocab=1\n 1510  !!!Assembler instruction\n ....\n 1520  name=SBC,\n 1521  stack=( -- )\n 1522: tags=assembler\n 1523  vocab=1\n 1524  !!!Assembler instruction\n ....\n 1534  name=STA,\n 1535  stack=( -- )\n 1536: tags=assembler\n 1537  vocab=1\n 1538  !!!Assembler instruction\n ....\n 1548  name=ASL,\n 1549  stack=( -- )\n 1550: tags=assembler\n 1551  vocab=1\n 1552  !!!Assembler instruction\n ....\n 1562  name=DEC,\n 1563  stack=( -- )\n 1564: tags=assembler\n 1565  vocab=1\n 1566  !!!Assembler instruction\n ....\n 1576  name=INC,\n 1577  stack=( -- )\n 1578: tags=assembler\n 1579  vocab=1\n 1580  !!!Assembler instruction\n ....\n 1590  name=LSR,\n 1591  stack=( -- )\n 1592: tags=assembler\n 1593  vocab=1\n 1594  !!!Assembler instruction\n ....\n 1604  name=ROL,\n 1605  stack=( -- )\n 1606: tags=assembler\n 1607  vocab=1\n 1608  !!!Assembler instruction\n ....\n 1618  name=ROR,\n 1619  stack=( -- )\n 1620: tags=assembler\n 1621  vocab=1\n 1622  !!!Assembler instruction\n ....\n 1632  name=STX,\n 1633  stack=( -- )\n 1634: tags=assembler\n 1635  vocab=1\n 1636  !!!Assembler instruction\n ....\n 1646  name=CPX,\n 1647  stack=( -- )\n 1648: tags=assembler\n 1649  vocab=1\n 1650  !!!Assembler instruction\n ....\n 1660  name=CPY,\n 1661  stack=( -- )\n 1662: tags=assembler\n 1663  vocab=1\n 1664  !!!Assembler instruction\n ....\n 1674  name=LDX,\n 1675  stack=( -- )\n 1676: tags=assembler\n 1677  vocab=1\n 1678  !!!Assembler instruction\n ....\n 1688  name=LDY,\n 1689  stack=( -- )\n 1690: tags=assembler\n 1691  vocab=1\n 1692  !!!Assembler instruction\n ....\n 1702  name=STY,\n 1703  stack=( -- )\n 1704: tags=assembler\n 1705  vocab=1\n 1706  !!!Assembler instruction\n ....\n 1716  name=JSR,\n 1717  stack=( -- )\n 1718: tags=assembler\n 1719  vocab=1\n 1720  !!!Assembler instruction\n ....\n 1730  name=JMP,\n 1731  stack=( -- )\n 1732: tags=assembler\n 1733  vocab=1\n 1734  !!!Assembler instruction\n ....\n 1744  name=BIT,\n 1745  stack=( -- )\n 1746: tags=assembler\n 1747  vocab=1\n 1748  !!!Assembler instruction\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-compiler.a65:\n    6  name=HERELSB\n    7  stack=( -- c )\n    8: tags=compiler,nosymbol\n    9   Returns the least significant byte of DP\n   10  #endif\n   ..\n   18  name=ALLOT\n   19  stack=( n -- )\n   20: tags=compiler,forth-83\n   21  Allocate space in the dictionary\n   22  \n   ..\n   46  name=,\n   47  stack=( w -- )\n   48: tags=compiler,forth-83\n   49  #endif\n   50  #include \"align.i65\"\n   ..\n   66  name=C,\n   67  stack=( b -- )\n   68: tags=compiler\n   69  #endif\n   70  #include \"align.i65\"\n   ..\n   86  name=CFA,\n   87  stack=( addr -- )\n   88: tags=compiler,nosymbol\n   89  Set the code field of a new definition, taking page alignment\n   90  into account.  The address is the creator word's CFA, e.g. [[:]]\n   ..\n  112  name=NEXTPAGE\n  113  stack=( -- )\n  114: tags=compiler,nosymbol\n  115  Moves [[DP]] to the next page if needed, to preserve page alignment\n  116  \n  ...\n  147  name=PAGEMARGIN\n  148  stack=( -- )\n  149: tags=compiler,nosymbol,pads\n  150  Moves [[DP]] to the next page if it is past the margin, to\n  151  work around the NMOS jmp ($xxFF) bug.  The value of `margin`\n  ...\n  167  name=PAGEALIGN\n  168  stack=( -- )\n  169: tags=compiler,nosymbol\n  170  Inserts a NOP instruction (if necessary) to align a JSR ENTER with a page\n  171  boundary\n  ...\n  186  name=?COMP\n  187  stack=( -- )\n  188: tags=compiler,nosymbol\n  189  Check the [[STATE]] variable to see if we are compiling, issue an\n  190  error if [[STATE]] is off ([[INTERPRET]] mode)\n  ...\n  207  name=XT,\n  208  stack=( xt -- )\n  209: tags=compiler,nosymbol\n  210  Encloses the execution token into the dictionary, paying heed\n  211  to page alignment and inserting the 'page' token into the\n  ...\n  232  name=UNDEFINE\n  233  stack=( -- )\n  234: tags=interpreter,dictionary,nosymbol\n  235  Removes the most recently defined symbol in SYMNEW.  Used by\n  236  error recovery\n  ...\n  271  name=COMPILING?\n  272  stack=( -- flag )\n  273: tags=compiler,nosymbol\n  274  Leaves contents of [[STATE]] on the stack\n  275  \n  ...\n  292  name=COMPILE\n  293  stack=( -- )\n  294: tags=compiler,nosymbol,forth-83\n  295  \n  296  #endif\n  ...\n  317  name=CREATE\n  318  stack=( \"name\" -- )\n  319: tags=compiler,defining,forth-83\n  320   A defining word executed in the form\n  321  \n  ...\n  345  name=:\n  346  stack=( -- )\n  347: tags=compiler,defining,fig,forth-83\n  348   A defining word executed in the form:\n  349  \n  ...\n  398  name=CLOSE-DEFINITION\n  399  stack=( -- )\n  400: tags=compiler,fig,nosymbol\n  401  Terminates `:` and `CODE` definitions by unsmudging the header\n  402  and resetting `REDEFINED`.  Used by `;` `;CODE` and `END-CODE`\n  ...\n  442  name=;\n  443  stack=( -- )\n  444: tags=compiler,fig,forth-83\n  445  flags=immediate\n  446   An immediate word which terminates a colon-definition and\n  ...\n  469  name=?:\n  470  stack=( \"name1\" \"name2\" -- )\n  471: tags=compiler,ext\n  472  flags=immediate\n  473  Immediate word that compiles its own runtime word (?:) and two branches. The first branch is the true\n  ...\n  511  name=DPSWAP\n  512  stack=( -- )\n  513: tags=compiler,todo\n  514  Switches the transient dictionary pointer [[TDP]] with the core\n  515  dictionary pointer [[DP]]\n  ...\n  538  name=DOES>\n  539  stack=( -- )\n  540: tags=compiler,forth-83\n  541  flags=immediate\n  542  Terminates the compile-time (parent) code of a `<BUILDS ... DOES> ...`\n  ...\n  588  name=BISHWHET\n  589  stack=( dp tdp latest -- a a c b-a )\n  590: tags=compiler,defining,nosymbol\n  591  helper word for `<BUILDS` in compile state\n  592  \n  ...\n  630  name=<BUILDS\n  631  stack=( == ; \"name\" -- )\n  632: tags=compiler,defining,todo\n  633  flags=immediate\n  634   A defining word executed in the form\n  ...\n  697  name=DISPATCH\n  698  stack=( addr == ; u -- )\n  699: tags=compiler,nosymbol\n  700  Case thing, used to branch in the editor to pinch bytes\n  701  \n  ...\n  721  name=CONSTANT\n  722  stack=( \"name\" ; n == ) ( -- n )\n  723: tags=compiler,forth-83\n  724  \n  725  ```\n  ...\n  745  name=CCONSTANT\n  746  stack=( \"name\" ; c == ) ( -- c )\n  747: tags=compiler\n  748  \n  749  create an 8-bit constant\n  ...\n  771  name=2CONSTANT\n  772  stack=( \"name\" ; d == ) ( -- d )\n  773: tags=compiler\n  774  \n  775  ```\n  ...\n  797  name=VARIABLE\n  798  stack=( -- )\n  799: tags=compiler,forth-79,forth-83\n  800  A defining word executed in the form:\n  801         `VARIABLE <name>`\n  ...\n  823  name=LATEST\n  824  stack=( -- nfa )\n  825: tags=compiler,nosymbol\n  826  Leaves the name field address of the top-most word in the\n  827  symbol table.\n  ...\n  837  name=$,\n  838  stack=( addr size -- )\n  839: tags=string\n  840  Enclose a string in the dictionary.  Not the same as [[$!]]\n  841  \n  ...\n  867  name=$>PAD $.>PAD $>PAD $>PAD\n  868  stack=( addr count -- )\n  869: tags=string\n  870  Move a string at `addr` to the [[PAD]] as a counted string\n  871  \n  ...\n  891  name=(\n  892  stack=( comment) -- )\n  893: tags=forth-83\n  894  flags=immediate\n  895  Begins a Forth comment, terminated by the next ')' character in\n  ...\n  918  name=>\".\"\n  919  stack=( cfa text\" -- )\n  920: tags=compiler,i/o,nosymbol,todo\n  921  common code for .\" and \"\n  922  \n  ...\n  983  name=.\"\n  984  stack=( text\" == ) ( -- )\n  985: tags=string,forth-83,todo\n  986  flags=immediate\n  987  \n  ...\n 1009  name=\"\n 1010  stack=( text\" == ) ( -- addr )\n 1011: tags=string,todo\n 1012  flags=immediate\n 1013  \n ....\n 1040  name=[ {\n 1041  stack=( -- )\n 1042: tags=compiler,forth-83\n 1043  flags=immediate\n 1044  Exit compile mode\n ....\n 1058  name=] \"]\"\n 1059  stack=( -- )\n 1060: tags=compiler,forth-83\n 1061  \n 1062  #endif\n ....\n 1077  name=.(\n 1078  stack=( -- )\n 1079: tags=compiler,forth-83,deprecated,todo\n 1080  flags=immediate\n 1081  Display a comment\n ....\n 1108  name=['] {'}\n 1109  stack=( == ) ( -- n )\n 1110: tags=compiler,forth-83\n 1111  flags=immediate\n 1112  Enclose the code field address of the next word in the input stream\n ....\n 1130  name=IMMEDIATE\n 1131  stack=\n 1132: tags=compiler,forth-83\n 1133  \n 1134  #endif\n ....\n 1150  name=NOSYMBOL\n 1151  stack=( -- )\n 1152: tags=compiler,forth-83\n 1153  flags=immediate\n 1154  Remove the symbol table entry for the most recently created `name`\n ....\n 1175  name=>VOCAB\n 1176  stack=( -- )\n 1177: tags=compiler,nosymbol\n 1178  The business end of a word defined by `vocabulary`.  Gets the\n 1179  vocid from the vocabulary and prepends it to `vocabs`\n ....\n 1243  name=VDROP\n 1244  stack=( -- )\n 1245: tags=vocabulary,ext\n 1246  Remove the first vocabulary from `vocabs`.  Invoking a vocabulary moves it to\n 1247  the first position.  e.g. `assembler vdrop` removes the assembler vocabulary\n ....\n 1273  name=VOCABULARY\n 1274  stack=( \"name\" -- )\n 1275: tags=compiler,forth-83\n 1276  PETTIL vocabularies are flat\n 1277  \n ....\n 1342  name=2VARIABLE\n 1343  stack=( == ) ( -- )\n 1344: tags=compiler\n 1345  Create storage for a new double\n 1346  #endif\n ....\n 1361  name=LITERAL\n 1362  stack=( n == ) ( -- n )\n 1363: tags=compiler,forth-83\n 1364  flags=immediate\n 1365  Enclose `n` into the dictionary.  At runtime, leaves `n` on the\n ....\n 1400  name=DLITERAL\n 1401  stack=( d == ) ( -- d )\n 1402: tags=compiler\n 1403  Compiles a double into the dictionary as a numeric literal\n 1404  !!!pronounced: //d-lit//\n ....\n 1424  name=SAVE-FORTH\n 1425  stack=( -- )\n 1426: tags=compiler,unimplemented\n 1427  \n 1428   Writes a binary file of the core dictionary to mass storage\n ....\n 1442  name=?CSP\n 1443  stack=( -- )\n 1444: tags=compiler,nosymbol\n 1445  Generates an error if the data stack is unbalanced when defining\n 1446  `CODE` or `:` words\n ....\n 1454  #if 0\n 1455  name=!CSP\n 1456: tags=compiler,nosymbol\n 1457  #endif\n 1458  storecsp\n ....\n 1464  name=PAIRS\n 1465  stack=( flag -- )\n 1466: tags=compiler,control,nosymbol\n 1467  Counters used by the compiler to match up conditional control words\n 1468  \n ....\n 1492  name=0PAIRS\n 1493  stack=( -- )\n 1494: tags=compiler,nosymbol\n 1495  clear the [[PAIRS]] counters\n 1496  \n ....\n 1517  name=?NOPAIRS\n 1518  stack=( -- )\n 1519: tags=compiler,nosymbol\n 1520  Aborts compilation if any control structures are still open\n 1521  \n ....\n 1551  name=+/-PAIRS\n 1552  stack=( family -- family )\n 1553: tags=compiler,control,nosymbol\n 1554  Increments or decrements the pair counter for the (signed) value\n 1555  passed in `family`.  The absolute value of `family` is returned,\n ....\n 1589  name=METHOD\n 1590  stack=( addr -- )\n 1591: tags=compiler,control,nosymbol\n 1592  Execute Forth code beginning at `addr`. Used by [[DOES>]] to return\n 1593  control to the child word.\n ....\n 1626  name=>CONTROL\n 1627  stack=( addr == dp ) ( -- )\n 1628: tags=compiler,control,nosymbol\n 1629  Runtime behavior of control words\n 1630  \n ....\n 1658  name=>MARK\n 1659  stack=( cfa family == start )\n 1660: tags=compiler,control,nosymbol\n 1661  Sets up a forward branch.  Compiles a forward-branching `cfa`\n 1662  with an unresolved offset of `0` to be handled later by the\n ....\n 1691  name=>RESOLVE\n 1692  stack=( start -- )\n 1693: tags=compiler,control,nosymbol\n 1694  Resolve a forward branch\n 1695  \n ....\n 1722  name=<RESOLVE\n 1723  stack=( addr cfa family == start )\n 1724: tags=compiler,control,nosymbol\n 1725  Compiles a backward branch to an address left by [[>MARK]] or [[HERE]]\n 1726  \n ....\n 1760  name=DO\n 1761  stack=( == dp ) ( limit start -- )\n 1762: tags=compiler,control,forth-83\n 1763  flags=immediate\n 1764  \n ....\n 1781  name=?DO\n 1782  stack=( == dp ) ( limit start -- )\n 1783: tags=compiler,control\n 1784  flags=immediate\n 1785  \n ....\n 1802  name=LOOP\n 1803  stack=( == ) ( -- )\n 1804: tags=compiler,control,forth-83\n 1805  flags=immediate\n 1806  \n ....\n 1831  name=+LOOP\n 1832  stack=( == ) ( increment -- )\n 1833: tags=compiler,control,forth-83\n 1834  flags=immediate\n 1835  \n ....\n 1860  name=LEAVE\n 1861  stack=( -- )\n 1862: tags=compiler,control,forth-83\n 1863  flags=immediate\n 1864  \n ....\n 1885  name=?LEAVE\n 1886  stack=( )\n 1887: tags=compiler,control\n 1888  flags=immediate\n 1889  Equivalent to `IF LEAVE THEN`\n ....\n 1911  name=IF\n 1912  stack=( )\n 1913: tags=compiler,control,forth-83\n 1914  flags=immediate\n 1915  \n ....\n 1932  name=ELSE\n 1933  stack=( == )\n 1934: tags=compiler,control,forth-83\n 1935  flags=immediate\n 1936  \n ....\n 1959  name=THEN\n 1960  stack=( )\n 1961: tags=compiler,control,forth-83\n 1962  flags=immediate\n 1963  \n ....\n 1982  name=BEGIN\n 1983  stack=( )\n 1984: tags=compiler,control,forth-83\n 1985  flags=immediate\n 1986  \n ....\n 2007  name=WHILE\n 2008  stack=( )\n 2009: tags=compiler,control,forth-83\n 2010  flags=immediate\n 2011  \n ....\n 2030  name=UNTIL\n 2031  stack=( )\n 2032: tags=compiler,control,forth-83\n 2033  flags=immediate\n 2034  \n ....\n 2053  name=AGAIN\n 2054  stack=( )\n 2055: tags=compiler,control\n 2056  flags=immediate\n 2057  synonym for REPEAT\n ....\n 2078  name=REPEAT\n 2079  stack=( )\n 2080: tags=compiler,control,forth-83\n 2081  flags=immediate\n 2082  \n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-dictionary.a65:\n    7  name=FORTH\n    8  stack=( -- )\n    9: tags=vocabulary,forth-83\n   10  Reset the vocabulary search order to just CORE.  Equivalent to\n   11  `ONLY FORTH` in ANS Forth\n   ..\n   32  name=DEFINITIONS\n   33  stack=( -- )\n   34: tags=forth-83\n   35  Sets the compilation vocabulary by copying the first vocabulary in\n   36  the [[VOCABS]] search order to [[CURRENT]].\n   ..\n   54  name=>SYMS\n   55  stack=( -- nfa )\n   56: tags=interpreter,ext,nosymbol\n   57  Returns `nfa` of first symbol in the `symbol table`\n   58  \n   ..\n   99  name=SYM.REWIND\n  100  stack=( -- )\n  101: tags=nfa,nosymbol\n  102  set `n3` to the first symbol in the (sequential) `symtab`\n  103  \n  ...\n  120  name=SYM.LEN\n  121  stack=( -- len )\n  122: tags=nfa,nosymbol\n  123  Return length information about the `nfa`  `n3`\n  124  \n  ...\n  139  name=SYMLENS\n  140  effects=A:len;Y:0;C:vocab?;Z:len\n  141: tags=nfa,nosymbol\n  142  return the length of the current `nfa` stored in `n3`\n  143  \n  ...\n  161  name=SYMCOPY\n  162  stack=( -- )\n  163: tags=ext,primitive,nfa,nosymbol\n  164  \n  165  * N3 (curr) symbol to N7 (targ) symbol\n  ...\n  190  name=SYM+\n  191  stack=( -- )\n  192: tags=ext,primitive,nfa,nosymbol\n  193  registers=Z:false\n  194  * move N3 to the next symbol\n  ...\n  218  name=BLOOM#\n  219  stack=( -- n )\n  220: tags=ext,nosymbol\n  221  Always returns a value between 0 and 63, which is used as an index into a\n  222  (hopefully) sparsely populated bit field\n  ...\n  259  name=BLOOMFILTER\n  260  stack=( -- mask addr )\n  261: tags=nfa,dictionary,nosymbol\n  262  \n  263  Returns a `mask`/`addr` pair suitable for `cbit!` or `cbit@`\n  ...\n  284  name=PEARSON#\n  285  stack=( -- pearsonhash )\n  286: tags=ext,nosymbol,nfa\n  287  Return the hash value for name field address at N3\n  288  `pearson#` is the 4-bit thread index (0..F)\n  ...\n  333  name=UNSMUDGE\n  334  stack=( nfa -- )\n  335: tags=compiler,nosymbol\n  336  Turn off the smudge bit so it can be found by [[FIND]].  In\n  337  PETTIL, the smudge bit does double duty, also deactivating any\n  ...\n  365  name=SMUDGE\n  366  stack=( nfa -- )\n  367: tags=compiler,nosymbol\n  368  Turn on the smudge bit.  Smudged names won't be found by FIND.\n  369  In PETTIL, the smudge bit does double duty, also marking as\n  ...\n  386  name=(>NAME)\n  387  stack=( cfa -- nfa|0 )\n  388: tags=compiler,nosymbol\n  389  \n  390  Compare the provided CFA(N4) vs. CFA of current NFA in (N3)\n  ...\n  422  name=>NAME\n  423  stack=( cfa -- nfa|0 )\n  424: tags=compiler\n  425  Returns the Name Field Address (`nfa`) of a given word, or 0\n  426  if the provided Code Field Address (`cfa`) wasn't found in the\n  ...\n  455  name=(FILTER).REWIND\n  456  stack=( -- )\n  457: tags=interpreter,nfa,nosymbol\n  458  Rewinds to beginning of symbol table on each loop iteration\n  459  \n  ...\n  485  name=SWAP.73\n  486  stack=( -- )\n  487: tags=interpreter,nfa,nosymbol\n  488  Switches contents of N7 <--> N3\n  489  #endif\n  ...\n  504  name=EXT-UNTIL\n  505  stack=( -- )\n  506: tags=ext,immediate,compiler\n  507  This (poorly named) word wraps a BEGIN-UNTIL loop around a `cfa` called\n  508  via the `r11` register, like PETTIL Sweet16's `ext` instruction.  The\n  ...\n  535  name=(SEEK)\n  536  stack=( thread -- flag )\n  537: tags=interpreter,primitive,nosymbol\n  538  Search a segment of the dictionary\n  539  \n  ...\n  607  name=>THREAD\n  608  stack=( symtab -- thread )\n  609: tags=interpreter,forth-83,conspiracy,nosymbol\n  610  Returns `true` if there is a next vocabulary\n  611  #endif\n  ...\n  622  name=IMMEDORNOT\n  623  stack=( true -- -1|+1 )\n  624: tags=interpreter,forth-83,conspiracy,nosymbol\n  625  Returns +1 if the immediate bit is set on current `nfa`\n  626  Otherwise returns -1\n  ...\n  640  name=NEXTVOCAB?\n  641  stack=( -- flag )\n  642: tags=interpreter,forth-83,conspiracy,nosymbol\n  643  Returns `true` if there is a next vocabulary\n  644  increment the vocabulary pointer `n5+1`\n  ...\n  662  name=(FOUND?)\n  663  stack=( name vocabs -- )\n  664: tags=interpreter,forth-83,conspiracy,nosymbol\n  665  \n  666  #endif\n  ...\n  682  name=FOUND?\n  683  stack=( nfa -- xfa flag )\n  684: tags=interpreter,forth-83,conspiracy\n  685  This replaces the Forth-83 standard word `find`, idea from Albert van der Horst\n  686  in comp.lang.forth\n  ...\n  813  name=((CREATE))\n  814  stack=( symtail cfa' -- newest )\n  815: tags=compiler,nosymbol\n  816  Sweet16 to squeeze `create`\n  817  \n  ...\n  860  name=(CREATE)\n  861  stack=( cfa -- )\n  862: tags=compiler,nosymbol\n  863  Create a new symbol in the symbol table, emit a warning if it exists,\n  864  and manage `redefined`.\n  ...\n  973  name=?VMMOVE\n  974  stack=( newsymtab -- )\n  975: tags=ext,nosymbol\n  976  * if `#blk` nonzero, move `vmbuf` area\n  977  \n  ...\n 1098  name=(AUTOMEM)\n 1099  stack=( ~wut? )\n 1100: tags=ext,nosymbol\n 1101  Figure out where the new symbol table will be located, runs in between\n 1102  PASS1 and PASS2 of (FORGET)\n ....\n 1196  name=>PASSBIT\n 1197  stack=( index -- flag )\n 1198: tags=interpreter,nfa,nosymbol\n 1199  \n 1200  ```\n ....\n 1217  name=PASSBITS?\n 1218  stack=( index -- flag )\n 1219: tags=interpreter,nfa,nosymbol\n 1220  \n 1221  ```\n ....\n 1238  name=PASSBITS!\n 1239  stack=( index -- )\n 1240: tags=interpreter,nfa,nosymbol\n 1241  \n 1242  ```\n ....\n 1259  name=(FORGET).LOOPER\n 1260  stack=( b a from to -- )\n 1261: tags=interpreter,nfa,nosymbol\n 1262  inner word, `b a do rewind begin cfa execute while copy? repeat loop`\n 1263  \n ....\n 1306  name=(FORGET).KEEP\n 1307  stack=( cfa -- flag )\n 1308: tags=interpreter,nfa,nosymbol\n 1309  \n 1310  #endif\n ....\n 1337  name=SYM.NEXT\n 1338  stack=( -- flag )\n 1339: tags=interpreter,nfa,nosymbol\n 1340  no `jsr enter` -- code fragment,\n 1341  tail of the word that branches here\n ....\n 1356  name=(FORGET).PASS1\n 1357  stack=( -- )\n 1358: tags=interpreter,nfa,nosymbol\n 1359  \n 1360  * This is the first pass filter.\n ....\n 1484  name=(FORGET).PASS2\n 1485  stack=( -- )\n 1486: tags=interpreter,nfa,nosymbol\n 1487  * This is the second pass filter.\n 1488  * It copies the symbol t\n ....\n 1521  name=INIT.411\n 1522  stack=( value 'filter -- )\n 1523: tags=interpreter,nfa,nosymbol\n 1524  Sweet16 primitive, sets `n4` to `value` and `r11` to `'filter`\n 1525  \n ....\n 1542  name=(FORGET)\n 1543  stack=( cfa -- )\n 1544: tags=nfa,ext,nosymbol\n 1545  (FORGET) rebuilds and reindexes the entire dictionary, balancing it\n 1546  into 16 roughly equal-sized 'threads'.  (FORGET) merges symbols\n ....\n 1682  name=SYMTAIL!\n 1683  stack=( symx -- )\n 1684: tags=dictionary,nosymbol\n 1685  * Append a triple null end marker to symbol table\n 1686  * Set SYMTAIL/SYMNEW after (FORGET) and (CREATE)\n ....\n 1756  name=REHASH\n 1757  stack=( -- )\n 1758: tags=interpreter,extension\n 1759  Rebuilds the PETTIL [[symbol table ~]].\n 1760  \n ....\n 1778  name=FORGET\n 1779  stack=( \"name\" -- )\n 1780: tags=interpreter,dictionary,forth-83,forth-79,fig\n 1781  checks FENCE, sorts symbol table, keeping only words below the CFA of the named word\n 1782  \n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65:\n    6  name=EDITOR\n    7  stack=( -- )\n    8: tags=assembler,vocabulary,extension\n    9  Include `editor` vocabulary in search `vocabs` (context)\n   10  \n   ..\n   18  name=CLRSCR\n   19  stack=( -- )\n   20: tags=editor\n   21  Clear the screen\n   22  \n   ..\n   37  name=FLIPSCR\n   38  stack=( -- )\n   39: tags=editor\n   40  Invert the entire screen\n   41  \n   ..\n   64  name=LINESA\n   65  stack=( -- size addr )\n   66: tags=editor,primitive,nosymbol\n   67  Return the `size` (40|80) and `addr` of the current physical cursor's logical line\n   68  \n   ..\n   99  name=EOSS\n  100  stack=( addr -- size )\n  101: tags=editor,primitive,nosymbol\n  102  Return the `size` in bytes from `addr` to the end of the screen\n  103  \n  ...\n  123  name=WRAPPASTE\n  124  stack=( -- )\n  125: tags=editor,nosymbol\n  126  Combine three linewrap tables into one during a paste\n  127  \n  ...\n  204  name=WRAPDEL\n  205  stack=( logline 40|80 -- )\n  206: tags=editor,nosymbol\n  207  Rolls the screen linewrap table up one or two lines when deleting a logical\n  208  line in the `editor`\n  ...\n  236  name=WRAPCOPY?\n  237  stack=( -- f )\n  238: tags=editor,secondary,nosymbol\n  239  Attempts to append the current logical linewrap to `pwrap`.  Uses 40|80 flag in `n7`\n  240  \n  ...\n  293  name=EDITCOPIER\n  294  stack=( 40|80 addr -- )\n  295: tags=editor,nosymbol\n  296  Append the text of the current logical line to the `paste` buffer.  Wrap bits\n  297  are handled separately, see `wrapcopy?`\n  ...\n  324  name=EDITCOPY\n  325  stack=( -- )\n  326: tags=editor,nosymbol\n  327  STOP-C Copy Line\n  328  \n  ...\n  353  name=:EDITDEL\n  354  stack=( -- )\n  355: tags=editor,nosymbol\n  356  STOP-D Delete Line\n  357  \n  ...\n  402  name=:EDITPASTE\n  403  stack=( -- )\n  404: tags=editor,nosymbol\n  405  \n  406  STOP-P\n  ...\n  455  name=NOWRAP\n  456  stack=( -- )\n  457: tags=editor,nosymbol\n  458  \n  459  `STOP-CLR` reset the linewrap table and change this packet to be a screen\n  ...\n  479  name=:EDITNOWRAP\n  480  stack=( -- )\n  481: tags=editor,nosymbol\n  482  Reset the linewrap table and force this packet to be a screen\n  483  \n  ...\n  501  name=:EDITTOPSCR\n  502  stack=( -- )\n  503: tags=editor,nosymbol\n  504  \n  505   from the top (first) screen\n  ...\n  524  name=:EDITQUIT\n  525  stack=( -- )\n  526: tags=editor,nosymbol\n  527  STOP-_   Quit the editor\n  528  STOP-Q\n  ...\n  553  name=:EDITINDEX\n  554  stack=( -- )\n  555: tags=editor,nosymbol,unimplemented\n  556  \n  557  STOP-I   Present an index screen and let the user select one to edit\n  ...\n  572  name=:EDITINFO\n  573  stack=( -- )\n  574: tags=editor,nosymbol\n  575  Show the user an info screen\n  576  \n  ...\n  621  name=:EDITSAVE\n  622  stack=( -- )\n  623: tags=editor,nosymbol\n  624  \n  625   STOP-S   Save all buffers to a PRG file\n  ...\n  646  name=:EDITLOAD\n  647  stack=( -- )\n  648: tags=editor,nosymbol\n  649  \n  650   STOP-L   Load a group of buffers from a PRG file\n  ...\n  673  name=LIST\n  674  stack=( scr -- )\n  675: tags=editor\n  676  List the specified screen and set `scr`; Invoke `editor` vocabulary\n  677  #endif\n  ...\n  698  name=:EDITCHONGO\n  699  stack=( u -- )\n  700: tags=editor,nosymbol\n  701  set `scr`\n  702  fall through to restore\n  ...\n  718  name=:EDITRESTORE\n  719  stack=( -- )\n  720: tags=editor,nosymbol\n  721  \n  722   STOP-R   Restore the current screen from the buffer\n  ...\n  746  name=:EDITVERIFY\n  747  stack=( -- )\n  748: tags=editor,nosymbol\n  749  \n  750   STOP-V   Verify a buffer file vs. memory\n  ...\n  774  name=EDITZILCH\n  775  stack=( -- )\n  776: tags=editor,nosymbol\n  777  \n  778   STOP-Z   Zilch the paste buffer\n  ...\n  803  name=:EDITDELSCR\n  804  stack=( -- )\n  805: tags=editor,nosymbol,unimplemented\n  806  \n  807   STOP-DEL delete the current screen.  restore from next, then prev, then blank\n  ...\n  833  name=:EDITINSSCR\n  834  stack=( -- )\n  835: tags=editor,nosymbol,unimplemented\n  836  \n  837   insert a new, blank screen\n  ...\n  901  name=:EDITSPACE\n  902  stack=( -- )\n  903: tags=editor,nosymbol\n  904  \n  905  scan for shifted spaces\n  ...\n  967  name=:EDITNEXTSCR\n  968  stack=( -- )\n  969: tags=editor,nosymbol\n  970  restore from the next screen or append a blank one\n  971  \n  ...\n  990  name=:EDITPREVSCR\n  991  stack=( -- )\n  992: tags=editor,nosymbol\n  993  \n  994   restore from the previous screen or insert a blank one\n  ...\n 1013  name=EDITCMD\n 1014  stack=( -- )\n 1015: tags=editor,nosymbol\n 1016  \n 1017   get a key and perform that command\n ....\n 1063  #if 0\n 1064  name=EDITMENU\n 1065: tags=editor,nosymbol\n 1066  editor menu commands (no `cfa`)\n 1067  #endif\n ....\n 1075  name=(EDIT)\n 1076  stack=( scr -- )\n 1077: tags=editor,nosymbol\n 1078  #endif\n 1079  pedit\n ....\n 1116  name=EDITMODE\n 1117  stack=( scr -- )\n 1118: tags=editor,nosymbol\n 1119  \n 1120  #endif\n ....\n 1136  name=>EDIT\n 1137  stack=( scr -- )\n 1138: tags=editor,nosymbol\n 1139  \n 1140  * Turn on edit mode\n ....\n 1163  name=+EDIT\n 1164  stack=( n -- )\n 1165: tags=editor,nosymbol\n 1166  \n 1167  Save current editor screen in packet buffer, edit the screen\n ....\n 1191  name=EDIT\n 1192  stack=( scr -- )\n 1193: tags=editor\n 1194  PETTIL's editor leverages the wonderful ROM screen editor\n 1195  on the PET, using the `STOP` key as a substitute for escape,\n ....\n 1228  name=_\n 1229  stack=( -- )\n 1230: tags=editor\n 1231  A shortcut to get back into the editor. On the PET keyboard, there is no\n 1232  underscore, it's the left-arrow character.\n ....\n 1256  name=^\n 1257  stack=( -- )\n 1258: tags=editor\n 1259  The capture word `^` first captures the contents (including linewrap)\n 1260  of the current display into a new editor packet, which is created and\n ....\n 1298  name=L\n 1299  stack=( -- )\n 1300: tags=editor\n 1301  vocab=2\n 1302  List the current screen and set `scr`\n ....\n 1318  name=>NP\n 1319  stack=( -- )\n 1320: tags=editor,nosymbol\n 1321  List the specified screen and set [[SCR]]\n 1322  \n ....\n 1360  name=N\n 1361  stack=( -- )\n 1362: tags=editor\n 1363  vocab=2\n 1364  List the specified screen and set [[SCR]]\n ....\n 1378  name=P\n 1379  stack=( -- )\n 1380: tags=editor\n 1381  vocab=2\n 1382  List the specified screen and set [[SCR]]\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-interpreter.a65:\n    5  #if 0\n    6  name=~ Error messages\n    7: tags=general,nosymbol\n    8  PETTIL system messages, output by [[FAIL]]\n    9  #endif\n   ..\n   74  name=ERROR.MSG\n   75  stack=( -- addr flag )\n   76: tags=interpreter,ext,nosymbol\n   77  Instead of RESTART performing an ABORT at the end to start the\n   78  QUIT-INTERPRET loop, it does a FENCE @ (FORGET) and sends us here.\n   ..\n  113  name=?CHAR\n  114  stack=( char -- addr )\n  115: tags=compiler,nosymbol\n  116  Scans ahead in the input stream until `char` is found.  Moves >IN beyond\n  117  that character.\n  ...\n  133  name=-->\n  134  stack=( -- )\n  135: tags=interpreter\n  136  flags=immediate\n  137  An immediate word which loads the next screen of Forth source\n  ...\n  182  name=\\\n  183  stack=( \"text$ -- )\n  184: tags=primitive,extra\n  185  flags=immediate\n  186  set SPAN to 0\n  ...\n  209  name=INTERPRET.CFA\n  210  stack=( cfa -1|+1 -- )\n  211: tags=secondary,interpreter,nosymbol\n  212  \n  213  ```\n  ...\n  235  name=INTERPRET\n  236  stack=( -- )\n  237: tags=secondary,fig,forth-79,forth-83,interpreter\n  238  The Forth interpreter loop in PETTIL uses a lazy-loading approach.  Turning\n  239  `span` off triggers `name` to refill either the `tib` (from the keyboard) or\n  ...\n  294  name=QUIT\n  295  stack=( -- )\n  296: tags=secondary,forth-79,forth-83,interpreter\n  297  This is the infinite outer interpreter loop:\n  298        - resets the return stack (RP!)\n  ...\n  350  name=ABORT\n  351  stack=( -- )\n  352: tags=secondary,fig,forth-79,forth-83,interpreter,startup\n  353  * Clears data stack\n  354  * Resets vocabulary to [[CORE]]\n  ...\n  380  name=LOAD\n  381  stack=( u -- )\n  382: tags=interpreter,forth-83\n  383  Redirect the input stream to screen `u` of Forth source and `interpret` it.\n  384  \n  ...\n  476  name=EXISTS?\n  477  stack=( -- addr flag )\n  478: tags=interpreter,ext,nosymbol\n  479  parses the next token in the input stream.  Returns either the\n  480  address of the (unfound) token at HERE and a 0, or the code\n  ...\n  509  name='\n  510  stack=( -- cfa )\n  511: tags=forth-83\n  512  Parse the next token in the input stream and search for it,\n  513  returning the CFA if successful.  Otherwise aborts with the\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65:\n    6  name=SKIP\n    7  stack=( delim -- offset )\n    8: tags=nosymbol\n    9  `addr1` is the starting address in the input stream where up\n   10  to `size1` bytes are skipped *WHILE* they match `delim`.  Returns\n   ..\n   20  name=SCAN\n   21  stack=( delim -- offset )\n   22: tags=self-modifying,nosymbol\n   23  Pass through the input stream until `delim` either matches (or\n   24  for `skip`, does not match).  Leave the `offset` into the line\n   ..\n   51  name=NFA!\n   52  stack=( addr size -- nfa )\n   53: tags=outer,extra,nosymbol\n   54  Replace the ` ` before a name in the buffer with its count byte; bump `in`\n   55  \n   ..\n   77  name=NAME\n   78  stack=( char -- nfa|0 )\n   79: tags=outer,extra\n   80  Parse the next `word` from the `input stream`.  Return `false` if the\n   81  `input stream` is exhausted, or the `nfa` of the found word, built\n   ..\n  145  name='STREAM\n  146  stack=( -- )\n  147: tags=outer,extra,nosymbol\n  148  Sets up the input stream, refilling from the keyboard or `vmbuf` as needed.\n  149  \n  ...\n  190  name=CURSOR@\n  191  stack=( -- )\n  192: tags=forth-83,i/o\n  193  Emits a space character\n  194  \n  ...\n  217  name=CURSOR!\n  218  stack=( -- )\n  219: tags=forth-83,i/o\n  220  Emits a space character\n  221  \n  ...\n  245  name=REFILL\n  246  stack=( -- )\n  247: tags=outer,extra\n  248  Sets up the input stream, refilling from the keyboard or `vmbuf` as needed.\n  249  \n  ...\n  461  name=LINESIZE\n  462  stack=( blk -- size )\n  463: tags=outer,extra\n  464  Sets up the input stream, refilling from the keyboard or `vmbuf` as needed.\n  465  \n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-number.a65:\n    6  name=NUM.CHAR+\n    7  stack=( -- c )\n    8: tags=numword,nosymbol\n    9  Return next character of the number we're parsing.  Return 0 at end of string.\n   10  \n   ..\n   25  name=MORE.CHAR?\n   26  stack=( -- f )\n   27: tags=numword,nosymbol\n   28  Returns `true` when `n8` reaches 0.\n   29  \n   ..\n   42  name=PREFIXES\n   43  stack=( -- addr )\n   44: tags=numword,nosymbol\n   45  `number` prefix indexed jump table (no `cfa`)\n   46  ~#comfortablynumber\n   ..\n   55  name=FLAGME\n   56  stack=( -- )\n   57: tags=numword,nosymbol\n   58  \n   59  #endif\n   ..\n   80  name=DIGIT\n   81  stack=( char -- digit )\n   82: tags=numword,nosymbol\n   83  Throws a \"NOT FOUND\" exception if `char` is not a valid digit in the current number base.  Otherwise leave `digit` on the stack.  Operates only on low byte of `tos`\n   84  \n   ..\n  107  name=?DPL\n  108  stack=( -- )\n  109: tags=numword,nosymbol,primitive\n  110  See if there has been a decimal point yet in the string we're parsing\n  111  to see if it is a number.  If `dpl` is positive, increment it.\n  ...\n  127  name=(NEXTCHAR)\n  128  stack=( -- char )\n  129: tags=numword,nosymbol\n  130  Get next character, part of `number`.\n  131  \n  ...\n  146  name=(NUMBER)\n  147  stack=( addr base -- 0. )\n  148: tags=numword,nosymbol\n  149  Setup for number parser\n  150  \n  ...\n  179  name=<=>\n  180  stack=( cfa d -- )\n  181: tags=numword,nosymbol\n  182  \n  183  #endif\n  ...\n  205  name=<=>N4\n  206  stack=( -- )\n  207: tags=numword,nosymbol,primitive\n  208  \n  209  #endif\n  ...\n  226  name=REGOFFSET\n  227  stack=( R|N -- )\n  228: tags=numword,nosymbol,primitive\n  229  \n  230  #endif\n  ...\n  243  name=DOUBLE?\n  244  stack=( -- flag )\n  245: tags=numword,nosymbol,primitive\n  246  returns a poorly formed flag (either `0` or `dpl+1`)\n  247  \n  ...\n  263  name=ITSNORMAL\n  264  stack=( d|n -- )\n  265: tags=numword,nosymbol\n  266  \n  267  #endif\n  ...\n  286  name=ITSASPACESHIP\n  287  stack=( n cfa -- )\n  288: tags=numword,nosymbol\n  289  \n  290  #endif\n  ...\n  303  name=REBASE\n  304  stack=( #|$|% -- )\n  305: tags=numword,nosymbol,primitive\n  306  \n  307  #endif\n  ...\n  319  name=:BASE\n  320  stack=( #|$|% -- )\n  321: tags=numword,nosymbol\n  322  \n  323  #endif\n  ...\n  337  name=:REGISTER\n  338  stack=( R|N -- )\n  339: tags=numword,nosymbol\n  340  \n  341  #endif\n  ...\n  355  name=:<=>\n  356  stack=( addr -- d )\n  357: tags=numword,nosymbol\n  358  \n  359  #endif\n  ...\n  375  name=NUMBER\n  376  stack=( addr -- d )\n  377: tags=numword,nosymbol\n  378  `number` rewritten for `studio`, this variant recognizes several prefix\n  379  characters\n  ...\n  727  name=:DIGITS\n  728  stack=( addr -- d )\n  729: tags=numword,nosymbol\n  730  :digits   ( d 0 -- )\n  731  #endif\n  ...\n  762  name=:.\n  763  stack=( addr -- d )\n  764: tags=numword,nosymbol\n  765  Decimal point `.` handler for `number`\n  766  \n  ...\n  795  name=:-\n  796  stack=( addr -- d )\n  797: tags=numword,nosymbol\n  798  \n  799  set rundown vector to negate routine for either double/single\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-studio.a65:\n   23  name=STUDIO\n   24  stack=( -- )\n   25: tags=system,startup,throwaway,nosymbol\n   26  First time startup code\n   27  \n   ..\n  106  name=MACKINAC\n  107  stack=( -- )\n  108: tags=system,startup,nosymbol\n  109  final bridge between lower `core` and upper `tdict` dictionaries\n  110  \n  ...\n  172  name=(FORGET).PASS\n  173  stack=( -- )\n  174: tags=system,startup,nosymbol\n  175  \n  176  ```\n  ...\n  204  name=DEADBEEF\n  205  stack=( -- )\n  206: tags=startup,nosymbol\n  207  Fill available memory with the 32-bit value `$DEADBEEF` . Discarded after\n  208  running once at startup.  Used to assist in debugging.\n  ...\n  307  name=TDICTBASE\n  308  stack=( -- )\n  309: tags=nosymbol\n  310  Bottom edge of PETTIL Studio.  [[TDICT]] contains this address.\n  311  #endif\n  ...\n  343  name=WARM\n  344  stack=( -- )\n  345: tags=startup\n  346  \n  347  #endif\n  ...\n  390  name=WUMPUS\n  391  stack=( -- )\n  392: tags=system\n  393  \n  394  #endif\n  ...\n  436  name=TDICTEND\n  437  stack=( -- )\n  438: tags=nosymbol,nosymbol\n  439  This label marks the upper boundary of the transient dictionary ([[TDP]])\n  440  #endif\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-user.a65:\n    6  name=USER\n    7  stack=( n -- )\n    8: tags=fig,defining\n    9  A defining word used in the form:\n   10  \n   ..\n   31  #if 0\n   32  name=TDICT\n   33: tags=uservar\n   34  stack=( -- addr )\n   35  !!!User variable\n   ..\n   44  name=TDP\n   45  stack=( -- addr )\n   46: tags=uservar\n   47  !!!User variable\n   48  Transient Dictionary Pointer\n   ..\n   57  name=#VOC\n   58  stack=( -- addr )\n   59: tags=uservar,ext\n   60  !!!User variable\n   61  User variable containing the total number of vocabularies\n   ..\n   72  name=CSP\n   73  stack=( -- addr )\n   74: tags=uservar\n   75  !!!User variable\n   76  User variable used to store the current stack pointer, used by\n   ..\n   86  name=CURRENT\n   87  stack=( -- addr )\n   88: tags=vocabulary,uservar\n   89  !!!User variable\n   90  The vocabulary id of the compilation vocabulary, where new definitions\n   ..\n  100  name=REDEFINED\n  101  stack=( -- addr )\n  102: tags=uservar,ext,nosymbol\n  103  !!!User variable\n  104  Makes something like `: DUP DUP ;` possible.\n  ...\n  118  name=NEWEST\n  119  stack=( -- addr )\n  120: tags=uservar,ext,nosymbol\n  121  !!!User variable\n  122  User variable containing the address (NFA) of the most recently\n  ...\n  132  name=STATE\n  133  stack=( -- addr )\n  134: tags=forth-83,uservar\n  135  !!!User variable\n  136  The address of the user variable containing the compilation\n  ...\n  148  name=PWRAP\n  149  stack=( -- addr )\n  150: tags=editor\n  151  Double variable, stores 25 bits of line wrap info for paste buffer\n  152  \n  ...\n  160  name=PASTE\n  161  stack=( -- addr )\n  162: tags=editor\n  163  Paste buffer pointer, starts at [[PAD]]\n  164  \n  ...\n  172  name=VOCABS\n  173  stack=( -- addr )\n  174: tags=uservar,vocabulary,interpreter\n  175  Vocabulary stack establishes search order.  [[FORTH]] (vocid = 0) is\n  176  the last vocabulary searched, and is always present.  Executing a\n  ...\n  207  name=SYMNEW\n  208  stack=( -- addr )\n  209: tags=uservar,ext\n  210  !!!User variable\n  211  Start of new (unhashed) symbols. These are [[searched|Search Order]]\n  ...\n  221  name=SYMTAIL\n  222  stack=( -- addr )\n  223: tags=uservar\n  224  [heading]User variable[/heading]\n  225  Symbol table end address\n  ...\n  236  name=BLOOM\n  237  stack=( -- addr )\n  238: tags=ext,nosymbol\n  239  The 64-bit Bloom filter used by the core dictionary.  The hash\n  240  is designed to exclude most names containing digits (numbers)\n  ...\n  249  name=PASSBITS\n  250  stack=( -- addr )\n  251: tags=interpreter,nfa,nosymbol\n  252  32-bit filter so we don't scan for sizes that aren't there (FORGET) pass 1\n  253  \n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-utils.a65:\n    6  name=PETSCII\"\n    7  stack=( -- c )\n    8: tags=string,ext\n    9  Converts a quoted character to its numeric value\n   10  \n   ..\n   32  #if 0\n   33  name=.S\n   34: tags=i/o,stack,ext\n   35  Output the data stack\n   36  \n   ..\n   95  name=H.\n   96  stack=( c -- )\n   97: tags=i/o\n   98  Prints out a number as an unsigned hexadecimal byte\n   99  ```\n  ...\n  138  name=4H.\n  139  stack=( u -- )\n  140: tags=i/o\n  141  Prints out a number as an unsigned hexadecimal word\n  142  ```\n  ...\n  166  name=XLATE\n  167  stack=( char -- printablechar )\n  168: tags=i/o,nosymbol\n  169  \n  170  #endif\n  ...\n  183  name=DUMP\n  184  stack=( addr size -- )\n  185: tags=i/o\n  186  Dumps a region of memory as lines of eight bytes each\n  187  \n  ...\n  296  name=ID.\n  297  stack=( -- )\n  298: tags=compiler\n  299  Displays the name at the current `nfa` in `n3`\n  300  \n  ...\n  323  name=ID.L\n  324  stack=( nfa -- )\n  325: tags=ext,nosymbol\n  326  \n  327  #endif\n  ...\n  340  name=ID.WL\n  341  stack=( -- )\n  342: tags=ext,nosymbol\n  343  emits a carriage return in `words` output to avoid wrapping lines\n  344  \n  ...\n  408  name=(VOC)\n  409  stack=( -- voc )\n  410: tags=ext,nosymbol\n  411  return the `voc` of the current `nfa` in `n3`\n  412  #endif\n  ...\n  426  name=WORD-LIST\n  427  stack=( voc -- )\n  428: tags=interpreter,dictionary,forth-83\n  429  Displays all words in vocabulary `n`\n  430  \n  ...\n  500  name=WORDS\n  501  stack=( -- )\n  502: tags=interpreter,dictionary,forth-83\n  503  When `vocabs` is empty, display the `forth` vocabulary\n  504  otherwise, show search (context) vocabularies\n  ...\n  558  name=?MARGIN\n  559  stack=( size -- )\n  560: tags=ext,nosymbol\n  561  perform `cr` when Xcurpos + `size` is greater than `width`\n  562  \n  ...\n  595  name=ID.8\n  596  stack=( cfa -- )\n  597: tags=ext,nosymbol\n  598  formatted output, three-column layout used by `info`\n  599  \n  ...\n  656  name=INFO\n  657  stack=( -- )\n  658: tags=editor\n  659  Displays info on various editor and memory system variables\n  660  \n\n738 matches across 20 files\n\n\nSearching 32 files for \"_update\" (regex)\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65:\n 1798  #endif\n 1799  #include \"align.i65\"\n 1800: _update\n 1801      jsr enter\n 1802  #include \"page.i65\"\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65:\n  537      jsr enter\n  538  #include \"page.i65\"\n  539:     .word _update\n  540  #include \"page.i65\"\n  541      .word editing\n  ...\n  585      jsr enter\n  586  #include \"page.i65\"\n  587:     .word _update\n  588  #include \"page.i65\"\n  589      .word _clrscr\n  ...\n  633      jsr enter\n  634  #include \"page.i65\"\n  635:     .word _update\n  636  #include \"page.i65\"\n  637      .word _clrscr\n  ...\n  849      jsr enter\n  850  #include \"page.i65\"\n  851:     .word _update\n  852  #include \"page.i65\"\n  853      .word vmbuf\n  ...\n 1153      .word _editmode\n 1154  #include \"page.i65\"\n 1155:     .word _update\n 1156  #include \"page.i65\"\n 1157      .word _editchongo\n ....\n 1288      .word _pktplus\n 1289  #include \"page.i65\"\n 1290:     .word _update\n 1291  #include \"page.i65\"\n 1292      .word _back\n\n7 matches across 2 files\n\n\nSearching 32 files for \"_pktcur\" (regex)\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65:\n 1053  #endif\n 1054  #include \"align.i65\"\n 1055: _pktcur\n 1056      jsr enter\n 1057  #include \"page.i65\"\n ....\n 1651      jsr enter\n 1652  #include \"page.i65\"\n 1653:     .word _pktcur\n 1654  #include \"page.i65\"\n 1655      .word _vmbottom\n\n2 matches in 1 file\n\n\nSearching 32 files for \"_block\" (regex)\n\n/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65:\n 1190  #endif\n 1191  #include \"align.i65\"\n 1192: _block\n 1193      jsr enter\n 1194  #include \"page.i65\"\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65:\n  736      .word fetch\n  737  #include \"page.i65\"\n  738:     .word _block\n  739  #include \"page.i65\"\n  740      .word drop\n\n/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65:\n  501      jsr enter\n  502  #include \"page.i65\"\n  503:     .word _block\n  504  #include \"page.i65\"\n  505      .word lin\n\n3 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 110816,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "core/src/core-double.a65",
			"settings":
			{
				"buffer_size": 10149,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/src/core-extra.a65",
			"settings":
			{
				"buffer_size": 10780,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "studio/src/pettil-interpreter.a65",
			"settings":
			{
				"buffer_size": 12306,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"ui",
				"UI: Select Color Scheme"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/chitselb/Documents/dev/commodore/pettil",
		"/home/chitselb/Documents/dev/commodore/pettil/docs",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers",
		"/home/chitselb/Documents/dev/commodore/pettil/studio",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src",
		"/home/chitselb/Documents/dev/commodore/pettil/tools",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src"
	],
	"file_history":
	[
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-locals.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-extra.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/pettil.csv",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-nucleus.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tools/xap.rb",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/Register diagrams.tid",
		"/mnt/data/chitselb/Documents/dev/commodore/advent/cloak_plus.zil",
		"/home/chitselb/Documents/dev/commodore/pettil/src/pettil-interpreter.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-inner.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-double.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/pettil.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/NMOS6502Opcodes.txt",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-io.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/pettil-core.a65",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/tmp/pettil.csv",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/t.csv",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-assembler.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-studio.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-utils.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-dictionary.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/inc/cbm.def",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/Makefile",
		"/home/chitselb/Documents/dev/commodore/pettil/t.t",
		"/home/chitselb/Documents/dev/commodore/pettil/pettil.dbg",
		"/home/chitselb/Documents/dev/commodore/pettil/Makefile",
		"/home/chitselb/Documents/dev/commodore/vice-3.2/src/arch/unix/x11/gnome/uimon.c",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/pettil.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/foo.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/mon1.mon",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/enter.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/wrapper.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/inc/pettil-tdict.def",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/EditorDesign.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-number.a65",
		"/home/chitselb/Documents/pettilmobile/resources/history/end.vsf",
		"/home/chitselb/Documents/pettilmobile/resources/history/start.vsf",
		"/home/chitselb/.config/sublime-text-3/Packages/DA UI/DA Color.sublime-settings",
		"/home/chitselb/.config/sublime-text-3/Packages/DA UI/DA Dark.tmTheme",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/; pettil-editor.old2",
		"/home/chitselb/Documents/dev/commodore/pettil/src/pettil-editor.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/src/core-vm.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.old",
		"/home/chitselb/.config/autokey/data/My Phrases/pds.txt",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-user.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-nucleus.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-assembler.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-editor.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-user.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-utils.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-studio.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-dictionary.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-extra.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/pettil-core.a65",
		"/home/chitselb/core-vm.a65",
		"/home/chitselb/dev/commodore/pettil/tools/xap.rb",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/tiddlywiki.info",
		"/home/chitselb/dev/commodore/pettil/core/src/pettil-corewtf.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-locals.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/sweet16.a65",
		"/home/chitselb/dev/commodore/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-inner.a65",
		"/home/chitselb/dev/commodore/pettil/core/src/core-double.a65",
		"/mnt/sdc1/chitselb/dev/commodore/otherpet/kenross/download",
		"/home/chitselb/.local/share/applications/xpet.desktop",
		"/home/chitselb/.local/share/applications/xvic.desktop",
		"/home/chitselb/dev/commodore/pettil/core/src/inc/pettil.def",
		"/home/chitselb/dev/commodore/pettil/studio/src/inc/pettil-studio.def",
		"/home/chitselb/dev/commodore/pettil/core/src/inc/cbm.def",
		"/home/chitselb/dev/commodore/pettil/core/src/core-vm.a65",
		"/home/chitselb/dev/commodore/pettil/pettil.dbg",
		"/home/chitselb/dev/commodore/pettil/core/src/core-io.a65",
		"/home/chitselb/.vice/PET/chitselb.vpl",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure.ac",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure.proto",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.guess",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.log",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.rpath",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.status",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/config.sub",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/configure",
		"/mnt/sdc1/chitselb/dev/commodore/emulators/vice-2.4.28/t.t",
		"/home/chitselb/dev/commodore/pettil/Makefile",
		"/home/chitselb/dev/commodore/vic20/vickeymap.txt",
		"/home/chitselb/vickeymap.txt",
		"/home/chitselb/dev/commodore/pettil/tmp/symtab.csv",
		"/home/chitselb/dev/commodore/activity.log",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/F83 05. Definitions of Terms.tid",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/AboutPETTIL.tid",
		"/home/chitselb/dev/commodore/pettil/README",
		"/home/chitselb/dev/commodore/pettil/docs/statictiddlers/F83 Appendix B. Uncontrolled Reference Words.tid",
		"/home/chitselb/.vice/sdl-vicerc",
		"/home/chitselb/dev/commodore/pettil/t.t"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 135.0,
		"where_history":
		[
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/vice-3.2/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/.config/sublime-text-3/Packages/DA UI",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src,/home/chitselb/dev/commodore/pettil/docs/statictiddlers",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"prev",
			"scr",
			".word prev",
			"_block",
			"_pktcur",
			"_update",
			"^tags=",
			",nosymbol,locals",
			"harvests",
			"backslash",
			"eosq",
			"backslash",
			"scred",
			"scrid",
			"csv",
			"plusfetchexec",
			"fetchplusexec",
			"name=SYMTAB",
			"nowrap",
			"_block",
			"scredidx",
			"vmbottom",
			"name=+MOVE",
			"twonky",
			"scr prev",
			"prev vidram",
			"vocab",
			",a,",
			"hex4out",
			"wikiname",
			"hex4out",
			"hexout",
			"hash",
			"csv",
			"outputfile",
			"write_xpet_csvfile",
			"addr",
			"labels",
			"write_xpet_csvfile",
			"fortytimes",
			"DFLTN",
			"cursor",
			"blkbuf",
			"userlin",
			"_blkbuf",
			"userin",
			"userlin",
			"_block",
			".word prev",
			"topkt",
			"userprev",
			"_block",
			"_load",
			"userprev",
			"prev",
			"blk02",
			"blkbuf",
			"blk02",
			"_topkt",
			"topkt",
			"prev",
			".word prev",
			"plugh",
			"bcc put",
			"putay",
			"ldy tos+1",
			"putay",
			"put",
			"putya",
			"bcc put",
			"^put",
			"cswap",
			"qlineplus",
			"bit ",
			"userlin",
			"qlineplus",
			"_query",
			"qlineplus",
			"cursor",
			"DFLTN",
			"$AF",
			"expect",
			"C4",
			"^expect",
			"^_expect",
			"^expect",
			"ptickstream",
			"span",
			"LNMX",
			"bvc",
			"qlineplus",
			"userlin",
			"eosq",
			"sib",
			"nop",
			"userin",
			"_info",
			".word cr",
			"qpause",
			"qterminal",
			"numout",
			"_qcr",
			"_iddotl",
			"id.l",
			"_wordlist",
			"name=WORDS",
			"eoss",
			"linesa",
			"sorting symbols",
			"xyzzy",
			"userin",
			"usering",
			"Searching",
			"userin+1",
			"lda userin+1",
			"lda userlin+1",
			"qlineplus",
			"_qrefill",
			"^lin$",
			"_qrefill",
			".word span",
			"xpushc",
			"putnotc",
			"ult",
			"name=U",
			"^ult",
			"ult",
			".word lt"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			",locals,nosymbol",
			"",
			" ",
			"",
			"^$",
			"$",
			"",
			";",
			"bk .",
			"^bk .",
			"crap",
			"wget https://web.archive.org/web/20051201020459/http://freespace.virgin.net:80/ken.ross1/\\1",
			"\\2",
			" ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "core/src/core-vm.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50689,
						"regions":
						{
						},
						"selection":
						[
							[
								25056,
								25056
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20481.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 110816,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										167,
										172
									],
									[
										301,
										306
									],
									[
										460,
										465
									],
									[
										577,
										582
									],
									[
										716,
										721
									],
									[
										866,
										871
									],
									[
										1027,
										1032
									],
									[
										1208,
										1213
									],
									[
										1449,
										1454
									],
									[
										1620,
										1625
									],
									[
										1756,
										1761
									],
									[
										1907,
										1912
									],
									[
										2044,
										2049
									],
									[
										2180,
										2185
									],
									[
										2329,
										2334
									],
									[
										2485,
										2490
									],
									[
										2710,
										2715
									],
									[
										2837,
										2842
									],
									[
										2998,
										3003
									],
									[
										3154,
										3159
									],
									[
										3304,
										3309
									],
									[
										3482,
										3487
									],
									[
										3669,
										3674
									],
									[
										3939,
										3944
									],
									[
										4076,
										4081
									],
									[
										4213,
										4218
									],
									[
										4306,
										4311
									],
									[
										4442,
										4447
									],
									[
										4608,
										4613
									],
									[
										4744,
										4749
									],
									[
										4877,
										4882
									],
									[
										5011,
										5016
									],
									[
										5172,
										5177
									],
									[
										5325,
										5330
									],
									[
										5440,
										5445
									],
									[
										5565,
										5570
									],
									[
										5704,
										5709
									],
									[
										5888,
										5893
									],
									[
										6027,
										6032
									],
									[
										6198,
										6203
									],
									[
										6437,
										6442
									],
									[
										6547,
										6552
									],
									[
										6663,
										6668
									],
									[
										6803,
										6808
									],
									[
										6981,
										6986
									],
									[
										7240,
										7245
									],
									[
										7409,
										7414
									],
									[
										7541,
										7546
									],
									[
										7673,
										7678
									],
									[
										7801,
										7806
									],
									[
										7926,
										7931
									],
									[
										8052,
										8057
									],
									[
										8178,
										8183
									],
									[
										8313,
										8318
									],
									[
										8464,
										8469
									],
									[
										8608,
										8613
									],
									[
										8767,
										8772
									],
									[
										8914,
										8919
									],
									[
										9061,
										9066
									],
									[
										9253,
										9258
									],
									[
										9413,
										9418
									],
									[
										9555,
										9560
									],
									[
										9689,
										9694
									],
									[
										9899,
										9904
									],
									[
										10024,
										10029
									],
									[
										10167,
										10172
									],
									[
										10361,
										10366
									],
									[
										10518,
										10523
									],
									[
										10700,
										10705
									],
									[
										10939,
										10944
									],
									[
										11075,
										11080
									],
									[
										11195,
										11200
									],
									[
										11296,
										11301
									],
									[
										11457,
										11462
									],
									[
										11603,
										11608
									],
									[
										11759,
										11764
									],
									[
										11954,
										11959
									],
									[
										12169,
										12174
									],
									[
										12379,
										12384
									],
									[
										12591,
										12596
									],
									[
										12774,
										12779
									],
									[
										12946,
										12951
									],
									[
										13157,
										13162
									],
									[
										13322,
										13327
									],
									[
										13496,
										13501
									],
									[
										13626,
										13631
									],
									[
										13863,
										13868
									],
									[
										14008,
										14013
									],
									[
										14141,
										14146
									],
									[
										14260,
										14265
									],
									[
										14420,
										14425
									],
									[
										14540,
										14545
									],
									[
										14645,
										14650
									],
									[
										14773,
										14778
									],
									[
										14920,
										14925
									],
									[
										15086,
										15091
									],
									[
										15332,
										15337
									],
									[
										15428,
										15433
									],
									[
										15561,
										15566
									],
									[
										15674,
										15679
									],
									[
										15827,
										15832
									],
									[
										16043,
										16048
									],
									[
										16154,
										16159
									],
									[
										16265,
										16270
									],
									[
										16362,
										16367
									],
									[
										16461,
										16466
									],
									[
										16547,
										16552
									],
									[
										16670,
										16675
									],
									[
										16886,
										16891
									],
									[
										17044,
										17049
									],
									[
										17162,
										17167
									],
									[
										17293,
										17298
									],
									[
										17405,
										17410
									],
									[
										17519,
										17524
									],
									[
										17630,
										17635
									],
									[
										17743,
										17748
									],
									[
										17856,
										17861
									],
									[
										17941,
										17946
									],
									[
										18026,
										18031
									],
									[
										18119,
										18124
									],
									[
										18210,
										18215
									],
									[
										18340,
										18345
									],
									[
										18429,
										18434
									],
									[
										18517,
										18522
									],
									[
										18604,
										18609
									],
									[
										18749,
										18754
									],
									[
										18923,
										18928
									],
									[
										19056,
										19061
									],
									[
										19248,
										19253
									],
									[
										19377,
										19382
									],
									[
										19506,
										19511
									],
									[
										19636,
										19641
									],
									[
										19764,
										19769
									],
									[
										19890,
										19895
									],
									[
										20108,
										20113
									],
									[
										20232,
										20237
									],
									[
										20356,
										20361
									],
									[
										20480,
										20485
									],
									[
										20606,
										20611
									],
									[
										20731,
										20736
									],
									[
										20872,
										20877
									],
									[
										21044,
										21049
									],
									[
										21200,
										21205
									],
									[
										21429,
										21434
									],
									[
										21649,
										21654
									],
									[
										21770,
										21775
									],
									[
										21912,
										21917
									],
									[
										22132,
										22137
									],
									[
										22248,
										22253
									],
									[
										22364,
										22369
									],
									[
										22473,
										22478
									],
									[
										22594,
										22599
									],
									[
										22735,
										22740
									],
									[
										22922,
										22927
									],
									[
										23091,
										23096
									],
									[
										23239,
										23244
									],
									[
										23366,
										23371
									],
									[
										23493,
										23498
									],
									[
										23620,
										23625
									],
									[
										23738,
										23743
									],
									[
										23838,
										23843
									],
									[
										24002,
										24007
									],
									[
										24126,
										24131
									],
									[
										24244,
										24249
									],
									[
										24407,
										24412
									],
									[
										24561,
										24566
									],
									[
										24675,
										24680
									],
									[
										24787,
										24792
									],
									[
										24956,
										24961
									],
									[
										25111,
										25116
									],
									[
										25210,
										25215
									],
									[
										25353,
										25358
									],
									[
										25483,
										25488
									],
									[
										25629,
										25634
									],
									[
										25758,
										25763
									],
									[
										25904,
										25909
									],
									[
										26070,
										26075
									],
									[
										26284,
										26289
									],
									[
										26433,
										26438
									],
									[
										26588,
										26593
									],
									[
										26743,
										26748
									],
									[
										26868,
										26873
									],
									[
										27083,
										27088
									],
									[
										27298,
										27303
									],
									[
										27390,
										27395
									],
									[
										27482,
										27487
									],
									[
										27574,
										27579
									],
									[
										27669,
										27674
									],
									[
										27789,
										27794
									],
									[
										27886,
										27891
									],
									[
										27983,
										27988
									],
									[
										28080,
										28085
									],
									[
										28183,
										28188
									],
									[
										28292,
										28297
									],
									[
										28399,
										28404
									],
									[
										28504,
										28509
									],
									[
										28612,
										28617
									],
									[
										28730,
										28735
									],
									[
										28827,
										28832
									],
									[
										28924,
										28929
									],
									[
										29021,
										29026
									],
									[
										29118,
										29123
									],
									[
										29232,
										29237
									],
									[
										29394,
										29399
									],
									[
										29542,
										29547
									],
									[
										29650,
										29655
									],
									[
										29769,
										29774
									],
									[
										29857,
										29862
									],
									[
										29963,
										29968
									],
									[
										30141,
										30146
									],
									[
										30291,
										30296
									],
									[
										30393,
										30398
									],
									[
										30600,
										30605
									],
									[
										30798,
										30803
									],
									[
										30907,
										30912
									],
									[
										31055,
										31060
									],
									[
										31170,
										31175
									],
									[
										31340,
										31345
									],
									[
										31510,
										31515
									],
									[
										31654,
										31659
									],
									[
										31829,
										31834
									],
									[
										31966,
										31971
									],
									[
										32119,
										32124
									],
									[
										32280,
										32285
									],
									[
										32367,
										32372
									],
									[
										32510,
										32515
									],
									[
										32631,
										32636
									],
									[
										32734,
										32739
									],
									[
										32860,
										32865
									],
									[
										32949,
										32954
									],
									[
										33047,
										33052
									],
									[
										33171,
										33176
									],
									[
										33260,
										33265
									],
									[
										33352,
										33357
									],
									[
										33448,
										33453
									],
									[
										33558,
										33563
									],
									[
										33664,
										33669
									],
									[
										33804,
										33809
									],
									[
										33962,
										33967
									],
									[
										34118,
										34123
									],
									[
										34271,
										34276
									],
									[
										34433,
										34438
									],
									[
										34584,
										34589
									],
									[
										34746,
										34751
									],
									[
										34908,
										34913
									],
									[
										35066,
										35071
									],
									[
										35168,
										35173
									],
									[
										35308,
										35313
									],
									[
										35407,
										35412
									],
									[
										35524,
										35529
									],
									[
										35635,
										35640
									],
									[
										35796,
										35801
									],
									[
										35951,
										35956
									],
									[
										36064,
										36069
									],
									[
										36268,
										36273
									],
									[
										36477,
										36482
									],
									[
										36621,
										36626
									],
									[
										36719,
										36724
									],
									[
										36868,
										36873
									],
									[
										36985,
										36990
									],
									[
										37116,
										37121
									],
									[
										37220,
										37225
									],
									[
										37361,
										37366
									],
									[
										37488,
										37493
									],
									[
										37616,
										37621
									],
									[
										37751,
										37756
									],
									[
										37865,
										37870
									],
									[
										37980,
										37985
									],
									[
										38113,
										38118
									],
									[
										38252,
										38257
									],
									[
										38392,
										38397
									],
									[
										38532,
										38537
									],
									[
										38687,
										38692
									],
									[
										38841,
										38846
									],
									[
										38967,
										38972
									],
									[
										39110,
										39115
									],
									[
										39251,
										39256
									],
									[
										39393,
										39398
									],
									[
										39542,
										39547
									],
									[
										39689,
										39694
									],
									[
										39829,
										39834
									],
									[
										39978,
										39983
									],
									[
										40186,
										40191
									],
									[
										40379,
										40384
									],
									[
										40518,
										40523
									],
									[
										40720,
										40725
									],
									[
										40900,
										40905
									],
									[
										41017,
										41022
									],
									[
										41219,
										41224
									],
									[
										41393,
										41398
									],
									[
										41567,
										41572
									],
									[
										41708,
										41713
									],
									[
										41876,
										41881
									],
									[
										42039,
										42044
									],
									[
										42203,
										42208
									],
									[
										42316,
										42321
									],
									[
										42482,
										42487
									],
									[
										42642,
										42647
									],
									[
										42798,
										42803
									],
									[
										43135,
										43140
									],
									[
										43312,
										43317
									],
									[
										43483,
										43488
									],
									[
										43649,
										43654
									],
									[
										43819,
										43824
									],
									[
										43971,
										43976
									],
									[
										44090,
										44095
									],
									[
										44244,
										44249
									],
									[
										44382,
										44387
									],
									[
										44561,
										44566
									],
									[
										44750,
										44755
									],
									[
										44923,
										44928
									],
									[
										45142,
										45147
									],
									[
										45285,
										45290
									],
									[
										45436,
										45441
									],
									[
										45562,
										45567
									],
									[
										45720,
										45725
									],
									[
										45897,
										45902
									],
									[
										46023,
										46028
									],
									[
										46182,
										46187
									],
									[
										46323,
										46328
									],
									[
										46452,
										46457
									],
									[
										46638,
										46643
									],
									[
										46849,
										46854
									],
									[
										46993,
										46998
									],
									[
										47143,
										47148
									],
									[
										47347,
										47352
									],
									[
										47598,
										47603
									],
									[
										47796,
										47801
									],
									[
										47944,
										47949
									],
									[
										48097,
										48102
									],
									[
										48269,
										48274
									],
									[
										48380,
										48385
									],
									[
										48502,
										48507
									],
									[
										48624,
										48629
									],
									[
										48772,
										48777
									],
									[
										48909,
										48914
									],
									[
										49030,
										49035
									],
									[
										49195,
										49200
									],
									[
										49323,
										49328
									],
									[
										49472,
										49477
									],
									[
										49619,
										49624
									],
									[
										49836,
										49841
									],
									[
										49983,
										49988
									],
									[
										50131,
										50136
									],
									[
										50242,
										50247
									],
									[
										50385,
										50390
									],
									[
										50537,
										50542
									],
									[
										50639,
										50644
									],
									[
										50757,
										50762
									],
									[
										50852,
										50857
									],
									[
										51017,
										51022
									],
									[
										51144,
										51149
									],
									[
										51243,
										51248
									],
									[
										51390,
										51395
									],
									[
										51559,
										51564
									],
									[
										51727,
										51732
									],
									[
										51822,
										51827
									],
									[
										52047,
										52052
									],
									[
										52195,
										52200
									],
									[
										52347,
										52352
									],
									[
										52448,
										52453
									],
									[
										53107,
										53112
									],
									[
										53225,
										53230
									],
									[
										53345,
										53350
									],
									[
										53478,
										53483
									],
									[
										53574,
										53579
									],
									[
										53797,
										53802
									],
									[
										54026,
										54031
									],
									[
										54167,
										54172
									],
									[
										54386,
										54391
									],
									[
										54500,
										54505
									],
									[
										54615,
										54620
									],
									[
										54733,
										54738
									],
									[
										54845,
										54850
									],
									[
										54955,
										54960
									],
									[
										55174,
										55179
									],
									[
										55314,
										55319
									],
									[
										55516,
										55521
									],
									[
										55675,
										55680
									],
									[
										55820,
										55825
									],
									[
										56007,
										56012
									],
									[
										56122,
										56127
									],
									[
										56309,
										56314
									],
									[
										56455,
										56460
									],
									[
										56683,
										56688
									],
									[
										56840,
										56845
									],
									[
										56947,
										56952
									],
									[
										57074,
										57079
									],
									[
										57292,
										57297
									],
									[
										57414,
										57419
									],
									[
										57559,
										57564
									],
									[
										57697,
										57702
									],
									[
										57906,
										57911
									],
									[
										58124,
										58129
									],
									[
										58272,
										58277
									],
									[
										58376,
										58381
									],
									[
										58553,
										58558
									],
									[
										58722,
										58727
									],
									[
										58830,
										58835
									],
									[
										59003,
										59008
									],
									[
										59151,
										59156
									],
									[
										59369,
										59374
									],
									[
										59554,
										59559
									],
									[
										59707,
										59712
									],
									[
										59837,
										59842
									],
									[
										59967,
										59972
									],
									[
										60096,
										60101
									],
									[
										60227,
										60232
									],
									[
										60361,
										60366
									],
									[
										60495,
										60500
									],
									[
										60627,
										60632
									],
									[
										60758,
										60763
									],
									[
										60892,
										60897
									],
									[
										61023,
										61028
									],
									[
										61157,
										61162
									],
									[
										61293,
										61298
									],
									[
										61427,
										61432
									],
									[
										61563,
										61568
									],
									[
										61687,
										61692
									],
									[
										61851,
										61856
									],
									[
										62010,
										62015
									],
									[
										62163,
										62168
									],
									[
										62328,
										62333
									],
									[
										62463,
										62468
									],
									[
										62586,
										62591
									],
									[
										62696,
										62701
									],
									[
										62809,
										62814
									],
									[
										62923,
										62928
									],
									[
										63034,
										63039
									],
									[
										63145,
										63150
									],
									[
										63264,
										63269
									],
									[
										63403,
										63408
									],
									[
										63526,
										63531
									],
									[
										63643,
										63648
									],
									[
										63753,
										63758
									],
									[
										63860,
										63865
									],
									[
										63970,
										63975
									],
									[
										64080,
										64085
									],
									[
										64205,
										64210
									],
									[
										64383,
										64388
									],
									[
										64565,
										64570
									],
									[
										64739,
										64744
									],
									[
										64852,
										64857
									],
									[
										64983,
										64988
									],
									[
										65197,
										65202
									],
									[
										65320,
										65325
									],
									[
										65445,
										65450
									],
									[
										65569,
										65574
									],
									[
										65693,
										65698
									],
									[
										65817,
										65822
									],
									[
										65941,
										65946
									],
									[
										66064,
										66069
									],
									[
										66190,
										66195
									],
									[
										66302,
										66307
									],
									[
										66414,
										66419
									],
									[
										66526,
										66531
									],
									[
										66638,
										66643
									],
									[
										66750,
										66755
									],
									[
										66862,
										66867
									],
									[
										66974,
										66979
									],
									[
										67086,
										67091
									],
									[
										67198,
										67203
									],
									[
										67310,
										67315
									],
									[
										67422,
										67427
									],
									[
										67534,
										67539
									],
									[
										67646,
										67651
									],
									[
										67758,
										67763
									],
									[
										67870,
										67875
									],
									[
										67982,
										67987
									],
									[
										68094,
										68099
									],
									[
										68206,
										68211
									],
									[
										68318,
										68323
									],
									[
										68430,
										68435
									],
									[
										68542,
										68547
									],
									[
										68654,
										68659
									],
									[
										68766,
										68771
									],
									[
										68878,
										68883
									],
									[
										68990,
										68995
									],
									[
										69102,
										69107
									],
									[
										69214,
										69219
									],
									[
										69326,
										69331
									],
									[
										69438,
										69443
									],
									[
										69550,
										69555
									],
									[
										69662,
										69667
									],
									[
										69774,
										69779
									],
									[
										69886,
										69891
									],
									[
										69998,
										70003
									],
									[
										70110,
										70115
									],
									[
										70222,
										70227
									],
									[
										70334,
										70339
									],
									[
										70446,
										70451
									],
									[
										70558,
										70563
									],
									[
										70670,
										70675
									],
									[
										70782,
										70787
									],
									[
										70894,
										70899
									],
									[
										71006,
										71011
									],
									[
										71118,
										71123
									],
									[
										71230,
										71235
									],
									[
										71342,
										71347
									],
									[
										71454,
										71459
									],
									[
										71644,
										71649
									],
									[
										71783,
										71788
									],
									[
										71903,
										71908
									],
									[
										72018,
										72023
									],
									[
										72129,
										72134
									],
									[
										72347,
										72352
									],
									[
										72509,
										72514
									],
									[
										72726,
										72731
									],
									[
										72897,
										72902
									],
									[
										73099,
										73104
									],
									[
										73310,
										73315
									],
									[
										73498,
										73503
									],
									[
										73631,
										73636
									],
									[
										73744,
										73749
									],
									[
										73876,
										73881
									],
									[
										74028,
										74033
									],
									[
										74242,
										74247
									],
									[
										74422,
										74427
									],
									[
										74624,
										74629
									],
									[
										74798,
										74803
									],
									[
										75000,
										75005
									],
									[
										75155,
										75160
									],
									[
										75317,
										75322
									],
									[
										75485,
										75490
									],
									[
										75602,
										75607
									],
									[
										75731,
										75736
									],
									[
										75818,
										75823
									],
									[
										75983,
										75988
									],
									[
										76150,
										76155
									],
									[
										76318,
										76323
									],
									[
										76460,
										76465
									],
									[
										76628,
										76633
									],
									[
										76761,
										76766
									],
									[
										76883,
										76888
									],
									[
										76980,
										76985
									],
									[
										77102,
										77107
									],
									[
										77195,
										77200
									],
									[
										77344,
										77349
									],
									[
										77514,
										77519
									],
									[
										77613,
										77618
									],
									[
										77785,
										77790
									],
									[
										77989,
										77994
									],
									[
										78241,
										78246
									],
									[
										78370,
										78375
									],
									[
										78501,
										78506
									],
									[
										78683,
										78688
									],
									[
										78851,
										78856
									],
									[
										79005,
										79010
									],
									[
										79170,
										79175
									],
									[
										79279,
										79284
									],
									[
										79445,
										79450
									],
									[
										79566,
										79571
									],
									[
										79732,
										79737
									],
									[
										79964,
										79969
									],
									[
										80173,
										80178
									],
									[
										80321,
										80326
									],
									[
										80548,
										80553
									],
									[
										80695,
										80700
									],
									[
										80882,
										80887
									],
									[
										81015,
										81020
									],
									[
										81125,
										81130
									],
									[
										81255,
										81260
									],
									[
										81368,
										81373
									],
									[
										81479,
										81484
									],
									[
										81606,
										81611
									],
									[
										81718,
										81723
									],
									[
										81827,
										81832
									],
									[
										81937,
										81942
									],
									[
										82047,
										82052
									],
									[
										82157,
										82162
									],
									[
										82267,
										82272
									],
									[
										82387,
										82392
									],
									[
										82575,
										82580
									],
									[
										82760,
										82765
									],
									[
										82954,
										82959
									],
									[
										83107,
										83112
									],
									[
										83255,
										83260
									],
									[
										83409,
										83414
									],
									[
										83549,
										83554
									],
									[
										83685,
										83690
									],
									[
										83832,
										83837
									],
									[
										84046,
										84051
									],
									[
										84217,
										84222
									],
									[
										84406,
										84411
									],
									[
										84622,
										84627
									],
									[
										84845,
										84850
									],
									[
										85004,
										85009
									],
									[
										85217,
										85222
									],
									[
										85375,
										85380
									],
									[
										85513,
										85518
									],
									[
										85761,
										85766
									],
									[
										85914,
										85919
									],
									[
										86093,
										86098
									],
									[
										86291,
										86296
									],
									[
										86502,
										86507
									],
									[
										86635,
										86640
									],
									[
										86861,
										86866
									],
									[
										86985,
										86990
									],
									[
										87179,
										87184
									],
									[
										87309,
										87314
									],
									[
										87505,
										87510
									],
									[
										87620,
										87625
									],
									[
										87730,
										87735
									],
									[
										87852,
										87857
									],
									[
										88035,
										88040
									],
									[
										88146,
										88151
									],
									[
										88319,
										88324
									],
									[
										88457,
										88462
									],
									[
										88628,
										88633
									],
									[
										88794,
										88799
									],
									[
										89021,
										89026
									],
									[
										89211,
										89216
									],
									[
										89352,
										89357
									],
									[
										89625,
										89630
									],
									[
										89785,
										89790
									],
									[
										89882,
										89887
									],
									[
										89996,
										90001
									],
									[
										90185,
										90190
									],
									[
										90350,
										90355
									],
									[
										90507,
										90512
									],
									[
										90696,
										90701
									],
									[
										90894,
										90899
									],
									[
										91101,
										91106
									],
									[
										91208,
										91213
									],
									[
										91319,
										91324
									],
									[
										91414,
										91419
									],
									[
										91581,
										91586
									],
									[
										91736,
										91741
									],
									[
										91856,
										91861
									],
									[
										91979,
										91984
									],
									[
										92153,
										92158
									],
									[
										92273,
										92278
									],
									[
										92405,
										92410
									],
									[
										92545,
										92550
									],
									[
										92705,
										92710
									],
									[
										92832,
										92837
									],
									[
										92978,
										92983
									],
									[
										93111,
										93116
									],
									[
										93237,
										93242
									],
									[
										93423,
										93428
									],
									[
										93557,
										93562
									],
									[
										93675,
										93680
									],
									[
										93820,
										93825
									],
									[
										93965,
										93970
									],
									[
										94084,
										94089
									],
									[
										94214,
										94219
									],
									[
										94320,
										94325
									],
									[
										94418,
										94423
									],
									[
										94527,
										94532
									],
									[
										94678,
										94683
									],
									[
										94870,
										94875
									],
									[
										95059,
										95064
									],
									[
										95272,
										95277
									],
									[
										95393,
										95398
									],
									[
										95518,
										95523
									],
									[
										95641,
										95646
									],
									[
										95848,
										95853
									],
									[
										95999,
										96004
									],
									[
										96234,
										96239
									],
									[
										96409,
										96414
									],
									[
										96572,
										96577
									],
									[
										96706,
										96711
									],
									[
										96816,
										96821
									],
									[
										97082,
										97087
									],
									[
										97275,
										97280
									],
									[
										97450,
										97455
									],
									[
										97630,
										97635
									],
									[
										97848,
										97853
									],
									[
										98128,
										98133
									],
									[
										98346,
										98351
									],
									[
										98579,
										98584
									],
									[
										98756,
										98761
									],
									[
										98977,
										98982
									],
									[
										99147,
										99152
									],
									[
										99257,
										99262
									],
									[
										99366,
										99371
									],
									[
										99537,
										99542
									],
									[
										99773,
										99778
									],
									[
										99947,
										99952
									],
									[
										100079,
										100084
									],
									[
										100233,
										100238
									],
									[
										100339,
										100344
									],
									[
										100591,
										100596
									],
									[
										100831,
										100836
									],
									[
										100973,
										100978
									],
									[
										101089,
										101094
									],
									[
										101184,
										101189
									],
									[
										101297,
										101302
									],
									[
										101409,
										101414
									],
									[
										101568,
										101573
									],
									[
										101677,
										101682
									],
									[
										101779,
										101784
									],
									[
										101890,
										101895
									],
									[
										101993,
										101998
									],
									[
										102094,
										102099
									],
									[
										102197,
										102202
									],
									[
										102376,
										102381
									],
									[
										102495,
										102500
									],
									[
										102626,
										102631
									],
									[
										102848,
										102853
									],
									[
										102980,
										102985
									],
									[
										103148,
										103153
									],
									[
										103250,
										103255
									],
									[
										103470,
										103475
									],
									[
										103619,
										103624
									],
									[
										103706,
										103711
									],
									[
										103794,
										103799
									],
									[
										104033,
										104038
									],
									[
										104144,
										104149
									],
									[
										104260,
										104265
									],
									[
										104388,
										104393
									],
									[
										104548,
										104553
									],
									[
										104713,
										104718
									],
									[
										104899,
										104904
									],
									[
										105058,
										105063
									],
									[
										105235,
										105240
									],
									[
										105404,
										105409
									],
									[
										105554,
										105559
									],
									[
										105678,
										105683
									],
									[
										105920,
										105925
									],
									[
										106095,
										106100
									],
									[
										106236,
										106241
									],
									[
										106452,
										106457
									],
									[
										106698,
										106703
									],
									[
										106819,
										106824
									],
									[
										106925,
										106930
									],
									[
										107055,
										107060
									],
									[
										107204,
										107209
									],
									[
										107304,
										107309
									],
									[
										107431,
										107436
									],
									[
										107561,
										107566
									],
									[
										107652,
										107657
									],
									[
										107806,
										107811
									],
									[
										107950,
										107955
									],
									[
										108090,
										108095
									],
									[
										108300,
										108305
									],
									[
										108446,
										108451
									],
									[
										108582,
										108587
									],
									[
										108859,
										108866
									],
									[
										109057,
										109064
									],
									[
										109188,
										109195
									],
									[
										109319,
										109326
									],
									[
										109450,
										109457
									],
									[
										109585,
										109592
									],
									[
										109725,
										109732
									],
									[
										109970,
										109977
									],
									[
										110097,
										110104
									],
									[
										110340,
										110346
									],
									[
										110539,
										110545
									],
									[
										110735,
										110741
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								110346,
								110346
							]
						],
						"settings":
						{
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 77214.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "core/src/core-double.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10149,
						"regions":
						{
						},
						"selection":
						[
							[
								2672,
								2672
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2203.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "core/src/core-extra.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10780,
						"regions":
						{
						},
						"selection":
						[
							[
								9021,
								9021
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8352.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "studio/src/pettil-interpreter.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12306,
						"regions":
						{
						},
						"selection":
						[
							[
								3551,
								3551
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2992.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 222.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "pettil.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tiddly",
				"docs/statictiddlers/tiddlywiki.info"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
