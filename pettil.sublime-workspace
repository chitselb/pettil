{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mon",
				"moncommand"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\ncfa\n\n                (create)\n\n                lexer\n                parser\n                name \n\n                found?\n\nnfa\n\n                (seek)\n                symlen\nn2  og\nn3  this\nn8  len\n\n\nsymtab\n\n\n\nclipboard downstairs\nface synthesizer\nPicChip effects\nstamp animator = stampinator\nrectangle selector\nuse stampinator to make rube goldberg contraptions\nA, X, Y, S, P, N, V, B, D, I, Z, C, address buss, data buss, clock\n\n\nA, X, Y, S, P, N, V, B, D, I, Z, C, address buss, data buss, clock, NMI, RST, IRQ, S.O.\n\n (2)   There are +5v and ground pins to supply power\n (3)   The 6502 chip has a clock input and two clock outputs\n (4)  four data signalling input lines: RST, NMI, IRQ, S.O.\n(16)  address buss lines\n (8)  data buss lines\n (1)  __r/w\n \n\n    asl n2 ; og\n    lda n3 ; thisl\n    adc n8 ; len\n    sta n3 ; thisl\n    bcc +\n    inc n3+1\n    ;clc ?\n+   jmp next\n\n    adc ld\nhere is what I envision -- I type a room description, item descriptions\nyou play it, here, in IM\n\nI must capture all of it, and can only paste my text from the edit buffer.  You get to freestyle.\n\nI haven't written it yet but have a pretty good idea how things work\n\nmaking the descriptions more vivid without being corny; setting the volume level properly on the humor; completion of the environment and all puzzles\n\nthose are the goals\n\n\n\n\n[pitch]\nHave you ever wanted to program a Commodore PET like a boss?  Since I am recording this before you will ever hear it, perhaps even years ago, I will pretend you answered, \"yes.\"  Great!  Let's get right to it.\n\nThe PET has a 6502 microprocessor inside.  This fabulously popular chip was in many other computers, like the KIM-1, Commodore B128 series, the VIC-20, and in slightly modified form in the C=64, Commodore 128, and the Supermax Game console, the Plus/4 and TED machines.  That's just computers made by one company, Commodore.  Apple and Atari built several machines around the 6502 chip, and the Nintendo NES used it.  Why the PET then?  I wanted to constrain this series a bit, and with its unique PETSCII character set, the absence of bitmap graphics isn't noticed as much as it would be, and more attention can be paid to algorithms than to the video and audio chips included in systems that came along after the PET.\n\nThe 6502 has a whoppingly tiny 55 bits of register space and, in the PET, a 1 megahertz clock.  That's one million clock ticks per second.  The PET has ROM code that runs at startup and presents the user with a BASIC programming environment, and it is from this point that we begin.\n\nProgram on a PET like a boss.\n\n\nPETTILmobile digital presence\n\nPETTILmobile.com  website\nGitHub            chitselb/pettil\nSubstack          $5/month\nPatreon           various tiers, merch\nTwitter           @PETTILmobile\nInstagram         @PETTILmobile\nGoogle            PETTILmobile@gmail.com\nFacebook          PETTIL group, page\n\nPETTILmob levels\n\nUnderboss\nBoss\n\n\n\nHi! PROOF is a digital newsletter that's hosted by Substack and arrives in your email inbox. You can subscribe for free and get some of the content, or subscribe for $5/month and get full access to all the content. Enter your email here to see the options: http://sethabramson.substack.com\n\n\nHi!  PETTILmobile is a digital newsletter that's hosted at PETTILmobile.com and arrives in your email inbox.  You can subscribe for free and get all of the content, or subscribe for $5/month and get access to all of the content.  Enter your email here to get things rolling.  You too can program a PET like a boss.\n\nHi!  PETTILmobile is a digital newsletter that's hosted at archive.org and arrives in your email inbox.  You can subscribe for free and get all of the content, or subscribe for $5/month and get access to all of the content.  Enter your email here to get things rolling.  You too can program a PET like a boss.\n\nemail to Jason:\n\nPETTILmobile tiddlywiki blog \"direct to archive\"\narchive.org hosted emulators\n  per-user D64 storage connected to archive.org credentials?\n\n\nZeus walks out and zaps the ground below with a lightning bolt that always targets the player (a duck) controlled by < > keys\n\n\n\\ +8\n/ -8\n| +4\n>{ +8\n} +0\n\n\n\n\n\nvideos\n\nObtaining free PETs\n  Ubuntu\n  Windows\n  iOS\n  tablets and phones\n\n6502 Assembly Language programming on a PET\nSweet16 programming in PETTIL on a PET\nForth programming in PETTIL on a PET\nGame programming in PETTIL on a VIC20\n\n\n\n\n\n\n\n\n: interpret   ( -- )\n  begin\n    ?stack\n    bl name  ?dup\n  while\n    found?  ?dup\n    ?: grok number\n  repeat ;\n\n              in\n              span\n                n6  lbuf\n                n7  char\n                n8  len\n\n: name   ( char -- nfa )\n  lbuf  n6 2!                                           ~ eww, also skip / scan\n  begin\n    eol?\n  while\n    hungry? ?nomnom\n    eoi?\n  until\n  eoi?  ?: false parse ;\n\n: lbuf   ( -- buffer )\n  blk@  ?: sib tib ;\n\ncode blk@   ( -- blk )\n  blk lda,  'push0a jmp,\n\n: parse   ( -- nfa|0 )\n  skip ( offset )  dup 1- <n6 +\n  scan ( offset )  rot -  in 1+!\n  >n8 tuck\n  ?: tuck under  c! ;\n\ncode skip\n  in !\n\nlbuf\nin\nspan\n\n\n: found?   ( -- )\n\n; *****************************\n; *  Draw 2x2 Tile on screen  *\n; *  A = Tile Number          *\n; *  X = Column 0-20          *\n; *  Y = Row 0-21             *\n; *****************************\n\n    STA tile_ptr\n    LDA #0\n    ASL tile_ptr\n    ROL A\n    ASL tile_ptr\n    ROL A\n    STA tile_ptr+1\n    CLC\n    LDA #tile_base MOD 256\n    ADC tile_ptr\n    STA tile_ptr\n    LDA #tile_base DIV 256\n    ADC tile_ptr+1\n    STA tile_ptr+1\n\n    CLC\n    TXA\n    ADC line_table_lo,Y\n    STA scrn_ptr\n    STA col_ptr\n    LDA #0\n    ADC line_table_hi,Y\n    STA scrn_ptr+1\n    ADC #(col_base-scrn_base)DIV256\n    STA col_ptr+1\n\n    LDY #0\n    LDA (tile_ptr),Y\n    STA (scrn_ptr),Y\n    LDA #0\n    STA (col_ptr),Y\n    INY\n    LDA (tile_ptr),Y\n    STA (scrn_ptr),Y\n    LDA #0\n    STA (col_ptr),Y\n    INY\n    LDA (tile_ptr),Y\n    LDY #22\n    STA (scrn_ptr),Y\n    LDA #0\n    STA (col_ptr),Y\n    LDY #3\n    LDA (tile_ptr),Y\n    LDY #23\n    STA (scrn_ptr),Y\n    LDA #0\n    STA (col_ptr),Y\n    RTS\n\n\n\n151\n\nGroup 1, Accumulator\n01\n    1   5   3   7   0   4   2   6\n0   ORA ... ... ... ... ... ... ...\n1   AND ... ... ... ... ... ... ...\n2   EOR ... ... ... ... ... ... ...\n3   ADC ... ... ... ... ... ... ...\n4   STA ... ... ... ... ...     ...\n5   LDA ... ... ... ... ... ... ...\n6   CMP ... ... ... ... ... ... ...\n7   SBC ... ... ... ... ... ... ...\n    zp  z,x abs a,x x)  )y  #   a,y   63\n    1   1   2   2   1   1   1   2\n\nGroup 0, Branching and implied\n00\n    1   5   3   7   0   4   2   6\n0   BRK PHP BPL CLC\n1   JSR PLP BMI SEC BIT     ...\n2   RTI PHA BVC CLI         JMP\n3   RTS PLA BVS SEI         ^^^\n4       DEY BCC TYA STY ... ...\n5   LDY TAY BCS CLV ... ... ... ...\n6   CPY INY BNE CLD ... ... ... ...\n7   CPX INX BEQ SED ... ... ... ...\n    #   imp rel imp zp  abs z,x a,x\n    1   0   1   0   1   2   1   2\n\nGroup 2, Memory\n10\n    1   5   3   7   0   4   2   6\n0   ROL ... ... ... ...\n1   ROR ... ... ... ...\n2   ASL ... ... ... ...\n3   LSR ... ... ... ...\n4   LDX ... ... ... ... ...\n5   STX ... ...\n6   INC ... ... ...\n7   DEC ... ... ...\n    zp  z,x abs a,x a   #\n\n\n\nimplied addressing\nimmediate addressing\nzero page direct addressing\nabsolute direct addressing\nabsolute indexed addressing\n,x ,y\nzero page indexed addressing\n,x ,y\nindirect addressing\nx)\n)y\nrelative addressing\n\n\nstate st\npackard\nashley\nkalamazoo(portage) 1423 romence rd\ngrand rapids\n\n\n\n\n: lexer   ( \"name \" ; -- nfa )\n    bl name ?dup ?exit 4 fail ;  \\ MISSING NAME\n\n: exists?   ( \"name\" ; -- cfa|0 )\n    lexer found? ;\n\n_existsq\n    jsr enter\n    .word bl\n    .word _name\n    .word qdup\n    .word pquerycolon\n    .word   _foundq\n    .word   false\n    .word andx\n    .word exit\n\n\n.C:04a5  60          RTS            - A:7B X:2C Y:FB SP:f4 N.-B....   12441029\n(C:$04a5) g\n(C:$e0c1) h 4000 7fff 08 6c\n662c\n(C:$e0c1) m 6620\n>C:6620  06 08 00 e5  0b b2 0b e5  0b b4 10 03  08 6c 38 66   fh@.k.k.k.pchl8f\n>C:6630  7e 06 1c 13  ed 15 0d 04  20 86 1a 20  06 11 ac 0f   ~f\\s.umd .z fq.o\n>C:6640  a4 0f b2 10  b5 06 19 00  b2 0b 3b 0a  aa 10 a9 f0   .o.p.fy@.k;j.p..\n>C:6650  2c a9 d0 8d  64 66 ac 9a  06 88 c8 cc  9c 06 b0 06   ,.P.df..f.HL.f.f\n>C:6660  b1 10 45 12  d0 f4 8c 9a  06 98 4c 4a  12 20 06 11   .pErP...f.LJr fq\n\nscroll: jsr $AAD7\nloop:   lda #$A0\n        sta $D3E0 - $80, x\n        sta $0400+40*24+39-$80+1, y     ; incrementing rower, y finishes with value $80\n        sta $0400+40*24-$7B-1, x        ; decrementing rower, x finishes with value $7b\n        adc ov\n        sta ov\n        dex\n        iny\n        bmi *\n        bcc loop\n        jmp scroll\nend:\n\n\nhex\n\n\\ set the following flag to true for more verbose output; this may\n\\ allow you to tell which test caused your system to hang.\nvariable verbose\n   false verbose !\n\\   true verbose !\n\n: empty-stack   \\ ( ... -- ) empty stack: handles underflowed stack too.\n   depth ?dup if dup 0< if negate 0 do 0 loop else 0 do drop loop then then ;\n\nvariable #errors 0 #errors !\n\n: error      \\ ( c-addr u -- ) display an error message followed by\n      \\ the line that had the error.\n   cr type source type       \\ display line corresponding to error\n   empty-stack               \\ throw away every thing else\n   #errors @ 1 + #errors !\n\\   quit  \\ *** uncomment this line to quit on an error\n;\n\nvariable actual-depth         \\ stack record\ncreate actual-results 20 cells allot\n\n: t{      \\ ( -- ) syntactic sugar.\n   ;\n\n: ->      \\ ( ... -- ) record depth and content of stack.\n   depth dup actual-depth !      \\ record depth\n   ?dup if            \\ if there is something on stack\n      0 do actual-results i cells + ! loop \\ save them\n   then ;\n\n: }t      \\ ( ... -- ) compare stack (expected) contents with saved\n      \\ (actual) contents.\n   depth actual-depth @ = if      \\ if depths match\n      depth ?dup if         \\ if there is something on the stack\n         0  do            \\ for each stack item\n           actual-results i cells + @   \\ compare actual with expected\n           = 0= if s\" incorrect result: \" error leave then\n         loop\n      then\n   else               \\ depth mismatch\n      s\" wrong number of results: \" error\n   then ;\n\n: testing   \\ ( -- ) talking comment.\n  source verbose @\n   if dup >r type cr r> >in !\n   else >in ! drop [char] * emit\n   then ;\n---------------\n\n   \\ From: John Hayes S1I\n\\ Subject: tester.fr\n\\ Date: Mon, 27 Nov 95 13:10:09 PST\n\n\\ (C) 1995 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY\n\\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.\n\\ VERSION 1.2\n\n\\ 24/11/2015 Replaced Core Ext word <> with = 0=\n\\ 31/3/2015 Variable #ERRORS added and incremented for each error reported.\n\\ 22/1/09 The words { and } have been changed to T{ and }T respectively to\n\\ agree with the Forth 200X file ttester.fs. This avoids clashes with\n\\ locals using { ... } and the FSL use of }\n\nHEX\n\n\\ SET THE FOLLOWING FLAG TO TRUE FOR MORE VERBOSE OUTPUT; THIS MAY\n\\ ALLOW YOU TO TELL WHICH TEST CAUSED YOUR SYSTEM TO HANG.\nVARIABLE VERBOSE\n   FALSE VERBOSE !\n\\   TRUE VERBOSE !\n\n: EMPTY-STACK   \\ ( ... -- ) EMPTY STACK: HANDLES UNDERFLOWED STACK TOO.\n   DEPTH ?DUP IF DUP 0< IF NEGATE 0 DO 0 LOOP ELSE 0 DO DROP LOOP THEN THEN ;\n\nVARIABLE #ERRORS 0 #ERRORS !\n\n: ERROR      \\ ( C-ADDR U -- ) DISPLAY AN ERROR MESSAGE FOLLOWED BY\n      \\ THE LINE THAT HAD THE ERROR.\n   CR TYPE SOURCE TYPE       \\ DISPLAY LINE CORRESPONDING TO ERROR\n   EMPTY-STACK               \\ THROW AWAY EVERY THING ELSE\n   #ERRORS @ 1 + #ERRORS !\n\\   QUIT  \\ *** Uncomment this line to QUIT on an error\n;\n\nVARIABLE ACTUAL-DEPTH         \\ STACK RECORD\nCREATE ACTUAL-RESULTS 20 CELLS ALLOT\n\n: T{      \\ ( -- ) SYNTACTIC SUGAR.\n   ;\n\n: ->      \\ ( ... -- ) RECORD DEPTH AND CONTENT OF STACK.\n   DEPTH DUP ACTUAL-DEPTH !      \\ RECORD DEPTH\n   ?DUP IF            \\ IF THERE IS SOMETHING ON STACK\n      0 DO ACTUAL-RESULTS I CELLS + ! LOOP \\ SAVE THEM\n   THEN ;\n\n: }T      \\ ( ... -- ) COMPARE STACK (EXPECTED) CONTENTS WITH SAVED\n      \\ (ACTUAL) CONTENTS.\n   DEPTH ACTUAL-DEPTH @ = IF      \\ IF DEPTHS MATCH\n      DEPTH ?DUP IF         \\ IF THERE IS SOMETHING ON THE STACK\n         0  DO            \\ FOR EACH STACK ITEM\n           ACTUAL-RESULTS I CELLS + @   \\ COMPARE ACTUAL WITH EXPECTED\n           = 0= IF S\" INCORRECT RESULT: \" ERROR LEAVE THEN\n         LOOP\n      THEN\n   ELSE               \\ DEPTH MISMATCH\n      S\" WRONG NUMBER OF RESULTS: \" ERROR\n   THEN ;\n\n: TESTING   \\ ( -- ) TALKING COMMENT.\n  SOURCE VERBOSE @\n   IF DUP >R TYPE CR R> >IN !\n   ELSE >IN ! DROP [CHAR] * EMIT\n   THEN ;\n\n\n    seek.vocabid   0       non-zero             N5\n%vocab      1   label       good\n            0   don't look  don't look\nsymlens C\nbit N2 V\n\n2020-06-22T18:50:04-04:00\nhow do I know when I'm done?\n\n\nwhat do we want to know for `(seek)` ?\n    does each symbol have vocabid %vocab bit set\n        if so does it match N5?\n        y = len\n    yes: nextchar\n    no:  nextsym\n    does each symbol have %vocab off and no vocabid?\n        if so is N5 = 0?\n        y = unchanged\n    yes: nextchar\n    no:  nextsym\n\n    length matches N5?\n\n\n`found?` works\n\n: found?   ( nfa -- xfa flag )\n  >n3 sym.len found00\n  bloomfilter cbit@\n  ?: (found?) false ;\n\n|n3     |nfa.seek        |                |\n|n4     |                |seek.length     |\n|n7     |                |nfa.sorted[0]   |\n|n8     |seek.length     |                |\n|reg    |entry           |exit            |f\n\ncode found00\n  iny,  n3 )y lda,  $0f # and,  asl,\n  n7 sta,  symtab 1+ lda,  n7 1+ sta,\n  brk,  n7 ldd@,  n7 st,  n8 ld,  n4 st,\n  nxt,  end-code\n\n|n3     |nfa.seek        |                |\n|n4     |                |seek.length     |\n|n7     |                |nfa.sorted[0]   |\n|n8     |seek.length     |                |\n|reg    |entry           |exit            |f\n\ncode (found?)   ( nfa -- xfa flag )\n  brk,  vocabs 1+ n6 set,\n:pfoundq01\n  n6 ldd@,  n5 st,  symnew n3 set,\n  n3 ldd@,  n3 st,  n3 ldd@,\n  '(seek) ext,  n7 ld,  n3 st,  n3 ldd@,\n  '(seek) ext,\npfoundq\n    brk\n    .byt set | N6\n    .word uservocabs+1                  ; first vocab\npfoundq01\n    .byt ldd | N6\n    .byt st  | N5                       ; get vocabid\n    .byt set | N3\n    .word usersymnew\n    .byt ldd | N3\n    .byt st  | N3\n    .byt ldd | N3                       ; N3=symnew+2  search unsorted until 0= or symtail\n;---\n    .byt ext\n    .word pseek\n    .byt ld  | N7\n    .byt st  | N3\n    .byt ext                            ; if we're still here, we haven't exited\n    .word pseek                         ; search sorted until 0= or len>seeklen(n4)\n;---\n    .byt ld  | N5                       ; get vocabid\n    .byt bnz  , <(pfoundq01-*-2)        ; until last vocab\n    .byt push                           ; nay! denied! Dave's not here man. not found.\n    .byt nxt                            ; ( nfa 0 )\n\n\n\n\n\n\n\n\n\n\n\n\ncode (seek)   ( nfa -- xfa flag )\n\nfnord works\n\n( \"input stream\" n3=registers A=registers ; stack before n1 u -- after n1+u ; n3=nfa++ )\n\neditor commands\nSTOP-F foto\nSTOP-\nSTOP-H hunt for text.\n    update; clear screen;\n    display search text;\n     call expect; set search text; any non-blank is or-space\n    perform search; edit next result\n\n\n\n\n\nn3\n    sym0\n    symlen\n    symstrand\n    symcopy\n    sym+\n    (!symtab)\n    !symtab\n    bloom#\n    (>name)\n    (seek)\n    immedornot\n    (found?)\n    found?\n    (create)\n    :willitblend?\n    :fnorditude\n    :sosorted\n    :soscrambled\n\nhttps://twitter.com/AusterePatriot/with_replies\nhttps://twitter.com/SonicDeanBoom\n\nApp frameworky stuff:\n\n:multitasking:\nOne thing you could do with the return stack is chop it up into chunks for each\ntask, in a multitasking environment.  The multitasker could switch contexts in\neach interrupt.  Given N tasks, each receives 1/N of 6502 time.\n:card:\nscreen is elevated to a datatype called 'card' with these characteristics:\n    1) top line is visible index\n    2) index-cache ( -- blk ) \\ speeds up multiple index searches\n    3) code may CRUD cards\n        a) create - block\n        b) read - block\n        c) update - update\n        d) delete - clean (blank screen remover)\n    4) cards are appended to the tail of vmbuf\n    5) 'visible computing' - operations (may) occur onscreen i.e. sorts, searches...\n        a) editing on does the trick\n:spreadsheet:\nCell functionality, background tasks to search for a card\n    2) input - receive text from a screen area\n    3) paint - general output,\n        : stamp ( col row wid hgt == ) ( %or-bool -- ) <builds does>\n    4) plot - vertical horizontal bars lines quarterblock\n    1) locate\n        : .! ( 0..999 -- ) \\ reposition the cursor\n        : .@ ( -- 0..999 ) \\ read the cursor, suitable for 40/mod\n    ; handle tos\n    stx current-data-stack-ptr\n    tsx\n    stx current-return-stack-ptr\n    ldx task's-return-stack-ptr\n    txs\n    ldx task's-data-stack-ptr\n\n  0000                              0400          1AB6\n--------------------------------------------------------------------------\n! zeropage ! stack ! tape buffers ! PETTIL core ! ~~ available memory ~~ >\n--------------------------------------------------------------------------\n\n     50FE    5100     5500     6647     6649      6800           8000\n-----------------------------------------------------------------\n~~ > vmbuf ! blkbuf ! symtab ! symnew ! symtail ! PETTIL studio !\n-----------------------------------------------------------------\n\nrelocating load\"\n\nVERIFY\"\n    ( relocating?)\n    ( ignoring load address?)\n    compares current vmbuf to file,\nSAVE\"\n    drops the whole vmbuf\n\nbk .disp1  ;dis 1\nbk .disp2  ;dis 2\nbk .disp3  ;dis 3\nbk .nexto  ;dis 4\nbk .exit   ;dis 5\nbk .foto\ncommand 6 \"scrsh \\\"tmp/foto\\\" 2;g\"\nbk .restart\nbk .plugh\nbk .xyzzy\n\nkeybuf load\"pettil.prg4\",9\\x0drun\\x0d\n\nEDIT\n    ; U uppercase/graphics   ~todo more editor ideas\n    ; M mixed upper/lowercase\n    ; F foto\n    ;\" : :editfind  ( -- ) update .clr .\" enter string to find\" home sib 80 expect\n    ;        (editfind) ;  \\ loads screen and locates cursor\n    ; N next found\n    ; B find backwards\n\n\nYou might think that programming a computer is hard.  Lots of people want you to\nthink that.  It doesn't matter.  After you try this, you won't believe it.  If I\nwere given the opportunity to go back to 1974 and talk to my 12 year old self\nabout computers for an hour, and leave an artifact behind, this is what that\ntalk, and the object, would look like.\n\nproject milestones\nnative development\n    fluid source and binary save/load on the PET\n    native words `load\"` `save\"` `verify\"`\n\nKEEP\nThe notion is you don't need to write applications (yet) if you already have a\nPET.  The Macintosh continued this idea, by providing essential functionality\nfor the human to replace paper and pencil systems.  The computer assists you in\nremembering and organizing and planning which are (past, now, next) .  Some\nareas I can make personal improvements are health, diet, and budget.  Franklin\nDaytimers became the Hipster PDA, and both of those communities can provide\nplenty of inspiration for our forms.  This is Forth, a very DIY environment.\nWe'll use the screen editor to copy and modify previous screens as templates,\nwith an eye toward future UI improvements.  Nobody wants to walk around with a\nPET slung over their shoulder in a bjorn wrap, but these panels are pretty\nwieldy.  We can put them online, attach them to emails or instant messages, and\nuse panels to build TiddlyWiki documentation projects.\n\nAny GTD system worth its salt has ubiquity built in.  Google Keep is our web\nstash for reference slides.  Amazon Echo is a voice inbox.  Gmail, and pencil\nand paper and smartphone extend our reach further.\n\n\ngoogle keep these panels\npanel - a screenshot - automate these\nslide - a panel with attitude and a message\n\nVICE\nthe effect:  each time the user types STOP-X , a screenshot is written to\na file on the host machine\n\n\n\nMOJO\n\nPROJ - title of each project\n    POMS - # of pomodoros used\n    VIDS - # of videos produced\n    APPS - # of programs produced\n    DOCS - documentation\n    GAME - title of each game (40 max)\n    DRAW - where the art can be located\n    CODE - where are the source code files\n\n    * CODE is a side-effect of making other things, like videos.  Thinking and\n    talking and writing in Forth code is an intuitive and natural process, like\n    operating a calculator or microwave oven.\n\n    * text adventure\n    * kickstarter pitch video\n    * some episodes in the can\n    * some games in the can\n    * some games on the bench\n\n\n[still burst] We produce a production. The product of the process is a set of\n[ship] completed digital artifacts. In that sense, creative work is a lot like\noperating on produce. [tomatoes, avocados]. But Michaelangelo was more than just\na turtle and it would be unfair to call him a mediocre house painter for not\nproducing.  The quality is the only important thing.  Quality, price and supply\nhave always had a strange relationship with art.  For the digital artifacts\n(\"programs\") which we will create, we will consider any quantifiable aspects\nthat present themselves as objectively measurable and useful.  Execution speed,\nsize in bytes, compilation time, etc...\n\nGood, Fast, Tiny.  Pick any two.  This is how I see the quality triangle for\nPETTIL.\n\nFAST\nYou can't go any faster than hand-optimized native 6502 code.  That\nis the theoretical limit.  But as a systems tool, the goal is to give as much\npower as possible to the programmer.  Taking less memory and running quickly\nare important even (perhaps espeically) in crafting developer tools.\n\n            |\\      fast\n            |  \\    (6502)\n  good      |    \\\n(Forth)     |      \\\n            |        \\\n            |        /\n            |      /\n            |    /    tiny\n            |  /     (Sweet16)\n            |/\n\nTINY\nPETTIL includes Sweet16, a gem from the Apple I.  Doing 16-bit math in 6502\nalways takes about 4x as many instructions as you want it to.   Sweet16 emulates\nan 1802 processor,in about 300 bytes of 6502 code. This code is well worth\nstudying to improve your 6502 mojo. The 1802 was a different computer chip\navailable at the time. Speed of execution is the tradeoff for using Sweet16 in\nyour code, but it's fun, and very, very tiny.  PETTIL adds four extra \"opcodes\"\nto Wozniak's code, for pulling and pushing to the Forth data stack, invoking\nnative 6502 subroutines without dismantling the Sweet16 stack frame, and a\none-byte `nxt` to save room at the end of Forth words written as Sweet16\nprimitives.\n\n        GOOD (Forth)\n      ________\n      \\      /\n       \\    /   TINY\nFAST    \\  /    (Sweet16)\n(6502)   \\/\n\nFor playing Code Golf, we will be concerned with mostly size, but also speed.\nFor playing Benchmark Drag Races, only speed counts.\n\n\n\nGAME\nstory arc\n\n|now              |then            |h\n|haste            |pokey           |\n|mostly interiors |outside a lot   |\n|lots of clocks   |no clocks       |\n|alarms reminders |lunar phases    |\n|no turn clock    |turn clock      |\n|awake            |dream           |\n|simple puzzles   |complex puzzles |\n|plentiful H2O    |only the pool   |\n\n!!now\n* mail an item to yourself in the past by put it in mailbox\n* mailbox is where your mom sends packages\n* mailbox requires a key\n* apartment requires a key\n* pentumnavigate downtown DC on a bicycle\n* reach the top of the dodecahedron (the \"wumpus face\")\n* mail yourself a package\n\n!!then\n* look through periscope from underwater to escape officer schrodinger\n** (flashlight lens; polaris nuclear submarine; chain lock)\n* solve pacman maze\n* return three books\n* check out four books\n* open the drain on the pool\n*\n\n|era |item               |location      |notes |h\n|now |Metrorail          |McLean station|required for transportation |\n|now |battery            |              |always start with dead batteries |\n|now |bulb               |              |if you drop the flashlight |\n|now |PET                |Your apartment| |\n|now |mailbox            |Your apartment|key required |\n|now |No Sea Monkeys     |mailbox       |sent to you by mom if you order Sea Monkeys |\n|now |VIC & Mac          |mailbox       |sent to you by mom if you check out books |\n|then|flashlight         |Your house    |in pillow with comic book  |\n|then|bicycle            |Your house    |required for transportation |\n\n|then|combo chain lock   |Your house    |need combination (time on clock) |\n|then|Archie comic       |Bobby's house |Hypno-coin ad |\n|then|Richie Rich comic  |Billy Saffel  |Hovercraft ad |\n|then|Iron Man comic     |              |Polaris nuclear submarine ad |\n|then|Aquaman comic      |              |Sea Monkeys ad |\n|then|Superman comic     |inside pillow |Weather Balloon ad |\n|then|Wonder Woman comic |Bobby's house |Self Defense ad |\n|then|Batman comic       |              |Xray-speX ad |\n|then|coupon             |inside comic  |\n|then|mailbox            |Your house    |no key required |\n|then|screem             |Your house    |required for hatching Sea Monkeys in sub |\n\n\nPresent Day\nWake up in your apartment.  Glimpse the clock.  You're late! You're in a hurry.\nIt looks\nlike ain.  Collect a few necessary items and leave the cozy apartment sooner\nto avoid the various  disasters that will befall your commute.\n    * turnstile (this one is unavoidable -- need \"farecard\")\n    * rain (need \"umbrella\")\n    * farecard low (need \"cash\")\n    * package outside (need \"mailbox key\")\n    * returning after work (need \"apartment key\")\n    * failing to bring key (need \"phone\")\n    * want to stay awake? (need \"coffee\")\n    ** you can't board the train with coffee.  It's your favorite mug.\n    * water is plentiful.\n    ** there is a shower, and a bathroom sink\n    **  there is running water in the kitchen.\n\nEntering the tunnel between East Falls Church and Ballston, you will fall asleep\nunless you drank coffee.  Every eight turns during your dream, the bell on the\ncourt house clock will \"ding\" and when the 35th turn occurs, you will have two\nmore turns before waking up in the Metro car, in the tunnel beneath the Potomac.\n\nHow I wish I could say I do things: PROCESS\n\nIDEA\nFirst, have an idea. Imagine something cool.  Now imagine doing it with a PET.\n\n\"I will make a game like star trader but played inside cartoon ant farms\"\n\nWrite the idea down.  Make some screens.  Draw, scribble, sketch.  Play with\ndifferent amounts of time for this part of your projects.  Go to inspiring\nplaces if that helps.  Pure creativity here.  Show your user what it will be.\nStarting a Tiddlywiki is useful for larger projects.\n\nDONE: Put the idea on the PET (text, files, screenshot).\n\n\nDRAW\nNext, draw screens, describe gameplay, write rules, make character sets and\nsprites, other detailed animations, high level game design, scoring rules, big\nand small parts.  Compose your music.  Roleplay out your user interface.  You\nmight want to finish, or you might want to make just enough to start the next\nphase.\n\nDONE: All text and art are on the PET.\n\nCODE\nThis is where Yoda talks to R2D2.  You get to make up your own words as you\ngo along, which makes things easy to remember, if you make up the right words.\n\nDONE: Code works on the PET.  You won, again!\n\n\nUSER: this person can see the screen and touch the keyboard\nOPER: this person has read the manual and knows how to recover from issues\n????: this person understands how the code works\n????: this person wrote the code\n\n~todo: dump-format features\n    enable/disable characters on right\n    monitor prefix strings \".:  \"\n    ( from howmany ) disassembler\n    integration with monitor\n    integration with PicChip\n\n\n/* FNORDINDUCTION\n    len/strand n4 off               \\ 00/00\n\n: fnorditation   ( -- )\n    sym0 n4 off\n    begin\n        begin\n            willitblend?\n            !kept?                      \\ copy sorted names for len/strand=n4\n        until\n        <n3 symnew @ <\n    while\n        <n3 <n8                         \\ TOS is next sorted len/strand\n        begin\n            symnew @ n3 !\n            begin\n                willitblend?\n                <n3 @ 0=\n            until\n            strand+ ext,   <n4 tos =\n        until\n    repeat ;\n\n```\n                                        writes\n    tos     fnord.cfa                   <-- cut dictionary here\n    n0                                  scratch\n    n1                                  scratch\n    n2      studio                      us\n    n3      nfa                         sym0\n    n4      len/strand (current)        us\n    n5      pad                         sys\n    n6      fnord.cfa                   arg\n    n7      (seek)'s sought-after nfa   us\n    n8      len/strand (n3)             sym.len sym.strand\n\ncode fnordinduction   ( cfa pad 'studio -- pad size )\n    tos ldd, n2 st,  pull, n5 st,\n    pull, n6 st,  acc sub, n4 st,\n    symnew tos set,  tos ldd,  tos st,\n:sosorted\n    'willitblend? bs,\n    'firstpass bz,                      \\ copy sorted names for len/strand=n4\n    n3 ld,  tos cpr,  'fnordout bp,     \\ while  n3 < symnew\n    tos ld,  n0 st,\n    n3 ld, push,  n8 ld, push,          \\ TOS is next sorted len/strand\n:soscrambled\n    n0 ld,  n3 st,                      \\ symnew\n:howaboutthis\n    'willitblend? bs,\n    n3 ldd, :howaboutthis bnz,\n    'strand+ ext,\n       <n4 tos =\n    'soscrambled bnz,\n    tos ld, n8 st, pull, n3 st,\n    n0 ld, tos st,\n    'sosorted br,\n:fnordout\n    nxt,\n```\n*/\n                                        ; it was `forget`'s job to qualify `cfa`\n/* WILLITBLEND?\ntags: nosymbol\n\ncode willitblend?\n    sym.strand_s ext,  n3 ld, n0 st,\n    n0 popd, n4 cpr,  'willitblend01 bp,\n    n2 cpr, 'willitblend01 bm,\n    n4 ld, n8 cpr, 'willitblend01 bnz,\n    'sym.copy ext,\n:willitblend01\n    'sym+ ext,  rs,\n\ncode fnordinduction   ( cfa pad 'studio -- pad size )\n    tos ldd, n2 st,  pull, n5 st,\n    pull, n6 st,  acc sub, n4 st,\n    symnew tos set,  tos ldd,  tos st,\n:sosorted\n    'willitblend? bs,\n    'firstpass bz,                      \\ copy sorted names for len/strand=n4\n    n3 ld,  tos cpr,  'fnordout bp,     \\ while  n3 < symnew\n    tos ld,  n0 st,\n    n3 ld, push,  n8 ld, push,          \\ TOS is next sorted len/strand\n:soscrambled\n    n0 ld,  n3 st,                      \\ symnew\n:howaboutthis\n    'willitblend? bs,\n    n3 ldd, :howaboutthis bnz,\n    'strand+ ext,\n       <n4 tos =\n    'soscrambled bnz,\n    tos ld, n8 st, pull, n3 st,\n    n0 ld, tos st,\n    'sosorted br,\n:fnordout\n    nxt,\n\n*/\n\n\n\nBadges\n    [ ] greybeard badge - I used a PET in the 20th century\n    [ ] owner badge - I emailed a screen shot of my zip code on a PET to pettilmobile@gmail.com\n    [ ] programmer badge - I tweeted a screen of working PETTIL code to @PETTILmobile\n\nTIME\nHow do I know when I have won?  describe the realized objective for us,\n    in the present tense\nWhat is this feat called?\n    usually it's the word name\n\n\n\nHow PETTIL uses xa65 comments:\n\n// temporary comments for myself during coding\n; 6502 code comment\n\\ forth code comment\n( forth stack diagram )\n/* TiddlyWiki block comments */\n\n\ngot any 0/0 ??\n\n    push 01/00 fake N8\n    go fish in the sequential pile\n\n        that's not it\n        that's not it\n        nope that's not it\n        that's not it either\n        nope that's not it\n        end of list!\n\n            hey that's a 0/0\n\n            bump N4L/N4H to 01/00\n                pop\n            grab & ?keep all sorted until N8 <> TOS\n                push N8\n    <---- repeat <----\n\n\nplants harvests plants\n\n\n~todo:\n\n    n3  current nfa\n    n4  L=len/H=chain iterator.  We are done at 32/16\n    n5  copy of n3 nfa where we pick up\n    n6  copy of n8     after n4 len/chain gets here\n    n7\n    n8  current L=len/H=chain\n\ncode (fnord)\n    $F000 n4 set,                       \\ initialize\n    symtab n3 set,  n3 ldd@,            \\ get symtab\n    34 n3 set,  n3 add,  n3 st,         \\ n3 = sym0\n\nbegin\n    n4 inr,                             \\ length 1+!\n    (fnordpine) ext,\n\n(fnordpine)\n    n4 lda,  32 # eor,\n    0= if,  n4 sta,  n4 1+ inc,  then,\n    rts,\n\n\n\n    e=getrec(sym0)\n    begin\n        if (n4 == n8)  \\ n4=[0..F/1..31] iterator ; n8=next sorted\n        then            \\ we are in sorted symbols\n            if (cfa < newdp) or (cfa > user0studio)\n            then        \\ we are definitely keeping it\n                ?chksmudge \\ fix smudgery on this word, if smudged\n                (fnordpostipsokeepopoughkeepsie)\n(fnordpostipsokeepoughkeepsie) \\ copy the symbol\n            endif\n        else            \\ handle unsorted symbols\n            n8 @ n6 !\n            n3 @ n5 !   \\ bookmark our place in sorted list\n            symnew @ n3 !   \\ start symnew\n\n        endif\n        e=getrec(sym+)\n    until (n3 == symnew)\n    '(fnordify) ext,                    \\ (n3) get chain/length to n8h, n8l\n\n\n    bz , <(fnord01-*+1)\n\n:(fnordzilla)\n\n\n\ncode (fnordify)\n    jsr symlens\n    iny\n    lda #$0F\n    and (R0L+2*N3),y\n    sta R0L+2*N8+1              ; N8L = length; N8H = chain\n    rts\n\n* SAVE\" LOAD\" VERIFY\"\n* reformat comments as tiddlers\n* tiddler transformer\n** sed formatting\n** add \">> next\", \"prev <<\" controls\n** blend in register and stack diagrams\n* conspiracy spreadsheet\n* features writeup:\n** symbol table\n** locals and conspiracies\n** direct threaded inner interpreter\n** multiple list dictionary structure\n**\n* applications roadmap:\n** PORTIL PETTIL metacompiler\n** PASTEL\n** PERTURB 8-bit test driven development automation\n** PETTILmenu hypertext menuing system (wumpuses, screens, branches, nodes, and leaves )\n** PETTILdraw screen, animation, character and sprite editor\n** PETTILstudio interpreter, compiler, assembler, editor, utilities, dev environment\n** PETTILteco TECO implemented in Forth on a PET\n** PETTILtrek networked Star Trek supergame with 8-bit client\n** PETTILword hypertext processor for making PETTILmenu content\n** PETTILcook PETTILfood PETTILshop; nutrition, scheduling and cost database\n** redirecting DP\n*** use A/B buffered output for PORTIL (2048 bytes total object code buffered output)\n*** cmove those into vmbuf\n*** block ranges addr bsave\" filename\"\n\n\n\nvariable x \\ 0..79\nvariable y \\ 0..49\n: me   x @ y @ 40* 2* +\n       buffer + >n4 c@ ;\n: nw <n4 81 - c@ ;  : n <n4 80 - c@ ;\n: nw <n4 79 - c@ ;  : w <n4 1-   c@ ;\n: sw <n4 79 + c@ ;  : e <n4 1+   c@ ;\n: se <n4 81 + c@ ;  : s <n4 80 + c@ ;\n: worry   ( invert displayed cell ) ;\n: cell.next ( -- )\n    nw n ne\n      +  +\n    w  me e\n      +  +\n    sw  s se\n    + + + +\n    3 =  me xor\n    dup  if  me worry  then ;\n\n\\ put code in registers, jsr N2?\nN2  clc ldx_*#\nN3  81  adc_abs,x\nN4  _________\nN5  rts\n\n\n\n\n\n\n (\nfast NEXT, fast EXIT)\n\n                sym+    sym.len     (fnord)\nN0\nN1\nN3      nfa       .         .           .\nN4L                                 seek len\nN4H                                 seek thread\n\n\ntop tested symtab sorting loop\n\nlook at N4L, N4H handling\n\n\nwrite passbits for each change to len where we find a thing, on thread=0 pass\n\n\nsimplest is brute force each and every\n\n:loopstart\n    bump the len\n    if len = 32\n        bump the thread\n        reset len = 0\n        loopstart\n\n\\ copy the name to pad if it is below forget-to-cfa/above studio\n\\ if we find a smudge, call the unsmudge-resolve-it for this name and clones\n     \\ scan from the smudged to the end\n    \\ keep track of the highest NFA that is also < forget-to-cfa\n    \\ that's the one you unsmudge\n    \\ get back to it\n\n\nn3.cfa - edgecfa\n\n: ?copyname\nthread/len off\nbegin\n    len++\n    len 32 =\n    if\n        thread++\n        thread 16 =\n        ?exit\n    then\n    sym.len \\ also set n8h = n3.thread\n    n8 n4 =\n\nagain\nlen 32 = while\n    len off\n    thread 1+!\n    thread 16 = ?exit\nrepeat\n    begin\n        this.name.len.thread = N4?\n    while\n        ?copyname\n    repeat\n\n\n\n    exit if done\n\n\n\nN4 = 00 00\nbegin\n    N4 = 01 00\n    lda N4\n    sta N4\n    cmp #$20        ; max len reached?\n    and #$1F\n    sta N4\n    lda N4+1\n    adc #0          ; +1 when we wrap\n    sta N4+1\n    and #$0F\n    eor N4+1        ; set Z flag\n    rts\n\nawk -v RS='\\\\*/' '\n  !found && sub(/\\/\\*.*/, \"/* new comment \") {found = 1}\n  {printf \"%s\", $0 RT}' file.c\n\nfind src/ -name \"*.a65\" \\\n| xargs -I '{}' \\\n awk -e '/^\\/\\*/,/^\\*\\// {print}' '{}' \\\n | sed 's/^\\/\\\\*/title:/'\n | egrep ^\\/\\\\*\\\n\n\nawk /start-pattern/,/end-pattern/ {\n  print\n}\n\nforth\n     0 @ 0= 0< 0> @+ 0<> pad prev pick\n    pause @swap! petscii\"\n\n     ! 1 !+ 1- 1+ 1+!\n    1-! and abs quit abort allot again\n    query 1+under 1-under\n\n     \" 2 2-\n    2+ 2/ 2* 2! 2@ bl b< b> r> r@ 2>r 2+!\n    2r@ 2r> blk bye rp0 rot rnd rp! r>m\n    2off 2nip 2dup 2rot base blk@ roll\n    2drop 2over 2swap blank b/buf b/scr\n    block begin rdrop randu blkbuf random\n    rndmax rehash repeat 2+under 2-under\n    restart recurse between? benjamin\n    randmask rlencode rldecode 2constant\n    2variable\n\n     # 3 #> #s 3- 3+ c! c@ cr c,\n    3c@ 3c! c@+ c>s c!+ csp sp0 sa# scr sib\n    s>d sgn sp! sp@ #blk #out #voc 3dup\n    cinv coff copy cold code span swap sign\n    #line #blk! 3coff 3drop cbinv count\n    cbit! cbit@ cmove cjoin cswap case#\n    space state cursor cmove> csplit cmdoff\n    casbuf create symtab spaces studio\n    symnew 3-under current startup symtail\n    currname constant cconstant save-forth\n    save-buffers\n\n     4 $! $. $, dp d= d< d+ d-\n    d. do 40* dpl dup du< d>= d0= d2/ d2*\n    d.r tib ten tdp drv# drop dsub dabs\n    dmin dmax dump tuck true type then thru\n    $>pad 4drop dup>r depth does> third\n    $index 40/mod dpswap toggle decimal\n    dnegate dliteral definitions\n\n     5 u< u.\n    um* ud. u.r exit emit else edit ud.r\n    user erase eoscr under upper until\n    eighty expect ud/mod um/mod\n    update editing execute exists?\n    empty-buffers\n\n     6 fill fail file fence\n    forty false flush vmbuf vbufs\n    vdrop forget vidram vocabs vmdump\n    flipscr filename variable vocabulary\n    verify-buffers\n\n     ' 7 warm width wrap@\n    wrap! while words warning word-list\n\n     ( 8\n    hld hex xor xy@ (.@) here hold here<\n    xyzzy\n\n     9 i in if id. info index\n    interpret immediate\n\n     * : j */ */mod\n    jiffy@ jiffies\n\n     + ; [ +! key ['] +move\n    +loop +under\n\n     , < \\ <> <# lin load loop\n    list limit l/scr lower lbufs leave\n    <builds literal load-buffers\n\n     - = ] -5\n    -4 -3 -2 -1 -@ =r m* m/ m+ --> min max\n    m*/ mod mon m>r -rot =irq move -nulls\n    =cursor -trailing\n\n     . > ^ .r .\" .( .@ .s\n    .h >r .4h .dn .up .rt .lf .qt not nip\n    .clr .del .rvs .off >bit >pkt name\n    .home >name nminv name> negate number\n    newest nosymbol\n\n     / ? _ ?: or on ?do off\n    /mod ?dup ?key over ?exit ?pause ?stack\n    ?leave ?terminal\n\nassembler\n     0= 0< pop put pha, php, pla, plp,\n    poptwo pushya acc adc, and, asl, again,\n    brk, bit, rti, rts, rol, ror, begin,\n    repeat, # cs clc, cld, cli, clv, cmp,\n    cpx, cpy, sec, sed, sei, sbc, sta, stx,\n    sty, stackl stackh tos dex, dey, dec,\n    tax, tay, tsx, txa, txs, tya, then, up\n    eor, else, until, end-code vs while, x)\n    harvests ) )y ip if, inx, iny, inc, z\n    jsr, jmp, ;code ,x ,y lda, lsr, ldx,\n    ldy, mem n .a >= not next nop, ora,\n\neditor  p l n\n\n~todo:  label is at\n        dis   ( from size -- )\n        assembler `plants`\n\ntips: Dump the ROM with a VICE script alternating D and M commands\n\n0 PET #700251\nm 0 ff;m 100 1ff;m 200 279\n;m 27a 339;m 33a 3f9\nm 3fa 3ff\n;m 400 7fff\nm b000 bfff\nm c000 cfff\nm d000 dfff\nm e000 e7ff\nm f000 ffff\n\n\n;--------------------------------------------------------------\n/*\nif 0\nname=SBUFS\nstack=( -- )\ntags=vm,i/o,kernel\nsave those buffers\n\n* subtract `vmbuf` from `blkbuf` to get buffer size\n* store negated buffer size at `vmbuf`, replacing the null-null tail\n* tape or disk primitives to save it\n* patterned after TIM\n** to device `drv#`  `FA`\n** AS A PRG,W file type  `SA=0`\n** `filename` `FNLEN` `FNADR`\n** from `vmbuf` to `blkbuf`\n\n```\n: save-buffers   ( -- )\n    vmbuf @ blkbuf - vmbuf !\n    ;\n\n\n: save-buffers   ( -- )\n    (prgfile)\n    vmbuf @ dup>r blkbuf - r> !\n    ;\n\n```\n   endif\n   include \"align.i65\"\n_sbufs\n    jsr enter\n#include \"page.i65\"\n    .word _pprgfile             ; set up z.p. device, secondary, filename\n#include \"page.i65\"\n    .word vmbuf\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word duptor\n#include \"page.i65\"\n    .word blkbuf\n#include \"page.i65\"\n    .word minus                 ; negative buffer size\n#include \"page.i65\"\n    .word rfetch\n#include \"page.i65\"\n    .word store\n#include \"parm.i65\"\n    .word blit\n    .byt <(next-1)\n#include \"pad.i65\"\n    .word rexchg\n#include \"page.i65\"\n    .word blkbuf\n#include \"page.i65\"\n    .word twotor\n#include \"past.i65\"\n    .word SETEALSTAL\n\nSETEALSTAL\nF66E  68          PLA\nF66F  85 C9       STA $C9\nF671  68          PLA\nF672  85 CA       STA $CA\nF674  68          PLA\nF675  85 FB       STA $FB\nF677  68          PLA\nF678  85 FC       STA $FC\nF67A  60          RTS\n\n    .word _pprgfile             ; set up z.p. device, secondary, filename\n    .word vmbuf\n    .word fetch\n    .word duptor\n    .word blkbuf\n    .word minus                 ; negative buffer size\n    .word rfetch\n    .word store\n    .word blit\n    .byt <(next-1)\n    .word rexchg\n    .word blkbuf\n    .word twotor\n    .word SETEALSTAL\n\n\n\n\n                  (prgfile) vmbuf  @      dup>r  blkbuf\n17E2        20 CA  10 D0 17 98  07 00 10 DE  08 EA 13 13\n       -    r@   !   'next-1    =r    blkbuf  2>r  SETEALSTAL\n17F0  09 18 12 D5  0F 2F 11 85  CB 08 EA 13  D5 08 6E F6\n      (saveprg) ;\n1800  7B 17 08 0E  1F 11 EA 13  98 07 00 10  13 09 98 07\n1810  D5 0F 1F 11  20 CA 10 D0  17 98 07 00  10 EA 13 2F\n1820  11 85 DC 08  D5 08 6E F6  7B 17 1F 11  20 CA 10 2F\n1830  11 9D D3 0F  D0 17 80 17  EA 13 8B 09  19 14 E4 0D\n1840  DE 08 AA 13  13 09 13 09  D3 13 02 13  85 17 86 15\n(C:$1850)\n\n\n\n                          ; ( R; EAL(C9) STAL(FB) )\nC9 EAL                          Tape End Addresses/End of Program\nFB STAL                         I/O Start Address\n\n#include \"page.i65\"\n    .word psaveprg\n#include \"past.i65\"\n    .word exit\n\n\nvmbuf\nblkbuf\n\n\nblurgh\n    // start/end are on return stack\n    jmp SETEALSTAL\n\n\n\ncallz\n    stx z\n    lda #>(spnext-1)\n    pha\n    lda #<(spnext-1)\n    pha\n    jmp next\n\nSETEALSTAL\nF66E  68          PLA\nF66F  85 C9       STA $C9\nF671  68          PLA\nF672  85 CA       STA $CA\nF674  68          PLA\nF675  85 FB       STA $FB\nF677  68          PLA\nF678  85 FC       STA $FC\nF67A  60          RTS\n\nset up file channel to device `(prgfile)`\ncall SETEALSTAL\n\n: save-buffers   ( -- )\n    (prg-file)\n    (vmbuf) next-1\n    >r 2>r\n    [ SETEALSTAL , ]\n    (saveprg) ;\n```\n_savebuffers\n    jsr enter\n    .word _pprgfile             ; set up z.p. device, secondary, filename\n    .word vmbuf\n    .word fetch\n    .word blkbuf\n    .word blit\n    .byt <(next-1)\n    .word tor\n    .word twotor\n    .word SETEALSTAL            ; invoke a ROM routine, RTS to NEXT\n    .word psaveprg\n    .word exit\n\nB4 TAPEID                       Tape buffer leading character (eg 1=PRG 2=DATA 3= 4=SEQ 5=EOT)\nC7 SAL                          pointer - tape buffer/screen scrolling\nD1 FNLEN                        Length of Current File Name\nD2 LA                           Current Logical File Number\nD3 SA                           Current Secondary Address\nD4 FA                           First Address (current device number)\nDA FNADR                        File Name Address\n\npfile\n    brk\n    .byt set | N0\n    .word userfilename\n    .byt ldd | N0               ; FILENAME\n    .byt st | N2                ; pointer to FILENAME.length (could be 0)\n    .byt bz , <(pfile01-*-2)\n    .byt ldi | N2\npfile01\n\n    .byt set | N1               ; N1 walks through FNLEN, LA, SA, FA on a PET\n    .word FNLEN\n    .byt sti | N1               ; set FNLEN ($D1)\n\n;    .byt set | N1\n;    .word LA\n    .byt sub | ACC              ; 0\n    .byt sti | N1               ; set LA ($D2)\n\n;    .byt set | N1\n;    .word SA\n    .byt ldd | N0               ; get SA#\n    .byt sti | N1               ; set SA ($D3)\n\n;    .byt set | N1\n;    .word FA\n    .byt ldd | N0               ; DRV#\n    .byt sti | N1               ; set FA ($D4)\n\n    .byt set | N1\n    .word FNADR\n    .byt ld | N2\n    .byt std | N1               ; set FNADR ($da)\n    .byt nxt\n\n\n\n\n: (prgfile)\n    sa# off  1 TAPEID c! (file) ;\n\n_pprgfile\n    jsr enter\n    .word sanum\n    .word off\n    .word one\n    .word blit                  ; ~ can remove this if using $f619\n    .byt TAPEID\n    .word cstore\n    .word pfile\n    .word exit\n\n\n\n#include \"page.i65\"\n    .word blkbuf\n#include \"page.i65\"\n    .word vmbuf\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word minus\n#include \"page.i65\"\n    .word vmbuf\n#include \"page.i65\"\n    .word store\n#include \"past.i65\"\n    .word exit\n*/\n--------------\n\n/*\n(C:$1132) d f6e3\n.C:f6e3  A5 D4       LDA $D4\n.C:f6e5  D0 05       BNE $F6EC          ; device 0?  (the keyboard? Suuuuure, Jan)\n.C:f6e7  A0 74       LDY #$74           ; ?DEVICE NOT PRESENT, BASIC crash\n.C:f6e9  4C AF F5    JMP $F5AF\n.C:f6ec  C9 03       CMP #$03           ; device 3? (let's save to the screen!  nahhhh)\n.C:f6ee  F0 F7       BEQ $F6E7\n.C:f6f0  90 50       BCC $F742          ; whew, made it.  okay tape or disk?\n.C:f6f2  A9 61       LDA #$61\n.C:f6f4  85 D3       STA $D3            ; SA\n.C:f6f6  A4 D1       LDY $D1            ; FNLEN length of current filename\n.C:f6f8  D0 03       BNE $F6FD\n.C:f6fa  4C 00 BF    JMP $BF00          ; SAVE\"\",8 ?? haha good one, user.  We'll call that one \"?SYNTAX ERROR\"\n.C:f6fd  20 A5 F4    JSR $F4A5          ; send name string to IEEE buss\n.C:f700  20 D5 F0    JSR $F0D5          ; send \"untalk\" or \"unlisten\"\n.C:f703  A5 D3       LDA $D3            ; secondary address\n.C:f705  20 43 F1    JSR $F143          ; send one char and clear ATN\n.C:f708  A0 00       LDY #$00\n.C:f70a  20 BB FB    JSR $FBBB          ; puts (FB) into (C7) - header pointer back to start of buffer\n.C:f70d  A5 C7       LDA $C7            ; SAL pointer - tape buffer/screen scrolling\n                                ;\n#define SAL         $C7\n\n.C:f70f  20 9E F1    JSR $F19E\n.C:f712  A5 C8       LDA $C8\n.C:f714  20 9E F1    JSR $F19E\n.C:f717  20 0B FD    JSR $FD0B\n.C:f71a  F0 10       BEQ $F72C\n\n*/\n\n: !symtab   ( -- )                      \\\n    bloom 8 erase  symtab @.rewind           \\ reset bloom filter and rewind\n    bloom 8 erase  sym.rewind           \\ reset bloom filter and rewind\n    symtab @ bl\n    begin\n        sym.len <\n        if\n            n3> !+\n        then\n        bloomfilter cbit!\n        sym.len\n        3 sym+\n        sym.len 0=\n    until (!symtab) ;\n\n\n\nmojo:\nPeople might see a beige box with a fuzzy ancient tube display and maybe\nsome retrofuturist design elements.  I see old friends, and old rivals.\nThere were dozens [wikipedia CPU chart|https://en.wikipedia.org/wiki/Microprocessor_chronology#1970s]\n\n\ncode:\n`(fnord)`\n\n`cmdin cmdout`\n    connect sequential I/O streams to devices, to include writing sequential\n    tape/disk files, console input from tape/disk, printers, modems, etc...\n\n`code`\n    when creating a duplicate symbol, immediately smudge prior nfa.  The effect\n    will be implicit recursion, if that were a thing.\n\n=======\n\n`draw`\n    lightweight, has `interpret` with a shorter words list, enhanced\n    screen editor with PicChip capabilities, virtual memory. Lacks compiler,\n    assembler, `create`. The first of the PORTIL remixes\n\ncore:\nsave-buffers    (disk)replace or (tape)append using most recent `filename`\nload-buffers    relocating loader\nverify-buffers  because Nothing Verifies Bad Data In Z-80 Computers\n\ndraw:\nsave\" filename\" ( -- )             \\ writes `vmbuf` to current device\nload\" filename\"                    \\ load-buffers with a name\nverify\" filename\"\n\n\n\n\n\norder:\n\nFAST\n1. Grok every 6502 opcode.  Be able to recite what it does, and how many bytes\n  and clock cycles it requires for all addressing  modes.  There are only 56.\n  It's like memorizing the United States, its territories and their capitals,\n  but with reasons for the design choices that make more sense.\n\nTINY\n2. Take a look at Sweet16, an emulator to make a PET 6502 pretend it has a\n  CPU like an 1802.  Sweet16 is a great way to save space when it comes to\n  pointers and 16-bit math.  The decoder comes at a price of 300 bytes and\n  it slows things down. But it saves many times its weight in memory and is\n  also my favorite Woz thing.\nGOOD\n3. PETTIL blends the Forth-83 standard in with 6502 and Sweet16, providing\n  as much access to all the PET's hardware and ROM routines as would fit.\n  PETTIL uses postfix notation, which is like speaking in yoda.\n\nGOLF\n4. It is an objective to tighten and optimize PETTIL far beyond what is usual\n  in an ordinary software project.  Code that makes the PET do the least wins,\n  as measured in bytes, and one microsecond clock cycles.  A code golf log\n  is maintained since 2020-01-01.  As primary author, I am the final arbiter of\n  what goes into PETTIL.  All attention and contributions are welcome to make\n  the code faster and tinier.\n\n\n\nuse cases:\nsay you want to extend the assembler\n`assembler definitions`  ok  \\\n\n\nadd errors \"6502 ASSEMBLER ONLY\" \"SWEET16 ASSEMBLER ONLY\"\nhave `brk,` turn on Sweet16 flag, and `rtn,` or `nxt,` turns it off\n\n\nfile:///home/chitselb/pettil/doc/tiddlypettil.html#%2B\n\n\n300 B9 00 02             LDA IN, Y       Get a char.\n303 C9 CD                CMP \"M\"         \"M\" for move.\n305 D0 09                BNE NOMOVE         No, skip move.\n307 20 00 08             JSR SW16           Yes, call SWEET16\n30A 41         MLOOP     LD  @R1         R1 holds source address\n30B 52                   ST  @R2         R2 holds dest. address\n30C F3                   DCR R3          Decrement length.\n30D 07 FB                BNZ MLOOP          Loop until done.\n30F 00                   RTN             Return to 6502 mode.\n310 C9 C5      NOMOVE    CMP \"E\"         \"E\" char?\n312 D0 13                BEQ EXIT           Yes, exit.\n\n    in ,y lda,  \"M\" # cmp,\n    if,  brk,   label mloop\n        r1 ld@,  r2 st@,  r3 dcr,\n        mloop bnz,  rtn,  then,\n    \"E\" # cmp,  exit beq,\n\n(unremember)\n\n: eh?  ( a b -- flag !flag ) <> dup 0= ;\n\n: (unremember)\n    n4 off\n    begin\n        n4 1+!  <n4 bl eh?\n        if  n4 coff  n4 1+\n            dup 1+! c@ $10 eh?\n        then\n    while\n        ?copy_sorted\n        begin\n            merge_unsorted\n\n            check cfa\n            smudgery\n            copy\n    repeat\n    ( pad size )\n    !symtab ;\n\n    key.thread/length  off\n    begin\n        n4\n        key.thread c@ 16 =\n                         ?exit\n        key.length 1+!\n        key.thread 1+!\n        key.length c@ 32 =\n    while\n\n\n    key.length 1+!\n    32 = ?\n      key.thread 1+!\n      16 = ?\n        done!\n       else\n          key.length coff\n    else...\n\n    \\ copy already sorted names, ascending by CFA\n    while this.thread/length = key.thread/length\n    check the CFA\n      >= studio? copy it\n      < forget-to? copy it\n    repeat\n    next.thread/length = this.thread/length\n\n    \\ copy new, unsorted names, ascending by CFA\n    while this.thread/length ( <> 000 symtail )\n    if this.thread/length = key.thread/length\n      check the CFA\n        >= studio? copy it\n        < forget-to? copy it\n    repeat\n\n: copy_it\n  \\ is it smudged? resolve_smudgery\n\n: resolve_smudgery\n\n' cfa  TURNKEY  \\ set `startup` to `cfa` and perform a `save-forth` to `here`\n\ngood, fast, or tiny\nquality triangle asks?\npick any two now\n\n\\ set origin point for 1/4 block line drawing\n: draw   ( x y -- )\n\n\\ 1/4 block line to next origin point\n: to   ( x y -- )\n\nbkg <-- background color prefix\nbor <-- border color prefix\naux <-- auxiliary color prefix\n    <-- default paintbrush color\n\nblk wht cyn red pur blu grn yel\n\n00|BKG\n01|BG1\n10|BG2\n11|FG\n\nColor code\n(dec, hex)  Color\nBLK 0   $00 black\nWHT 1   $01 white\nRED 2   $02 red\nCYN 3   $03 cyan\nPUR 4   $04 purple\nGRN 5   $05 green\nBLU 6   $06 blue\nYEL 7   $07 yellow\nONG 8   $08 orange\nBRN 9   $09 brown\nPNK 10  $0A pink\nGR1 11  $0B dark grey\nGR2 12  $0C grey\nLTG 13  $0D light green\nLTB 14  $0E light blue\nGR3 15  $0F light grey\n\n\n\n: night    bkg blk  bor blk  ong ;\n\nfast\n\n  |>  good\n\ntiny\n\n!SYMDEX\nSYMTAB!\nSYM0\nSYM.LEN\nSYMLENS\nSYMCOPY\nSYM+\nBLOOM#\nBLOOMFILTER\nPEARSON#\nUNSMUDGE\n                    SMUDGE\n(>NAME)\n                    >NAME\n(FILTER).REWIND\nSWAP.73\nEXT-UNTIL\n(SEEK)\n>THREAD\nIMMEDORNOT\nNEXTVOCAB?\n(FOUND?)\n                    FOUND?\n                    EXISTS?\n                    '\n(CREATE)\n?VMMOVE\n(AUTOMEM)\n>PASSBIT\nPASSBITS?\nPASSBITS!\n(UNREMEMBER)\n                    UNREMEMBER\n                    REHASH\n                    FORTH\nDEFINITIONS\n\nPETTIL tutorials\n    \"Starting Forth\" walkthrough\n    Editor\n    Sweet16\n    Assembler\n    Vocabularies\n    Stack juggling\n    Tape and Disk storage\n\nsewer lice -- object oriented, simple 1-char objects\nqueen bee -- what we learned on larger objects, more actions\n\nscript\n\ngreeting, purpose, activity!\n    ${OK_GREETING}, a succinct statement of ${PURPOSE} today, and ${ACTIVITY}!\n    okay[1] doods, we're going to go a little crazy today, and write a sort\n    okay[1] doods, we're going to ______  today, and ______!\n        think about biology , make a sewer lice game\n        experiment with junk science , make biorhythm charts\n        make a tape , try the PETTIL code editor\n        revisit pre-1980 games ,\n        check standard compliance , see how closely PETTIL follows FORTH-83\n\n\n    detailed description of problem/solution space:\n        sketch things\n        draw things\n        a couple ways to try doing it\n        make lists\n        review options\n        why we pick this way\n\n        okay[2] let's write some code\n            first the english    shadow screens\n            now some tests      shadow screens\n            turn that into code\n\n    okay[3] let's run it:\n    *    boom!\n\n    summary of what happened\n\n|(unremember) | |\n|save\" |filename save-buffers |\n|load\" |load-buffers |\n|verify\" |verify-buffers |\n|open\" |open |\n|close ||\n|case# ||\n|\" ||\n|/ ||\n|*/mod ||\n|$, ||\n|$. ||\n|<builds ||\n|does> ||\n|PETTILface |animations and effects |\n|PETTILdraw |extended standalone editor |\n|PETTILplot |math and infographics |\n\nNONAME !SYMDEX\nNOSYMBOL SYMTAB!\nNONAME SYM0\nNONAME SYM.LEN\nNONAME SYMLENS\nNONAME SYMCOPY\nNONAME SYM+\nNONAME BLOOM#\nNONAME BLOOMFILTER\n                        name=PEARSON#\n  UNSMUDGE\n  SMUDGE\n  410: name=(>NAME)\n  >NAME\n                        name=(FILTER).REWIND\n                        name=SWAP.73\n                        name=EXT-UNTIL\nNONAME (SEEK)\nNONAME >THREAD\nNONAME IMMEDORNOT\nNONAME NEXTVOCAB?\nNONAME (FOUND?)\nFOUND?\nEXISTS?\n'\nNONAME (CREATE)\nNONAME ?VMMOVE\nNONAME (AUTOMEM)\nNONAME >PASSBIT\nNONAME PASSBITS?\nNONAME PASSBITS!\nNONAME (UNREMEMBER)\nUNREMEMBER\nREHASH\nFORTH\nDEFINITIONS\n\nneural net\n\n\nPaul E. Bennett The thing that most people forget about standards, especially in\nprogramming languages, is that it enables the portability of programmers. That\nit might also allow portability of programmes as a by-product is also welcome,\nbut even amongst Forth's that declare compliance with the standard, there are\nsome things that may need some shimming. Forth allows such shimming to be added.\nOf course, what would help enormously in any programming environment is for\npeople to provide decent documentation.\n\nI tend to think of my Forth words like\nhardware components. For those I do for work purposes, they all get the\nequivalent of a datasheet.\n\nDescription of inputs, outputs, functionality\nexpected etc. If what your software relies upon is your own standard base, then\ndocumenting what that is would be useful to later understanding, even by\nyourself.\n\n Do yourselves a big favour, and improve documentation of your code.\n\nJust as an example, the code I posted as a file (Game of Life) was written in\nless than two days and is what I consider rough work.\n I could polish it more and make sure that the documentation is improved\n further. However, it is probably\nadequate enough I could pick it up a few years from now and still know what I\nwas thinking, and probably berate myself about thinking that way.\n That code is\nalready running on two different processors that I know of.\n That said, when the\nANS effort began, I suggested that they could have just\n\nstandardise the core\nwords, then create separate publications in various flavours for the other\nthings we tend to add, like several shades of OO, (MOPS comes to mind, what else?)\n or multi-tasking in the several ways that is accomplished.(such as? say, two or three good ones)\n\n\n0. act like it is this way\n\n\n1. work out names and interfaces,\n    brainstorm, word clouds, synonyms, antonyms, google results, etc..\n\n2. write each word,\n    { stack effects, 6502 register effects, Sweet16 register effects }\n\n3.\n\nfor x=0 to width-1\n    for y=0 to height-1\n        cursor@ vidram + c@ \\ character\n        upper left?\n        upper right?\n        lower left?\n        lower right?\n    next y\nnext x\n\n|human factors|<|<|h\n|Nelson |keyboard   |joystick  |h\n|up     |up         |north     |\n|down   |down       |south     |\n|around |left right |west east |\n|flip   |enter      |button    |\n\n\n\nstandard / FIG / F79 / F83 / ANS\ntype / there are no data types in Forth\n/ stream / input / output\n/ block / screen / wrap / colour / packet / %uncompressed %screen\nthese are the data types\n\ndictionary / vocabulary\n        word / number / prefix / punctuation / name / definition\nstream / input / output\nblock / screen / colour / packet\nbit byte word / flag char single double\npenny nickel dime quarter 50cent sacagawea fiver jackson tubman grant benjamin\nsource\n/ todo / general notes about the code\n/ good / PETTIL high level code\n    <n3 >n3 =n3 local prefix operators only work in compiled definitions\n/ fast / 6502 low level code\n    registers N0-N8 are okay, as is R11.  also  R13-R14-R15 but NOT R12!!\n/ tiny / Sweet16 code\n    registers N0-N8 are okay, as is R11\n/ docs / documentation\n\n\n\n\n\nscreen\n      variants:\n                1000 +wrap(3)  PET\n                2000           P80\n                1000 +wrap(3)  C16\n                2000 +wrap(3)  128\n                506 +wrap(3)   VIC\n                colour (stored as xor values vs previous coloram)\n\n\nthings to automate:\n    cycle counting\n    size between commits\n\n\n\nWhat's in a word?\ntodo\nf79 f83 fig ans\nfast good tiny ** size time ** said\nwhat? why? how? ** stack 6502 sw16 ** golf\ntype ** data primitive secondary\n\n;--------------------------------------------------------------\n/* todo\n**              mention the issues here\n*/\n/* F79\n*/\n/* F83\n*/\n/* FIG\n**              DUP           n  ---  n  n                     L0\n**                      Duplicate the value on the stack.\n*/\n/* pronounced\n**              \"doop\"\n*/\n/* fast\n                code dup   ( n -- n n )\n                    'next 1-  csplit\n                          # lda,    pha,\n                          # lda,    pha,\n                &slip       dex, &slip01\n                    tos 1+          lda,\n                    stackh ,x       sta,\n                    tos             lda,\n                    stackl ,x       sta,\n                            rts, end-code\n** size 15\n** time 22\n*/\n\n/* good\n                \\ dup shall not be implemented as a secondary\n*/\n\nsym0    =       symtab @ 34 + is n3\nthread  =       nfa 1+ c@ $0F and\nnfa     -->     [ %smudge %vocab %immed len ] name\n                %noname   0 when a name isn't in symtab (not PET-resident)\n%smudge\n%vocab\n%immed\nlen             1..31\nname\n?vocab          ( optional vocabulary id )\nlfa     =       nfa 2-\ncfa     =       lfa @ (always points to executable code)\npfa     =       ( following cfa, if applicable )\nsize    =       ( next adjacent cfa ) - cfa\none-liner       \\ 40 column descriptive comment\ntransition diagrams\n    stack       ( stack effect -- diagram )\n    6502        ( a x y p s -- a x y p s )\n    sweet16     ( ... n3 n2 n1 n0 --  ... n3 n2 n1 n0 )\nCODE\n    FAST 6502   /* fast\n                code dup   ( n -- n n )\n                    'next 1-  csplit\n                          # lda,    pha,\n                          # lda,    pha,\n                &slip       dex, &slip01\n                    tos 1+          lda,\n                    stackh ,x       sta,\n                    tos             lda,\n                    stackl ,x       sta,\n                            rts,\n                end-code  \\ [15/22]\n                */\n    TINY Sweet16\n                /* tiny\n                code dup   ( n -- n n )\n                                brk,\n                            tos ld,\n                                push,\n                                nxt,\n                end-code      \\ [4]\n                */\n\n    GOOD Forth\nTODO\n\nProgramming is about using creativity to overcome different problems.\n\nhttp://www.zetetics.com/bj\n\n\n17FF\n     .asc \"1+  \"\n     .word $17E2            ; link to next lower word\noneplus\n1805  20 7C 17    JSR $177C\n1808  18          CLC\n1809  A9 01       LDA #$01\n180B  65 34       ADC $34\n180D  85 34       STA $34\n180F  A9 00       LDA #$00\n1811  65 35       ADC $35\n1813  85 35       STA $35\n1815  20 1B 08    JSR $081B\n1818  60          RTS\n1819\n    .asc \"C@  \"     ; nfa\n    .word $17FF     ; lfa\ncfetch\n181F  20 96 17    JSR $1796\n1822  A9 00       LDA #$00\n1824  85 35       STA $35\n1826  84 38       STY $38\n1828  A0 00       LDY #$00\n182A  B1 36       LDA ($36),Y\n182C  85 34       STA $34\n182E  A4 38       LDY $38\n1830  20 1B 08    JSR $081B\n1833  60          RTS\n1834\n    .asc \"@   \"     ; nfa\n    .word $1819     ; lfa\n183A  20 96 17    JSR $1796\n183D  84 38       STY $38\n183F  A0 00       LDY #$00\n1841  B1 36       LDA ($36),Y\n1843  85 34       STA $34\n1845  C8          INY\n1846  B1 36       LDA ($36),Y\n1848  85 35       STA $35\n184A  A4 38       LDY $38\n184C  20 1B 08    JSR $081B\n184F  60          RTS\n1860\n    .asc \"!   \"\n    .word $1834\n1856  20 96 17    JSR $1796\n1859  20 7C 17    JSR $177C\n185C  84 38       STY $38\n185E  A0 00       LDY #$00\n1860  A5 34       LDA $34\n1862  91 36       STA ($36),Y\n1864  C8          INY\n1865  A5 35       LDA $35\n1867  91 36       STA ($36),Y\n1869  A4 38       LDY $38\n186B  60          RTS\n\n>C:1800  2b 20 20 e2  17 20 7c 17  18 a9 01 65  34 85 34 a9   +  .w |wx.ae4.4.\n>C:1810  00 65 35 85  35 20 1b 08  60 43 40 20  20 ff 17 20   @e5.5 [h`C@  .w\n>C:1820  96 17 a9 00  85 35 84 38  a0 00 b1 36  85 34 a4 38   .w.@.5.8 @.6.4.8\n>C:1830  20 1b 08 60  40 20 20 20  19 18 20 96  17 84 38 a0    [h`@   yx .w.8\n>C:1840  00 b1 36 85  34 c8 b1 36  85 35 a4 38  20 1b 08 60   @.6.4H.6.5.8 [h`\n>C:1850  21 20 20 20  34 18 20 96  17 20 7c 17  84 38 a0 00   !   4x .w |w.8 @\n>C:1860  a5 34 91 36  c8 a5 35 91  36 a4 38 60\n\n>C:0400  00 00 00 01  00 86 20 41  28 31 32 2c  31 32 29 00   @@@a@. A(12,12)@\n>C:0410  52 04 02 00  99 22 93 54  48 49 53 20  50 52 4f 47   Rdb@.\".THIS PROG\n>C:0420  52 41 4d 20  53 48 4f 57  53 20 54 48  45 20 53 54   RAM SHOWS THE ST\n>C:0430  41 47 45 53  20 4f 46 20  54 48 45 20  34 20 20 53   AGES OF THE 4  S\n>C:0440  54 52 4f 4b  45 20 49 4e  54 45 52 4e  41 4c 20 22   TROKE INTERNAL \"\n>C:0450  3b 00 71 04  03 00 99 22  43 4f 4d 42  55 53 54 49   ;@qdc@.\"COMBUSTI\n>C:0460  4f 4e 20 45  4e 47 49 4e  45 20 43 59  43 4c 45 22   ON ENGINE CYCLE\"\n>C:0470  00 ad 04 04  00 99 22 11  54 48 45 20  46 49 52 53   @.dd@.\"qTHE FIRS\n>C:0480  54 20 53 54  41 47 45 20  4f 46 20 54  48 45 20 43   T STAGE OF THE C\n>C:0490  59 43 4c 45  20 49 53 20  43 41 4c 4c  45 44 20 20   YCLE IS CALLED\n>C:04a0  12 49 4e 44  55 43 54 49  4f 4e 92 22  00 f7 04 05   rINDUCTION.\"@.de\n>C:04b0  00 99 22 41  20 4d 49 58  54 55 52 45  20 4f 46 20   @.\"A MIXTURE OF\n>C:04c0  46 55 45 4c  20 41 4e 44  20 41 49 52  20 49 53 20   FUEL AND AIR IS\n>C:04d0  44 52 41 57  4e 20 49 4e  54 4f 20 54  48 45 20 43   DRAWN INTO THE C\n>C:04e0  59 4c 49 4e  44 45 52 20  54 48 52 4f  55 47 48 20   YLINDER THROUGH\n>C:04f0  54 48 45 20  22 3b 00 37  05 06 00 99  22 49 4e 4c   THE \";@7ef@.\"INL\n>C:0500  0e 54 20 56  41 4c 56 45  22 3a 99 22  11 54 48 45   nT VALVE\":.\"qTHE\n>C:0510  20 53 45 43  4f 4e 44 20  53 54 41 47  45 20 ea 0d    SECOND STAGE .m\n>C:0520  20 43 41 4c  4c 45 44 20  12 43 4f 4d  50 52 45 53    CALLED rCOMPRES\n>C:0530  53 49 4f 4e  92 22 00 88  05 07 00 99  22 54 48 45   SION.\"@.eg@.\"THE\n>C:0540  20 49 4e 4c  45 54 20 56  41 4c 56 45  20 43 4c 4f    INLET VALVE CLO\n>C:0550  53 45 53 20  41 4e 44 20  54 48 45 20  4d 49 58 54   SES AND THE MIXT\n>C:0560  55 52 45 20  20 49 53 20  43 4f 4d 50  52 45 53 53   URE  IS COMPRESS\n>C:0570  45 44 20 41  53 20 54 48  45 20 50 49  53 54 4f 4e   ED AS THE PISTON\n>C:0580  20 52 49 53  45 53 22 00  d0 05 08 00  99 22 11 44    RISES\"@Peh@.\"qD\n>C:0590  55 52 49 4e  47 20 54 48  45 20 43 4f  4d 50 52 45   URING THE COMPRE\n>C:05a0  53 53 49 4f  4e 20 53 54  41 47 45 20  54 48 45 20   SSION STAGE THE\n>C:05b0  4d 49 58 54  55 52 45 49  53 20 49 47  4e 49 54 45   MIXTUREIS IGNITE\n>C:05c0  44 20 42 59  20 41 20 53  50 41 52 4b  20 22 3b 00   D BY A SPARK \";@\n>C:05d0  0f 06 09 00  99 22 46 52  4f 4d 20 54  48 45 20 50   ofi@.\"FROM THE P\n>C:05e0  4c 55 47 22  3a 99 22 11  54 48 45 20  54 48 49 52   LUG\":.\"qTHE THIR\n>C:05f0  44 20 53 54  01 00 02 00  01 00 00 00  2d 1e 4c 42   D STa@b@a@@@-^LB\n>C:0600  44 20 12 45  58 50 41 4e  53 49 4f 4e  92 22 00 3e   D rEXPANSION.\"@>\n>C:0610  06 0a 00 99  22 54 48 45  20 42 55 52  4e 49 4e 47   fj@.\"THE BURNING\n>C:0620  20 47 41 53  45 53 20 46  4f 52 43 45  20 54 48 45    GASES FORCE THE\n>C:0630  20 50 49 53  54 4f 4e 20  44 4f 57 4e  22 00 6a 06    PISTON DOWN\"@jf\n>C:0640  0b 00 99 22  11 54 48 45  20 46 4f 52  54 48 20 53   k@.\"qTHE FORTH S\n>C:0650  54 41 47 45  20 49 53 20  43 41 4c 4c  45 44 20 12   TAGE IS CALLED r\n>C:0660  45 58 48 41  55 53 54 92  22 00 97 06  0c 00 99 22   EXHAUST.\"@.fl@.\"\n>C:0670  54 48 45 20  42 55 52 4e  54 20 47 41  53 45 53 20   THE BURNT GASES\n>C:0680  41 52 45 20  53 57 45 50  54 20 4f 55  54 20 4f 46   ARE SWEPT OUT OF\n>C:0690  20 54 48 45  20 22 00 c1  06 0d 00 99  22 43 59 4c    THE \"@Afm@.\"CYL\n>C:06a0  49 4e 44 45  52 20 54 48  52 4f 55 47  48 20 54 48   INDER THROUGH TH\n>C:06b0  45 20 45 58  48 41 55 53  54 20 56 41  4c 56 45 22   E EXHAUST VALVE\"\n>C:06c0  00 ef 06 0e  00 99 22 11  50 52 45 53  53 20 12 43   @.fn@.\"qPRESS rC\n>C:06d0  92 20 54 4f  20 43 4f 4e  54 49 4e 55  45 22 3a a1   . TO CONTINUE\":.\n>C:06e0  51 24 3a 8b  51 24 b3 b1  22 43 22 a7  31 35 00 03   Q$:.Q$..\"C\".15@c\n>C:06f0  07 0f 00 a1  51 24 3a 8b  51 24 02 00  02 00 22 a7   go@.Q$:.Q$b@b@\".\n>C:0700  48 45 4c 50  20 0d 00 99  22 93 20 20  20 20 20 20   HELP m@.\".\n>C:0710  20 20 cf d0  22 00 28 07  11 00 99 22  20 20 20 20     OP\"@(gq@.\"\n>C:0720  20 dd 20 20  a5 a7 22 00  45 07 14 00  99 22 20 20    .  ..\"@Egt@.\"\n>C:0730  12 20 20 92  20 dd 20 12  20 20 20 20  92 20 dd 20   r  . . r    . .\n>C:0740  12 20 20 22  00 62 07 23  00 99 22 20  20 12 20 92   r  \"@bg#@.\"  r .\n>C:0750  20 12 a2 a2  a2 92 20 cc  ba 20 20 dd  20 20 12 20    r.... L.  .  r\n>C:0760  22 00 7f 07  28 00 99 22  20 20 12 20  92 20 20 20   \"@.g(@.\"  r .\n>C:0770  20 20 ad bd  20 12 a2 a2  a2 92 20 12  20 22 00 8e     .. r.... r \"@.\n>C:0780  07 2a 00 81  20 51 b2 31  20 a4 20 31  36 00 a9 07   g*@. Q.1 . 16@.g\n>C:0790  32 00 99 22  20 20 12 20  92 20 20 20  20 20 20 20   2@.\"  r .\n>C:07a0  20 20 20 20  20 12 20 22  00 b1 07 33  00 82 20 51        r \"@.g3@. Q\n>C:07b0  00 c1 07 3c  00 99 22 13  1d 1d 1d 11  11 11 11 22   @Ag<@.\"s]]]qqqq\"\n>C:07c0  00 cc 07 3d  00 8d 20 32  30 30 30 00  d7 07 3e 00   @Lg=@. 2000@Wg>@\n>C:07d0  8d 20 31 30  30 30 00 09  08 3f 00 99  22 13 12 11   . 1000@ih?@.\"srq\n>C:07e0  1d 1d 1d 1d  1d 1d 1d 1d  1d 1d 1d 1d  1d 1d 1d 1d   ]]]]]]]]]]]]]]]]\n>C:07f0  1d 1d 1d 45  58 48 41 55  53 54 20 56  41 4c 56 45   ]]]EXHAUST VALVE\n\n\n\n>C:0400  00 00 00 01  00 86 20 41  28 31 32 2c  31 32 29 00   @@@a@. A(12,12)@\n>C:0410  52 04 02 00  99 22 93 54  48 49 53 20  50 52 4f 47   Rdb@.\".THIS PROG\n>C:0420  52 41 4d 20  53 48 4f 57  53 20 54 48  45 20 53 54   RAM SHOWS THE ST\n>C:0430  41 47 45 53  20 4f 46 20  54 48 45 20  34 20 20 53   AGES OF THE 4  S\n>C:0440  54 52 4f 4b  45 20 49 4e  54 45 52 4e  41 4c 20 22   TROKE INTERNAL \"\n>C:0450  3b 00 71 04  03 00 99 22  43 4f 4d 42  55 53 54 49   ;@qdc@.\"COMBUSTI\n>C:0460  4f 4e 20 45  4e 47 49 4e  45 20 43 59  43 4c 45 22   ON ENGINE CYCLE\"\n>C:0470  00 ad 04 04  00 99 22 11  54 48 45 20  46 49 52 53   @.dd@.\"qTHE FIRS\n>C:0480  54 20 53 54  41 47 45 20  4f 46 20 54  48 45 20 43   T STAGE OF THE C\n>C:0490  59 43 4c 45  20 49 53 20  43 41 4c 4c  45 44 20 20   YCLE IS CALLED\n>C:04a0  12 49 4e 44  55 43 54 49  4f 4e 92 22  00 f7 04 05   rINDUCTION.\"@.de\n>C:04b0  00 99 22 41  20 4d 49 58  54 55 52 45  20 4f 46 20   @.\"A MIXTURE OF\n>C:04c0  46 55 45 4c  20 41 4e 44  20 41 49 52  20 49 53 20   FUEL AND AIR IS\n>C:04d0  44 52 41 57  4e 20 49 4e  54 4f 20 54  48 45 20 43   DRAWN INTO THE C\n>C:04e0  59 4c 49 4e  44 45 52 20  54 48 52 4f  55 47 48 20   YLINDER THROUGH\n>C:04f0  54 48 45 20  22 3b 00 37  05 06 00 99  22 49 4e 4c   THE \";@7ef@.\"INL\n>C:0500  45 54 20 56  41 4c 56 45  22 3a 99 22  11 54 48 45   ET VALVE\":.\"qTHE\n>C:0510  20 53 45 43  4f 4e 44 20  53 54 41 47  45 20 49 53    SECOND STAGE IS\n>C:0520  20 43 41 4c  4c 45 44 20  12 43 4f 4d  50 52 45 53    CALLED rCOMPRES\n>C:0530  53 49 4f 4e  92 22 00 88  05 07 00 99  22 54 48 45   SION.\"@.eg@.\"THE\n>C:0540  20 49 4e 4c  45 54 20 56  41 4c 56 45  20 43 4c 4f    INLET VALVE CLO\n>C:0550  53 45 53 20  41 4e 44 20  54 48 45 20  4d 49 58 54   SES AND THE MIXT\n>C:0560  55 52 45 20  20 49 53 20  43 4f 4d 50  52 45 53 53   URE  IS COMPRESS\n>C:0570  45 44 20 41  53 20 54 48  45 20 50 49  53 54 4f 4e   ED AS THE PISTON\n>C:0580  20 52 49 53  45 53 22 00  d0 05 08 00  99 22 11 44    RISES\"@Peh@.\"qD\n>C:0590  55 52 49 4e  47 20 54 48  45 20 43 4f  4d 50 52 45   URING THE COMPRE\n>C:05a0  53 53 49 4f  4e 20 53 54  41 47 45 20  54 48 45 20   SSION STAGE THE\n>C:05b0  4d 49 58 54  55 52 45 49  53 20 49 47  4e 49 54 45   MIXTUREIS IGNITE\n>C:05c0  44 20 42 59  20 41 20 53  50 41 52 4b  20 22 3b 00   D BY A SPARK \";@\n>C:05d0  0f 06 09 00  99 22 46 52  4f 4d 20 54  48 45 20 50   ofi@.\"FROM THE P\n>C:05e0  4c 55 47 22  3a 99 22 11  54 48 45 20  54 48 49 52   LUG\":.\"qTHE THIR\n>C:05f0  44 20 53 54  01 00 02 00  01 00 00 00  ef 14 4c 45   D STa@b@a@@@.tLE\n>C:0600  44 20 12 45  58 50 41 4e  53 49 4f 4e  92 22 00 3e   D rEXPANSION.\"@>\n>C:0610  06 0a 00 99  22 54 48 45  20 42 55 52  4e 49 4e 47   fj@.\"THE BURNING\n>C:0620  20 47 41 53  45 53 20 46  4f 52 43 45  20 54 48 45    GASES FORCE THE\n>C:0630  20 50 49 53  54 4f 4e 20  44 4f 57 4e  22 00 6a 06    PISTON DOWN\"@jf\n>C:0640  0b 00 99 22  11 54 48 45  20 46 4f 52  54 48 20 53   k@.\"qTHE FORTH S\n>C:0650  54 41 47 45  20 49 53 20  43 41 4c 4c  45 44 20 12   TAGE IS CALLED r\n>C:0660  45 58 48 41  55 53 54 92  22 00 97 06  0c 00 99 22   EXHAUST.\"@.fl@.\"\n>C:0670  54 48 45 20  42 55 52 4e  54 20 47 41  53 45 53 20   THE BURNT GASES\n>C:0680  41 52 45 20  53 57 45 50  54 20 4f 55  54 20 4f 46   ARE SWEPT OUT OF\n>C:0690  20 54 48 45  20 22 00 c1  06 0d 00 99  22 43 59 4c    THE \"@Afm@.\"CYL\n>C:06a0  49 4e 44 45  52 20 54 48  52 4f 55 47  48 20 54 48   INDER THROUGH TH\n>C:06b0  45 20 45 58  48 41 55 53  54 20 56 41  4c 56 45 22   E EXHAUST VALVE\"\n>C:06c0  00 ef 06 0e  00 99 22 11  50 52 45 53  53 20 12 43   @.fn@.\"qPRESS rC\n>C:06d0  92 20 54 4f  20 43 4f 4e  54 49 4e 55  45 22 3a a1   . TO CONTINUE\":.\n>C:06e0  51 24 3a 8b  51 24 b3 b1  22 43 22 a7  31 35 00 03   Q$:.Q$..\"C\".15@c\n>C:06f0  07 0f 00 a1  51 24 3a 8b  51 24 02 00  02 00 22 a7   go@.Q$:.Q$b@b@\".\n>C:0700  48 45 4c 50  20 0d 00 99  22 93 20 20  20 20 20 20   HELP m@.\".\n>C:0710  20 20 cf d0  22 00 28 07  11 00 99 22  20 20 20 20     OP\"@(gq@.\"\n>C:0720  20 dd 20 20  a5 a7 22 00  45 07 14 00  99 22 20 20    .  ..\"@Egt@.\"\n>C:0730  12 20 20 92  20 dd 20 12  20 20 20 20  92 20 dd 20   r  . . r    . .\n>C:0740  12 20 20 22  00 62 07 23  00 99 22 20  20 12 20 92   r  \"@bg#@.\"  r .\n>C:0750  20 12 a2 a2  a2 92 20 cc  ba 20 20 dd  20 20 12 20    r.... L.  .  r\n>C:0760  22 00 7f 07  28 00 99 22  20 20 12 20  92 20 20 20   \"@.g(@.\"  r .\n>C:0770  20 20 ad bd  20 12 a2 a2  a2 92 20 12  20 22 00 8e     .. r.... r \"@.\n>C:0780  07 2a 00 81  20 51 b2 31  20 a4 20 31  36 00 a9 07   g*@. Q.1 . 16@.g\n>C:0790  32 00 99 22  20 20 12 20  92 20 20 20  20 20 20 20   2@.\"  r .\n>C:07a0  20 20 20 20  20 12 20 22  00 b1 07 33  00 82 20 51        r \"@.g3@. Q\n>C:07b0  00 c1 07 3c  00 99 22 13  1d 1d 1d 11  11 11 11 22   @Ag<@.\"s]]]qqqq\"\n>C:07c0  00 cc 07 3d  00 8d 20 32  30 30 30 00  d7 07 3e 00   @Lg=@. 2000@Wg>@\n>C:07d0  8d 20 31 30  30 30 00 09  08 3f 00 99  22 13 12 11   . 1000@ih?@.\"srq\n>C:07e0  1d 1d 1d 1d  1d 1d 1d 1d  1d 1d 1d 1d  1d 1d 1d 1d   ]]]]]]]]]]]]]]]]\n>C:07f0  1d 1d 1d 45  58 48 41 55  53 54 20 56  41 4c 56 45   ]]]EXHAUST VALVE\n>C:0800  4c b1 08 4c  db 08 4c cf  ff 4c d2 ff  4c 36 e2 4c   L.hL.hLO.LR.L6.L\n>C:0810  a4 0c 4c 4e  f3 4c b1 f6  4c 8b c3 4c  83 0a 4c 27   .lLN.L..L.CL.jL'\n>C:0820  0a 4c 8b 08  4c 18 09 4c  02 0a 4c 14  0a 4c 1b 0a   jL.hLxiLbjLtjL[j\n>C:0830  ea ea ea 7a  25 24 25 00  05 00 06 00  3c 00 3c 00   ...z%$%@e@f@<@<@\n>C:0840  07 00 3c a9  fe 85 1a 85  42 a9 00 aa  85 1e ad 37   g@<...z.B.@..^.7\n>C:0850  08 85 0a ad  38 08 85 0b  ad 39 08 85  0c ad 3a 08   h.j.8h.k.9h.l.:h\n>C:0860  85 0d ad 3b  08 85 16 ad  3c 08 85 17  ad 3d 08 85   .m.;h.v.<h.w.=h.\n>C:0870  18 ad 3e 08  85 19 ad 3f  08 85 0e ad  40 08 85 0f   x.>h.y.?h.n.@h.o\n>C:0880  ad 3f 08 85  14 ad 40 08  85 15 60 78  d8 20 2a 0e   .?h.t.@h.u`xX *n\n>C:0890  a0 00 b1 12  d0 15 a5 12  85 10 a5 13  85 11 a0 04    @.rPu.r.p.s.q d\n>C:08a0  b1 12 48 c8  b1 12 85 13  68 85 12 20  43 08 4c e1   .rHH.r.sh.r ChL.\n>C:08b0  08 78 d8 ad  33 08 85 10  ad 34 08 85  11 ad 35 08   hxX.3h.p.4h.q.5h\n>C:08c0  85 12 ad 36  08 85 13 a9  10 85 1d a9  20 85 1f 20   .r.6h.s.p.]. ._\n>C:08d0  43 08 a9 fe  a8 20 e2 10  4c e1 08 20  43 08 20 dc   Ch... .pL.h Ch .\n>C:08e0  0d a9 ff aa  9a a5 14 85  0e a5 15 85  0f 20 f6 08   m.....t.n.u.o .h\n>C:08f0  20 39 0a 4c  e5 08 20 30  0b ad 3f 08  85 71 ad 40    9jL.h 0k.?h.q.@\n>C:0900  08 85 72 a0  00 20 06 08  29 7f c9 0d  f0 0f 91 71   h.r @ fh).Im.o.q\n>C:0910  c8 f0 03 4c  05 09 a9 06  85 2b 20 8b  08 a5 1f 91   H.cLei.f.+ .h._.\n>C:0920  71 c8 f0 f2  a9 0d 91 71  4c 6e 11 60  a5 1f 85 29   qH...m.qLnq`._.)\n>C:0930  85 2a a0 00  b1 0e 99 27  00 c5 1f f0  05 c8 c0 04   .* @.n.'@E_.eH.d\n>C:0940  d0 f2 60 20  2c 09 a5 12  85 2e a5 13  85 2f a9 00   P.` ,i.r...s./.@\n>C:0950  a8 85 21 b1  2e 10 04 e6  21 29 7f c5  27 d0 19 c8   ..!..pd.!).E'PyH\n>C:0960  b1 2e d9 27  00 d0 11 c0  03 d0 f4 18  a5 2e 69 06   ..Y'@Pq.cP.x..if\n>C:0970  85 2e 90 03  e6 2f 18 60  a0 04 b1 2e  85 34 c8 b1   ...c./x` d...4H.\n>C:0980  2e 85 2f d0  02 38 60 a5  34 85 2e 4c  4e 09 a9 00   ../Pb8`.4..LNi.@\n>C:0990  a8 85 34 85  35 85 20 b1  0e c9 2d d0  05 e6 20 4c   ..4.5. .nI-Pe. L\n>C:09a0  a6 09 c9 2b  d0 03 c8 b1  0e c5 1f f0  40 a9 00 85   .iI+PcH.nE_.@.@.\n>C:09b0  36 85 37 a5  1d 85 38 18  a5 34 65 36  85 36 a5 35   6.7.].8x.4e6.6.5\n>C:09c0  65 37 85 37  b0 3a c6 38  d0 ed 38 b1  0e e9 30 90   e7.7.:F8P.8.n.0.\n>C:09d0  2f e9 0a 90  05 e9 07 90  27 18 69 0a  c5 1d b0 20   /.j.e.g.'xijE].\n>C:09e0  65 36 85 34  a9 00 65 37  85 35 90 ba  60 a5 20 f0   e6.4.@e7.5..`. .\n>C:09f0  0d 38 a9 00  e5 34 85 34  a9 00 e5 35  85 35 18 60   m8.@.4.4.@.5.5x`\n>C:0a00  38 60 a0 00  b1 0e c5 1f  f0 10 c9 0d  f0 0c 20 14   8` @.nE_.pIm.l t\n>C:0a10  0a 4c 04 0a  e6 0e d0 02  e6 0f 60 a5  1f d1 0e d0   jLdj.nPb.o`._QnP\n>C:0a20  f9 20 14 0a  4c 1b 0a 84  38 20 73 0b  a0 00 91 10   . tjL[j.8 sk @.p\n>C:0a30  e6 10 d0 02  e6 11 a4 38  60 a0 00 20  1b 0a b1 0e   .pPb.q.8` @ [j.n\n>C:0a40  c9 0d f0 d6  a5 1e c9 02  f0 47 b0 2d  20 43 09 90   Im.V.^Ib.G.- Ci.\n>C:0a50  4c 20 8e 09  b0 28 a5 1e  f0 17 a9 a9  20 27 0a a5   L .i.(.^.w.. 'j.\n>C:0a60  35 20 63 0c  a9 a9 20 27  0a a5 34 20  63 0c 4c c8   5 cl.. 'j.4 clLH\n>C:0a70  0a a4 1a 20  83 0a 4c c6  0a a9 07 4c  18 09 a9 08   j.z .jLFj.gLxi.h\n>C:0a80  4c 18 09 a5  35 20 8a 0b  88 91 0a 88  a5 34 91 0a   Lxi.5 .k..j..4.j\n>C:0a90  60 20 43 09  90 21 20 8e  09 b0 e3 90  d4 a5 21 d0   ` Ci.! .i...T.!P\n>C:0aa0  16 a5 1e f0  12 a9 20 20  27 0a a5 2e  20 27 0a a5   v.^.r.  'j.. 'j.\n>C:0ab0  2f 20 27 0a  4c c8 0a a4  1a a9 0a 48  a9 c5 48 6c   / 'jLHj.z.jH.EHl\n>C:0ac0  2e 00 4c c6  0a ea 84 1a  20 02 0a 4c  3b 0a a5 1e   .@LFj..z bjL;j.^\n>C:0ad0  f0 05 a9 07  4c 18 09 84  22 20 02 0a  20 1b 0a a5   .e.gLxi.\" bj [j.\n>C:0ae0  10 85 34 a5  11 85 35 20  2c 09 a5 27  20 27 0a a5   p.4.q.5 ,i.' 'j.\n>C:0af0  28 20 27 0a  a5 29 20 27  0a a5 2a 20  27 0a a5 12   ( 'j.) 'j.* 'j.r\n>C:0b00  20 27 0a a5  13 20 27 0a  a5 34 85 12  a5 35 85 13    'j.s 'j.4.r.5.s\n>C:0b10  a4 22 60 91  34 88 10 fb  60 b1 36 91  34 88 10 f9   .\"`.4.p.`.6.4.p.\n>C:0b20  60 20 0d 0e  a9 20 20 b2  0b 60\n                                         24 53  41 56 00 00   ` mn.  .k`$SAV@@\n>C:0b30  78 85 3e 08  68 85 41 68  85 3f 68 85  40 a5 3e 48   x.>hh.Ah.?h.@.>H\n>C:0b40  a5 41 48 8a  48 98 48 d8  a5 40 48 a5  3f 4c 64 11   .AH.H.HX.@H.?Ldq\n>C:0b50  24 4c 4f 44  2a 0b 78 85  3e 68 85 3f  68 85 40 68   $LOD*kx.>h.?h.@h\n>C:0b60  a8 68 aa 28  68 a5 40 48  a5 3f 4c 69  11 24 43 4b   .h.(h.@H.?Liq$CK\n>C:0b70  44 50 0b 48  08 a5 11 cd  42 08 d0 05  a9 05 4c 18   DPkHh.qMBhPe.eLx\n>C:0b80  09 28 68 60  24 4e 53 4f  6d 0b 48 08  c0 00 d0 05   i(h`$NSOmkHh.@Pe\n>C:0b90  a9 01 4c 18  09 28 68 60  24 4e 53 55  84 0b 48 08   .aLxi(h`$NSU.kHh\n>C:0ba0  c0 00 d0 05  a9 02 4c 18  09 28 68 60  24 50 55 54   .@Pe.bLxi(h`$PUT\n>C:0bb0  98 0b 20 30  0b 20 09 08  20 56 0b 60  ba 20 20 20   .k 0k ih Vk`.\n>C:0bc0  ac 0b 20 ce  0a 84 22 20  73 0b a9 00  a8 91 12 a4   .k Nj.\" sk.@..r.\n>C:0bd0  22 a5 27 85  25 e6 1e 60  bb 20 20 20  bc 0b a5 1e   \".'.%.^`.   .k.^\n>C:0be0  d0 05 a9 07  4c 18 09 a9  00 85 1e a5  25 84 22 20   Pe.gLxi.@.^.%.\"\n>C:0bf0  73 0b a0 00  11 12 91 12  a4 22 4c 56  0c 56 41 52   sk @qr.r.\"LVlVAR\n>C:0c00  49 d8 0b 20  ce 0a a9 20  20 27 0a a9  25 20 27 0a   IXk Nj.  'j.% 'j\n>C:0c10  a9 0c 20 27  0a b1 0a 20  27 0a c8 b1  0a 20 27 0a   .l 'j.j 'jH.j 'j\n>C:0c20  c8 20 9e 0b  60 18 68 69  01 85 34 68  69 00 4c 85   H .k`xhia.4hi@L.\n>C:0c30  0a 43 4f 4e  53 fd 0b 20  ce 0a a9 20  20 27 0a a9   jCONS.k Nj.  'j.\n>C:0c40  8a 20 27 0a  a9 0b 20 27  0a c8 20 5c  0c 88 20 5c   . 'j.k 'jH \\l. \\\n>C:0c50  0c c8 c8 20  9e 0b a9 60  20 27 0a 60  a9 a9 20 27   lHH .k.` 'j`.. '\n>C:0c60  0a b1 0a 20  27 0a a9 88  20 27 0a a9  91 20 27 0a   j.j 'j.. 'j.. 'j\n>C:0c70  a9 0a 20 27  0a 60 27 20  20 20 31 0c  84 22 20 02   .j 'j`'   1l.\" b\n>C:0c80  0a 20 1b 0a  20 43 09 90  05 a9 08 4c  18 09 a4 22   j [j Ci.e.hLxi.\"\n>C:0c90  20 8a 0b 88  a5 2f 91 0a  88 a5 2e 91  0a 60 43 52    .k../.j....j`CR\n>C:0ca0  20 20 76 0c  20 30 0b a9  0d 20 09 08  20 56 0b 60     vl 0k.m ih Vk`\n>C:0cb0  c9 4d 4d 45  9e 0c a5 25  09 80 85 25  60 2c 20 20   IMME.l.%i..%`,\n>C:0cc0  20 b0 0c 4c  15 0c de 20  20 20 bd 0c  a5 1e f0 0c    .lLul.   .l.^.l\n>C:0cd0  c9 01 f0 05  a9 01 85 1e  60 e6 1e 60  a9 07 4c 18   Ia.e.a.^`.^`.gLx\n>C:0ce0  09 43 2c 20  20 c6 0c 20  1b 0c c8 20  9e 0b 60 50   iC,  Fl [lH .k`P\n>C:0cf0  41 47 45 e1  0c 20 30 0b  20 0c 08 20  56 0b 60 24   AGE.l 0k lh Vk`$\n\n\n* can VICE do a Votrax or S.A.M.?\n\nAbstract data types\nlong string -- ends in 00\ncounted string --\nscreen\n    rle-compressed\n\n|   |     |         University Hospital|         |1962-07  |     |Ann Arbor MI ?            |  1|\n|   |     |                            |         |         |     |Ann Arbor MI Packard      |  2|\n|   |     |                            |         |         |     |Ann Arbor MI Ashley       |  3|\n|   |     |                            |         |1964?    |     |Kalamazoo MI              |  4|\n|   |     |                            |         |1965?    |     |Grand Rapids MI           |  5|\n|   |     |                            |         |1967-??  |     |Hancock MI Quincy         |  6|\n|   |     |          Hancock Elementary|1967-09  |1968-06  |     |                          |   |\n|   |     |                            |         |1968-??  |     |L'Anse MI 512 Broad       |  7|\n|   |     |     Sacred Heart Elementary|1968-09  |1971-06  |     |                          |   |\n|   |     |                            |         |1971-07? |     |Woodsfield OH Moose Ridge |  8|\n|   |     |       Woodsfield Elementary|1971-09  |1975-06  |     |                          |   |\n|  1|43793|Wheeling News Register      |1977-08? |1978-07  |     |                          |   |\n|   |     |   Linsly Military Institute|         |         |     |Wheeling WV Knox Ln       |  9|\n|   |     |                            |         |1977-07? |     |Huron OH 725 Strowbridge  | 10|\n|  2|     |Baskin Robbins              |1977-08? |1978-07  | 1.91|                          |   |\n|   |     |                      SMCCHS|         |         |     |                          |   |\n|  3|     |~McDonald's Cedar Point     |1978-07  |1979-07  | 2.35|                          |   |\n|  4|     |WSAN TV                     |1978-09  |1979-06  | ??|                            |   |\n|   |     |                            |         |1979-07? |     |Bay City MI 7th           | 11|\n|  5|     |~McDonald's Essexville      |1979-07  |1980-06  | 2.65|                          |   |\n|   |     |            Bay City Central|1979-09  |1980-06  |     |                          |   |\n|   |     |                            |         |1980-10  |     |Essexville MI             | 12|\n|   |     |                            |         |1980-06  |     |Ann Arbor MI Church       | 13|\n|  6|     |Domino's Pizza              |1980-07  |1980-12  | 2.65|                          |   |\n|   |     |                            |         |1980-09  |     |Ann Arbor MI E Univ       | 14|\n|  7|     |~McDonald's Maynard St      |1981-01  |1982-02  | 2.65|                          |   |\n|   |     |                            |         |1981-06? |     |Ann Arbor MI Starwick     | 15|\n|   |     |                            |         |1981-??  |     |Ann Arbor MI Pontiac Tr   | 16|\n|   |     |                            |         |1982-03  |     |Bay City MI 7th           |  *|\n|   |     |                            |         |1982-04  |     |Long Island NY            | 18|\n|   |     |                            |         |1982-04  |     |Washington DC 6409 Western| 19|\n|  8|     |Joseph G. Hitselberger Esq. |1982-04  |1982-05  |     |                          |   |\n|   |     |                            |         |1982-05  |     |Arlington VA N Glebe      | 20|\n|  9|     |~ComputerLand               |1982-05  |1982-11  | 4.00|                          |   |\n|   |     |                            |         |1982-07? |     |~McLean VA Great Falls 1  | 21|\n| 10|     |Professional Video Services |1982-11  |1983-06  |12.00|                          |   |\n|   |     |                            |         |1983-03? |     |~McLean VA Great Falls 2  | 22|\n|   |     |                            |         |1983-07  |     |Washington DC 2034 16th NW| 23|\n| 11|     |construction labor          |1983-10  |1983-11  | 5.00|                          |   |\n|   |     |                            |         |1983-12  |     |Arlington VA N Glebe      |  *|\n|   |     |                            |         |1983-12  |     |Perkins Twp OH            | 24|\n| 12|     |Superior Push Rod           |1984-04  |1985-08? |17K  |                          |   |\n|   |     |                            |         |1984-04  |     |Port Clinton OH           | 25|\n|   |     |                            |         |1984-??  |     |                          |   |\n|   |     |                            |         |1984-??  |     |Sandusky OH Pizza House E | 26|\n|   |     |                            |         |1985-09? |     |Danville KY               | 27|\n| 13|     |Electromotive               |1985-11  |1985-04? |??   |                          |   |\n|   |     |                            |         |1985-12  |     |Arlington VA N Glebe      |  *|\n|   |     |                            |         |1986-01  |     |Centreville VA Palmerston | 28|\n| 14|     |NEC America                 |1985-05? |1986-??  |??   |                          |   |\n|   |     |                            |         |1986-??  |     |Annandale VA Killebrew    | 29|\n|   |     |                            |         |1988-04  |     |Alexandria VA Southern Twr| 30|\n| 15|     |Wizard Software             |1987-09  |1989-07? | 5.00|11.00                     |   |\n| 16|     |Professional Risk Mgt Svcs  |1989-07? |1991-??  |     |                          |   |\n|   |     |                            |         |1991-08? |     |Falls Church VA Villages  | 31|\n| 18|     |Nationwide Credit           |1991-??  |1993-09  |21K? |                          |   |\n|   |     |                            |         |1993-09  |28K  |Denver CO Lincoln         | 32|\n| 19|     |Parsec Group                |1993-09  |1994-04  |28K  |                          |   |\n| 20|     |MCI                         |1994-04? |1995-12  |35K  |                          |   |\n| 21|     |Slurpee Software            |1994-??  |         |     |                          |   |\n|   |     |                            |         |1994-07  |     |Co Spgs CO Galley         | 33|\n| 23|     |Credit Bureau Enterprises   |1995-12  |1997-01  |50K  |                          |   |\n|   |     |                            |         |1995-12  |     |Waterloo IA               | 34|\n| 24|     |Netrail                     |1997-01  |1997-03  |75K  |                          |   |\n|   |     |                            |         |1997-01  |     |Peachtree City GA         | 35|\n| 25|     |Credit Bureau Services      |1997-03  |1998-03  |50K  |                          |   |\n|   |     |                            |         |1998-03  |     |Cleveland TN              | 36|\n| 26|     |Call Technologies           |1998-04  |1999-05  |??   |                          |   |\n|   |     |                            |         |1998-04  |     |Arlington VA N Glebe      |  *|\n|   |     |                            |         |1998-06? |     |Falls Church VA Villages  | 37|\n| 27|     |FAA                         |1999-06  |2004-01  |75K  |                          |   |\n| 28|     |Exario Networks             |2000-07  |2000-09  |??   |                 Sun sparc|   |\n|   |     |                            |         |2001     |     |Waldorf MD  (1 letter)    | 38|\n|   |     |                            |         |2002-08  |     |Alexandria VA Martha W    | 39|\n| 29|     |~BroadVoice                 |2004-04  |2004-10  |??   |                          |   |\n|   |     |                            |         |2004-06  |     |Lowell MA                 | 40|\n| 30|     |Nextel                      |2004-11  |2005-02  |     |                          |   |\n|   |     |                            |         |         |     |Fairfax VA Hunting Pines  | 41|\n| 31|     |MCI                         |2005-06  |2005-08  |     |                          |   |\n| 32|     |Primerica                   |2005-??  |2006-02  |     |                          |   |\n| 33|     |Verisign                    |2005-08  |2005-12  |     |                          |   |\n|   |     |                            |         |2006-07  |     |Fairfax VA Persimmon      | 42|\n| 34|     |BroadSoft                   |2006-04  |2006-11  |     |                          |   |\n| 35|     |Sightline Systems           |2007-04  |2007-11  |     |                          |   |\n|   |     |                            |         |         |     |            Barb moves out|   |\n| 36|     |Lockheed Martin             |2007-11  |2008-02  |     |                          |   |\n|   |     |                            |         |2008-03  |     |Arlington VA N Glebe      |  *|\n| 37|     |BuildTopia                  |2008-03  |2008-05  |     |                          |   |\n|   |     |                            |         |2008-05  |     |Arlington VA N Wayne      | 43|\n| 38|     |Northrop Grumman            |2008-08  |2008-11  |     |                          |   |\n| 39|     |Vecna                       |2009-01  |2009-01  |     |                          |   |\n|   |     |                            |         |2008-03  |     |Arlington VA N Glebe      |  *|\n| 40|     |Comcast                     |2009-11  |2010-02  |50.00|                          |   |\n| 41|     |Global Technology Group     |2010-12  |2010-12  |12.50|                          |   |\n| 42|     |BlinkMind                   |2011-01  |2011-05  |     |                          |   |\n|   |     |                            |         |2011-04  |     |~McLean VA KMOH           | 44|\n| 43|     |Bregco                      |2011-06? |2011-08? |10.00|                          |   |\n| 44|     |Sure Secure Solutions       |2011-08  |2011-12  |     |                          |   |\n| 45|     |Avanti                      |2012-02  |2013-07  |     |                          |   |\n| 46|     |OSHA                        |2013-08  |2013-11  |50.00|                          |   |\n| 47|     |JDSU                        |2014-08  |2014-09  |50.00|                          |   |\n|   |     |                            |         |2014-10  |     |Falls Church VA Merrifield| 45|\n| 48|     |NOAA                        |2014-10  |2017-05  | 100K|                          |   |\n|   |     |                            |         |2008-03  |     |~McLean VA The Igloo      | 46|\n\n\n\n\n\n2012 – Present: Avanti Corporation, Software Developer\n2011-2012: ‎Sure Secure Solutions, Software Developer,\n2010‎: Global Technology Group, Inc., Software Developer\n2009 – 2010: ‎Comcast, Sysadmin,\n2009‎: Vecna, Data Analyst\n2008: Northrop Grumman ‎- Sysadmin\n2008: BuildTopia‎, Software Developer\n2007-2008‎: Lockheed Martin, Software Developer\n2007: SightLine Systems, Software Developer\n2006: BroadSoft‎, Software Developer\n2005: MCI, Software Developer\n2004-2005‎: Nextel, Software Developer\n2004: BroadVoice‎, Software Developer\n1999-2004: ‎Anvicom / FAA, Software Developer\n\n\n|     |-NOAA                        |2016-10  |2013-07  |     |                          |\n\n\n|     |                             |         |2009-06  |     |Arlington VA N Glebe      |\n|     |                             |         |2011-04  |     |Falls Church VA Merrifield|\n|     |                             |         |2011-04  |     |McLean VA Igloo           |\n|     |                             |         |2018-01  |     |                 Fail tour|\n|     |                             |2009-06  |2011-04  |     |Arlington VA N Glebe      |\n\n\n\"Programming is best regarded as the process of creating works of literature,\n\"which are meant to be read... so we ought to address them to people, not to\n\"machines.\" (Donald Knuth, \"Literate Programming\", 1981)\n\n\"Source code is a love letter to your successor, and we all hate our\npredecessor.\"  -- me\n\n\n\nThe real plot synopsis: Case of the Spunky Monkey\n\nYou wake up in bed, feeling like a wet sponge. Your eyes focus on the alarm\nclock on the nightstand. If it went off, you sure didn't hear it. Better hurry\nor you will be late again! After scrambling around your poorly laid out\napartment to find all the things you need, you escape the house. As you leave,\nyou find a package on your welcome mat in the hallway. Mom has been cleaning\nthe attic and she has sent you several things. Mostly single socks. And always,\nwith the note. The last sock said, \"Kiddo, Not a hint, just another single sock!\nMaybe if you find the other, you'll make a pair. Love, (not yet Grand)mom.\"\n\nBetter get out of your revery and get on the train! You throw the package inside,\nlock up your apartment, and run down the sidewalk to the Metro. Once you're\naboard, it's off to work on the DC Metro. Board at McLean Station near your\napartment, and disembark in... It doesn't matter, because you're never going to\nnavigate past Foggy Bottom Station.  Here is your Metro:\n\n|>|Foggy Bottom| (end game)|\n|>|Rosslyn|Swimming Pool|\n|>|Court House|Courthouse|\n|>|Clarendon|Your House|\n|>|Virginia Square|Bobby's House|\n|>|Ballston|Sled Hill|\n|>|East Falls Church||\n|>|~McLean Station||\n\nThe stops in between (East Falls Church;\nBallston; Virginia Square; Clarendon; Court House; Rosslyn) w parallel locations\nin Frobzville, where you are about age 12 in 1974 again.\n\nitems:\nfresh batteries\ndead batteries\n\nHow Points Are Scored\nenter treehouse (full moon or flashlight)\nexit submarine\n\n\nDiamooond cluster   Room of Nephthys    5\nEmerald cluster Room of Isis    5\nOpal cluster    Room of Neith   5\nRuby cluster    Room of Selkis  5\nBeam    Barge   15\nGolden chalice  Golden Alcove   15\nSliver chalice  Silver Alcove   15\nAncient book    In slab in Annex    10\nScarab  Treasury    10\nOther points are awarded for:\n\nbreaking the lock on the trunk (5),\nfinding the pyramid while digging (25),\nputting the stone cube in the opening (20),\nentering the Circular Room (30),\nentering the Room of Isis (25),\nentering the Room of Neith (25),\nentering the Room of Nephthys (25),\nentering the Room of Selkis (25),\ntaking the right bricks out of the panel in the Cube (25),\nbreaking the plaster at Bottom of Stairs (10),\nbreaking the plaster at the west end of the Narrow Passageway (25),\nopening the sealed door in the north Antechamber (40), and\nopening the sarcophagus (35).\n\nPoints\nbring flashlight with battery to the forest, find treehouse\n\n\n\n\nYou get a letter from a lawyer telling you your dear old Aunt Hildegard,\nwith whom you had spent many a summer vaction as a child, has passed away.\nYou remember her to be a woman of considerable means. But before you can\ninherit her means you must meet one stipulation in her will, explains\nthe lawyer. Her will states that the prospective heir will inheirit her entire\nestate, if he can find it, hidden in her kooky house in the form of treasure.\nThe lawyer says you have X number of hours to complete the task. If you fail,\n(evil) Cousin Herman, who used to beat you up during the many summers he also\nspent at Aunt Hildegard's as a child, is next in line.\n\nMeanwhile, behind the scence, Aunt Hildegard is not really dead. She has\nthe lawyer in on the scam. She is only testing you to see if you are\nworthy to inheirit the family fortune. But Cousin Herman shows up to complicate\nthings.\n\nAt first his plan is to simply scare you out of the house. Then really\nkill Aunt Hildagard (Making it look like she died by accident setting up\na puzzle for you). Or make it look like you did it. But if you aren't easily\nscared, by the middle (?) of the game things heat up and he trys to kill you.\n(Things that were harmless in the beginning of the game change, with some type\nof warning, and are now deadly.)\n\n\nOptions:\n\nLawyer could be in on it with Herman.\n\nYou must save Aunt Hildegard's life, Herman hasn't killed her yet. (One\ncan envision you racing to free her from a buzz saw.)\n\nHerman dies from his greed.\n\nEtc. etc.\n\n\n\n\"the case of the spunky monkey\" by \"Charlie Hitselberger\"\n\nChapter 1 - modern era\n\nYour Room is a lighted room.\n\"The brightness is blinding, you can't see a thing.  You're not sleeping.\"\n\nThe Bed is in Your Room.\nYou are in bed.\n\nthe Hallway is south of Your Room.\nthe Bathroom is south of the Hallway.\n\nChapter 2 - Summer of 1974\n\nYour Bed is in a dark room called My Room.\n\"The darkness is so bright you can't see a thing.  You are wide awake.\"\n\n\n\nThe Lot is a room. The ten-speed bike is a rideable vehicle in the Lot.\n\n[We make the ten-speed bike a rideable vehicle because we want to say that the player is on it rather than in it. Then our other room:]\n\nCambridge is east of the Lot.\n\n[And now we borrow from the Actions chapter to prevent travel without the proper equipment:]\n\nInstead of going to Cambridge when the player is not on the ten-speed bike:\n    say \"It's a long journey to Cambridge: you'll never make it on foot.\"\n\nAfter going to Cambridge:\n    say \"You begin pedalling determinedly.\";\n    continue the action.\n\nTest me with \"e / get on ten-speed bike / e\".\n\n877-647-8551 overdraft department\n\n\ncast fireball\n\n\n(C:$066c) m 4a0 669;d 4c5 669\n>C:04a0  10 08 04 02  01 60 cf f9  3a 00 3d 77  40 18 45 09   phdba`O.:@=w@xEi\n>C:04b0  4a 80 51 8a  c7 22 e9 9e  e7 eb 62 b1  94 26 58 b3   J.Q.G\"....b..&X.\n>C:04c0  e5 11 74 a8  63 e6 1e d0  02 e6 1f a9  05 48 a0 00   .qt.c.^Pb._.eH @\n>C:04d0  b1 1e 29 0f  0a aa 4a 51  1e f0 0b 86  1c 4a 4a 4a   .^)oj.JQ^.k.\\JJJ\n>C:04e0  a8 b9 a5 04  48 60 bd a6  04 48 30 10  e6 1e f0 0d   ...dH`..dH0p.^.m\n>C:04f0  e0 0e b0 05  a6 1c b5 01  60 a5 1d 4a  60 e6 1f d0    n.e.\\.a`.]J`._P\n>C:0500  ef b5 00 85  00 b5 01 85  01 60 a5 00  81 00 a0 00   ..@.@.a.a`.@.@ @\n>C:0510  84 1c f6 00  d0 02 f6 01  60 a1 00 85  00 a0 00 84   .\\.@Pb.a`.@.@ @.\n>C:0520  01 f0 ed a0  00 f0 06 20  a9 05 a1 00  a8 20 a9 05   a.. @.f .e.@. .e\n>C:0530  a1 00 85 00  84 01 a0 00  84 1c 60 10  29 60 30 26   .@.@.a @.\\`p)`0&\n>C:0540  60 15 00 f0  21 60 15 00  d0 1c 60 35  00 49 ff f0   `u@.!`u@P\\`5@I..\n>C:0550  15 60 35 00  49 ff d0 0e  60 a5 1e 20  0c 05 a5 1f   u`5@I.Pn`.^ le._\n>C:0560  20 0c 05 18  b0 0e b1 1e  10 01 88 65  1e 85 1e 98    lex.n.^pa.e^.^.\n>C:0570  65 1f 85 1f  60 b0 ec 60  a5 00 95 00  a5 01 95 01   e_._`..`.@.@.a.a\n>C:0580  60 20 19 05  a1 00 85 01  4c 12 05 20  0a 05 a5 01   ` ye.@.aLre je.a\n>C:0590  81 00 4c 12  05 86 1c a0  02 20 fa 05  4c 44 06 20   .@Lre.\\ b .eLDf\n>C:05a0  a9 05 a5 00  81 00 4c 36  05 b5 00 d0  02 d6 01 d6   .e.@.@L6e.@PbVaV\n>C:05b0  00 60 a0 00  38 a5 00 f5  00 99 00 00  a5 01 f5 01   @` @8.@.@.@@.a.a\n>C:05c0  99 01 00 84  1c 26 1d 60  a9 85 85 1e  a9 00 85 1f   .a@.\\&]`...^.@._\n>C:05d0  e6 1e d0 02  e6 1f 68 68  ba a5 1e 9d  05 01 a5 1f   .^Pb._hh..^.ea._\n>C:05e0  9d 06 01 4c  00 e6 30 27  30 36 30 46  a5 00 75 00   .faL@.0'060F.@u@\n>C:05f0  85 00 a5 01  75 01 a0 00  f0 c6 b1 1e  95 01 88 b1   .@.aua @.F.^.a..\n>C:0600  1e 95 00 98  38 65 1e 85  1e b0 01 60  e6 1f 60 a2   ^.@.8e^.^.a`._`.\n>C:0610  18 20 a9 05  a1 00 85 1f  20 a9 05 a1  00 85 1e 60   x .e.@._ .e.@.^`\n>C:0620  ba bd 04 01  aa 20 f2 0f  8a ba 9d 04  01 a2 02 4c   ..da. .o...da.bL\n>C:0630  01 05 ba bd  04 01 aa 20  91 09 8a ba  9d 04 01 a2   ae..da. .i...da.\n>C:0640  02 4c 78 05  ba bd 04 01  aa 20 52 06  8a ba 9d 04   bLxe..da. Rf...d\n>C:0650  01 60 6c 16  00 58 bc 06  01 bd 05 01  38 e9 02 b0   a`lv@X.fa.ea8.b.\n>C:0660  01 88 84 1f  85 1e 20 c5  04 4c                      a.._.^ EdL\nSW16C:       .C:04c5  E6 1E       INC $1E\n             .C:04c7  D0 02       BNE .SW16D\n             .C:04c9  E6 1F       INC $1F\nSW16D:       .C:04cb  A9 05       LDA #$05\n             .C:04cd  48          PHA\n             .C:04ce  A0 00       LDY #$00\n             .C:04d0  B1 1E       LDA ($1E),Y\n             .C:04d2  29 0F       AND #$0F\n             .C:04d4  0A          ASL A\n             .C:04d5  AA          TAX\n             .C:04d6  4A          LSR A\n             .C:04d7  51 1E       EOR ($1E),Y\n             .C:04d9  F0 0B       BEQ .TOBR\n             .C:04db  86 1C       STX $1C\n             .C:04dd  4A          LSR A\n             .C:04de  4A          LSR A\n             .C:04df  4A          LSR A\n             .C:04e0  A8          TAY\n             .C:04e1  B9 A5 04    LDA .plugh,Y\n             .C:04e4  48          PHA\ndisp1:       .C:04e5  60          RTS\nTOBR:        .C:04e6  BD A6 04    LDA .BRTBL,X\n             .C:04e9  48          PHA\n             .C:04ea  30 10       BMI .disp3\n             .C:04ec  E6 1E       INC $1E\n             .C:04ee  F0 0D       BEQ .TOBR5\nTOBR2:       .C:04f2  B0 05       BCS .TOBR3\n             .C:04f4  A6 1C       LDX $1C\n             .C:04f6  B5 01       LDA $01,X\ndisp2:       .C:04f8  60          RTS\nTOBR3:       .C:04f9  A5 1D       LDA $1D\n             .C:04fb  4A          LSR A\ndisp3:       .C:04fc  60          RTS\nTOBR5:       .C:04fd  E6 1F       INC $1F\n             .C:04ff  D0 EF       BNE .TOBR2\nLD:          .C:0501  B5 00       LDA $00,X\n             .C:0503  85 00       STA $00\n             .C:0505  B5 01       LDA $01,X\n             .C:0507  85 01       STA $01\n             .C:0509  60          RTS\nSTAT:        .C:050a  A5 00       LDA $00\nSTAT2:       .C:050c  81 00       STA ($00,X)\n             .C:050e  A0 00       LDY #$00\nSTAT3:       .C:0510  84 1C       STY $1C\nINR:         .C:0512  F6 00       INC $00,X\n             .C:0514  D0 02       BNE .INR2\n             .C:0516  F6 01       INC $01,X\nINR2:        .C:0518  60          RTS\nLDAT:        .C:0519  A1 00       LDA ($00,X)\n             .C:051b  85 00       STA $00\n             .C:051d  A0 00       LDY #$00\n             .C:051f  84 01       STY $01\n             .C:0521  F0 ED       BEQ .STAT3\nPOP:         .C:0523  A0 00       LDY #$00\n             .C:0525  F0 06       BEQ .POP2\nPOPD:        .C:0527  20 A9 05    JSR .DCR\n             .C:052a  A1 00       LDA ($00,X)\n             .C:052c  A8          TAY\nPOP2:        .C:052d  20 A9 05    JSR .DCR\n             .C:0530  A1 00       LDA ($00,X)\n             .C:0532  85 00       STA $00\n             .C:0534  84 01       STY $01\nPOP3:        .C:0536  A0 00       LDY #$00\n             .C:0538  84 1C       STY $1C\n             .C:053a  60          RTS\nBP:          .C:053b  10 29       BPL .BR1\n             .C:053d  60          RTS\nBM:          .C:053e  30 26       BMI .BR1\n             .C:0540  60          RTS\nBZ:          .C:0541  15 00       ORA $00,X\n             .C:0543  F0 21       BEQ .BR1\n             .C:0545  60          RTS\nBNZ:         .C:0546  15 00       ORA $00,X\n             .C:0548  D0 1C       BNE .BR1\n             .C:054a  60          RTS\nBM1:         .C:054b  35 00       AND $00,X\n             .C:054d  49 FF       EOR #$FF\n             .C:054f  F0 15       BEQ .BR1\n             .C:0551  60          RTS\nBNM1:        .C:0552  35 00       AND $00,X\n             .C:0554  49 FF       EOR #$FF\n             .C:0556  D0 0E       BNE .BR1\n             .C:0558  60          RTS\nBS:          .C:0559  A5 1E       LDA $1E\n             .C:055b  20 0C 05    JSR .STAT2\n             .C:055e  A5 1F       LDA $1F\n             .C:0560  20 0C 05    JSR .STAT2\nBR:          .C:0563  18          CLC\nBNC:         .C:0564  B0 0E       BCS .BNC2\nBR1:         .C:0566  B1 1E       LDA ($1E),Y\n             .C:0568  10 01       BPL .BR2\n             .C:056a  88          DEY\nBR2:         .C:056b  65 1E       ADC $1E\n             .C:056d  85 1E       STA $1E\n             .C:056f  98          TYA\n             .C:0570  65 1F       ADC $1F\n             .C:0572  85 1F       STA $1F\nBNC2:        .C:0574  60          RTS\nBC:          .C:0575  B0 EC       BCS .BR\n             .C:0577  60          RTS\nST:          .C:0578  A5 00       LDA $00\n             .C:057a  95 00       STA $00,X\n             .C:057c  A5 01       LDA $01\n             .C:057e  95 01       STA $01,X\n             .C:0580  60          RTS\nLDDAT:       .C:0581  20 19 05    JSR .LDAT\n             .C:0584  A1 00       LDA ($00,X)\n             .C:0586  85 01       STA $01\n             .C:0588  4C 12 05    JMP .INR\nSTDAT:       .C:058b  20 0A 05    JSR .STAT\n             .C:058e  A5 01       LDA $01\n             .C:0590  81 00       STA ($00,X)\n             .C:0592  4C 12 05    JMP .INR\nEXT:         .C:0595  86 1C       STX $1C\n             .C:0597  A0 02       LDY #$02\n             .C:0599  20 FA 05    JSR .SET\n             .C:059c  4C 44 06    JMP .extdispatch\nSTPAT:       .C:059f  20 A9 05    JSR .DCR\n             .C:05a2  A5 00       LDA $00\n             .C:05a4  81 00       STA ($00,X)\n             .C:05a6  4C 36 05    JMP .POP3\nDCR:         .C:05a9  B5 00       LDA $00,X\n             .C:05ab  D0 02       BNE .DCR2\n             .C:05ad  D6 01       DEC $01,X\nDCR2:        .C:05af  D6 00       DEC $00,X\n             .C:05b1  60          RTS\nSUB:         .C:05b2  A0 00       LDY #$00\nCPR:         .C:05b4  38          SEC\n             .C:05b5  A5 00       LDA $00\n             .C:05b7  F5 00       SBC $00,X\n             .C:05b9  99 00 00    STA $0000,Y\n             .C:05bc  A5 01       LDA $01\n             .C:05be  F5 01       SBC $01,X\nSUB2:        .C:05c0  99 01 00    STA $0001,Y\n             .C:05c3  84 1C       STY $1C\n             .C:05c5  26 1D       ROL $1D\n             .C:05c7  60          RTS\nNXT:         .C:05c8  A9 85       LDA #$85\n             .C:05ca  85 1E       STA $1E\n             .C:05cc  A9 00       LDA #$00\n             .C:05ce  85 1F       STA $1F\nRTN:         .C:05d0  E6 1E       INC $1E\n             .C:05d2  D0 02       BNE .RTN2\n             .C:05d4  E6 1F       INC $1F\nRTN2:        .C:05d6  68          PLA\n             .C:05d7  68          PLA\n             .C:05d8  BA          TSX\n             .C:05d9  A5 1E       LDA $1E\n             .C:05db  9D 05 01    STA $0105,X\n             .C:05de  A5 1F       LDA $1F\n             .C:05e0  9D 06 01    STA $0106,X\n             .C:05e3  4C 00 E6    JMP $E600\nRS:          .C:05e6  30 27       BMI .RSZ\nPULL:        .C:05e8  30 36       BMI .PULLZ\nPUSH:        .C:05ea  30 46       BMI .PUSHZ\nADD:         .C:05ec  A5 00       LDA $00\n             .C:05ee  75 00       ADC $00,X\n             .C:05f0  85 00       STA $00\n             .C:05f2  A5 01       LDA $01\n             .C:05f4  75 01       ADC $01,X\n             .C:05f6  A0 00       LDY #$00\n             .C:05f8  F0 C6       BEQ .SUB2\nSET:         .C:05fa  B1 1E       LDA ($1E),Y\n             .C:05fc  95 01       STA $01,X\n             .C:05fe  88          DEY\n             .C:05ff  B1 1E       LDA ($1E),Y\n             .C:0601  95 00       STA $00,X\n             .C:0603  98          TYA\n             .C:0604  38          SEC\n             .C:0605  65 1E       ADC $1E\n             .C:0607  85 1E       STA $1E\n             .C:0609  B0 01       BCS .SET2\n             .C:060b  60          RTS\nSET2:        .C:060c  E6 1F       INC $1F\n             .C:060e  60          RTS\nRSZ:         .C:060f  A2 18       LDX #$18\n             .C:0611  20 A9 05    JSR .DCR\n             .C:0614  A1 00       LDA ($00,X)\n             .C:0616  85 1F       STA $1F\n             .C:0618  20 A9 05    JSR .DCR\n             .C:061b  A1 00       LDA ($00,X)\n             .C:061d  85 1E       STA $1E\n             .C:061f  60          RTS\nPULLZ:       .C:0620  BA          TSX\n             .C:0621  BD 04 01    LDA $0104,X\n             .C:0624  AA          TAX\n             .C:0625  20 F2 0F    JSR .slide\n             .C:0628  8A          TXA\n             .C:0629  BA          TSX\n             .C:062a  9D 04 01    STA $0104,X\n             .C:062d  A2 02       LDX #$02\n             .C:062f  4C 01 05    JMP .LD\nPUSHZ:       .C:0632  BA          TSX\n             .C:0633  BD 04 01    LDA $0104,X\n             .C:0636  AA          TAX\n             .C:0637  20 91 09    JSR .slip\nPUSH2:       .C:063a  8A          TXA\n             .C:063b  BA          TSX\n             .C:063c  9D 04 01    STA $0104,X\n             .C:063f  A2 02       LDX #$02\n             .C:0641  4C 78 05    JMP .ST\nextdispatch: .C:0644  BA          TSX\n             .C:0645  BD 04 01    LDA $0104,X\n             .C:0648  AA          TAX\n             .C:0649  20 52 06    JSR .doextreg\n             .C:064c  8A          TXA\n             .C:064d  BA          TSX\n             .C:064e  9D 04 01    STA $0104,X\n             .C:0651  60          RTS\ndoextreg:    .C:0652  6C 16 00    JMP ($0016)\nSW16:        .C:0655  58          CLI\n             .C:0656  BC 06 01    LDY $0106,X\n             .C:0659  BD 05 01    LDA $0105,X\n             .C:065c  38          SEC\n             .C:065d  E9 02       SBC #$02\n             .C:065f  B0 01       BCS .SW16A\n             .C:0661  88          DEY\nSW16A:       .C:0662  84 1F       STY $1F\n             .C:0664  85 1E       STA $1E\nSW16B:       .C:0666  20 C5 04    JSR .SW16C\n             .C:0669  4C 66 06    JMP .SW16B\n\n\nmoving things downhill\nnested do loops\n    outer $0..F\n        inner #1..31\n\n\n        run the sorted list first\n        run the unsorted list\n        handle smudged words\n            highest CFA in-bounds word gets to be unsmudged\n            should also be most recently defined\n\n            is cfa \"in bounds\"?\n            yes investigate further\n                does length = i ; pearson# = j?\n            nope\n        loop\n    loop\n\nIf my license plate said \"JSR FFD2\" on it, how many of you know what that means?\n\nIt doesn't.  I don't have a car.  I haven't driven a car since 2009.  Okay maybe\non one or two occasions, when the need to drive outweighed the illegality of it.\n\n\n2020-03-22T04:09:36-04:00\n\n|    |McLean            |              |\n|    |East Falls Church |              |\n|    |Ballston          |Sled Hill     |\n|    |Virginia Square   |Bobby's House |\n|    |Clarendon         |Your House    |\n|    |Court House       |Court House   |\n|    |Rosslyn           |Swimming Pool |\n|    |Foggy Bottom      |  (end game)  |\n\n|points |10     |                    |            |                                     |\n|10     |10     |Green Lantern comic |Hypno-coin  |Billy Saffel is nice to you          |\n|10     |10     |Iron Man comic      |Submarine   |hide at bottom of pool; access DRAIN |\n|10     |10     |Batman comic        |Xray speX   |range and bearing to librarian       |\n|10     |10     |Wonder Woman comic  |Hovercraft  |down extremely dangerous Sled Hill   |\n|10     |10     |Aquaman comic       |Sea Monkeys |                                     |\n|10     |      0|Fantastic Four comic|Army Men    |distract Schrodinger the Cop         |\n|10     |       |Take apart flashlight                                                  |||\n|10     |       |Take apart vacuum                                                      |||\n|10     |       |Ditch Schrodinger the Cop                                              |||\n|10     |       |Ditch Billy Saffel                                                     |||\n|10     |       |look at tank through x-ray spex                                        |||\n|Your house |   |Take apart flashlight                                                  |||\n|Bobby's House ||get your comic book (flashlight or pebbles)                            |||\n\nwear xray spex\n\"everything looks completely normal.\"\n\nYou wake up, feeling rushed.  It's 6:37 and you're running late.  That's also the\n3-digit chain lock combination so you want to remember it.  It changes every game.\n\nGet the items you need\n    { farecard, watch, phone, badge, keys, umbrella, bag, lunch, wallet}\nLeave the apartment and head to McLean Metro.\nBoard and fall asleep between EFC and Ballston\n    (optional: if you made coffee, you will stay awake on the train.  It's dull.\n    A passenger may spark your interest by holding the door open. for two announces.\n    then \"ding\")\n    train moves between each turn\n\n        1.  \"stand back, doors opening\"\n        2.  :pause:\n        3.  \"stand back, doors closing\"\n        4.  \"ding!\"\n        5.  :acceleration:\n        6.  \"next station, Virginia Square\"\n        7.  :deceleration:\n        8.  \"This is Virginia Square station. [random phrase]\"\n\n    7.5 fall asleep before Ballston only (unless you made coffee)\n    3.5 passenger blocking door, announcer is first informative, then peeved.\n\ntie up bike at Court House -- extra time downtown\ntie up bike at Pool -- needed for endgame\n\nSled Hill\n    leave Hovercraft here\nBobby's House - driveway - front yard - back yard - frobz national forest surround\n    pebbles\nYour House\n- driveway\n- front yard\n- back yard\n    * path to treehouse (visible with flashlight only)\nTree house\n- forest surround\n    chain lock (attached to gas pipe outside, combo is time you woke up)\n\n\nWhen you order the Sea Monkeys, they do not arrive.  You must cycle through a day/night\nand leave the Igloo the next morning.  There's another package from mom, your old crusty\nSea monkeys tank.  There's no place to hydrate them in modern world, only a clunky\napartment here.  Mail them to yourself (Look at house. Look at street sign.\nFrobzville.)  This triggers the endgame.\n\n\nYou must mail the crusty sea monkeys to yourself.\nThey arrive\n\n\nthe first night you dream of is a full moon\n    billy saffel is out, raging\n\nthe second night is new moon\n    flash light needs to work\n\n\nThe Igloo\n    entry\n        entry closet\n    living room\n        deck                            (overlooking a view of a sound wall)\n    kitchen\n        laundry room\n            laundry room closet\n    hallway\n        hall closet\n        child bedroom\n        guest bedroom\n        main bathroom\n        master bedroom\n            master bathroom\n\n\nthere are four books at the library\n\nMagic\n    two tricks\nMesmerization\n    neutralize billy saffel with the hypno coin\nMathematics\n    some godel escher bach puzzle\nMarine Biology\n    how to raise and train pet Sea Monkeys\n\nand each time you collect four things, that leads to a fifth thing\n\n\nthe care package from mom will always have a fun note \"Oh I was cleaning out\nthe attic the other day and I came across your old computer.  I hope it still\nworks!\"\n\n\nsince we're being pretty blatant about using the Washington Metro as a\nsetting, I have no problem with making the final puzzle be...\n\n\na bicycle alleycat scavenger hunt above ground beginning at Washington Circle\n(GWU Foggy Bottom) and describing the inverted pentagram in the DC street\nlayout\n\n\nbegin at Washington Circle (you narrowly escape the Metro as the Potomac River floods in )\n\n\nrun up the down escalator\n\n\nthe up escalator is broken.  It's just standing still.\n\n\nBut you have to run up the down escalator because the other one is described as \"world's slowest escalator\"\n\n\nno amount of running on the stalled Up escalator will get you to the top, and some amount of running is required to escape the rising flood waters\n\n\nthe pentagram dash - GWU, Dupont Circle, White House, Logan Circle and finish at Mt. Vernon Square\n\n\nIt starts at GWU.  Then visit the other three points in any order.   Mt. Vernon Square must be last.\n\n\nboom. time travel. You're all grown up, and you're somewhere on the ground in Frobzville.  You need to get into position so you know { the information } when you see the lighted model airplane flying\n\n\nand you need to put the { correct resistor } into the circuit\n\n\ntwo or three more things for mom to ship from the attic\n\n\ncrusty old sea monkey tank (\"the tank contains: no Sea Monkeys\"); Commodore PET computer; cassette tape (contains buggy time travel calculations); your old flashlight\n\n\nyour Computer Lib/Dream Machines book\n\n\nI'm calling the \"Models\" book \"Modeling\" and it is about construction scale replicas, not ho-bagging\n\n\nall the comic books are belong to you already, and you have read them all dozens of times too\n\n\nthey're in your hideout.   No need to open the 5 & 10 store or limit the amount to one purchase per customer\n\n\nthe ENVELOPE is in the desk in the house.  Step on the creaky board and mom wakes up, tucks you in (you wake up)\n\n\nthere's only ever one envelope per dream, and sneaking it out of the house is troublesome\n\n\nstamp\n\n\nvacuum cleaner\n\n\nvacuum cleaner motor\n\n\nhovercraft\n\n\npen\n\n\nSAT 10:36 PM\nBobby's House -- he has half of the comic books.  Gotta wake him up.\n\n\nUse the flashlight.  Tossing pebbles at the window wakes up his dad (not good)\n\n\nthe window opens.  the comic books plop on the ground.  \"Go away, I was asleep and dreaming.\" the window shuts.\n\n\nSAT 11:54 PM\n\n\nthe 1974 courthouse clock will make a \"ding\" sound like a train door closing\n\n\nafter five of those, get ready because your dream is about to end when your ears pop and you wake up under the potomac\n\n\nthe 1974 player has to send the model plane airborne after hearing ding #2 but before 7 turns later when ding #3 happens\n\n\nor maybe it's stop the train between station 4 (Court House) and station 5 (Rosslyn).  Then the plane has to fly after hearing the 4th \"ding\" from the courthouse clock\n\n\nfuture me is hiding in the clock tower and needs to know where the train is stopped in order to go to that \"station\" (My House if it's 4 dings) and restart the train, after taking all the extra time needed to do the lengthier puzzle\n\n\nthe other cue in the 1974 world is the time on the courthouse clock\n\n\n\"from this distance it looks like a little after 3:00\"\n\n\nthat means you have heard three \"dings\" and had 21 turns\n\n\nthe station varies for each game, like in Zork where you never know what room the thief will rob you\n\n\nthe color (resistor code) of something will indicate what the number is { Brown = 1 Sled Hill,\nRed = 2 Bobby's house,\nOrange = 3 dings My House,\nYellow = 4 dings, courthouse,\nGreen = 5 dings, The Pool)\n\n\nso if the {NPC} is wearing the green jacket, that means wait until hearing 5 dings before flying the model airplane\n\n\nIt also means that future me has to climb down from the tower and walk to somewhere in 1974 world to restart the train\n\n\nI want a Godel Escher Bach tribute in there\n\n\nalso wanna amp up the infocom \"feel\" a bit\n\n\n\nGreen, Yellow, Orange, Red, Brown in addition to being the 1..5 resistor code digit values, is a pretty useful air quality index color set\n\n\nbreathability index is green at the pool, brown at the top of Sled Hill\n\n\nhigher altitude = more winded from the bicycle?\n\n\n\n\n\n2020-03-12T13:37:09-04:00\n(unremember)\ndoes the chewing gum lose it's flavor?\n\n1. does HARVEST/PLANTS/HARVEST invert the stack?\n\n\\ one time cold startup code, scrubbed after execution\ncode (cold)   (   ) nosymbol\n( symstart symsize  there+4 studio studio.size )\n\n\\ display documentation, run default loader screen\n: dL\"*\n   0 list  1 load ;\n\n\\ 00 screens are not loadable, therefore good splash screens\n\\ 01 screens would define a 'run' word, the default target\n: run\n    your pettil code goes here ;\n\nmanifest destiny\n\n ak    id    mn    mi    vt    nh    me\n    wa    mt    wi    wv    oh    ma\n ca    wy    sd    in    va    ny    ri\n    or    ut    il    mo    md    ct........\n nv    co    ne    ia    ky    ga    nc\n    nm    ks    ok    ak    tn    sc\n hi    az    tx    la    ms    al    fl\n          nd    ar    wv    pa    dc\n0123456789.0123456789.0123456789.0123456789.\nesc space enter\n\n\n\ndraw the solved map\nattract mode\nwait for space bar (quarter)\nshuffle the map\nput the empty somewhere\nbegin\n    keystroke? alphabetic? and\n    if\n        handle keystroke\n    then\n    map solved?\nuntil\n\n    first letter latched AND second letter matched?\n        swap empty with state\n    first letter matched?\n        set first letter latch on this state\n\n\n 0 @ 0= 0< 0> @+ 0<> pad prev pick\npause @swap! petscii\" ! 1 !+ 1- 1+ 1+!\n1-! and abs acc quit abort allot again\nquery 1+under 1-under assembler \" 2 2-\n2+ 2/ 2* 2! 2@ bl b< b> r> r@ 2>r 2+!\n2r@ 2r> blk bye rp0 rot rnd rp! r>m run\n2off 2nip 2dup 2rot base blk@ roll\n2drop 2over 2swap blank b/buf b/scr\nblock begin rdrop randu blkbuf random\nrndmax rehash repeat 2+under 2-under\nrestart recurse between? benjamin\nrandmask rlencode rldecode 2constant\n2variable # 3 #> #s 3- 3+ c! c@ cr c,\n3c@ 3c! c@+ c>s c!+ csp sp0 sa# scr sib\ns>d sgn sp! sp@ #blk #out #voc 3dup\ncinv coff copy cold code span swap sign\nsave #line #blk! 3coff 3drop cbinv\ncount cbit! cbit@ cmove cjoin cswap\nsbufs space state cursor cmove> csplit\ncmdoff casbuf create case#[ symtab\nspaces studio symnew 3-under cas1buf\ncas2buf current startup symtail\ncurrname constant cconstant save-forth\nsave-buffers 4 $! $. $, dp d= d< d+ d-\nd. do 40* dpl dup du< d>= d0= d2/ d2*\nd.r tib ten tdp drv# drop dsub dabs\ndmin dmax dump dl\"* tuck true type then\n$>pad 4drop dup>r depth does> third\n$index 40/mod dpswap toggle decimal\ndnegate dliteral definitions 5 u< u.\num* ud. u.r exit emit else edit ud.r\nuser erase eoscr under upper until\neighty expect editor ud/mod um/mod\nupdate editing execute exists?\nunremember empty-buffers 6 fill fail\nfile fence forty false flush forth\nvmbuf vbufs vdrop vidram vocabs vmdump\nflipscr filename variable vocabulary\nverify-buffers ' 7 warm width wrap@\nwrap! while words warning word-list ( 8\nhld hex xor xy@ (.@) here hold here<\nxyzzy 9 i in if id. info index\ninterpret immediate * : j */ */mod\njiffy@ jiffies + ; [ +! key ['] +move\n+loop +under , < \\ <> <# lin load loop\nlist limit l/scr lower lbufs leave\n<builds literal load-buffers - = ] -5\n-4 -3 -2 -1 -@ =r m* m/ m+ --> min max\nm*/ mod mon m>r -rot =irq move -nulls\n=cursor -trailing . > ^ .r .\" .( .@ .s\n.h >r .4h .dn .up .rt .lf .qt not nip\n.clr .rvs .off >bit >pkt name .home\n>name nminv name> negate number newest\nnosymbol / ? _ ?: or on ?do off /mod\n?dup ?key over ?exit ?pause ?stack\n?leave ?terminal\n\n\n2020-02-27T20:28:31-05:00\n\n\n^([0-9\\'\\\"\\*\\-\\+=])\n\n'\\1\n\nrename a word\nwrite the new symbol at symnew\ncopy the CFA from the original word\nsmudge the original word\nconcepts\n\nhttps://en.wikipedia.org/wiki/Clarke%27s_three_laws#Variants_of_the_third_law\nAny sufficiently advanced technology is indistinguishable from a rigged demo[11]\n\nBack in 1974, Ted Nelson published a book, Gary Gygax released a game and\nChuck Peddle worked on the 6800 at Motorola.  It had been five years since\nwe landed on the moon, and the NASA Skylab mission. This confluence of\n\nStory\n\nCrash magazine was the staple diet for the ZX Spectrum gamer in the 1980s and\nearly 1990s. Within its many pages readers could find reviews of the latest\ngames as well as topical features and regular slots like Hall of Fame and the\nJetman strip. A deal had been cut with Ultimate Play the Game - a company\nriding high at the time with release such as Jetpac, Cookie, Psst and Lunar\nJetman where the late John Richardson was commissioned each issue by Ultimate\nto produce a 1-page comic strip on the adventures of the intrepid hero of\nJetpac and Lunar Jetman - Jetman.\n\nFor the first time ever, the complete collection of John Richardson's Jetman\ncomic strips will be available in hardback or paperback and is to be called\nThe Collected Adventures of Jetman.\n\nThis Kickstarter is to raise the funds necessary to print this book.\n\n2020-02-25T00:04:32-05:00\n\nobject: { core, studio }\ncore stays resident for application code\nstudio is an interactive developer environment\nperturb -- test automation\n\nportil -- metacompiler\nwhat's in a word?\nstack effect: ( -- ) 768 bits + 2048 bits\n6502 register effect: { a x y s p pc } 55 bits\nSweet16 register effect:  { R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 } 4x4 diagram 256 bits\nmemory effect: 253952 bits\nI/O effect: pia1 pia2 via video\n%nosymbol: no\nlfa: $6EC9\nnfa:\nname: `forget`\nsymlen: 6\n%smudge: no\n%vocab: no\n%immed: no\nvocabid:\nobject: studio\nvocabid: <empty>\ntype: secondary\nFIG:\n1979:\nFORTH-83:\n\nCODE PROCESS\n1. name the word\n do this carefully.\n this is 51% of the developer's work.\n2. define the word's interfaces\n ( stack, 6502, Sweet16, memory, I/O )\n3. describe what the code does\n in pseudo-english-code-spanglish\n and then translate each line of this\n into Forth and assembler by inserting\n the instructions in between the lines.\n these lines become the shadow screen behind\n the definition.  Definitions take a line and\n their shadow line should be a succinct summary\n of the word's purpose.\n\nshadow line: \\ add two numbers, returning the sum\ndefinition line: code +   ( a b -- a+b )\nshadow screen: \\ comments and purpose of each line of code\nhosted source: what you see behind the \"code\" button in the tiddler\nnative source: png screen images replaces 'hosted source' once PORTIL is up.\ntiddler: Tiddlywiki block\nobject code: [4]address [2]bytes\n\n\n\n\n:\n Sweet16: use 4x4 block layout in `Diagrams` tiddler\nbefore: [sketch of sorted symtab & unsorted symnew regions]\nafter: [sketch of pad, merged symtab & empty symnew regions]\nconspiracies: dictionary N3\n{ when this word executes, does it participate in the conspiracy? }\n\ncfa: $098B\nname: `dup`\nstack: ( n -- n n )\nsymlen: 3\n%smudge: no\n%vocab: no\n%immed: no\nsource: core-nucleus.a65\nobject: studio\nvocabid: <empty>\n\ntype: secondary\nnosymbol: no\nbefore: [sketch of sorted symtab & unsorted symnew regions]\nafter: [sketch of pad, merged symtab & empty symnew regions]\nconspiracies: dictionary N3\n{ when this word executes, does it participate in the conspiracy? }\n\n\nname `(unremember)`\nstack: ( cfa -- )\ntype: secondary\nnosymbol: yes\nconspiracies: dictionary N3\n\n`load\"` {filename}\"\n`save\"` {filename}\"\n`verify\"` {filename}\"\n`drv#` is managed separately.  It's like driving stick.\n\n\n2020-02-21T23:30:16-05:00\n\nForth is written in Forth\nForth programs are called words\nForth words are grouped by vocabulary\nForth words are stored in a dictionary\nForth words have four fields\n\n|^name field|^NFA|^smudge bit<br/>vocabulaty bit<br/>immediate bit<br/>length<br/>length bytes of \"name\" string<br/>{optional} vocabid|^symtab|\n|^link field|^LFA|^16-bit code field address|^symtab|\n|^code field|^CFA|^stored at LFA|^dictionary|\n|^parameter field|^PFA|^{optional} e.g. 16-bit value of a constant|^dictionary|\n\nForth is a framework for Assembly Language\nForth is pronounceable\nForth is speakable\nForth is a high level language\nForth is a low level language\nForth is structured\n    Words are smaller chunks of code, more readily tested than larger\n    blocks of code common in other languages.  Code reuse is built in.\nForth is unstable\n    The simple act of unbalancing the data stack inside a loop running a few\n    dozen iterations will hang your system.  It's that simple.  If you make\n    a syntax mistake or leave a word out or add an extra word, and this results\n    in a code field address being something that isn't actual 6502 assembly code,\n    this will hang your system too.  The only remedy you have on a PET is to\n    reset or NMI your way back to a blinking cursor, and start over. I hope you\n    saved your code before you ran it!\n\nForth is powerful\n    There is no barrier between high level and low level code.  Everything\n    is possible.  After any word, anything else can go next.  All the rules\n    can be broken.  The compiler or interpreter can be adapted if need be,\n    but adding words to describe the solution to the problem space is usually\n    all that is necessary.\n\nForth is fast\nForth is compact\nForth is simple\nForth is complex\nForth is terse\nForth is object-oriented\n    The `<builds does>` construction\n    MOPS\n\nForth is a programming language\nForth is an operating system\nForth has an editor, assembler, compiler, interpreter, and virtual memory\n\nForth is a domain specific language\n    If you've seen one Forth, you've seen\n    one Forth.\n\nForth is a dictionary of short programs called words\n\nForth words are run simply by typing them and hitting return\n\nForth uses postfix notation\n    both a quirk and a benefit\n\nPETTIL is a Forth\n    The letter \"a\" here means PETTIL is an instance of Forth, they are not\n    equivalent.  \"Chum is fum!\" seems to imply that if you are having fum,\n    then there must be some chum nearby, and also that if you are in the\n    vicinity of chum, fum is an inevitable consequence.  PETTIL is a Forth\n    but PETTIL is not the only Forth.\nPETTIL runs on a Commodore PET\nPETTIL also runs on other machines\n    Other PETs\n    VIC-20\n    C=64\n    C128\n    Plus/4\nPETTIL is standard\nPETTIL is unconventional\nForth is straightforward\nForth is cryptic\nit's not fourth because the system it was originally written on could only handle 5 letter names\nyou don't so much write lines of code, but write lots of very short (maybe one\nline) functions and string them together\n\nPETTIL can get out of your way\n\nForth is frugal\n    It's not \"Fourth\" because the system it was written on had a limit of 5 letters\n    on filenames.  Even the name gets squeezed.\n\nForth has low system requirements\nForth is conversational\nForth is interactive\nThe input stream is a conveyor belt of your ideas and commands to the PET.  A haiku\n\n    PETTIL's input stream\n\nis all the PET hears from you\n\n       very carefully\n\nBy typing at the winking cursor you convey what you want the PET to do.\nThe PET doesn't see you, of course.  The edge of where the PET can see is\nthe keyboard.  To the PET, you look like device 0, the keyboard.  The PET\nscreen editor breaks things up into lines, and the screen editor will even\nconnect multiple lines together when the cursor wraps around at the right edge.\n\nOn the VIC-20 up to four physical lines can be connected like this to make\na maximum logical line size of 88 characters.  On 40-column machines only two\nlines may be joined, so 80 characters is the longest logical line.\n\nAfter you hit return, PETTIL will scan each word on the line, like groceries\non a conveyor belt.  The PET will look up the word in the dictionary,\nand if it finds it, it performs that word.\n\nBut what if the word you typed isn't in the dictionary?  Then the PET will\nsee if you typed a valid number, in the current number `base`.  PETTIL will\nput each number on the stack.  It is like using a microwave oven, each button\njust does something right away when you press it.\n\n\n\n\n\n\n          16           1        1        1        5    len*8      0|8\n\nsymbol = lfa + ( %smudge | %vocab | %immed | length ) + name + vocabid\nlfa = 16 bits, contains code field address CFA\n\n: ?migrate?   ( )\n\\     candidate CFA >= studio?\n\n        i ?copy-sorted\n        begin\n            length(pointer2sorted) = i?\n        while\n            check CFA and copy it\n            advance pointer2sorted\n        repeat\n        symnew is pointer2unsorted\n        begin\n            length(pointer2unsorted) = i?\n        while\n            check CFA and copy it\n            end of list?\n        until\n    next length\nnext thread\n\n\nbut the computer can't speak\nit can't listen to you\nhow do you have a conversation with a PET?\n\n```\ncode (cold)   ( -- )\n    '?aloha jsr,\n    >forth,\n    sp! 'there @+ tuck over @ 2+ cmove 2+ startup !\n    (lits) 5 'ustart 'uendcore 'ustart - 'userarea 'ucore 'uarea 'userarea -\n    cmove erase restart \\ ;\n```\n    @+ -rot @+ + swap @ over - symtab!\n    cmove> ( rubbish ) \\ symtab\n    drop  'VIDRAM+11*40 '14x40 blank  5 jiffies\n    !symtab\n&perturbpreserve\n\n\n    'dictionary conspiracy'\n                                        \\ rewind nfa to first name\nSYM0            *N3\n                                        \\ get length, vocab flag from nfa\nsymlens         n3  n8\n                                        \\ copy a name from `n3`\nsymcopy         n3  n7   \\ maybe tos?\n                                        \\ advance to next name in dictionary\nsym+            *n3\n                                        \\ get bloom filter bitmask from nfa\nbloom#          n3  n8\n                                        \\ locate a name in the dictionary\n(>name)         n3\n                                        \\ locate a name in the dictionary\n(seek)          n3\n                                        \\ get thread from nfa\npearson#        n3\n                                        \\ determine new symtab address from size\nsymtab!\n                                        \\ get nfa from cfa\n>name           n3\n                                        \\ reset symtab index, bloom filter\nsymdex\n\n!symtab         replace with\n                    symdex\n>syms\nsymrewind       replace with\n                    sym0\nsym+ always adds 3\n\n\n    'packet conspiracy'\n>PKT            *N8\nuncompressed?   n8\npkt.this        n8\npkt.wrap        n8\nupdate          n2 n8\nwrap@           n0\n\nremove set76\nremove init411\nremove swap73\nremove passbits\n\n\n2020-02-19T23:53:07-05:00\n\n: southerly ( cfa -- cfa )\n    sym0\n                                        ( cfa )\n    \\ symbols are copied to pad, sort\n    \\ by thread 0..F,  by length 1..31\n    16 0 do\n        31 1 do\n            i j ?gosouth?\n\n\n\n: (unremember) ( cfa -- )\n    southerly\n\n: southerly   ( cfa -- )\n$10 0 do\n  bl 0 do\n    begin\n        j\n    j match thread\n&   i match length\n&   cfa < newdp ?\n    if\n        copy south\n    then\n  loop\nloop\n2. calculate new `symtab`\n3. `+move` vmbuf region\n4. `cmove`\n5. !symdex\n    !bloom\n\n2020-02-19T15:27:50-05:00\nregister names\n\na                   n\nx                   v\ny                   x\ns                   v\np                   g\n\n|A     |X     |Y     |S     |P     |<|h\n|      |      |      |      |      |pre]|\n|      |      |      |      |      |post|\n|N     |V     |X     |V     |G     |h\n|      |      |      |      |      |pre|\n|      |      |      |      |      |post|\n\nb\nd\ni\n\n\\define sayhi(name:\"Bugs Bunny\" address:\"Rabbit Hole Hill\")\nHi, I'm $name$ and I live in $address$.\n\\end\n\nr0  acc             r8  n6\nr1  tos             r9  n7\nr2  n0              r10 n8\nr3  n1              r11 ext\nr4  n2              r12 sp\nr5  n3              r13 rslt\nr6  n4              r14 cmpr\nr7  n5              r15 pc\n\n\n\n2020-02-17T22:24:36-05:00\ndifferences between zxoooby and master\n\n0 symthread vs. symrewind\n\n: (unremember)   ( cfa -- ) nosymbol\n\nshoeboxes in a shoestore\nthink of threads as color of shoes\n\nif the word were a shoe:\nthe thread is the color of the shoe\nthe length is the size of the shoe\n`rehash` reorganizes the shoe store\n\n: discard?   ( cfa nfa -- cfa flag )\n    name>  ( cfa cfa' )\n    over < ;           ( cfa flag )\n// or is it?\n//    under < ;        ( cfa flag )\n\n: southerly\n// leaves all\n        CFA < `cfa`\n        sorted by thread\n            sorted by size\n        for duplicates, addresses are ascending\n            most recent (highest address of this duplicate) needs to be unsmudged, if it is smudged\n            this can be known early if we discard a high-cfa duplicate on southerly pass\n: ?copy-sorted\n: ?copy-unsorted\n// look at everything in `symnew .. symtail`\n// IF  cfa < `cfa`\n// AND i = length\n// AND j = thread\n// THEN\n//     copy it to `pad`\n//\nsymtab @ 34 +\n 0 symthread is pointer2sorted\nfor thread = 0 to F\n    for length=1 to 31\n        begin\n            length(pointer2sorted) = i?\n        while\n            check CFA and copy it\n            advance pointer2sorted\n        repeat\n        symnew is pointer2unsorted\n        begin\n            length(pointer2unsorted) = i?\n        while\n            check CFA and copy it\n            end of list?\n        until\n    next length\nnext thread\ncalculate size and address of new symtab\nnow is a good time to +move vmbuf\ncmove from `pad` to symtab+32\n!symdex\n\nword: four fields stored in two regions\n* symbol table or dictionary region\n** begins at `symtab`\n** capped by `studio` but things can be moved around\n* code region\n** begins at `here`\n** `pad` is an area for temporary storage that floats 80 bytes above `here`\n** currently `here` starts after PETTIL core but things can be moved around\n** capped by `vmbuf`\n\n# dictionary region -- `symtab symdex symthread .. symnew .. symtail`\n#* link field\n* `symtail` marks the end of the list, contains `$0000`\n#* name field\n* length/flags byte\n** $80 bit: smudge\n** $40 bit: vocab\n** $20 bit: immediate\n** 0..31 length bits\n* name string\n** `name.length` consecutive bytes of ASCII text e.g. \"DUP\"\n* vocabid byte\n** present when `name.vocab` bit is true\n* the end of the list is marked\n** by a `$0000` link field\n** followed by a `$00` length/flags byte\n** @symtail points to the null length/flags byte\n* it is possible to have duplicate link fields (synonyms)\n\n# code region -- `here ...`\n    # code field -- always points to executable code\n            defining word       signature\n            :                   jsr enter\n            constant            jsr doconst\n            variable            jsr docreate\n            primitive           could be anything\n    # parameter field -- example: the list of words in a secondary\n* possible to have code field without names (nosymbol)\n* possible to have parameter field without code field\n* possible to have parameter field without names (e.g. `power2`)\n\nPETTIL needs labels\n    like a symbol in every way, but these\n        labels are stored in a different area of memory than symbols\n        may be loaded from tape or disk\n        useful for forward referencing in metacompiler\n        labels can have values in the link field that are not necessarily code field addresses\n        labels can be something like MMSForth `quan`\n        'label &label *label\n\n# code field - code/data `here ...`\n# parameter field - code/data `here ...`\n\n* plenty of `nosymbol` words exist that have a code field and a parameter field, but no dictionary entry name/link fields\n* two different names can point to the same CFA `@-` `name>` or `0` `false` or `-1` `true`\n\nname : the name of a word, e.g. \"dup\"\nvocabulary : the name of the vocabulary a word is a member of\nvocab bit : a flag to indicate this word possesses a vocabid\nvocabid : an optional byte to uniquely identify this word's vocabulary\n\n\n\nduplicate name\n\nit's a duplicate only when the length & vocab bit ( & optional vocabid ) all match\n\n\n\n\nsoutherly \\ dictionary at pad,    sorted by thread\n                                    then size within thread\n                                    then time of compilation = CFA within duplicate name\n\n\n* rebuild and reindex the entire dictionary\n* rebalance it into 16 roughly equal-sized threads\n** thread key is the low four bits of the first character in the name.\n* Merge in newly created names from `symnew .. symtail`\n** that have been defined since startup\n** or the last `(unremember)`.\n* `bloom` filter will be repopulated\n!!!!PASS1\n* initialize output pointer to `pad`\n* for each of 16 threads:\n*   for each of 31 lengths:\n*     copy from `j symthread` to output until `i <> symlen`\n*\n* scan & copy\n* for each word < `cfa` stack parameter\n* copy smudged words too\n* Words with a CFA >= `cfa` stack parameter are discarded\n** when a word is discarded, if a predecessor (with the smudge bit set) exists:\n** AND the CFA of the predecessor is < `cfa` stack parameter\n*** unsmudge it\n!!!!PASS2\n\nA new `symtab`\naddress will be calculated at halftime.  After the second phase, the `symnew`\n list will be empty once again.\n\n```\n: (unremember)   ( cfa -- )\n    bloom 8 erase\n\n    passbits $80 !+ off\n    (forget).pass1 (filter)!\n    32 0  >syms pad\n    (forget).looper             \\ does `ext-until` 32x, completing pass1\n\n    passbits on\n    (forget).pass2 (filter)!\n    16 0  pad 3+ (automem)\n    (forget).looper             \\ does `ext-until` 16x, completing pass2\n```\n\n\n\n\n`unremember`\n\n2020-02-16T21:59:01-05:00\nforget\nload\"\nverify\"\nsave\"\n\nrules:\ndrv# is the device most recently accessed after PETTIL is loaded\n\n\n[img[logo2018-05-13-22-58.png]]\n\n<map name=\"logomap\">\n  <area shape=\"rect\" coords=\"0,0,100,95\" alt=\"Project\" title=\"project\" href=\"#project\">\n  <area shape=\"rect\" coords=\"100,0,200,95\" alt=\"PETTILmob\" title=\"PETTILmob\" href=\"#pettilmob\">\n  <area shape=\"rect\" coords=\"0,95,100,200\" alt=\"PETTILmobile\" title=\"PETTILmobile\" href=\"#pettilmobile\">\n  <area shape=\"rect\" coords=\"100,95,200,200\" alt=\"PETTILmini\" title=\"PETTILmini\" href=\"#pettilmini\">\n</map>\n\n\n<img src=\"./logo2018-05-13-22-58.png\" width=\"200\" height=\"200\" alt=\"PETTILmobile logo\" usemap=\"#logomap\" class=\"pretty\">\n\n<map name=\"logomap\">\n  <area shape=\"rect\" coords=\"0,0,100,95\" alt=\"Project\" title=\"project\" href=\"#project\">\n  <area shape=\"rect\" coords=\"100,0,200,95\" alt=\"PETTILmob\" title=\"PETTILmob\" href=\"#pettilmob\">\n  <area shape=\"rect\" coords=\"0,95,100,200\" alt=\"PETTILmobile\" title=\"PETTILmobile\" href=\"#pettilmobile\">\n  <area shape=\"rect\" coords=\"100,95,200,200\" alt=\"PETTILmini\" title=\"PETTILmini\" href=\"#pettilmini\">\n</map>\n\n\n\n2020-02-13T15:17:19-05:00\n\n tiddlywiki --load /home/chitselb/Documents/PETTILmobile/tiddlypettilmobile.html --savewikifolder tidwik\n\n\n\n\nroot@instance-1:~# cat /etc/nginx/sites-available/tiddlypettilmobile\nserver {\n    listen 80;\n    server_name _;\n    root /var/www/html;\n    index index.html index.htm index.pettilmobile.html;\n    location / {\n                try_files $uri $uri/ =404;\n        }\n    location /tw/ {\n        proxy_set_header   X-Forwarded-For $remote_addr;\n        proxy_set_header   Host $http_host;\n        proxy_pass         \"http://127.0.0.1:8080/\";\n#       proxy_pass_reverse \"http://127.0.0.1:8080/\";\n    }\n}\n\n\n\n\nload\" save\" verify\"\n\nAddressing Modes\nThe 6502 processor provides several ways in which memory locations can be\naddressed. Some instructions support several different modes while others may\nonly support one. In addition the two index registers can not always be used\ninterchangeably. This lack of orthogonality in the instruction set is one of\nthe features that makes the 6502 trickier to program well.\n\nImplicit\nFor many 6502 instructions the source and destination of the information to be\nmanipulated is implied directly by the function of the instruction itself and\nno further operand needs to be specified. Operations like 'Clear Carry Flag'\n(CLC) and 'Return from Subroutine' (RTS) are implicit.\n\nAccumulator\nSome instructions have an option to operate directly upon the accumulator. The\nprogrammer specifies this by using a special operand value, 'A'. For example:\n\n        LSR A           ;Logical shift right one bit\n        ROR A           ;Rotate right one bit\nImmediate\nImmediate addressing allows the programmer to directly specify an 8 bit\nconstant within the instruction. It is indicated by a '#' symbol followed by\nan numeric expression. For example:\n\n        LDA #10         ;Load 10 ($0A) into the accumulator\n        LDX #LO LABEL   ;Load the LSB of a 16 bit address into X\n        LDY #HI LABEL   ;Load the MSB of a 16 bit address into Y\nZero Page\nAn instruction using zero page addressing mode has only an 8 bit address\noperand. This limits it to addressing only the first 256 bytes of memory (e.g.\n$0000 to $00FF) where the most significant byte of the address is always zero.\nIn zero page mode only the least significant byte of the address is held in\nthe instruction making it shorter by one byte (important for space saving) and\none less memory fetch during execution (important for speed).\n\nAn assembler will automatically select zero page addressing mode if the\noperand evaluates to a zero page address and the instruction supports the mode\n(not all do).\n\n        LDA $00         ;Load accumulator from $00\n        ASL ANSWER      ;Shift labelled location ANSWER left\nZero Page,X\nThe address to be accessed by an instruction using indexed zero page\naddressing is calculated by taking the 8 bit zero page address from the\ninstruction and adding the current value of the X register to it. For example\nif the X register contains $0F and the instruction LDA $80,X is executed then\nthe accumulator will be loaded from $008F (e.g. $80 + $0F => $8F).\n\nNB:\nThe address calculation wraps around if the sum of the base address and the\nregister exceed $FF. If we repeat the last example but with $FF in the X\nregister then the accumulator will be loaded from $007F (e.g. $80 + $FF =>\n$7F) and not $017F.\n\n        STY $10,X       ;Save the Y register at location on zero page\n        AND TEMP,X      ;Logical AND accumulator with a zero page value\nZero Page,Y\nThe address to be accessed by an instruction using indexed zero page\naddressing is calculated by taking the 8 bit zero page address from the\ninstruction and adding the current value of the Y register to it. This mode\ncan only be used with the LDX and STX instructions.\n\n        LDX $10,Y       ;Load the X register from a location on zero page\n        STX TEMP,Y      ;Store the X register in a location on zero page\nRelative\nRelative addressing mode is used by branch instructions (e.g. BEQ, BNE, etc.)\nwhich contain a signed 8 bit relative offset (e.g. -128 to +127) which is\nadded to program counter if the condition is true. As the program counter\nitself is incremented during instruction execution by two the effective\naddress range for the target instruction must be with -126 to +129 bytes of\nthe branch.\n\n        BEQ LABEL       ;Branch if zero flag set to LABEL\n        BNE *+4         ;Skip over the following 2 byte instruction\nAbsolute\nInstructions using absolute addressing contain a full 16 bit address to\nidentify the target location.\n\n        JMP $1234       ;Jump to location $1234\n        JSR WIBBLE      ;Call subroutine WIBBLE\nAbsolute,X\nThe address to be accessed by an instruction using X register indexed absolute\naddressing is computed by taking the 16 bit address from the instruction and\nadded the contents of the X register. For example if X contains $92 then an\nSTA $2000,X instruction will store the accumulator at $2092 (e.g. $2000 +\n$92).\n\n        STA $3000,X     ;Store accumulator between $3000 and $30FF\n        ROR CRC,X       ;Rotate right one bit\nAbsolute,Y\nThe Y register indexed absolute addressing mode is the same as the previous\nmode only with the contents of the Y register added to the 16 bit address from\nthe instruction.\n\n        AND $4000,Y     ;Perform a logical AND with a byte of memory\n        STA MEM,Y       ;Store accumulator in memory\nIndirect\nJMP is the only 6502 instruction to support indirection. The instruction\ncontains a 16 bit address which identifies the location of the least\nsignificant byte of another 16 bit memory address which is the real target of\nthe instruction.\n\nFor example if location $0120 contains $FC and location $0121 contains $BA\nthen the instruction JMP ($0120) will cause the next instruction execution to\noccur at $BAFC (e.g. the contents of $0120 and $0121).\n\n        JMP ($FFFC)     ;Force a power on reset\n        JMP (TARGET)    ;Jump via a labelled memory area\nIndexed Indirect\nIndexed indirect addressing is normally used in conjunction with a table of\naddress held on zero page. The address of the table is taken from the\ninstruction and the X register added to it (with zero page wrap around) to\ngive the location of the least significant byte of the target address.\n\n        LDA ($40,X)     ;Load a byte indirectly from memory\n        STA (MEM,X)     ;Store accumulator indirectly into memory\nIndirect Indexed\nIndirect indirect addressing is the most common indirection mode used on the\n6502. In instruction contains the zero page location of the least significant\nbyte of 16 bit address. The Y register is dynamically added to this value to\ngenerated the actual target address for operation.\n\n2020-02-10T18:24:27-05:00\nworking in BASIC on PET\n80x50 mapper for the USA\n\n\n.C:2000  A0 A0       LDY #$A0\n.C:2002  A4 A4       LDY $A4\n.C:2004  AC AC AC    LDY $ACAC\n.C:2007  B4 B4       LDY $B4,X\n.C:2009  BC BC BC    LDY $BCBC,X\n.C:200c  A2 A2       LDX #$A2\n.C:200e  A6 A6       LDX $A6\n.C:2010  AE AE AE    LDX $AEAE\n.C:2013  B6 B6       LDX $B6,Y\n.C:2015  BE BE BE    LDX $BEBE,Y\n.C:2018  C0 C0       CPY #$C0\n.C:201a  C4 C4       CPY $C4\n.C:201c  CC CC CC    CPY $CCCC\n.C:201f  E0 E0       CPX #$E0\n.C:2021  E4 E4       CPX $E4\n.C:2023  EC EC EC    CPX $ECEC\n\n\n\nb%(0..15)  20 ... A0\n\n0000 $20 all off\n0001     upper left = 1\n0010     upper right = 2\n0011\n0100     lower left = 4\n0101\n0110\n0111\n1000     lower right = 8\n1001\n1010\n1011\n1100\n1101\n1110\n1111 $A0 all on\n\nin: x, y\nout: video address, boolean value\n\n2020-01-24T20:13:15-05:00\n\nsshd on mahkani\n\n\n2020-01-13T10:23:22-05:00\nPETTILmobile dashboard\n    PET VIC Mac operating status\n    aspects\n123456789..123456789..\naaaa bbbbccccddddeeee\nffffgggg hhhhiiiijjjj\nkkkkllllmmmm nnnnoooo\nppppqqqqrrrrssss tttt\nuuuuvvvvwwwwxxxxyyyy\n zzzzaaaabbbbccccdddd\n\n\npicture inventory\ngetting PET fixed\ngetting VIC checked out\ngetting Mac fixed\n\n\n2020-01-09T10:01:12-05:00\n\n\n2019-12-24T17:41:35-05:00\n1 - (create)\n    words\n\n.-+\nq    register info\n        A X Y N V B D I Z C S\n\nOh, this is the best PETTIL in a cup ever. This guy's unbelievable.  He ran the old cup of PETTIL guy out of business. (really?) People come from all over to get this.\n/*\ncode ((redefine))   ( redefined -- nfa )\n    brk,\n    n3 ldd,                     ; get NFA\n    n3 ld,\n    tos std,\n    tos st,\n    nxt,\nend-code\n\n`redefined` = `nfa` of found word\nreturn `nfa` of found word for `$.` to display\n\nTOS                             redefined\nN0\nN1\nN2\nN3                              NFA\n\nTOS                             nfa\nN3                              NFA+2\n\n*/\n\n\n5 !pace\nframe\" blorpy\"\nframe \" bloopy\"\nframe \" brippy\"\nframe \" bruppy\"\n3 !pace\nframe \" brippy\"\nframe \" bruppy\"\nframe \" brippy\"\n7 !pace\nframe\" blorpy\"\nframe \" bloopy\"\n\n\n\n\n\ntos=newest n0=symtail+2 n1=current n2=here\n((create))\n    jsr harvests6\n    brk\n    .byt popd | N0               ; symtail @\n// N0 = usersymtail ACC = symtail\n    .byt st | N3\n    .byt ld | N2                ; cfa'\n    .byt std | N3               ; write CFA to symtab\n    .byt ld | N3                ; nfa'\n    .byt std | TOS              ; populate `newest`\n    .byt ext\n    .word pppcreate\n;    .word swap73s\n    .byt ext\n    .word symcopys              ; copy the symbol/length\n\n(((create)))\n;    jsr swap73s\n    jsr symcopys\n    ldy #0\n    lda R0L+2*N1                ; vocab\n\n    .byt ldi | N1               ; vocab\n    .byt bz , <(ppcreate01-*-2)\n    .byt set | ACC\n    .word $40\nppcreate01\n    .byt st | TOS               ; TOS = $00 or $40 if vocab\n    .byt inr | N7\n    .byt pop | N7               ; reget length\n    .byt st | N5\n    .byt add | TOS              ; ora #$40 if vocab bit\n    .byt sti | N7               ; output symbol length with a proper vocab bit\n\n    .byt ld | N7\n    .byt add | N5\n    .byt st | N7\n    .byt pop | N1\n    .byt bz , <(ppcreate02-*-2)\n    .byt sti | N7\nppcreate02\n    .byt ld | N7\n    .byt std | N0               ; symtail !\n    .byt sub | ACC\n    .byt sti | N7               ; write three nulls at symtail\n    .byt std | N7\n    .byt pull\n    .byt nxt\n\n\n* copy symbol @n7 to symtail\n* enclose 'here' as new CFA\n* current nonzero?\n     - set vocabulary bit\n     - append `current` at symtail\n* drop out a 00 00 00    symtail `3coff`\n* update symtail\n* set newest\n\ntos newest\nn0  symtail+2\nn1  current\nn2  here\nn3  symtail\nn7\n\n*/\n\ncode ((create))\n    jsr harvests6\n    brk\n    .byt popd | N0               ; symtail @\n    .byt st | N3\n    .byt ld | N2                ; cfa'\n    .byt std | N3               ; write CFA to symtab, +2 N5 pointer\n    .byt ld | N3\n    .byt std | TOS              ; populate `newest`\n    .byt ext\n;    .word swap73s\n    .byt ext\n    .word symcopys              ; copy the symbol/length\n    .byt ldi | N1\n    .byt bz , <(ppcreate01-*-2)\n    .byt set | ACC\n    .word $40\nppcreate01\n    .byt st | TOS               ; TOS = $00 or $40 if vocab\n    .byt inr | N7\n    .byt pop | N7\n    .byt st | N5\n    .byt add | TOS\n    .byt sti | N7               ; symbol length with a proper vocab bit\n    .byt ld | N7\n    .byt add | N5\n    .byt st | N7\n    .byt pop | N1\n    .byt bz , <(ppcreate02-*-2)\n    .byt sti | N7\nppcreate02\n    .byt ld | N7\n    .byt std | N0               ; update symtail\n    .byt sub | ACC\n    .byt sti | N7\n    .byt std | N7\n    .byt pull\n    .byt rtn\n    jmp exit\n\n\ndictionary\n================================ 0000\n    zeropage\n    stack                               1K system\n    kernel\n================================ 0400\n    code            boot         040D\n    code            core         1A4C   PETTIL\n          /\\/\\/\\/\\/\\/\n    names           symtab       5500\n    code            studio       6700\n\n    ........                    free\n    ====                        1K blkbuf\n    &&&&&&&&                    core\n    $$$$$$$$                    symtab\n    ########                    studio\n\nPET\n    01--&&&&&&&&&&&&\n    &&&&&&&&&&&.....\n    ................\n    ................\n    ................\n    .====$$$$$$$$$$$\n    $$$....#########\n    ################\n\nPET (symtab off)\n    01--&&&&&&&&&&&&\n    &&&&&&&&&&&.....\n    ................\n    ................\n    ................\n    ................\n    ................\n    ............====\n\n\n    01--&...........\n    ................\n    ................\n    ................\n    ................\n    ................\n    ...............$\n    $$$$$$$$$$$$$...\n    &&&&&&&&&&&&&&&&\n================================\n    ****************\n    &&&&&&&#########\n    ################\n    ****************            BASIC\n    ****************\n    ****************\n    ********^                   Editor & I/O\n    ****************            Kernel\n\n    01--&...........\n    GGGGGGGGGGGGGGGG\n    &&&&&&&&&&&&&&&&\n    &&&&&&&.........\n    ................\n    ................\n    ................\n    ................\n    ..........$$$$$$\n    $$$$$$$$...77777\n================================\n    ****************\n    ****************\n    9999999999999999            8K PET ROM\n    AAAAAAAAAAAAAAAA\n\n    01--&&&&&&&&&&&&\n    &&&&&&&&&&&.....\n    ................\n    ................\n    ................\n    ................\n    ................\n    ................\n\n================================ 8000\n                                        1K video RAM\n================================ 9000\n                                        expansion ROM area (unused)\n================================ A000\n                                        expansion ROM area (unused)\n================================ B000\n                                        BASIC ROM\n================================ C000\n                                        BASIC ROM\n================================ D000\n                                        BASIC ROM\n================================ E000\n                                        Editor ROM\n================================ E810\n                                        6520 PIA #1\n================================ E820\n                                        6520 PIA #2\n================================ E840\n                                        6522 VIA\n================================ F000\n                                        Kernel ROM\n================================ FFFA\n                                        NMI\n================================ FFFC\n                                        RESET\n================================ FFFE\n                                IRQ\n\n================================ 8000\n\n                                video memory & ROM\n                                   |\n                                   |\n                                   V\n    code            boot\n                    core\n                    cold\n                    studio\n                    symtab\n          /\\/\\/\\/\\/\\/\n\n\ncode\n    CFA  code field address             code\n    PFA  parameter field address\n\nname\n    LFA  link field address             2 bytes\n    NFA  name field address             name\n\nname\n    length                              1 byte\n    \"text\"                              length bytes\n\n\n/* tiddlypettil\ntags: source code\ntitle: pettil-dictionary.a65\n\nForth is a collection of words called a dictionary.  PETTIL separates the\nruntime dictionary (\"core\") and the programmer environment (\"studio\") so\nthat PETTILstudio can be unloaded when the compiling is done, providing\nsubstantially more room for your programs.  You probably won't notice that\nthere are two dictionaries, but it is useful to know.\n\n\nbest place to locate the two dictionaries in PETTIL\n\n            PET                 VIC-20              C=64\n\ncore        lower BASIC area    $2000               lower BASIC area\nstudio      top of RAM          top of RAM          underneath BASIC ROM\n\nCORE\n    essential code for most programs\n\nSTUDIO\n    programmer environment dictionary; anything that uses the symbol table.\n\n\n\nA definition has four parts.  Sometimes, like in the case of primitives, there\nis no parameter field address.\n\n\nCFA                             code field address, always executable 6502 code\nPFA                             parameter field address\nLFA                             2-byte CFA\nNFA                             1-byte length/flags, the name, maybe a vocabid byte\n\nSYMNEW                          symnew ( -- addr )\n    uservariable, start of recent names\n\nSYMTHREAD                       symtab ( t -- nfa )\n    return address of `n`th thread\n\n>THREAD                         ( n -- nfa )\n    If `n` is -1 return `symnew` otherwise return address of `n`th thread\n\nSYMLEN                          n3 ( -- len ) n8\n    length of symbol in `n3`\n\nSYMLENS                         n3 ( -- len ) A=len C=vocab? Y=0\nSYMCOPYS                        n3 ( target -- target )\nSYM+S                           n3 ( -- ) n3\nSYMTAIL!                        ( symtail -- ) symtail symnew [000000 @symtail]\nNEWSYMTAB                       studio ( size -- symtab )\n\n-@                              ( addr -- value )\nNAME>                           ( nfa -- cfa )\n(>NAME)                         ( cfa -- nfa|0 )\n>NAME                           ( cfa -- nfa|0 )\n\nBLOOM#                          n3 ( -- bloom# )\nBLOOMFILTER                     n3 ( -- mask addr )\nPEARSON#                        n3 ( -- pearson# )\nUNSMUDGE                        ( nfa -- )\nSMUDGE                          ( nfa -- )\nIMMEDORNOT                      n3 ( -- flag )\n(SEEK)                          ( -- xfa ) n2\n(FOUND?)                        ( -- flag )\nNOT.IN.THREAD?                  ( -- flag )\nFOUND?                          ( name -- nfa 0 | cfa +1|-1 )\n\nDEFINITIONS                     ( -- ) current\nFORTH                           ( -- ) vocabs\n\nEXISTS?                         \"name\" ( -- flag )\n'                               \"name\" ( -- cfa ) ?error \"NOT FOUND\"\n(CREATE)                        \"name\" ( cfa -- )\n\n?VMMOVE                         ( symtab -- )\n(FORGET).KEEP\nSOUTHERLY\nGOSOUTH\n(GOSOUTH)\nGONORTH\nPASSBIT?                        ( -- flag )\n(FORGET)\nREHASH                          ( -- )\nFORGET                          \"name\" ( -- )\n\ncold\n( from to howmany )\n    move studio\n( from to howmany )\n    move symtab\n( symtab )\n    !symtab\n        update bloom\n        update threads\n\nforget\n    gosouth\n    ?vmmem\n    gonorth\n(create)\nfound?\n>name name>\n\nWhat's in a word?\n\n!!4 parts\n* CFA and PFA in the dictionary\n* LFA and NFA in the symbol table\n\n!!DICTIONARY\n* Code Field Address (CFA)\n** always points to executable 6502 code\n** grows dictionary at `here`\n** e.g. for a secondary, the CFA contains ` jsr enter`\n* Parameter Field Address (PFA)\n** data following code field\n** grows dictionary at `here`\n** e.g. for `constant` the PFA be where the value is stored\n\n!!SYMBOL TABLE\n* Link Field Address (LFA)\n** located at NFA-2\n** contains CFA\n* Name Field Address (NFA)\n** 1 byte flags and name length\n** length bytes of name\n** optional 1 byte vocabulary id\n\n```\nsymbol table entry\n+---------------+\n|   CFA[low]    |  LFA     contains Code Field Address\n|   CFA[high]   |\n+-+-+-+-+-+-+-+-+\n[S]             |  NFA     Smudge flag\n| [V]           |          Vocabulary flag\n|   [I]         |          Immediate flag\n|     [   len   ]          Length field 0..31\n+-+-+-+-+-+-+-+-+\n|   name[1]     |  +1      Name field\n|           ... |\n|   name[len]   |  +len\n+---------------+\n?   vocabid     ?  +len+1  vocabulary id (if flag set)\n+---------------+\n```\n\nThe symbol table is initialized at cold start and later repacked by `forget`\nor its do-nothing equivalent `rehash`.  Either of these provides a CFA to\n`(forget)` which merges any new symbols that have recently been appended\ninto a rebuilt `symtab`.  One page of memory plus the remainder of the last\npage is allocated for future growth, becoming the new `symtail`.  Future\nsearches of `symnew` will begin at this address.\n\nAll the symbols are copied to `pad` at the bottom of memory, then memory\nrequirements are calculated.  If there is data in `vmbuf` it will be moved\nat this time. Finally, all symbols are copied back up to the new `symtab` area.\n\n\n\n|symtab|table of threads|\n|symtab+32|thread 0|\n|symtab 2+ @|thread 1|\n|symtab 4 + @|thread 2|\n|symtab 6 + @|thread 3|\n|symtab 8 + @|thread 4|\n\n(seek)\ntos                             seek nfa\nn3                              current nfa\nn4l                             seek length\nn4h                             sorted by size (0) or unsorted ($FF)\nn5                              seek vocab\nn6                              vocab'\nn8l current length\n\n(create)\n*/\n\ncheck this out, write it up\n\nnon-destructive reading stack in Sweet16\n    brk\n    ext harvests6\n    ( now use the registers )\n    rtn\n    ( data stack should be unchanged by harvest )\n\ncompare with the destructive version\n    jsr harvests6\n    brk\n    ( now use the registers )\n    rtn\n    ( stack under TOS  should be unchanged by harvest )\n\n\n\n\npcold\n    jsr qaloha\n#include \"align.i65\"\n    jsr toforth                 ; transition from 6502 Assembly to Forth\n#include \"page.i65\"\n    .word spstore\n#include \"page.i65\"\n    .word _diagfill             ; fill the screen with '/' graphic\n#include \"parm.i65\"\n    .word callz\n    .word setsw16               ; so we may use BRK to access Sweet16\n#include \"pad.i65\"                                ; ~ stack is empty\n    .word plit\n    .word there\n#include \"pad.i65\"\n    .word fetchplus             ; link to upper dictionary\n#include \"page.i65\"\n    .word tuck\n#include \"page.i65\"\n    .word over\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word twoplus\n#include \"page.i65\"\n    .word cmove                 ; but first, make an upper dictionary\n#include \"page.i65\"\n    .word twoplus\n#include \"page.i65\"\n    .word startup\n#include \"page.i65\"\n    .word store                 ; `studio` -> `startup` for 2nd `restart`\n#include \"parm.i65\"\n    .word plit\n    .word splashirq\n#include \"page.i65\"\n    .word cinv\n#include \"page.i65\"\n    .word store\n#include \"page.i65\"\n    .word _swapirq\n#include \"parm.i65\"\n    .word dlit\n    .word EAL\n    .word there\n#include \"pad.i65\"\n    .word fetchplus\n#include \"page.i65\"\n    .word dashrot\n#include \"page.i65\"\n    .word fetchplus\n#include \"page.i65\"\n    .word plus\n#include \"page.i65\"\n    .word swap\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word over\n#include \"page.i65\"\n    .word minus\n#include \"page.i65\"\n    .word symtabset\n#include \"page.i65\"\n    .word cmovegt\n#include \"page.i65\"\n    .word drop\n#include \"parm.i65\"\n    .word dlit\n#ifdef IS_VIC20\n    .word VIDRAM+11*22\n    .word 12*22\n#else\n    .word VIDRAM+11*40\n    .word 14*40\n#endif\n#include \"pad.i65\"\n    .word blank\n#include \"page.i65\"\n    .word five\n#include \"page.i65\"\n    .word _jiffies\n#include \"page.i65\"\n    .word _setsymtab            ; `!symtab`\n#include \"past.i65\"\nperturbpreserve\n    .word _deadbeef\n\n\n\n!!!!PETTILstudio is another way of saying \"the code that deals with the symbol table\" with the objective of reclaiming all of that RAM (from PETTILstudio and SYMTAB) after source compilation is complete, leaving:\n# PETTIL core dictionary\n# your dictionary\n\nsetsymtail\n    brk\n    .byt set | N0\n    .word usersymtail\n    .byt bs , <(setsymtail2-*-2)\n    .byt pull\n    .byt nxt\n;~ is this reusable elsewhere?\nsetsymtail2\n    .byt ld | TOS\n    .byt std | N0\n    .byt sub | ACC\n    .byt std | TOS\n    .byt rs\n\n;    .word symtabset\n#include \"page.i65\"\n    .word cmovegt\n#include \"page.i65\"\n    .word drop\n#include \"parm.i65\"\n    .word dlit\n#ifdef IS_VIC20\n    .word VIDRAM+11*22\n    .word 12*22\n#else\n    .word VIDRAM+11*40\n    .word 14*40\n#endif\n#include \"pad.i65\"\n    .word blank\n#include \"page.i65\"\n    .word _initsymtab            ; `!symtab`\n#include \"past.i65\"\n    .word _deadbeef\n\nPhase 0 Coding\n    get to code 1.0\n    anything goes\n    exit criteria: working code\n\nPhase 1 Promotion\n    separate from smoking\n    everything goes on calendar\n        * social media events\n        * use hamster for a social media scrum\n\n    take inventory\n    get started\n    * One video per week\n\n!!Social media goals\n    * One tweet per day\n    * biweekly Instagram\n    * biweekly Facebook page\n    * daily Facebook group\n    * 6502.org posts\n    * Tumblr blog posts\n    * Patreon updates\n    * Ko-fi updates\n    * keep discord open\n    * twitch\n    * gmail\n    * slack\n    * public Google calendar\n    ** historical events\n    ** past events (links to photos & video)\n    ** future events (links to PETTILmob signup page)\n\n    exit criteria: \"enough\" revenue\n\nPhase 2 Preparation\n    * vehicle construction\n    * life support systems\n    * Sea Monkey hatching\n\n    exit criteria: Sea Monkeys\n\nPhase 3 Tour\n    * vehicle maintenance\n\n    * life support systems\n    * Sea Monkey hatching\n\n    exit criteria: Sea Monkeys\n\nbetter documentation\n    move all static tiddlers into source\n\n/* secondary\n/* primitive\n/* subroutine\ntags: subroutine double math\ntitle: DSUB\n\n!! DSUB&nbsp;&nbsp;&nbsp;( d1 d2 -- difference )\n\nSubtract `d2` from `d1` and return the difference.  All values are 32-bit doubles\n\ninputs\n`d2` subtrahend\n`d1` minuend\n\noutput\n`difference` the result of (D1-D2)\n\n*/\ndsub\n    sec\n    lda stackl+2,x\n    sbc stackl,x\n    sta stackl+2,x\n    lda stackh+2,x\n    sbc stackh,x\n    sta stackh+2,x\n    lda stackl+1,x\n    sbc tos\n    pha\n    lda stackh+1,x\n    sbc tos+1\n    tay\n    pla\n    inx\n    inx\n    rts\n\n\n/* tiddlypettil\n\ntags: whatever goes here\ntitle: Finally, embedded static tiddlers!\n\n{your tiddlywiki source here}\n*/\n\nSWN\n        ASL  A\n        ADC  #$80\n        ROL  A\n        ASL  A\n        ADC  #$80\n        ROL  A\n\n;--------------------------------------------------------------\n#if 0\nname=(!SYMTAB)\nstack=( symlen addr -- )\ntags=system,startup,nosymbol\nnip nip\nset 'symnew' once per (rehash) to the third null\nset 'symtail' = symnew-2\nwrite '0000' word at symtail\n\n#endif\n#include \"align.i65\"\npsamtab\n    brk\n    .byt ld | N3\n    .byt std | TOS              ; set `symnew`\n    .byt popd | N3              ; 2-\n    .byt ld | N3\n    .byt std | TOS              ; set `symtail`\n    .byt sub | ACC\n    .byt std | N3               ; force cfa = 0\n    .byt nxt\n\n;--------------------------------------------------------------\n#if 0\nname=(FORGET).LOOPER\nstack=( b a from to -- )\ntags=interpreter,nfa,nosymbol\ninner word, `b a do rewind begin cfa execute while copy? repeat loop`\n\n#endif\n#include \"align.i65\"\npforgetlooper\n    jsr enter\n#include \"page.i65\"\n    .word set76                 ;( b a ) set `sym0 targ filter\n#include \"page.i65\"\n    .word zero\n#include \"parm.i65\"\n    .word pdo\n    .byt <(pforgetlooper03-*+1)\n#include \"pad.i65\"\npforgetlooper01\n    .word i\n#include \"page.i65\"\n    .word _passbitsq\n#include \"parm.i65\"\n    .word qbranch\n    .byt <(pforgetlooper02-*+1)\n#include \"pad.i65\"\n;    .word pfilterrewind         ; rewind symbol list, copies N6 to N3\n#include \"page.i65\"\n;    .word _extuntil             ; filterpass\n#include \"parm.i65\"\npforgetlooper02\n    .word ploop\n    .byt <(pforgetlooper01-*+1)\n#include \"past.i65\"\npforgetlooper03\n    .word exit\n\nset76\n    brk\n    .byt ld | TOS\n    .byt st | N7                ; targ\n    .byt pull\n    .byt st | N6                ; sym0\n    .byt pull\n    .byt nxt\n\n;--------------------------------------------------------------\n#if 0\nname=SYM.NEXT\nstack=( -- flag )\ntags=interpreter,nfa,nosymbol\nno `jsr enter` -- code fragment,\ntail of the word that branches here\n\n#endif\nsymnext01\n    .word symplus\n    .byt 3\n#include \"page.i65\"\n    .word symlen\n#include \"page.i65\"             ; ( i )\n    .word zeq\n#include \"past.i65\"\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=INIT.411\nstack=( value 'filter -- )\ntags=interpreter,nfa,nosymbol\nSweet16 primitive, sets `n4` to `value` and `r11` to `'filter`\n\n```\n: init.411    ( flag(r4) `filter(r11) -- )\n    >r11 drop >n4 drop ;\n```\n#endif\ninit411\n    brk\n    .byt ld | TOS\n    .byt st | R11\n    .byt pull\n    .byt st | N4\n    .byt pull\n    .byt nxt\n\n;--------------------------------------------------------------\n#if 0\nname=(FORGET).PASS1\nstack=( -- )\ntags=interpreter,nfa,nosymbol\n\n* This is the first pass filter.\n* It copies the symbol table from SYMTAB @ to PAD,\n**    sorted by (visible) length of symbol\n**    ignoring words above a given address (NEWDP)\n**    ignoring smudged words\n**    keeping all words in TDICT\n\nIt assumes that the programmer won't attempt `forget` while creating\na definition.\n\n    `: newdefinition [ forget newdefinition ] ;   \\ doh!`\n\nIn the origin dictionary at cold start, there are no clones.  There are no\nsmudged words.\n\nThis means that any smudged words have been redefined.  How do we figure out\nthe most recently redefined word, that is still inside NEWDP?  The active\nword is the clone with the highest (in-bounds) CFA.  It would be unlikely\nfor an unsmudged clone with code at a lower address to exist, as (CREATE)\ndoes not allow it.\n\nOnce the system is up, the dictionary remains sorted and indexed.\nClones have the same name, PEARSON# value, and length, and will be\nadjacent in a sorted symbol table, in ascending CFA order, with all\nof them smudged but the one with the highest CFA.  These existing\nwell-established clones from Philadelphia will be encountered first.\n\nNewly arrived clones from SYMNEW on up will also be sorted ascending\nby CFA but may not be adjacent. All will certainly have higher CFAs\nthan their clone(s) in Philadelphia.\n\nWhen encountering a smudged word\n    store CFA in N2\n    search upward in current thread (Philadelphians) for clones\n    search upward in SYMNEW (Noobs) for clones\n    is the CFA of the clone in-bounds?\n    As soon as we find the first newer clone with an in-bounds CFA, we are done.\n    We this is NOT the active clone.\n    yes:    we are done.  Copy this older clone with smudge bit set\n    no: we got to the end of the list without finding a twin\n    regardless of whether that newer clone is smudged or not\n    if we didn't find any juniors, this is the most recent.\n        Unsmudge it.  Welcome to Philadelphia, brother.\n    append CFA to PAD (N7++)\n\nwhen a smudged word is found,\n    compare its CFA to NEWDP.  If >= NEWDP, it is skipped (out of bounds)\n    compare its CFA to N2.  If >N2, it replaces N2\n\nThe rule here is that the highest CFA that is less than NEWDP is saved, and\nthe word is copied to PAD as is, smudged.\n\n```\n: (forget).pass1   ( cfa -- )\n    i if\n        i symlen =\n        if\n            <n3 name>           ( cfa curr )\n            2dup studio @ swap   ( cfa curr cfa studio curr )\n            between? 0=         ( cfa curr flag )\n            ?: drop (forget).keep\n        then\n    else\n        passbits! bloomfilter cbit!\n    then\n    sym.next ;\n```\n#endif\n#include \"align.i65\"\n_pforgetpass1\n    jsr enter\n#include \"page.i65\"\n    .word i\n#include \"parm.i65\"\n    .word qbranch\n    .byt <(pforgetpass1b-*+1)\n#include \"pad.i65\"\n    .word i\n#include \"page.i65\"\n    .word symlen\n#include \"page.i65\"\n    .word eq\n#include \"parm.i65\"\n    .word qbranch\n    .byt <(symnext01-*+1)       ; next!\n;#refactor\n#include \"parm.i65\"\n    .word zpfrom                ; nfa\n    .byt R0L+2*N3\n#include \"pad.i65\"\n    .word namefrom              ; nfa>cfa\n#include \"page.i65\"\n    .word twodup\n#include \"page.i65\"\n    .word studio\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word swap\n#include \"page.i65\"\n    .word oneplus\n#include \"page.i65\"\n    .word betweenq\n#include \"parm.i65\"\npforgetpass1a\n    .word pquerycolon\n    .word drop\n    .word _pforgetkeep\n#include \"parm.i65\"\n    .word branch\n    .byt <(symnext01-*+1)       ; next!\n#include \"pad.i65\"\npforgetpass1b                   ; pass 0 only, set passbits and bloomfilter\n    .word symlen\n#include \"page.i65\"\n    .word _passbitsstore         ; if ((i-1) = 0) set `passbits` for all lengths\n#include \"page.i65\"\n    .word _bloomfilter          ; doing this here speeds things up slightly,\n#include \"page.i65\"             ; with a low risk of setting (inconsequential)\n    .word cbitstore             ; false positives in `bloom#` for forgotten\n#include \"past.i65\"             ; words.\n    .word branch\n    .byt <(symnext01-*+1)       ; next!\n\n;--------------------------------------------------------------\n#if 0\nname=(FORGET).PASS2\nstack=( -- )\ntags=interpreter,nfa,nosymbol\n* This is the second pass filter.\n* It copies the symbol t\nable from PAD to the new SYMTAB\n**    sorted by pearson hash\n\nRetrieves the pearson hash value for this word, stored on pass 1\n\n```\n: (forget)pass2   ( -- )\n    pearson# i =\n    ?: (forget).keep next\n    sym.next ;\n```\n#endif\n#include \"align.i65\"\n_pforgetpass2\n    jsr enter\n#include \"parm.i65\"\n    .word zpfrom                ; nfa\n    .byt R0L+2*N3\n#include \"pad.i65\"\n    .word namefrom              ; nfa>cfa\n#include \"page.i65\"\n    .word pearsonhash\n#include \"page.i65\"\n    .word i\n#include \"page.i65\"\n    .word ne\n#include \"past.i65\"\n    .word branch\n    .byt <(pforgetpass1a-*+1)\n\n;--------------------------------------------------------------\n#if 0\nname=SYMTAB!\nstack=( studio start size -- studio start symtab size )\ntags=system,startup,nosymbol\nCalculate `symtab` memory requirements, given a size\n\n#endif\nsymtabset\n    dex\n    lda stackh+2,x\n    clc\n    sbc tos+1\n    sta stackh,x\n    sta usersymtab+1\n    lda #32\n    sta stackl,x\nsymtabset99\n    jmp next\n\n\n;--------------------------------------------------------------\n#if 0\nname=SWAP.73\nstack=( -- )\ntags=interpreter,nfa,nosymbol\nSwitches contents of N7 <--> N3\n#endif\n#include \"align.i65\"\nswap73\n    lda #>(next-1)\n    pha\n    lda #<(next-1)\n    pha\nswap73s\n    lda R0L+2*N7\n    ldy R0L+2*N3\n    sta R0L+2*N3\n    sty R0L+2*N7\n    lda R0L+2*N7+1\n    ldy R0L+2*N3+1\n    sta R0L+2*N3+1\n    sty R0L+2*N7+1\n    rts\n\n\n    ldy #3\nbegin\n    dex\n    pla\n    sta stackl,x\n    pla\n    sta stackh,x\n    dey\n0= until\n    lda stackh+2,x\n    pha\n    lda stack1+2,x\n    pha\n    rts\n\nF0FD  85 A5       STA $A5                   ; puts A into buffer, set ATN true, send byte\nF0FF  AD 40 E8    LDA $E840\nF102  10 FB       BPL $F0FF                 ; wait for DAV in\nF104  29 FB       AND #$FB\nF106  8D 40 E8    STA $E840                 ; clear ATN out\nF109  A9 3C       LDA #$3C                  ; send 1 char on IEEE buss\nF10B  8D 23 E8    STA $E823                 ; PIA2 CR B\nF10E  AD 40 E8    LDA $E840\nF111  29 41       AND #$41\nF113  C9 41       CMP #$41\nF115  F0 55       BEQ $F16C                 ; device not present\nF117  A5 A5       LDA $A5\nF119  49 FF       EOR #$FF\nF11B  8D 22 E8    STA $E822                 ; port B (IEEE output buffer)\nF11E  2C 40 E8    BIT $E840\nF121  50 FB       BVC $F11E                 ; wait for NRFD in\nF123  A9 34       LDA #$34\nF125  8D 23 E8    STA $E823\nF128  A9 FF       LDA #$FF                  ; Raeto is cryptic here\nF12A  8D 45 E8    STA $E845                 ; timer 1 high\nF12D  AD 40 E8    LDA $E840\nF130  2C 4D E8    BIT $E84D                 ; timer 1 out\nF133  70 1C       BVS $F151\nF135  4A          LSR A\nF136  90 F5       BCC $F12D                 ; wait for NDAC in\nF138  A9 3C       LDA #$3C\nF13A  8D 23 E8    STA $E823\nF13D  A9 FF       LDA #$FF\nF13F  8D 22 E8    STA $E822                 ; PIA2 port B all outputs\nF142  60          RTS\nF143  85 A5       STA $A5               ; send one char and clear ATN\nF145  20 09 F1    JSR $F109\nF148  AD 40 E8    LDA $E840\nF14B  09 04       ORA #$04\nF14D  8D 40 E8    STA $E840\nF150  60          RTS\nF151  AD FC 03    LDA $03FC             ; optional timeout override with STOP key test\nF154  10 0F       BPL $F165\nF156  20 43 F3    JSR $F343\nF159  D0 CD       BNE $F128\nF15B  AD FC 03    LDA $03FC\nF15E  10 10       BPL $F170             ; read timeout\nF160  20 43 F3    JSR $F343\nF163  D0 68       BNE $F1CD\nF165  A9 01       LDA #$01              ; flag errors into ST\nF167  20 C4 FB    JSR $FBC4             ; 1 = write timeout\nF16A  D0 CC       BNE $F138\nF16C  A9 80       LDA #$80              ; 128 = device not present\nF16E  30 F7       BMI $F167\nF170  A9 02       LDA #$02              ; 2 = read timeout\nF172  20 C4 FB    JSR $FBC4\nF175  AD 40 E8    LDA $E840             ; clear IEEE control lines\nF178  29 FD       AND #$FD\nF17A  8D 40 E8    STA $E840\nF17D  A9 34       LDA #$34\nF17F  8D 21 E8    STA $E821\nF182  A9 0D       LDA #$0D\nF184  60          RTS\nF185  B9 00 F0    LDA $F000,Y\nF188  08          PHP\nF189  29 7F       AND #$7F\nF18B  20 02 E2    JSR $E202\nF18E  C8          INY\nF18F  28          PLP\nF190  10 F3       BPL $F185\nF192  60          RTS\nF193  85 A5       STA $A5\nF195  20 09 F1    JSR $F109\nF198  20 75 F1    JSR $F175\nF19B  4C 48 F1    JMP $F148\nF19E  24 A0       BIT $A0\nF1A0  30 04       BMI $F1A6\nF1A2  C6 A0       DEC $A0\nF1A4  D0 05       BNE $F1AB\nF1A6  48          PHA\nF1A7  20 09 F1    JSR $F109\nF1AA  68          PLA\nF1AB  85 A5       STA $A5\nF1AD  60          RTS\n\nF1AE  AD 40 E8    LDA $E840             ; send UNTALK\nF1B1  29 FB       AND #$FB\nF1B3  8D 40 E8    STA $E840\nF1B6  A9 5F       LDA #$5F\nF1B8  2C A9 3F    BIT $3FA9\nF1BB  20 D7 F0    JSR $F0D7\nF1BE  D0 88       BNE $F148\nF1C0  A9 34       LDA #$34              ; get one char from IEEE buss\nF1C2  8D 21 E8    STA $E821\nF1C5  AD 40 E8    LDA $E840\nF1C8  09 02       ORA #$02\nF1CA  8D 40 E8    STA $E840\nF1CD  A9 FF       LDA #$FF\nF1CF  8D 45 E8    STA $E845\nF1D2  2C 4D E8    BIT $E84D\nF1D5  70 84       BVS $F15B\nF1D7  2C 40 E8    BIT $E840\nF1DA  30 F6       BMI $F1D2\nF1DC  AD 40 E8    LDA $E840\nF1DF  29 FD       AND #$FD\nF1E1  8D 40 E8    STA $E840\nF1E4  2C 10 E8    BIT $E810\nF1E7  70 05       BVS $F1EE\nF1E9  A9 40       LDA #$40\nF1EB  20 C4 FB    JSR $FBC4\nF1EE  AD 20 E8    LDA $E820\nF1F1  49 FF       EOR #$FF\nF1F3  48          PHA\nF1F4  A9 3C       LDA #$3C\nF1F6  8D 21 E8    STA $E821\nF1F9  2C 40 E8    BIT $E840\nF1FC  10 FB       BPL $F1F9\nF1FE  A9 34       LDA #$34\nF200  8D 21 E8    STA $E821\nF203  68          PLA\nF204  60          RTS\nF205  A9 00       LDA #$00              ; get a byte\nF207  85 96       STA $96\nF209  A5 AF       LDA $AF\nF20B  D0 17       BNE $F224\nF20D  A5 9E       LDA $9E               ; get from keyboard buffer\nF20F  F0 51       BEQ $F262\nF211  78          SEI\nF212  4C A7 E0    JMP $E0A7\n; FFCF CHRIN jumps here\nF215  A5 AF       LDA $AF\nF217  D0 0B       BNE $F224\nF219  A5 C6       LDA $C6\nF21B  85 A4       STA $A4\nF21D  A5 D8       LDA $D8\nF21F  85 A3       STA $A3\nF221  4C 16 E1    JMP $E116\nF224  C9 03       CMP #$03              ; tape or disk?\nF226  D0 09       BNE $F231\nF228  85 AC       STA $AC               ; get from the screen\nF22A  A5 D5       LDA $D5\nF22C  85 A1       STA $A1\nF22E  4C 16 E1    JMP $E116\nF231  B0 29       BCS $F25C             ; tape or disk?\n                                        ; C clear for device #1 or #2\nF233  86 AD       STX $AD               ; get from cassette #1 or #2\nF235  20 49 F2    JSR $F249\nF238  48          PHA\nF239  20 49 F2    JSR $F249\nF23C  D0 05       BNE $F243\nF23E  A9 40       LDA #$40\nF240  20 C4 FB    JSR $FBC4\nF243  D6 BA       DEC $BA,X\nF245  A6 AD       LDX $AD\nF247  68          PLA\nF248  60          RTS\nF249  20 4B F8    JSR $F84B             ; increment tape buffer pointer\nF24C  D0 0B       BNE $F259\nF24E  20 9A F8    JSR $F89A             ; read tape\nF251  A6 D4       LDX $D4\nF253  A9 00       LDA #$00\nF255  95 BA       STA $BA,X\nF257  F0 F0       BEQ $F249\nF259  B1 D6       LDA ($D6),Y\nF25B  60          RTS\nF25C  A5 96       LDA $96               ; get from IEEE device\nF25E  F0 03       BEQ $F263\nF260  A9 0D       LDA #$0D\nF262  60          RTS\nF263  4C C0 F1    JMP $F1C0\nF266  48          PHA\nF267  A5 B0       LDA $B0\nF269  C9 03       CMP #$03\nF26B  D0 04       BNE $F271\nF26D  68          PLA\nF26E  4C 02 E2    JMP $E202\nF271  30 04       BMI $F277\nF273  68          PLA\nF274  4C 9E F1    JMP $F19E\nF277  68          PLA\nF278  85 B4       STA $B4\nF27A  C9 0A       CMP #$0A\nF27C  F0 E4       BEQ $F262\nF27E  48          PHA\nF27F  8A          TXA\nF280  48          PHA\nF281  98          TYA\nF282  48          PHA\nF283  20 4B F8    JSR $F84B\nF286  D0 10       BNE $F298\nF288  20 CB F8    JSR $F8CB\nF28B  A6 D4       LDX $D4\nF28D  A9 01       LDA #$01\nF28F  95 BA       STA $BA,X\nF291  A0 00       LDY #$00\nF293  A9 02       LDA #$02\nF295  91 D6       STA ($D6),Y\nF297  C8          INY\nF298  A5 B4       LDA $B4\nF29A  91 D6       STA ($D6),Y\nF29C  68          PLA\nF29D  A8          TAY\nF29E  68          PLA\nF29F  AA          TAX\nF2A0  68          PLA\nF2A1  60          RTS\nF2A2  A9 00       LDA #$00\nF2A4  85 AE       STA $AE\nF2A6  A5 B0       LDA $B0\nF2A8  C9 04       CMP #$04\nF2AA  90 03       BCC $F2AF\nF2AC  20 B9 F1    JSR $F1B9\nF2AF  A5 AF       LDA $AF\nF2B1  C9 04       CMP #$04\nF2B3  90 03       BCC $F2B8\nF2B5  20 AE F1    JSR $F1AE\nF2B8  A9 03       LDA #$03\nF2BA  85 B0       STA $B0\nF2BC  A9 00       LDA #$00\nF2BE  85 AF       STA $AF\nF2C0  60          RTS\nF2C1  A6 AE       LDX $AE\nF2C3  CA          DEX\nF2C4  30 16       BMI $F2DC\nF2C6  DD 51 02    CMP $0251,X\nF2C9  F0 11       BEQ $F2DC\nF2CB  D0 F6       BNE $F2C3\nF2CD  BD 51 02    LDA $0251,X\nF2D0  85 D2       STA $D2\nF2D2  BD 5B 02    LDA $025B,X\nF2D5  85 D4       STA $D4\nF2D7  BD 65 02    LDA $0265,X\nF2DA  85 D3       STA $D3\nF2DC  60          RTS\nF2DD  20 0D F5    JSR $F50D\nF2E0  A5 D2       LDA $D2\nF2E2  20 C1 F2    JSR $F2C1\nF2E5  D0 4D       BNE $F334\nF2E7  20 CD F2    JSR $F2CD\nF2EA  8A          TXA\nF2EB  48          PHA\nF2EC  A5 D4       LDA $D4\nF2EE  F0 28       BEQ $F318\nF2F0  C9 03       CMP #$03\nF2F2  F0 24       BEQ $F318\nF2F4  B0 1F       BCS $F315\nF2F6  A5 D3       LDA $D3\nF2F8  29 0F       AND #$0F\nF2FA  F0 1C       BEQ $F318\nF2FC  20 95 F6    JSR $F695\nF2FF  A9 00       LDA #$00\nF301  20 78 F2    JSR $F278\nF304  20 CB F8    JSR $F8CB\nF307  A5 D3       LDA $D3\nF309  C9 62       CMP #$62\nF30B  D0 0B       BNE $F318\nF30D  A9 05       LDA #$05\nF30F  20 19 F6    JSR $F619\nF312  4C 18 F3    JMP $F318\nF315  20 2F F7    JSR $F72F\nF318  68          PLA\nF319  AA          TAX\nF31A  C6 AE       DEC $AE\nF31C  E4 AE       CPX $AE\nF31E  F0 14       BEQ $F334\nF320  A4 AE       LDY $AE\nF322  B9 51 02    LDA $0251,Y\nF325  9D 51 02    STA $0251,X\nF328  B9 5B 02    LDA $025B,Y\nF32B  9D 5B 02    STA $025B,X\nF32E  B9 65 02    LDA $0265,Y\nF331  9D 65 02    STA $0265,X\nF334  60          RTS\nF335  A5 9B       LDA $9B\nF337  C9 EF       CMP #$EF\nF339  D0 07       BNE $F342\nF33B  08          PHP\nF33C  20 A6 F2    JSR $F2A6\nF33F  85 9E       STA $9E\nF341  28          PLP\nF342  60          RTS\nF343  20 35 F3    JSR $F335\nF346  4C C6 B7    JMP $B7C6\nF349  20 51 F3    JSR $F351\nF34C  D0 F4       BNE $F342\nF34E  4C 85 F1    JMP $F185\nF351  A5 78       LDA $78\nF353  C9 02       CMP #$02\nF355  60          RTS\nF356  A5 D4       LDA $D4\nF358  D0 03       BNE $F35D\nF35A  4C 00 BF    JMP $BF00\nF35D  C9 03       CMP #$03\nF35F  F0 F9       BEQ $F35A\nF361  90 71       BCC $F3D4\nF363  A9 60       LDA #$60\nF365  85 D3       STA $D3\nF367  A4 D1       LDY $D1\nF369  D0 03       BNE $F36E\nF36B  4C 00 BF    JMP $BF00\nF36E  20 49 F4    JSR $F449\nF371  20 A5 F4    JSR $F4A5\nF374  20 D2 F0    JSR $F0D2\nF377  A5 D3       LDA $D3\nF379  20 93 F1    JSR $F193\nF37C  20 C0 F1    JSR $F1C0\nF37F  85 FB       STA $FB\nF381  A5 96       LDA $96\nF383  4A          LSR A\nF384  4A          LSR A\nF385  B0 3A       BCS $F3C1\nF387  20 C0 F1    JSR $F1C0\nF38A  85 FC       STA $FC\nF38C  20 6D F4    JSR $F46D\nF38F  A9 FD       LDA #$FD\nF391  25 96       AND $96\nF393  85 96       STA $96\nF395  20 43 F3    JSR $F343\nF398  20 C0 F1    JSR $F1C0\nF39B  AA          TAX\nF39C  A5 96       LDA $96\nF39E  4A          LSR A\nF39F  4A          LSR A\nF3A0  B0 ED       BCS $F38F\nF3A2  8A          TXA\nF3A3  A4 9D       LDY $9D\nF3A5  F0 0C       BEQ $F3B3\nF3A7  88          DEY\nF3A8  D1 FB       CMP ($FB),Y\nF3AA  F0 09       BEQ $F3B5\nF3AC  A9 10       LDA #$10\nF3AE  05 96       ORA $96\nF3B0  85 96       STA $96\nF3B2  2C 91 FB    BIT $FB91\nF3B5  E6 FB       INC $FB\nF3B7  D0 02       BNE $F3BB\nF3B9  E6 FC       INC $FC\nF3BB  24 96       BIT $96\nF3BD  70 07       BVS $F3C6\nF3BF  50 CE       BVC $F38F\nF3C1  A0 24       LDY #$24\nF3C3  4C AF F5    JMP $F5AF\nF3C6  A5 FB       LDA $FB\nF3C8  85 C9       STA $C9\nF3CA  A5 FC       LDA $FC\nF3CC  85 CA       STA $CA\nF3CE  20 AE F1    JSR $F1AE\nF3D1  4C 2F F7    JMP $F72F\nF3D4  20 95 F6    JSR $F695\nF3D7  20 57 F8    JSR $F857\nF3DA  20 49 F4    JSR $F449\nF3DD  A5 D1       LDA $D1\nF3DF  F0 08       BEQ $F3E9\nF3E1  20 D3 F4    JSR $F4D3\nF3E4  D0 08       BNE $F3EE\nF3E6  4C AD F5    JMP $F5AD\nF3E9  20 E5 F5    JSR $F5E5\nF3EC  F0 F8       BEQ $F3E6\nF3EE  E0 01       CPX #$01\nF3F0  D0 EB       BNE $F3DD\nF3F2  A5 96       LDA $96\nF3F4  29 10       AND #$10\nF3F6  D0 74       BNE $F46C\nF3F8  20 7B F6    JSR $F67B\nF3FB  20 6D F4    JSR $F46D\nF3FE  4C A3 F8    JMP $F8A3\nF401  A9 00       LDA #$00\nF403  85 9D       STA $9D\nF405  20 7D F4    JSR $F47D\nF408  20 CC F6    JSR $F6CC\nF40B  A9 FF       LDA #$FF\nF40D  C5 9B       CMP $9B\nF40F  D0 FC       BNE $F40D\nF411  C5 9B       CMP $9B\nF413  D0 F8       BNE $F40D\nF415  20 56 F3    JSR $F356\nF418  A5 9D       LDA $9D\nF41A  D0 50       BNE $F46C\nF41C  20 2B F9    JSR $F92B\nF41F  A5 96       LDA $96\nF421  29 10       AND #$10\nF423  F0 09       BEQ $F42E\nF425  A0 00       LDY #$00\nF427  84 9E       STY $9E\nF429  A0 60       LDY #$60\nF42B  4C AF F5    JMP $F5AF\nF42E  A0 AE       LDY #$AE\nF430  20 49 F3    JSR $F349\nF433  20 51 F3    JSR $F351\nF436  D0 0B       BNE $F443\nF438  A5 CA       LDA $CA\nF43A  85 2B       STA $2B\nF43C  A5 C9       LDA $C9\nF43E  85 2A       STA $2A\nF440  4C AD B4    JMP $B4AD\nF443  20 22 B6    JSR $B622\nF446  4C 0B B6    JMP $B60B\nF449  20 51 F3    JSR $F351\nF44C  D0 1E       BNE $F46C\nF44E  A0 32       LDY #$32\nF450  20 85 F1    JSR $F185\nF453  A5 D1       LDA $D1\nF455  F0 15       BEQ $F46C\nF457  A0 3D       LDY #$3D\nF459  20 85 F1    JSR $F185\nF45C  A4 D1       LDY $D1\nF45E  F0 0C       BEQ $F46C\nF460  A0 00       LDY #$00\nF462  B1 DA       LDA ($DA),Y\nF464  20 66 F2    JSR $F266\nF467  C8          INY\nF468  C4 D1       CPY $D1\nF46A  D0 F6       BNE $F462\nF46C  60          RTS\nF46D  A0 5F       LDY #$5F\nF46F  A5 9D       LDA $9D\nF471  F0 02       BEQ $F475\nF473  A0 6D       LDY #$6D\nF475  20 49 F3    JSR $F349\nF478  A0 39       LDY #$39\nF47A  4C 49 F3    JMP $F349\nF47D  A2 00       LDX #$00\nF47F  86 96       STX $96\nF481  86 D1       STX $D1\nF483  86 D3       STX $D3\nF485  E8          INX\nF486  86 D4       STX $D4\nF488  20 4D F5    JSR $F54D\nF48B  20 3C F5    JSR $F53C\nF48E  20 4D F5    JSR $F54D\nF491  20 9F F4    JSR $F49F\nF494  86 D4       STX $D4\nF496  20 4D F5    JSR $F54D\nF499  20 9F F4    JSR $F49F\nF49C  86 D3       STX $D3\nF49E  60          RTS\nF49F  20 55 F5    JSR $F555\nF4A2  4C D4 C8    JMP $C8D4\nF4A5  A5 D3       LDA $D3\nF4A7  30 F5       BMI $F49E\nF4A9  A4 D1       LDY $D1\nF4AB  F0 F1       BEQ $F49E\nF4AD  20 D5 F0    JSR $F0D5\nF4B0  A5 D3       LDA $D3\nF4B2  09 F0       ORA #$F0\nF4B4  20 43 F1    JSR $F143\nF4B7  A5 96       LDA $96\nF4B9  10 05       BPL $F4C0\nF4BB  A0 74       LDY #$74\nF4BD  4C AF F5    JMP $F5AF\nF4C0  A5 D1       LDA $D1\nF4C2  F0 0C       BEQ $F4D0\nF4C4  A0 00       LDY #$00\nF4C6  B1 DA       LDA ($DA),Y\nF4C8  20 9E F1    JSR $F19E\nF4CB  C8          INY\nF4CC  C4 D1       CPY $D1\nF4CE  D0 F6       BNE $F4C6\nF4D0  4C B9 F1    JMP $F1B9\nF4D3  20 E5 F5    JSR $F5E5\nF4D6  F0 1D       BEQ $F4F5\nF4D8  A0 05       LDY #$05\nF4DA  84 B5       STY $B5\nF4DC  A0 00       LDY #$00\nF4DE  84 B4       STY $B4\nF4E0  C4 D1       CPY $D1\nF4E2  F0 10       BEQ $F4F4\nF4E4  B1 DA       LDA ($DA),Y\nF4E6  A4 B5       LDY $B5\nF4E8  D1 D6       CMP ($D6),Y\nF4EA  D0 E7       BNE $F4D3\nF4EC  E6 B4       INC $B4\nF4EE  E6 B5       INC $B5\nF4F0  A4 B4       LDY $B4\nF4F2  D0 EC       BNE $F4E0\nF4F4  98          TYA\nF4F5  60          RTS\nF4F6  A9 01       LDA #$01\nF4F8  85 9D       STA $9D\nF4FA  20 05 F4    JSR $F405\nF4FD  A5 96       LDA $96\nF4FF  29 10       AND #$10\nF501  F0 05       BEQ $F508\nF503  A0 6E       LDY #$6E\nF505  4C AF F5    JMP $F5AF\nF508  A0 AA       LDY #$AA\nF50A  4C 85 F1    JMP $F185\nF50D  A2 00       LDX #$00\nF50F  86 D3       STX $D3\nF511  86 96       STX $96\nF513  86 D1       STX $D1\nF515  E8          INX\nF516  86 D4       STX $D4\nF518  20 58 F5    JSR $F558\nF51B  20 D4 C8    JSR $C8D4\nF51E  86 D2       STX $D2\nF520  20 4D F5    JSR $F54D\nF523  20 9F F4    JSR $F49F\nF526  86 D4       STX $D4\nF528  E0 03       CPX #$03\nF52A  90 02       BCC $F52E\nF52C  C6 D3       DEC $D3\nF52E  20 4D F5    JSR $F54D\nF531  20 9F F4    JSR $F49F\nF534  86 D3       STX $D3\nF536  20 4D F5    JSR $F54D\nF539  20 55 F5    JSR $F555\nF53C  20 98 BD    JSR $BD98\nF53F  20 B5 C7    JSR $C7B5\nF542  85 D1       STA $D1\nF544  A5 1F       LDA $1F\nF546  85 DA       STA $DA\nF548  A5 20       LDA $20\nF54A  85 DB       STA $DB\nF54C  60          RTS\nF54D  20 76 00    JSR $0076\nF550  D0 02       BNE $F554\nF552  68          PLA\nF553  68          PLA\nF554  60          RTS\nF555  20 F5 BE    JSR $BEF5\nF558  20 76 00    JSR $0076\nF55B  D0 F7       BNE $F554\nF55D  4C 00 BF    JMP $BF00\nF560  20 0D F5    JSR $F50D\nF563  A5 D2       LDA $D2\nF565  F0 F6       BEQ $F55D\nF567  A0 0E       LDY #$0E\nF569  20 C1 F2    JSR $F2C1\nF56C  F0 41       BEQ $F5AF\nF56E  A6 AE       LDX $AE\nF570  A0 00       LDY #$00\nF572  84 96       STY $96\nF574  E0 0A       CPX #$0A\nF576  F0 37       BEQ $F5AF\nF578  E6 AE       INC $AE\nF57A  A5 D2       LDA $D2\nF57C  9D 51 02    STA $0251,X\nF57F  A5 D3       LDA $D3\nF581  09 60       ORA #$60\nF583  85 D3       STA $D3\nF585  9D 65 02    STA $0265,X\nF588  A5 D4       LDA $D4\nF58A  9D 5B 02    STA $025B,X\nF58D  F0 55       BEQ $F5E4\nF58F  C9 03       CMP #$03\nF591  F0 51       BEQ $F5E4\nF593  90 03       BCC $F598\nF595  4C A5 F4    JMP $F4A5\nF598  A5 D3       LDA $D3\nF59A  29 0F       AND #$0F\nF59C  D0 2B       BNE $F5C9\nF59E  20 57 F8    JSR $F857\nF5A1  20 49 F4    JSR $F449\nF5A4  A5 D1       LDA $D1\nF5A6  F0 1A       BEQ $F5C2\nF5A8  20 D3 F4    JSR $F4D3\nF5AB  D0 24       BNE $F5D1\nF5AD  A0 24       LDY #$24\nF5AF  20 A2 F2    JSR $F2A2\nF5B2  A9 0D       LDA #$0D\nF5B4  20 66 F2    JSR $F266\nF5B7  A9 3F       LDA #$3F\nF5B9  20 66 F2    JSR $F266\nF5BC  20 85 F1    JSR $F185\nF5BF  4C ED B3    JMP $B3ED\nF5C2  20 E5 F5    JSR $F5E5\nF5C5  F0 E6       BEQ $F5AD\nF5C7  D0 08       BNE $F5D1\nF5C9  20 8C F8    JSR $F88C\nF5CC  A9 04       LDA #$04\nF5CE  20 19 F6    JSR $F619\nF5D1  A6 D4       LDX $D4\nF5D3  A9 BF       LDA #$BF\nF5D5  A4 D3       LDY $D3\nF5D7  C0 60       CPY #$60\nF5D9  F0 07       BEQ $F5E2\nF5DB  A0 00       LDY #$00\nF5DD  A9 02       LDA #$02\nF5DF  91 D6       STA ($D6),Y\nF5E1  98          TYA\nF5E2  95 BA       STA $BA,X\nF5E4  60          RTS\nF5E5  A5 9D       LDA $9D\nF5E7  48          PHA\nF5E8  20 9A F8    JSR $F89A\nF5EB  A0 00       LDY #$00\nF5ED  B1 D6       LDA ($D6),Y\nF5EF  C9 05       CMP #$05\nF5F1  F0 21       BEQ $F614\nF5F3  C9 01       CMP #$01\nF5F5  F0 04       BEQ $F5FB\nF5F7  C9 04       CMP #$04\nF5F9  D0 ED       BNE $F5E8\nF5FB  AA          TAX\nF5FC  20 51 F3    JSR $F351\nF5FF  D0 11       BNE $F612\nF601  A0 A3       LDY #$A3\nF603  20 85 F1    JSR $F185\nF606  A0 05       LDY #$05\nF608  B1 D6       LDA ($D6),Y\nF60A  20 D2 FF    JSR $FFD2\nF60D  C8          INY\nF60E  C0 15       CPY #$15\nF610  D0 F6       BNE $F608\nF612  A0 01       LDY #$01\nF614  68          PLA\nF615  85 9D       STA $9D\nF617  98          TYA\nF618  60          RTS\nF619  85 B4       STA $B4\nF61B  20 95 F6    JSR $F695\nF61E  A5 FC       LDA $FC\nF620  48          PHA\nF621  A5 FB       LDA $FB\nF623  48          PHA\nF624  A5 CA       LDA $CA\nF626  48          PHA\nF627  A5 C9       LDA $C9\nF629  48          PHA\nF62A  A0 BF       LDY #$BF\nF62C  A9 20       LDA #$20\nF62E  91 D6       STA ($D6),Y\nF630  88          DEY\nF631  D0 FB       BNE $F62E\nF633  A5 B4       LDA $B4\nF635  91 D6       STA ($D6),Y\nF637  C8          INY\nF638  A5 FB       LDA $FB\nF63A  91 D6       STA ($D6),Y\nF63C  C8          INY\nF63D  A5 FC       LDA $FC\nF63F  91 D6       STA ($D6),Y\nF641  C8          INY\nF642  A5 C9       LDA $C9\nF644  91 D6       STA ($D6),Y\nF646  C8          INY\nF647  A5 CA       LDA $CA\nF649  91 D6       STA ($D6),Y\nF64B  C8          INY\nF64C  84 B5       STY $B5\nF64E  A0 00       LDY #$00\nF650  84 B4       STY $B4\nF652  A4 B4       LDY $B4\nF654  C4 D1       CPY $D1\nF656  F0 0C       BEQ $F664\nF658  B1 DA       LDA ($DA),Y\nF65A  A4 B5       LDY $B5\nF65C  91 D6       STA ($D6),Y\nF65E  E6 B4       INC $B4\nF660  E6 B5       INC $B5\nF662  D0 EE       BNE $F652\nF664  20 AB F6    JSR $F6AB\nF667  A9 69       LDA #$69\nF669  85 C3       STA $C3\nF66B  20 D5 F8    JSR $F8D5\nF66E  68          PLA\nF66F  85 C9       STA $C9\nF671  68          PLA\nF672  85 CA       STA $CA\nF674  68          PLA\nF675  85 FB       STA $FB\nF677  68          PLA\nF678  85 FC       STA $FC\nF67A  60          RTS\nF67B  20 2B F9    JSR $F92B\nF67E  A2 00       LDX #$00\nF680  A0 01       LDY #$01\nF682  B1 D6       LDA ($D6),Y\nF684  95 C7       STA $C7,X\nF686  E8          INX\nF687  C8          INY\nF688  E0 04       CPX #$04\nF68A  D0 F6       BNE $F682\nF68C  A5 C7       LDA $C7\nF68E  85 FB       STA $FB\nF690  A5 C8       LDA $C8\nF692  85 FC       STA $FC\nF694  60          RTS\nF695  A9 7A       LDA #$7A\nF697  85 D6       STA $D6\nF699  A9 02       LDA #$02\nF69B  85 D7       STA $D7\nF69D  A5 D4       LDA $D4\nF69F  4A          LSR A\nF6A0  B0 08       BCS $F6AA\nF6A2  A9 3A       LDA #$3A\nF6A4  85 D6       STA $D6\nF6A6  A9 03       LDA #$03\nF6A8  85 D7       STA $D7\nF6AA  60          RTS\nF6AB  20 2B F9    JSR $F92B\nF6AE  20 95 F6    JSR $F695\nF6B1  A5 D6       LDA $D6\nF6B3  85 FB       STA $FB\nF6B5  18          CLC\nF6B6  69 C0       ADC #$C0\nF6B8  85 C9       STA $C9\nF6BA  A5 D7       LDA $D7\nF6BC  85 FC       STA $FC\nF6BE  69 00       ADC #$00\nF6C0  85 CA       STA $CA\nF6C2  60          RTS\nF6C3  20 84 BD    JSR $BD84\nF6C6  20 2D C9    JSR $C92D\nF6C9  6C 11 00    JMP ($0011)\nF6CC  A5 2A       LDA $2A\nF6CE  85 C9       STA $C9\nF6D0  A5 2B       LDA $2B\nF6D2  85 CA       STA $CA\nF6D4  A5 29       LDA $29\nF6D6  85 FC       STA $FC\nF6D8  A5 28       LDA $28\nF6DA  85 FB       STA $FB\nF6DC  60          RTS\nF6DD  20 7D F4    JSR $F47D\nF6E0  20 CC F6    JSR $F6CC\nF6E3  A5 D4       LDA $D4\nF6E5  D0 05       BNE $F6EC\nF6E7  A0 74       LDY #$74\nF6E9  4C AF F5    JMP $F5AF\nF6EC  C9 03       CMP #$03\nF6EE  F0 F7       BEQ $F6E7\nF6F0  90 50       BCC $F742\nF6F2  A9 61       LDA #$61\nF6F4  85 D3       STA $D3\nF6F6  A4 D1       LDY $D1\nF6F8  D0 03       BNE $F6FD\nF6FA  4C 00 BF    JMP $BF00\nF6FD  20 A5 F4    JSR $F4A5\nF700  20 D5 F0    JSR $F0D5\nF703  A5 D3       LDA $D3\nF705  20 43 F1    JSR $F143\nF708  A0 00       LDY #$00\nF70A  20 BB FB    JSR $FBBB\nF70D  A5 C7       LDA $C7\nF70F  20 9E F1    JSR $F19E\nF712  A5 C8       LDA $C8\nF714  20 9E F1    JSR $F19E\nF717  20 0B FD    JSR $FD0B\nF71A  F0 10       BEQ $F72C\nF71C  B1 C7       LDA ($C7),Y\nF71E  20 9E F1    JSR $F19E\nF721  20 43 F3    JSR $F343\nF724  E6 C7       INC $C7\nF726  D0 EF       BNE $F717\nF728  E6 C8       INC $C8\nF72A  D0 EB       BNE $F717\nF72C  20 B9 F1    JSR $F1B9\nF72F  24 D3       BIT $D3\nF731  30 78       BMI $F7AB\nF733  20 D5 F0    JSR $F0D5\nF736  A5 D3       LDA $D3\nF738  29 EF       AND #$EF\nF73A  09 E0       ORA #$E0\nF73C  20 43 F1    JSR $F143\nF73F  4C B9 F1    JMP $F1B9\nF742  20 95 F6    JSR $F695\nF745  20 8C F8    JSR $F88C\nF748  20 51 F3    JSR $F351\nF74B  D0 08       BNE $F755\nF74D  A0 64       LDY #$64\nF74F  20 85 F1    JSR $F185\nF752  20 5C F4    JSR $F45C\nF755  A9 01       LDA #$01\nF757  20 19 F6    JSR $F619\nF75A  20 CE F8    JSR $F8CE\nF75D  A5 D3       LDA $D3\nF75F  29 02       AND #$02\nF761  F0 48       BEQ $F7AB\nF763  A9 05       LDA #$05\nF765  4C 19 F6    JMP $F619\nF768  E6 99       INC $99\nF76A  A5 99       LDA $99\nF76C  D0 02       BNE $F770\nF76E  E6 9A       INC $9A\nF770  C9 6F       CMP #$6F\nF772  D0 06       BNE $F77A\nF774  A5 9A       LDA $9A\nF776  C9 02       CMP #$02\nF778  F0 21       BEQ $F79B\nF77A  E6 8F       INC $8F\nF77C  D0 06       BNE $F784\nF77E  E6 8E       INC $8E\nF780  D0 02       BNE $F784\nF782  E6 8D       INC $8D\nF784  A2 00       LDX #$00\nF786  B5 8D       LDA $8D,X\nF788  DD AC F7    CMP $F7AC,X\nF78B  90 14       BCC $F7A1\nF78D  E8          INX\nF78E  E0 03       CPX #$03\nF790  D0 F4       BNE $F786\nF792  A9 00       LDA #$00\nF794  95 8C       STA $8C,X\nF796  CA          DEX\nF797  D0 FB       BNE $F794\nF799  F0 06       BEQ $F7A1\nF79B  A9 00       LDA #$00\nF79D  85 99       STA $99\nF79F  85 9A       STA $9A\nF7A1  AD 12 E8    LDA $E812\nF7A4  CD 12 E8    CMP $E812\nF7A7  D0 F8       BNE $F7A1\nF7A9  85 9B       STA $9B\nF7AB  60          RTS\nF7AC  4F 1A 01    SRE $011A\nF7AF  48          PHA\nF7B0  8A          TXA\nF7B1  48          PHA\nF7B2  98          TYA\nF7B3  48          PHA\nF7B4  A9 00       LDA #$00\nF7B6  85 96       STA $96\nF7B8  8A          TXA\nF7B9  20 C1 F2    JSR $F2C1\nF7BC  F0 05       BEQ $F7C3\nF7BE  A0 17       LDY #$17\nF7C0  4C AF F5    JMP $F5AF\nF7C3  20 CD F2    JSR $F2CD\nF7C6  A5 D4       LDA $D4\nF7C8  F0 10       BEQ $F7DA\nF7CA  C9 03       CMP #$03\nF7CC  F0 0C       BEQ $F7DA\nF7CE  B0 0F       BCS $F7DF\nF7D0  A6 D3       LDX $D3\nF7D2  E0 60       CPX #$60\nF7D4  F0 04       BEQ $F7DA\nF7D6  A0 86       LDY #$86\nF7D8  D0 E6       BNE $F7C0\nF7DA  85 AF       STA $AF\nF7DC  4C 9C F2    JMP $F29C\nF7DF  48          PHA\nF7E0  20 E1 DB    JSR $DBE1\nF7E3  20 D2 F0    JSR $F0D2\nF7E6  A5 D3       LDA $D3\nF7E8  10 06       BPL $F7F0\nF7EA  20 98 F1    JSR $F198\nF7ED  4C F3 F7    JMP $F7F3\nF7F0  20 93 F1    JSR $F193\nF7F3  A5 96       LDA $96\nF7F5  10 03       BPL $F7FA\nF7F7  4C BB F4    JMP $F4BB\nF7FA  68          PLA\nF7FB  4C DA F7    JMP $F7DA\nF7FE  48          PHA\nF7FF  8A          TXA\nF800  48          PHA\nF801  98          TYA\nF802  48          PHA\nF803  A9 00       LDA #$00\nF805  85 96       STA $96\nF807  8A          TXA\nF808  20 C1 F2    JSR $F2C1\nF80B  D0 B1       BNE $F7BE\nF80D  20 CD F2    JSR $F2CD\nF810  A5 D4       LDA $D4\nF812  D0 04       BNE $F818\nF814  A0 94       LDY #$94\nF816  D0 A8       BNE $F7C0\nF818  C9 03       CMP #$03\nF81A  F0 0C       BEQ $F828\nF81C  B0 0F       BCS $F82D\nF81E  A6 D3       LDX $D3\nF820  E0 60       CPX #$60\nF822  D0 04       BNE $F828\nF824  A0 94       LDY #$94\nF826  D0 98       BNE $F7C0\nF828  85 B0       STA $B0\nF82A  4C 9C F2    JMP $F29C\nF82D  48          PHA\nF82E  20 E1 DB    JSR $DBE1\nF831  20 D5 F0    JSR $F0D5\nF834  A5 D3       LDA $D3\nF836  10 05       BPL $F83D\nF838  20 48 F1    JSR $F148\nF83B  D0 03       BNE $F840\nF83D  20 43 F1    JSR $F143\nF840  A5 96       LDA $96\nF842  10 03       BPL $F847\nF844  4C BB F4    JMP $F4BB\nF847  68          PLA\nF848  4C 28 F8    JMP $F828\nF84B  20 95 F6    JSR $F695\nF84E  A6 D4       LDX $D4\nF850  F6 BA       INC $BA,X\nF852  B4 BA       LDY $BA,X\nF854  C0 C0       CPY #$C0\nF856  60          RTS\nF857  20 7A F8    JSR $F87A\nF85A  F0 2F       BEQ $F88B\nF85C  A0 41       LDY #$41\nF85E  20 85 F1    JSR $F185\nF861  A0 56       LDY #$56\nF863  20 85 F1    JSR $F185\nF866  A5 D4       LDA $D4\nF868  09 30       ORA #$30\nF86A  20 02 E2    JSR $E202\nF86D  20 35 F9    JSR $F935\nF870  20 7A F8    JSR $F87A\nF873  D0 F8       BNE $F86D\nF875  A0 AA       LDY #$AA\nF877  4C 85 F1    JMP $F185\nF87A  A9 10       LDA #$10\nF87C  A6 D4       LDX $D4\nF87E  CA          DEX\nF87F  F0 02       BEQ $F883\nF881  A9 20       LDA #$20\nF883  2C 10 E8    BIT $E810\nF886  D0 03       BNE $F88B\nF888  2C 10 E8    BIT $E810\nF88B  60          RTS\nF88C  20 7A F8    JSR $F87A\nF88F  F0 FA       BEQ $F88B\nF891  A0 41       LDY #$41\nF893  20 85 F1    JSR $F185\nF896  A0 4D       LDY #$4D\nF898  D0 C4       BNE $F85E\nF89A  A9 00       LDA #$00\nF89C  85 96       STA $96\nF89E  85 9D       STA $9D\nF8A0  20 AB F6    JSR $F6AB\nF8A3  20 2B F9    JSR $F92B\nF8A6  20 57 F8    JSR $F857\nF8A9  78          SEI\nF8AA  A9 00       LDA #$00\nF8AC  85 C2       STA $C2\nF8AE  85 CE       STA $CE\nF8B0  85 CB       STA $CB\nF8B2  85 C0       STA $C0\nF8B4  85 C1       STA $C1\nF8B6  85 B2       STA $B2\nF8B8  A6 D4       LDX $D4\nF8BA  CA          DEX\nF8BB  F0 07       BEQ $F8C4\nF8BD  A9 90       LDA #$90\nF8BF  8D 4E E8    STA $E84E\nF8C2  D0 03       BNE $F8C7\nF8C4  EE 11 E8    INC $E811\nF8C7  A2 0E       LDX #$0E\nF8C9  D0 15       BNE $F8E0\nF8CB  20 AB F6    JSR $F6AB\nF8CE  20 2B F9    JSR $F92B\nF8D1  A9 14       LDA #$14\nF8D3  85 C3       STA $C3\nF8D5  20 8C F8    JSR $F88C\nF8D8  78          SEI\nF8D9  A9 A0       LDA #$A0\nF8DB  8D 4E E8    STA $E84E\nF8DE  A2 08       LDX #$08\nF8E0  20 E0 FC    JSR $FCE0\nF8E3  A9 02       LDA #$02\nF8E5  85 DE       STA $DE\nF8E7  20 C9 FB    JSR $FBC9\nF8EA  CE 13 E8    DEC $E813\nF8ED  A6 D4       LDX $D4\nF8EF  CA          DEX\nF8F0  D0 09       BNE $F8FB\nF8F2  A9 34       LDA #$34\nF8F4  8D 13 E8    STA $E813\nF8F7  85 F9       STA $F9\nF8F9  D0 0A       BNE $F905\nF8FB  AD 40 E8    LDA $E840\nF8FE  86 FA       STX $FA\nF900  29 EF       AND #$EF\nF902  8D 40 E8    STA $E840\nF905  A2 FF       LDX #$FF\nF907  A0 FF       LDY #$FF\nF909  88          DEY\nF90A  D0 FD       BNE $F909\nF90C  CA          DEX\nF90D  D0 F8       BNE $F907\nF90F  8D 49 E8    STA $E849\nF912  58          CLI\nF913  A9 E4       LDA #$E4\nF915  C5 91       CMP $91\nF917  F0 11       BEQ $F92A\nF919  20 35 F9    JSR $F935\nF91C  2C 13 E8    BIT $E813\nF91F  10 F2       BPL $F913\nF921  2C 12 E8    BIT $E812\nF924  20 68 F7    JSR $F768\nF927  4C 13 F9    JMP $F913\nF92A  60          RTS\nF92B  20 35 F9    JSR $F935\nF92E  A9 E4       LDA #$E4\nF930  C5 91       CMP $91\nF932  D0 F7       BNE $F92B\nF934  60          RTS\nF935  20 35 F3    JSR $F335\nF938  D0 08       BNE $F942\nF93A  20 C0 FC    JSR $FCC0\nF93D  20 B8 F2    JSR $F2B8\nF940  85 10       STA $10\nF942  4C C6 B7    JMP $B7C6\nF945  86 CC       STX $CC\nF947  A5 CB       LDA $CB\nF949  0A          ASL A\nF94A  0A          ASL A\nF94B  18          CLC\nF94C  65 CB       ADC $CB\nF94E  18          CLC\nF94F  65 CC       ADC $CC\nF951  85 CC       STA $CC\nF953  A9 00       LDA #$00\nF955  24 CB       BIT $CB\nF957  30 01       BMI $F95A\nF959  2A          ROL A\nF95A  06 CC       ASL $CC\nF95C  2A          ROL A\nF95D  06 CC       ASL $CC\nF95F  2A          ROL A\nF960  AA          TAX\nF961  AD 48 E8    LDA $E848\nF964  C9 15       CMP #$15\nF966  90 F9       BCC $F961\nF968  65 CC       ADC $CC\nF96A  8D 44 E8    STA $E844\nF96D  8A          TXA\nF96E  6D 49 E8    ADC $E849\nF971  8D 45 E8    STA $E845\nF974  58          CLI\nF975  60          RTS\nF976  AE 49 E8    LDX $E849\nF979  A0 FF       LDY #$FF\nF97B  98          TYA\nF97C  ED 48 E8    SBC $E848\nF97F  EC 49 E8    CPX $E849\nF982  D0 F2       BNE $F976\nF984  86 CC       STX $CC\nF986  AA          TAX\nF987  8C 48 E8    STY $E848\nF98A  8C 49 E8    STY $E849\nF98D  98          TYA\nF98E  E5 CC       SBC $CC\nF990  86 CC       STX $CC\nF992  4A          LSR A\nF993  66 CC       ROR $CC\nF995  4A          LSR A\nF996  66 CC       ROR $CC\nF998  A5 CB       LDA $CB\nF99A  18          CLC\nF99B  69 3C       ADC #$3C\nF99D  2C 40 E8    BIT $E840\nF9A0  2C 10 E8    BIT $E810\nF9A3  C5 CC       CMP $CC\nF9A5  B0 4A       BCS $F9F1\nF9A7  A6 B2       LDX $B2\nF9A9  F0 03       BEQ $F9AE\nF9AB  4C 9C FA    JMP $FA9C\nF9AE  A6 B7       LDX $B7\nF9B0  30 1B       BMI $F9CD\nF9B2  A2 00       LDX #$00\nF9B4  69 30       ADC #$30\nF9B6  65 CB       ADC $CB\nF9B8  C5 CC       CMP $CC\nF9BA  B0 1C       BCS $F9D8\nF9BC  E8          INX\nF9BD  69 26       ADC #$26\nF9BF  65 CB       ADC $CB\nF9C1  C5 CC       CMP $CC\nF9C3  B0 17       BCS $F9DC\nF9C5  69 2C       ADC #$2C\nF9C7  65 CB       ADC $CB\nF9C9  C5 CC       CMP $CC\nF9CB  90 03       BCC $F9D0\nF9CD  4C 4C FA    JMP $FA4C\nF9D0  A5 CE       LDA $CE\nF9D2  F0 1D       BEQ $F9F1\nF9D4  85 BE       STA $BE\nF9D6  D0 19       BNE $F9F1\nF9D8  E6 BF       INC $BF\nF9DA  B0 02       BCS $F9DE\nF9DC  C6 BF       DEC $BF\nF9DE  38          SEC\nF9DF  E9 13       SBC #$13\nF9E1  E5 CC       SBC $CC\nF9E3  65 9C       ADC $9C\nF9E5  85 9C       STA $9C\nF9E7  A5 B9       LDA $B9\nF9E9  49 01       EOR #$01\nF9EB  85 B9       STA $B9\nF9ED  F0 21       BEQ $FA10\nF9EF  86 D9       STX $D9\nF9F1  A5 CE       LDA $CE\nF9F3  F0 18       BEQ $FA0D\nF9F5  2C 4D E8    BIT $E84D\nF9F8  50 13       BVC $FA0D\nF9FA  A9 00       LDA #$00\nF9FC  85 B9       STA $B9\nF9FE  A5 B7       LDA $B7\nFA00  10 31       BPL $FA33\nFA02  30 C9       BMI $F9CD\nFA04  A2 A6       LDX #$A6\nFA06  20 45 F9    JSR $F945\nFA09  A5 B1       LDA $B1\nFA0B  D0 C3       BNE $F9D0\nFA0D  4C 00 E6    JMP $E600\nFA10  A5 9C       LDA $9C\nFA12  F0 08       BEQ $FA1C\nFA14  30 04       BMI $FA1A\nFA16  C6 CB       DEC $CB\nFA18  C6 CB       DEC $CB\nFA1A  E6 CB       INC $CB\nFA1C  A9 00       LDA #$00\nFA1E  85 9C       STA $9C\nFA20  E4 D9       CPX $D9\nFA22  D0 0F       BNE $FA33\nFA24  8A          TXA\nFA25  D0 A9       BNE $F9D0\nFA27  A5 BF       LDA $BF\nFA29  30 C6       BMI $F9F1\nFA2B  C9 10       CMP #$10\nFA2D  90 C2       BCC $F9F1\nFA2F  85 AB       STA $AB\nFA31  B0 BE       BCS $F9F1\nFA33  8A          TXA\nFA34  45 B1       EOR $B1\nFA36  85 B1       STA $B1\nFA38  A5 CE       LDA $CE\nFA3A  F0 D1       BEQ $FA0D\nFA3C  C6 B7       DEC $B7\nFA3E  30 C4       BMI $FA04\nFA40  46 D9       LSR $D9\nFA42  66 DF       ROR $DF\nFA44  A2 DA       LDX #$DA\nFA46  20 45 F9    JSR $F945\nFA49  4C 00 E6    JMP $E600\nFA4C  A5 AB       LDA $AB\nFA4E  F0 04       BEQ $FA54\nFA50  A5 CE       LDA $CE\nFA52  F0 07       BEQ $FA5B\nFA54  A5 B7       LDA $B7\nFA56  30 03       BMI $FA5B\nFA58  4C DC F9    JMP $F9DC\nFA5B  46 CC       LSR $CC\nFA5D  A9 93       LDA #$93\nFA5F  38          SEC\nFA60  E5 CC       SBC $CC\nFA62  65 CB       ADC $CB\nFA64  0A          ASL A\nFA65  AA          TAX\nFA66  20 45 F9    JSR $F945\nFA69  E6 B2       INC $B2\nFA6B  A5 CE       LDA $CE\nFA6D  D0 11       BNE $FA80\nFA6F  A5 AB       LDA $AB\nFA71  F0 26       BEQ $FA99\nFA73  85 BE       STA $BE\nFA75  A9 00       LDA #$00\nFA77  85 AB       STA $AB\nFA79  A9 C0       LDA #$C0\nFA7B  8D 4E E8    STA $E84E\nFA7E  85 CE       STA $CE\nFA80  A5 AB       LDA $AB\nFA82  85 CF       STA $CF\nFA84  F0 09       BEQ $FA8F\nFA86  A9 00       LDA #$00\nFA88  85 CE       STA $CE\nFA8A  A9 40       LDA #$40\nFA8C  8D 4E E8    STA $E84E\nFA8F  A5 DF       LDA $DF\nFA91  85 DD       STA $DD\nFA93  A5 BE       LDA $BE\nFA95  05 BF       ORA $BF\nFA97  85 D0       STA $D0\nFA99  4C 00 E6    JMP $E600\nFA9C  20 C9 FB    JSR $FBC9\nFA9F  85 B2       STA $B2\nFAA1  A2 DA       LDX #$DA\nFAA3  20 45 F9    JSR $F945\nFAA6  A5 DE       LDA $DE\nFAA8  F0 02       BEQ $FAAC\nFAAA  85 BD       STA $BD\nFAAC  A9 0F       LDA #$0F\nFAAE  24 C2       BIT $C2\nFAB0  10 17       BPL $FAC9\nFAB2  A5 CF       LDA $CF\nFAB4  D0 0C       BNE $FAC2\nFAB6  A6 DE       LDX $DE\nFAB8  CA          DEX\nFAB9  D0 0B       BNE $FAC6\nFABB  A9 08       LDA #$08\nFABD  20 C4 FB    JSR $FBC4\nFAC0  D0 04       BNE $FAC6\nFAC2  A9 00       LDA #$00\nFAC4  85 C2       STA $C2\nFAC6  4C 00 E6    JMP $E600\nFAC9  70 31       BVS $FAFC\nFACB  D0 18       BNE $FAE5\nFACD  A5 CF       LDA $CF\nFACF  D0 F5       BNE $FAC6\nFAD1  A5 D0       LDA $D0\nFAD3  D0 F1       BNE $FAC6\nFAD5  A5 BD       LDA $BD\nFAD7  4A          LSR A\nFAD8  A5 DD       LDA $DD\nFADA  30 03       BMI $FADF\nFADC  90 18       BCC $FAF6\nFADE  18          CLC\nFADF  B0 15       BCS $FAF6\nFAE1  29 0F       AND #$0F\nFAE3  85 C2       STA $C2\nFAE5  C6 C2       DEC $C2\nFAE7  D0 DD       BNE $FAC6\nFAE9  A9 40       LDA #$40\nFAEB  85 C2       STA $C2\nFAED  20 BB FB    JSR $FBBB\nFAF0  A9 00       LDA #$00\nFAF2  85 C3       STA $C3\nFAF4  F0 D0       BEQ $FAC6\nFAF6  A9 80       LDA #$80\nFAF8  85 C2       STA $C2\nFAFA  D0 CA       BNE $FAC6\nFAFC  A5 CF       LDA $CF\nFAFE  F0 0A       BEQ $FB0A\nFB00  A9 04       LDA #$04\nFB02  20 C4 FB    JSR $FBC4\nFB05  A9 00       LDA #$00\nFB07  4C 8B FB    JMP $FB8B\nFB0A  20 0B FD    JSR $FD0B\nFB0D  D0 03       BNE $FB12\nFB0F  4C 89 FB    JMP $FB89\nFB12  A6 BD       LDX $BD\nFB14  CA          DEX\nFB15  F0 2D       BEQ $FB44\nFB17  A5 9D       LDA $9D\nFB19  F0 0C       BEQ $FB27\nFB1B  A0 00       LDY #$00\nFB1D  A5 DD       LDA $DD\nFB1F  D1 C7       CMP ($C7),Y\nFB21  F0 04       BEQ $FB27\nFB23  A9 01       LDA #$01\nFB25  85 D0       STA $D0\nFB27  A5 D0       LDA $D0\nFB29  F0 4C       BEQ $FB77\nFB2B  A2 3D       LDX #$3D\nFB2D  E4 C0       CPX $C0\nFB2F  90 3F       BCC $FB70\nFB31  A6 C0       LDX $C0\nFB33  A5 C8       LDA $C8\nFB35  9D 01 01    STA $0101,X\nFB38  A5 C7       LDA $C7\nFB3A  9D 00 01    STA $0100,X\nFB3D  E8          INX\nFB3E  E8          INX\nFB3F  86 C0       STX $C0\nFB41  4C 77 FB    JMP $FB77\nFB44  A6 C1       LDX $C1\nFB46  E4 C0       CPX $C0\nFB48  F0 37       BEQ $FB81\nFB4A  A5 C7       LDA $C7\nFB4C  DD 00 01    CMP $0100,X\nFB4F  D0 30       BNE $FB81\nFB51  A5 C8       LDA $C8\nFB53  DD 01 01    CMP $0101,X\nFB56  D0 29       BNE $FB81\nFB58  E6 C1       INC $C1\nFB5A  E6 C1       INC $C1\nFB5C  A5 9D       LDA $9D\nFB5E  F0 0C       BEQ $FB6C\nFB60  A5 DD       LDA $DD\nFB62  A0 00       LDY #$00\nFB64  D1 C7       CMP ($C7),Y\nFB66  F0 19       BEQ $FB81\nFB68  A9 01       LDA #$01\nFB6A  85 D0       STA $D0\nFB6C  A5 D0       LDA $D0\nFB6E  F0 07       BEQ $FB77\nFB70  A9 10       LDA #$10\nFB72  20 C4 FB    JSR $FBC4\nFB75  D0 0A       BNE $FB81\nFB77  A5 9D       LDA $9D\nFB79  D0 06       BNE $FB81\nFB7B  A5 DD       LDA $DD\nFB7D  A0 00       LDY #$00\nFB7F  91 C7       STA ($C7),Y\nFB81  E6 C7       INC $C7\nFB83  D0 33       BNE $FBB8\nFB85  E6 C8       INC $C8\nFB87  D0 2F       BNE $FBB8\nFB89  A9 80       LDA #$80\nFB8B  85 C2       STA $C2\nFB8D  A6 DE       LDX $DE\nFB8F  CA          DEX\nFB90  30 02       BMI $FB94\nFB92  86 DE       STX $DE\nFB94  C6 BD       DEC $BD\nFB96  F0 08       BEQ $FBA0\nFB98  A5 C0       LDA $C0\nFB9A  D0 1C       BNE $FBB8\nFB9C  85 DE       STA $DE\nFB9E  F0 18       BEQ $FBB8\nFBA0  20 C0 FC    JSR $FCC0\nFBA3  20 BB FB    JSR $FBBB\nFBA6  A0 00       LDY #$00\nFBA8  84 C3       STY $C3\nFBAA  20 F9 FC    JSR $FCF9\nFBAD  A5 C3       LDA $C3\nFBAF  45 DD       EOR $DD\nFBB1  F0 05       BEQ $FBB8\nFBB3  A9 20       LDA #$20\nFBB5  20 C4 FB    JSR $FBC4\nFBB8  4C 00 E6    JMP $E600\nFBBB  A5 FC       LDA $FC\nFBBD  85 C8       STA $C8\nFBBF  A5 FB       LDA $FB\nFBC1  85 C7       STA $C7\nFBC3  60          RTS\n\n\n\n\n\n\n\n: save\"   ( device  <<filename\" -- )\n    (setlfs) save-buffers ;\n\n: (setlfs)   ( device -- )\n\nrldecode\n    <-- get character\n    sec to mung prev\n    begin\n        <-- reget character\n        is it prev?\n        if\n            <-- get count\n            for count\n                get prev\n                output char -->\n            next\n        else\n            output char -->\n            set prev\n        then\n        out of characters?\n        if\n            true (done)\n        else\n            false (not done)\n            <-- get character\n        then\n    until\n\nvariable a\n: n>a  (.) tuck a @ swap move a +! ;\n: >a   a @ c! 1 a +! ;\n: encode ( c-addr +n a -- a n' )\n  dup a ! -rot over c@ 1 2swap 1 /string bounds ?do\n    over i c@ = if 1+\n    else n>a >a i c@ 1 then\n  loop n>a >a  a @ over - ;\n\n: digit?  [char] 0 [ char 9 1+ literal ] within ;\n: decode ( c-addr +n a -- a n' )\n  dup a ! 0 2swap bounds ?do\n    i c@ digit? if 10 * i c@ [char] 0 - + else\n    a @ over i c@ fill a +! 0 then\n  loop drop a @ over - ;\n\n    ( from size to -- to size' )\n\n\n                                ( from to size )\nbegin\n    1- rot c@+ >r               ( to size- from+ (r char )\n    c@+ r@ =                    ( to size- from++ flag (r char )\n    if                          ( to size- from++ (r char )\n        2-under c@+ >r rot      ( size--- from+++ to (r char count )\n        2r> 0 ?do               ( from' size' to char (r zi zlim )\n            dup>r c!+ r>        ( from' size' to+ char (r zi zlim )\n        loop drop               ( from' to' size' )\n    else                        ( to size- from++ (r char )\n        1- rot r> c!+           ( size' from' to+ )\n    then rot  dup 0=\nuntil\n\n\n: rldecode   ( from to size -- )\n\\ input stream follows each pair of matching adjacent characters with [count]\n  begin                         ( from to size )\n    1- rot @+ csplit tuck =     ( to size- from++ char flag )\n    if                          ( to size- from++ char )\n      swap c@+ 0 ?do            ( to size- char from+++ )\n        over c!+                ( to size- char from' )\n      loop nip 2-under          ( to size' from' )\n    else                        ( to size- from++ char )\n      >r 1- rot r> c!+\n    then rot\n    dup 0=\n  until  3drop ;\n\n\n\n\n\nrldecode\n    bytesout = 0\n    begin\n        any characters left?\n    while\n        <-- get char\n        decrement characters remaining\n        (bytesout == 0)?\n        if\n            set prev\n        else\n            (char == prev)?\n            if\n                <-- get count\n                decrement characters remaining\n                get prev\n                for count\n                    output char -->\n                next\n                reset-prev is true\n            then\n        then\n        --> output char\n    repeat\n\n    sec to mung prev\n    begin\n        <-- reget character\n        is it prev?\n        if\n            <-- get count\n            for count\n                get prev\n                output char -->\n            next\n        else\n            output char -->\n            set prev\n        then\n        out of characters?\n        if\n            true (done)\n        else\n            false (not done)\n            <-- get character\n        then\n    until\n\n\n\n\n; n0                            from\n; n1                            to\n; tos                           howmany\n;\n; n2                            prev\nrldecodes\n    stx z\n    ldx #0\n    ldy #0\n    sec\n-\n    jsr bin\n    lda (in),y\n    eor prev\n    php\n    eor prev\n    plp\n    bne +\n    jsr bin                     ; <-- get count\n    tax\n-   jsr bout\n    dex\n    bne -\n    beq --\n+\n    sec\n    adc #0\n    sta prev\n-   lda (from),y\n    cmp prev\n    bne +\n    ldx #from\n    jsr regplus\n    lda (from),y                ; get count\n\nbout\n    sta (to),y\n    inc to\n    bne +\n    inc to+1\n+   rts\nbin\n    lda (from),y\n    inc from\n    bne +\n    inc from+1\n+   rts\n\nrldecode\n    <-- get character\n    sec to mung prev\n    begin\n        <-- reget character\n        is it prev?\n        if\n            <-- get count\n            for count\n                get prev\n                output char -->\n            next\n        else\n            output char -->\n            set prev\n        then\n        out of characters?\n        if\n            true (done)\n        else\n            false (not done)\n            <-- get character\n        then\n    until\n\n\n\nregplus\n    rts\n\n\n\n\n\nB4 TAPEID                       Tape buffer leading character (eg 1=PRG 2=DATA 3= 4=SEQ 5=EOT)\nC7 SAL                          pointer - tape buffer/screen scrolling\nD1 FNLEN                        Length of Current File Name\nD2 LA                           Current Logical File Number\nD3 SA                           Current Secondary Address\nD4 FA                           First Address (current device number)\nDA FNADR                        File Name Address\n\n\npile up everything in registers\n    jsr harvests12\n/*\nblkbuf\nd1\nda\nuserfilename\nzpimage+28\n4\n*/\n    brk\nget filename\n    .byt ldd | Nfilename\n    .byt st | Nelsewhere\nget filename length\n    .byt ldi | Nelsewhere\nstore that in D1\nD2 off\n    .byt std | Nd1\nset filename pointer\n    .byt ld | Nelsewhere\n    .byt std | Nda\nget `sa#`\n    .byt ldd | Nfilename        ; now `sa#`\nstore `sa#` in D3\n    .byt sti | Nd1              ; now `d3`\nget `drv#`\n    .byt ldd | Nfilename        ; now `drv#`\nstore `drv#` in D4\n    .byt sti | Nd1              ; now `d4`\nget vmbuf\n    .byt ldd | Nfilename        ; now `vmbuf`\n    .byt st | Nsomething\n    .byt std | Nzpimage+28\n    .byt sub | Nblkbuf\n    .byt std | Nsomething\n    .byt nxt\n\n8 n0 m>r\n\npush stuff to return stack\n    setealstal-1\n    vmbuf@\n    blkbuf\n\n\nset up 28-2B with STAL EAL (vmbuf@ blkbuf)\npush stuff to return stack\n.word seeya\nseeya\nSAVEPRG F6E0\naloha\n\n    txa\n    bne\n    ldx #3\n    .bit abs\n    ldx #2\n    .bit abs\n    ldx #1\n    pha\n    lda stackl,x\n    sta tos\n    lda stackh,x\n    sta tos+1\n    pla\n    tax\n    jmp next\n\n\n\n\n~todo: incrementing split stack from $20, $50 -- all `inx` becomes `dex` and vice versa\n\nA zeropage\nB memory\nC return stack\nD data stack\nE Sweet16 registers\nF virtual memory\nG cursor\nH file\n\ntos: high\n2os: low\n\n\nreturn stack\n>r 2>r                          data stack                      r> 2r>\nrswap  rdup  rover\n\n>r 2>r                                  D -> C\nr> 2r>                                  C -> D\nrswap                                   C -> C\nswap rot dup over tuck pick roll        D -> D\n>r0                                     D -> E\n<r0                                     E -> D\nm>r                                     ABE -> C\nr>m                                     C -> ABE\nblock                                   F -> B\nupdate                                  B -> F\n\n3.14159\n    tos: 4\n    2os: 52015\n    dpl: 5\n\ndup\n    lda #>(next-1)\n    pha\n    lda #<(next-1)\n    pha\nslip\n    inx\nslip01\n    lda tos+1           ;{3}\n    sta stackh,x        ;{4}\n    lda tos             ;{3}\n    sta stackl,x        ;{4}\n    rts                 ;{6|22}\n\nslowdrop\n    ldy stackh,x\n    lda stackl,x\n    sty stackl,x\n    dex\n    sta tos\n    sty tos+1\n    jmp next\n\nstackl 00  40  3a\nstackh 20  02  03\n\n\n\ndrop\n    ldy stackh,x\n    lda stackl,x\n    dex\nput\n    sta tos\nputy\n    sty tos+1\nput99\n    jmp next\n\n\n\nput start/end in $28-2B\n28-2B       start/end addr\nD4          device\n\n    jsr $F6E0                   ;ML save\n\nF4A5 send name string to ieee buss\nF0D5 send listen\nF143 send one char and clear atn\nFBBB puts (FB) into (C7) header pointer back to start of buffer\nF19E send IEEE char\n\n\n\n\n\n\n\n\n\n\nF29C  68          PLA\nF29D  A8          TAY\nF29E  68          PLA\nF29F  AA          TAX\nF2A0  68          PLA\nF2A1  60          RTS\n\n\n\n\n\n\nF2A2  A9 00       LDA #$00              ; abort all file and I/O activity\nF2A4  85 AE       STA $AE\n; close files\nF2A6  A5 B0       LDA $B0               ; enter here from F33C\nF2A8  C9 04       CMP #$04\nF2AA  90 03       BCC $F2AF\nF2AC  20 B9 F1    JSR $F1B9             ; send unlisten\nF2AF  A5 AF       LDA $AF\nF2B1  C9 04       CMP #$04\nF2B3  90 03       BCC $F2B8\nF2B5  20 AE F1    JSR $F1AE\nF2B8  A9 03       LDA #$03\nF2BA  85 B0       STA $B0\nF2BC  A9 00       LDA #$00\nF2BE  85 AF       STA $AF\nF2C0  60          RTS\n; search table for logical file number\nF2C1  A6 AE       LDX $AE\nF2C3  CA          DEX\nF2C4  30 16       BMI $F2DC\nF2C6  DD 51 02    CMP $0251,X\nF2C9  F0 11       BEQ $F2DC\nF2CB  D0 F6       BNE $F2C3\n; set file data from position in table\nF2CD  BD 51 02    LDA $0251,X\nF2D0  85 D2       STA $D2\nF2D2  BD 5B 02    LDA $025B,X\nF2D5  85 D4       STA $D4\nF2D7  BD 65 02    LDA $0265,X\nF2DA  85 D3       STA $D3\nF2DC  60          RTS\n; perform close\nF2DD  20 0D F5    JSR $F50D\nF2E0  A5 D2       LDA $D2\nF2E2  20 C1 F2    JSR $F2C1\nF2E5  D0 4D       BNE $F334\nF2E7  20 CD F2    JSR $F2CD\nF2EA  8A          TXA\nF2EB  48          PHA\nF2EC  A5 D4       LDA $D4\nF2EE  F0 28       BEQ $F318\nF2F0  C9 03       CMP #$03\nF2F2  F0 24       BEQ $F318\nF2F4  B0 1F       BCS $F315\n; close devices #1 and #2\nF2F6  A5 D3       LDA $D3\nF2F8  29 0F       AND #$0F\nF2FA  F0 1C       BEQ $F318\nF2FC  20 95 F6    JSR $F695\nF2FF  A9 00       LDA #$00\nF301  20 78 F2    JSR $F278\nF304  20 CB F8    JSR $F8CB\nF307  A5 D3       LDA $D3\nF309  C9 62       CMP #$62\nF30B  D0 0B       BNE $F318\nF30D  A9 05       LDA #$05\nF30F  20 19 F6    JSR $F619\nF312  4C 18 F3    JMP $F318\n\n\n\n\n\n\n\nGETSTOP\nF335  A5 9B       LDA $9B\nF337  C9 EF       CMP #$EF\nF339  D0 07       BNE $F342\nF33B  08          PHP\nF33C  20 A6 F2    JSR $F2A6\nF33F  85 9E       STA $9E\nF341  28          PLP\nF342  60          RTS\n\nF343  20 35 F3    JSR $F335\nF346  4C C6 B7    JMP $B7C6                 ; out to BASIC\n\nF343  20 35 F3    JSR $F335\nF346  4C C6 B7    JMP $B7C6\nF349  20 51 F3    JSR $F351\nF34C  D0 F4       BNE $F342\nF34E  4C 85 F1    JMP $F185\nF351  A5 78       LDA $78\nF353  C9 02       CMP #$02\nF355  60          RTS\nF356  A5 D4       LDA $D4\nF358  D0 03       BNE $F35D\nF35A  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF35D  C9 03       CMP #$03\nF35F  F0 F9       BEQ $F35A\nF361  90 71       BCC $F3D4\n\nF363  A9 60       LDA #$60              ; load from IEEE device\nF365  85 D3       STA $D3\nF367  A4 D1       LDY $D1\nF369  D0 03       BNE $F36E\nF36B  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF36E  20 49 F4    JSR $F449\nF371  20 A5 F4    JSR $F4A5\nF374  20 D2 F0    JSR $F0D2\nF377  A5 D3       LDA $D3\nF379  20 93 F1    JSR $F193\nF37C  20 C0 F1    JSR $F1C0             ; fetch data from device\nF37F  85 FB       STA $FB\nF381  A5 96       LDA $96\nF383  4A          LSR A\nF384  4A          LSR A\nF385  B0 3A       BCS $F3C1\nF387  20 C0 F1    JSR $F1C0             ; get one char from IEEE buss\nF38A  85 FC       STA $FC\nF38C  20 6D F4    JSR $F46D             ; print \"loading\" or \"verifying\"\nF38F  A9 FD       LDA #$FD              ; loop to load or verify data in RAM\nF391  25 96       AND $96\nF393  85 96       STA $96\nF395  20 43 F3    JSR $F343\nF398  20 C0 F1    JSR $F1C0             ; get one char from IEEE buss\nF39B  AA          TAX\nF39C  A5 96       LDA $96\nF39E  4A          LSR A\nF39F  4A          LSR A\nF3A0  B0 ED       BCS $F38F\nF3A2  8A          TXA\nF3A3  A4 9D       LDY $9D\nF3A5  F0 0C       BEQ $F3B3                 ; load\nF3A7  88          DEY                       ; verify\nF3A8  D1 FB       CMP ($FB),Y\nF3AA  F0 09       BEQ $F3B5\nF3AC  A9 10       LDA #$10\nF3AE  05 96       ORA $96\nF3B0  85 96       STA $96\nF3B2  2C 91 FB    BIT $FB91                 ; STA ($FB),Y\nF3B5  E6 FB       INC $FB\nF3B7  D0 02       BNE $F3BB\nF3B9  E6 FC       INC $FC\nF3BB  24 96       BIT $96\nF3BD  70 07       BVS $F3C6\nF3BF  50 CE       BVC $F38F\nF3C1  A0 24       LDY #$24\nF3C3  4C AF F5    JMP $F5AF\nF3C6  A5 FB       LDA $FB\nF3C8  85 C9       STA $C9\nF3CA  A5 FC       LDA $FC\nF3CC  85 CA       STA $CA\nF3CE  20 AE F1    JSR $F1AE\nF3D1  4C 2F F7    JMP $F72F\n\nF3D4  20 95 F6    JSR $F695\nF3D7  20 57 F8    JSR $F857\nF3DA  20 49 F4    JSR $F449\nF3DD  A5 D1       LDA $D1\nF3DF  F0 08       BEQ $F3E9\nF3E1  20 D3 F4    JSR $F4D3\nF3E4  D0 08       BNE $F3EE\nF3E6  4C AD F5    JMP $F5AD\nF3E9  20 E5 F5    JSR $F5E5\nF3EC  F0 F8       BEQ $F3E6\nF3EE  E0 01       CPX #$01\nF3F0  D0 EB       BNE $F3DD\nF3F2  A5 96       LDA $96\nF3F4  29 10       AND #$10\nF3F6  D0 74       BNE $F46C\n\nREADDATA\nF3F8  20 7B F6    JSR $F67B\nF3FB  20 6D F4    JSR $F46D\nF3FE  4C A3 F8    JMP $F8A3\nF401  A9 00       LDA #$00\nF403  85 9D       STA $9D\nF405  20 7D F4    JSR $F47D             ; entry point from VERIFY\nF408  20 CC F6    JSR $F6CC\nF40B  A9 FF       LDA #$FF\nF40D  C5 9B       CMP $9B\nF40F  D0 FC       BNE $F40D\nF411  C5 9B       CMP $9B\nF413  D0 F8       BNE $F40D\nF415  20 56 F3    JSR $F356\nF418  A5 9D       LDA $9D\nF41A  D0 50       BNE $F46C\nF41C  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF41F  A5 96       LDA $96\nF421  29 10       AND #$10\nF423  F0 09       BEQ $F42E\nF425  A0 00       LDY #$00\nF427  84 9E       STY $9E\nF429  A0 60       LDY #$60\nF42B  4C AF F5    JMP $F5AF\nF42E  A0 AE       LDY #$AE\nF430  20 49 F3    JSR $F349\nF433  20 51 F3    JSR $F351\nF436  D0 0B       BNE $F443\nF438  A5 CA       LDA $CA\nF43A  85 2B       STA $2B\nF43C  A5 C9       LDA $C9\nF43E  85 2A       STA $2A\nF440  4C AD B4    JMP $B4AD\n\nF443  20 22 B6    JSR $B622\nF446  4C 0B B6    JMP $B60B\nF449  20 51 F3    JSR $F351             ; print SEARCHING if in direct mode\nF44C  D0 1E       BNE $F46C\nF44E  A0 32       LDY #$32\nF450  20 85 F1    JSR $F185\nF453  A5 D1       LDA $D1               ; print FOR {filename} if nonzero length\nF455  F0 15       BEQ $F46C\nF457  A0 3D       LDY #$3D\nF459  20 85 F1    JSR $F185\nF45C  A4 D1       LDY $D1\nF45E  F0 0C       BEQ $F46C\n\nF460  A0 00       LDY #$00              ; print filename string\nF462  B1 DA       LDA ($DA),Y\nF464  20 66 F2    JSR $F266             ; CHROUT\nF467  C8          INY\nF468  C4 D1       CPY $D1\nF46A  D0 F6       BNE $F462\nF46C  60          RTS\n\nF46D  A0 5F       LDY #$5F              ; print LOADING or VERIFYING if in direct mode\nF46F  A5 9D       LDA $9D\nF471  F0 02       BEQ $F475\nF473  A0 6D       LDY #$6D\nF475  20 49 F3    JSR $F349\nF478  A0 39       LDY #$39\nF47A  4C 49 F3    JMP $F349\n\nF47D  A2 00       LDX #$00              ; fetch params for LOAD, SAVE or VERIFY\nF47F  86 96       STX $96\nF481  86 D1       STX $D1\nF483  86 D3       STX $D3\nF485  E8          INX\nF486  86 D4       STX $D4\nF488  20 4D F5    JSR $F54D\nF48B  20 3C F5    JSR $F53C\nF48E  20 4D F5    JSR $F54D\nF491  20 9F F4    JSR $F49F\nF494  86 D4       STX $D4\nF496  20 4D F5    JSR $F54D\nF499  20 9F F4    JSR $F49F\nF49C  86 D3       STX $D3\nF49E  60          RTS\nF49F  20 55 F5    JSR $F555             ; check for comma and return byte parameter in X\nF4A2  4C D4 C8    JMP $C8D4\nF4A5  A5 D3       LDA $D3               ; send filename (D3) to IEEE bus  D1=len\nF4A7  30 F5       BMI $F49E\nF4A9  A4 D1       LDY $D1\nF4AB  F0 F1       BEQ $F49E\nF4AD  20 D5 F0    JSR $F0D5\nF4B0  A5 D3       LDA $D3\nF4B2  09 F0       ORA #$F0\nF4B4  20 43 F1    JSR $F143\nF4B7  A5 96       LDA $96\nF4B9  10 05       BPL $F4C0\nF4BB  A0 74       LDY #$74              ; print \"?DEVICE NOT PRESENT ERROR\"\nF4BD  4C AF F5    JMP $F5AF\nF4C0  A5 D1       LDA $D1               ; send name string (if it exists) and close IEEE channel\nF4C2  F0 0C       BEQ $F4D0\nF4C4  A0 00       LDY #$00\nF4C6  B1 DA       LDA ($DA),Y\nF4C8  20 9E F1    JSR $F19E\nF4CB  C8          INY\nF4CC  C4 D1       CPY $D1\nF4CE  D0 F6       BNE $F4C6\nF4D0  4C B9 F1    JMP $F1B9\n\n\nREADHEAD\nF4D3  20 E5 F5    JSR $F5E5             ; search for a named tape header block\nF4D6  F0 1D       BEQ $F4F5\nF4D8  A0 05       LDY #$05\nF4DA  84 B5       STY $B5\nF4DC  A0 00       LDY #$00\nF4DE  84 B4       STY $B4\nF4E0  C4 D1       CPY $D1\nF4E2  F0 10       BEQ $F4F4\nF4E4  B1 DA       LDA ($DA),Y\nF4E6  A4 B5       LDY $B5\nF4E8  D1 D6       CMP ($D6),Y\nF4EA  D0 E7       BNE $F4D3\nF4EC  E6 B4       INC $B4\nF4EE  E6 B5       INC $B5\nF4F0  A4 B4       LDY $B4\nF4F2  D0 EC       BNE $F4E0\nF4F4  98          TYA\nF4F5  60          RTS\n\nF4F6  A9 01       LDA #$01              ; perform VERIFY (kernel FFBD points here)\nF4F8  85 9D       STA $9D\nF4FA  20 05 F4    JSR $F405\nF4FD  A5 96       LDA $96\nF4FF  29 10       AND #$10\nF501  F0 05       BEQ $F508\nF503  A0 6E       LDY #$6E              ; VERIFY\nF505  4C AF F5    JMP $F5AF\n\nPRINTOK\nF508  A0 AA       LDY #$AA              ; print \"OK\"\nF50A  4C 85 F1    JMP $F185\n\nF50D  A2 00       LDX #$00              ; fetch params for OPEN or CLOSE\nF50F  86 D3       STX $D3\nF511  86 96       STX $96\nF513  86 D1       STX $D1\nF515  E8          INX\nF516  86 D4       STX $D4\nF518  20 58 F5    JSR $F558\nF51B  20 D4 C8    JSR $C8D4\nF51E  86 D2       STX $D2\nF520  20 4D F5    JSR $F54D\nF523  20 9F F4    JSR $F49F\nF526  86 D4       STX $D4\nF528  E0 03       CPX #$03\nF52A  90 02       BCC $F52E\nF52C  C6 D3       DEC $D3\nF52E  20 4D F5    JSR $F54D\nF531  20 9F F4    JSR $F49F\nF534  86 D3       STX $D3\nF536  20 4D F5    JSR $F54D\nF539  20 55 F5    JSR $F555\nF53C  20 98 BD    JSR $BD98\nF53F  20 B5 C7    JSR $C7B5\nF542  85 D1       STA $D1\nF544  A5 1F       LDA $1F\nF546  85 DA       STA $DA\nF548  A5 20       LDA .stackl\nF54A  85 DB       STA $DB\nF54C  60          RTS\nF54D  20 76 00    JSR $0076\nF550  D0 02       BNE $F554\nF552  68          PLA\nF553  68          PLA\nF554  60          RTS\nF555  20 F5 BE    JSR $BEF5\nF558  20 76 00    JSR $0076\nF55B  D0 F7       BNE $F554\nF55D  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF560  20 0D F5    JSR $F50D\nF563  A5 D2       LDA $D2\nF565  F0 F6       BEQ $F55D\nF567  A0 0E       LDY #$0E\nF569  20 C1 F2    JSR $F2C1\nF56C  F0 41       BEQ $F5AF\nF56E  A6 AE       LDX $AE\nF570  A0 00       LDY #$00\nF572  84 96       STY $96\nF574  E0 0A       CPX #$0A\nF576  F0 37       BEQ $F5AF\nF578  E6 AE       INC $AE\nF57A  A5 D2       LDA $D2\nF57C  9D 51 02    STA $0251,X\nF57F  A5 D3       LDA $D3\nF581  09 60       ORA #$60\nF583  85 D3       STA $D3\nF585  9D 65 02    STA $0265,X\nF588  A5 D4       LDA $D4\nF58A  9D 5B 02    STA $025B,X\nF58D  F0 55       BEQ $F5E4\nF58F  C9 03       CMP #$03\nF591  F0 51       BEQ $F5E4\nF593  90 03       BCC $F598\nF595  4C A5 F4    JMP $F4A5\nF598  A5 D3       LDA $D3\nF59A  29 0F       AND #$0F\nF59C  D0 2B       BNE $F5C9\nF59E  20 57 F8    JSR $F857\nF5A1  20 49 F4    JSR $F449\nF5A4  A5 D1       LDA $D1\nF5A6  F0 1A       BEQ $F5C2\nF5A8  20 D3 F4    JSR $F4D3\nF5AB  D0 24       BNE $F5D1\nF5AD  A0 24       LDY #$24\nF5AF  20 A2 F2    JSR $F2A2\nF5B2  A9 0D       LDA #$0D\nF5B4  20 66 F2    JSR $F266\nF5B7  A9 3F       LDA #$3F\nF5B9  20 66 F2    JSR $F266\nF5BC  20 85 F1    JSR $F185\nF5BF  4C ED B3    JMP $B3ED\nF5C2  20 E5 F5    JSR $F5E5\nF5C5  F0 E6       BEQ $F5AD\nF5C7  D0 08       BNE $F5D1\nF5C9  20 8C F8    JSR $F88C\nF5CC  A9 04       LDA #$04\nF5CE  20 19 F6    JSR $F619\nF5D1  A6 D4       LDX $D4\nF5D3  A9 BF       LDA #$BF\nF5D5  A4 D3       LDY $D3\nF5D7  C0 60       CPY #$60\nF5D9  F0 07       BEQ $F5E2\nF5DB  A0 00       LDY #$00\nF5DD  A9 02       LDA #$02\nF5DF  91 D6       STA ($D6),Y\nF5E1  98          TYA\nF5E2  95 BA       STA $BA,X\nF5E4  60          RTS\nF5E5  A5 9D       LDA $9D\nF5E7  48          PHA\nF5E8  02          JAM\nF5E9  9A          TXS\nF5EA  F8          SED\nF5EB  A0 00       LDY #$00\nF5ED  B1 D6       LDA ($D6),Y\nF5EF  C9 05       CMP #$05\nF5F1  F0 21       BEQ $F614\nF5F3  C9 01       CMP #$01\nF5F5  F0 04       BEQ $F5FB\nF5F7  C9 04       CMP #$04\nF5F9  D0 ED       BNE $F5E8\nF5FB  AA          TAX\nF5FC  20 51 F3    JSR $F351\nF5FF  D0 11       BNE $F612\nF601  A0 A3       LDY #$A3\nF603  20 85 F1    JSR $F185\nF606  A0 05       LDY #$05\nF608  B1 D6       LDA ($D6),Y\nF60A  20 D2 FF    JSR $FFD2\nF60D  C8          INY\nF60E  C0 15       CPY #$15\nF610  D0 F6       BNE $F608\nF612  A0 01       LDY #$01\nF614  68          PLA\nF615  85 9D       STA $9D\nF617  98          TYA\nF618  60          RTS\n\n\nSAVEHEAD\nF619  85 B4       STA $B4               ; write tape header\nF61B  20 95 F6    JSR $F695\nF61E  A5 FC       LDA $FC\nF620  48          PHA\nF621  A5 FB       LDA $FB\nF623  48          PHA\nF624  A5 CA       LDA $CA\nF626  48          PHA\nF627  A5 C9       LDA $C9\nF629  48          PHA\nF62A  A0 BF       LDY #$BF              ; short loop\nF62C  A9 20       LDA #$20              ; type flag #1 #4 or #5\nF62E  91 D6       STA ($D6),Y           ; (FB) (2 bytes)\nF630  88          DEY                   ; (C9) (2 bytes)\nF631  D0 FB       BNE $F62E             ; \"program name\" up to length in D1\nF633  A5 B4       LDA $B4\nF635  91 D6       STA ($D6),Y\nF637  C8          INY\nF638  A5 FB       LDA $FB\nF63A  91 D6       STA ($D6),Y\nF63C  C8          INY\nF63D  A5 FC       LDA $FC\nF63F  91 D6       STA ($D6),Y\nF641  C8          INY\nF642  A5 C9       LDA $C9\nF644  91 D6       STA ($D6),Y\nF646  C8          INY\nF647  A5 CA       LDA $CA\nF649  91 D6       STA ($D6),Y\nF64B  C8          INY\nF64C  84 B5       STY $B5\nF64E  A0 00       LDY #$00\nF650  84 B4       STY $B4\nF652  A4 B4       LDY $B4\nF654  C4 D1       CPY $D1\nF656  F0 0C       BEQ $F664\nF658  B1 DA       LDA ($DA),Y\nF65A  A4 B5       LDY $B5\nF65C  91 D6       STA ($D6),Y\nF65E  E6 B4       INC $B4\nF660  E6 B5       INC $B5\nF662  D0 EE       BNE $F652\n\n\nF664  20 AB F6    JSR $F6AB             ; set buffer start/end and write to tape\nF667  A9 69       LDA #$69              ; 9-sec. delay for tape header\nF669  85 C3       STA $C3\nF66B  20 D5 F8    JSR $F8D5             ; write consecutive bytes of RAM to tape\n\nSETEALSTAL\nF66E  68          PLA\nF66F  85 C9       STA $C9\nF671  68          PLA\nF672  85 CA       STA $CA\nF674  68          PLA\nF675  85 FB       STA $FB\nF677  68          PLA\nF678  85 FC       STA $FC\nF67A  60          RTS\nTAPEPTR\nF67B  20 2B F9    JSR $F92B             ; wait for IRQ to return to normal E455\nF67E  A2 00       LDX #$00\nF680  A0 01       LDY #$01\nF682  B1 D6       LDA ($D6),Y\nF684  95 C7       STA $C7,X\nF686  E8          INX\nF687  C8          INY\nF688  E0 04       CPX #$04\nF68A  D0 F6       BNE $F682\nSETSTAL\nF68C  A5 C7       LDA $C7\nF68E  85 FB       STA $FB\nF690  A5 C8       LDA $C8\nF692  85 FC       STA $FC\nF694  60          RTS                   ; copy start/end addresses from header to (FB) & (C9)\n\nF695  A9 7A       LDA #$7A\nF697  85 D6       STA $D6\nF699  A9 02       LDA #$02\nF69B  85 D7       STA $D7\nF69D  A5 D4       LDA $D4\nF69F  4A          LSR A\nF6A0  B0 08       BCS $F6AA\nF6A2  A9 3A       LDA #$3A\nF6A4  85 D6       STA $D6\nF6A6  A9 03       LDA #$03\nF6A8  85 D7       STA $D7\nF6AA  60          RTS                   ; sets (D6) = 027A or 033A\n\nSETCASBUF\nF6AB  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF6AE  20 95 F6    JSR $F695             ; device 1 or 2?\nF6B1  A5 D6       LDA $D6\nF6B3  85 FB       STA $FB\nF6B5  18          CLC\nF6B6  69 C0       ADC #$C0\nF6B8  85 C9       STA $C9\nF6BA  A5 D7       LDA $D7\nF6BC  85 FC       STA $FC\nF6BE  69 00       ADC #$00\nF6C0  85 CA       STA $CA\nF6C2  60          RTS\n\nF6C3  20 84 BD    JSR $BD84             ; FFDF (SYS) (not useful here)\nF6C6  20 2D C9    JSR $C92D\nF6C9  6C 11 00    JMP ($0011)\n\n\n\n\nF6CC  A5 2A       LDA $2A               ; set up pointers for SAVE\nF6CE  85 C9       STA $C9\nF6D0  A5 2B       LDA $2B\nF6D2  85 CA       STA $CA               ; end of program\nF6D4  A5 29       LDA $29\nF6D6  85 FC       STA $FC\nF6D8  A5 28       LDA $28\nF6DA  85 FB       STA $FB               ; start of program\nF6DC  60          RTS\n\nF6DD  20 7D F4    JSR $F47D             ; perform SAVE\nF6E0  20 CC F6    JSR $F6CC\n; close devices #4 and up\nF315  20 2F F7    JSR $F72F\n; close devices #0 and #3\nF318  68          PLA\nF319  AA          TAX\nF31A  C6 AE       DEC $AE\nF31C  E4 AE       CPX $AE\nF31E  F0 14       BEQ $F334\nF320  A4 AE       LDY $AE\nF322  B9 51 02    LDA $0251,Y\nF325  9D 51 02    STA $0251,X\nF328  B9 5B 02    LDA $025B,Y\nF32B  9D 5B 02    STA $025B,X\nF32E  B9 65 02    LDA $0265,Y\nF331  9D 65 02    STA $0265,X\nF334  60          RTS\n\nMLM Load and Save\nF335  A5 9B       LDA $9B\nF337  C9 EF       CMP #$EF\nF339  D0 07       BNE $F342\nF33B  08          PHP\nF33C  20 A6 F2    JSR $F2A6             ; close all file I/O\nF33F  85 9E       STA $9E\nF341  28          PLP\nF342  60          RTS\n\n;test stop key\nF343  20 35 F3    JSR $F335\nF346  4C C6 B7    JMP $B7C6\n; send file message from table at $F000 if in direct mode\nF349  20 51 F3    JSR $F351\nF34C  D0 F4       BNE $F342\nF34E  4C 85 F1    JMP $F185             ; print message from table $F000\n; check if direct mode (to display messages)\nF351  A5 78       LDA $78\nF353  C9 02       CMP #$02\nF355  60          RTS\n; load a BASIC program or other RAM image\nF356  A5 D4       LDA $D4\nF358  D0 03       BNE $F35D\nF35A  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF35D  C9 03       CMP #$03\nF35F  F0 F9       BEQ $F35A\nF361  90 71       BCC $F3D4             ; tape or disk?\nF363  A9 60       LDA #$60\nF365  85 D3       STA $D3               ; sa\nF367  A4 D1       LDY $D1               ; fnlen\nF369  D0 03       BNE $F36E\nF36B  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF36E  20 49 F4    JSR $F449             ; print SEARCHING (in direct mode)\nF371  20 A5 F4    JSR $F4A5             ; send name string to IEEE bus\nF374  20 D2 F0    JSR $F0D2             ; send talk on IEEE bus\nF377  A5 D3       LDA $D3\nF379  20 93 F1    JSR $F193             ; send byte, then send NDAC (not data accepted) true\nF37C  20 C0 F1    JSR $F1C0             ; get one character from IEEE bus\nF37F  85 FB       STA $FB\nF381  A5 96       LDA $96\nF383  4A          LSR A\nF384  4A          LSR A\nF385  B0 3A       BCS $F3C1             ; ?file not found error\nF387  20 C0 F1    JSR $F1C0             ; get one character from IEEE bus\nF38A  85 FC       STA $FC\nF38C  20 6D F4    JSR $F46D             ; print LOADING or VERIFYING (in direct mode)\nF38F  A9 FD       LDA #$FD\nF391  25 96       AND $96\nF393  85 96       STA $96\nF395  20 43 F3    JSR $F343             ; test stop key\nF398  20 C0 F1    JSR $F1C0             ; get one char from IEEE buss\nF39B  AA          TAX\nF39C  A5 96       LDA $96\nF39E  4A          LSR A\nF39F  4A          LSR A\nF3A0  B0 ED       BCS $F38F\nF3A2  8A          TXA\nF3A3  A4 9D       LDY $9D\nF3A5  F0 0C       BEQ $F3B3                 ; load\nF3A7  88          DEY                       ; verify\nF3A8  D1 FB       CMP ($FB),Y\nF3AA  F0 09       BEQ $F3B5\nF3AC  A9 10       LDA #$10\nF3AE  05 96       ORA $96\nF3B0  85 96       STA $96\nF3B2  2C 91 FB    BIT $FB91\nF3B5  E6 FB       INC $FB\nF3B7  D0 02       BNE $F3BB\nF3B9  E6 FC       INC $FC\nF3BB  24 96       BIT $96\nF3BD  70 07       BVS $F3C6\nF3BF  50 CE       BVC $F38F\nF3C1  A0 24       LDY #$24              ; ?FILE NOT FOUND\nF3C3  4C AF F5    JMP $F5AF\nF3C6  A5 FB       LDA $FB\nF3C8  85 C9       STA $C9\nF3CA  A5 FC       LDA $FC\nF3CC  85 CA       STA $CA\nF3CE  20 AE F1    JSR $F1AE             ; send untalk\nF3D1  4C 2F F7    JMP $F72F\n; tape\nF3D4  20 95 F6    JSR $F695\nF3D7  20 57 F8    JSR $F857\nF3DA  20 49 F4    JSR $F449\nF3DD  A5 D1       LDA $D1\nF3DF  F0 08       BEQ $F3E9\nF3E1  20 D3 F4    JSR $F4D3\nF3E4  D0 08       BNE $F3EE\nF3E6  4C AD F5    JMP $F5AD\nF3E9  20 E5 F5    JSR $F5E5\nF3EC  F0 F8       BEQ $F3E6\nF3EE  E0 01       CPX #$01\nF3F0  D0 EB       BNE $F3DD\nF3F2  A5 96       LDA $96\nF3F4  29 10       AND #$10\nF3F6  D0 74       BNE $F46C\nF3F8  20 7B F6    JSR $F67B\nF3FB  20 6D F4    JSR $F46D\nF3FE  4C A3 F8    JMP $F8A3\n\nF401  A9 00       LDA #$00\nF403  85 9D       STA $9D\n; entry point for VERIFY\nF405  20 7D F4    JSR $F47D             ; fetch parameters for LOAD, SAVE, or VERIFY\nF408  20 CC F6    JSR $F6CC\nF40B  A9 FF       LDA #$FF\nF40D  C5 9B       CMP $9B\nF40F  D0 FC       BNE $F40D\nF411  C5 9B       CMP $9B\nF413  D0 F8       BNE $F40D\nF415  20 56 F3    JSR $F356\nF418  A5 9D       LDA $9D\nF41A  D0 50       BNE $F46C\nF41C  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF41F  A5 96       LDA $96\nF421  29 10       AND #$10\nF423  F0 09       BEQ $F42E\nF425  A0 00       LDY #$00\nF427  84 9E       STY $9E\nF429  A0 60       LDY #$60\nF42B  4C AF F5    JMP $F5AF\nF42E  A0 AE       LDY #$AE\nF430  20 49 F3    JSR $F349\nF433  20 51 F3    JSR $F351\nF436  D0 0B       BNE $F443\nF438  A5 CA       LDA $CA\nF43A  85 2B       STA $2B\nF43C  A5 C9       LDA $C9\nF43E  85 2A       STA $2A\nF440  4C AD B4    JMP $B4AD             ; reset BASIC execution to start; clear and chain\n\nF443  20 22 B6    JSR $B622\nF446  4C 0B B6    JMP $B60B\n; print SEARCHING (in direct mode)\nF449  20 51 F3    JSR $F351             ; check if direct mode\nF44C  D0 1E       BNE $F46C\nF44E  A0 32       LDY #$32              ; <cr>SEARCHING_\nF450  20 85 F1    JSR $F185             ; print message from table $F000\nF453  A5 D1       LDA $D1\nF455  F0 15       BEQ $F46C\nF457  A0 3D       LDY #$3D              ; FOR_\nF459  20 85 F1    JSR $F185             ; print message from table $F000\nF45C  A4 D1       LDY $D1\nF45E  F0 0C       BEQ $F46C\nF460  A0 00       LDY #$00\nF462  B1 DA       LDA ($DA),Y\nF464  20 66 F2    JSR $F266             ; print one char to any device\nF467  C8          INY\nF468  C4 D1       CPY $D1\nF46A  D0 F6       BNE $F462\nF46C  60          RTS\n; print LOADING or VERIFYING (in direct mode)\nF46D  A0 5F       LDY #$5F              ; LOAD\nF46F  A5 9D       LDA $9D\nF471  F0 02       BEQ $F475\nF473  A0 6D       LDY #$6D              ; VERIFY\nF475  20 49 F3    JSR $F349             ; send file msg from F000 (in direct mode)\nF478  A0 39       LDY #$39              ; ING FOR_\nF47A  4C 49 F3    JMP $F349\n; fetch parameters for LOAD, SAVE, or VERIFY\nF47D  A2 00       LDX #$00\nF47F  86 96       STX $96\nF481  86 D1       STX $D1\nF483  86 D3       STX $D3\nF485  E8          INX\nF486  86 D4       STX $D4\nF488  20 4D F5    JSR $F54D             ; exit parm fetching if end of statement\nF48B  20 3C F5    JSR $F53C\nF48E  20 4D F5    JSR $F54D\nF491  20 9F F4    JSR $F49F             ; check for comma and evaluate byte parameter\nF494  86 D4       STX $D4\nF496  20 4D F5    JSR $F54D\nF499  20 9F F4    JSR $F49F\nF49C  86 D3       STX $D3\nF49E  60          RTS\n; check for comma and evaluate byte parameter\nF49F  20 55 F5    JSR $F555             ; check for comma followed by not : nor end of line\nF4A2  4C D4 C8    JMP $C8D4             ; evaluate 1-byte parameter\nF4A5  A5 D3       LDA $D3\nF4A7  30 F5       BMI $F49E\nF4A9  A4 D1       LDY $D1\nF4AB  F0 F1       BEQ $F49E\nF4AD  20 D5 F0    JSR $F0D5             ; send listen\nF4B0  A5 D3       LDA $D3\nF4B2  09 F0       ORA #$F0\nF4B4  20 43 F1    JSR $F143             ; send one char and clear ATN\nF4B7  A5 96       LDA $96\nF4B9  10 05       BPL $F4C0\nF4BB  A0 74       LDY #$74              ; ?DEVICE NOT PRESENT\nF4BD  4C AF F5    JMP $F5AF\nF4C0  A5 D1       LDA $D1\nF4C2  F0 0C       BEQ $F4D0\nF4C4  A0 00       LDY #$00\nF4C6  B1 DA       LDA ($DA),Y\nF4C8  20 9E F1    JSR $F19E             ; send IEEE char\nF4CB  C8          INY\nF4CC  C4 D1       CPY $D1\nF4CE  D0 F6       BNE $F4C6\nF4D0  4C B9 F1    JMP $F1B9             ; send unlisten\n; search for a named tape header block\nF4D3  20 E5 F5    JSR $F5E5\nF4D6  F0 1D       BEQ $F4F5\nF4D8  A0 05       LDY #$05\nF4DA  84 B5       STY $B5\nF4DC  A0 00       LDY #$00\nF4DE  84 B4       STY $B4\nF4E0  C4 D1       CPY $D1\nF4E2  F0 10       BEQ $F4F4\nF4E4  B1 DA       LDA ($DA),Y\nF4E6  A4 B5       LDY $B5\nF4E8  D1 D6       CMP ($D6),Y\nF4EA  D0 E7       BNE $F4D3\nF4EC  E6 B4       INC $B4\nF4EE  E6 B5       INC $B5\nF4F0  A4 B4       LDY $B4\nF4F2  D0 EC       BNE $F4E0\nF4F4  98          TYA\nF4F5  60          RTS\n; perform VERIFY; $FFDB comes here\nF4F6  A9 01       LDA #$01\nF4F8  85 9D       STA $9D\nF4FA  20 05 F4    JSR $F405\nF4FD  A5 96       LDA $96\nF4FF  29 10       AND #$10\nF501  F0 05       BEQ $F508\nF503  A0 6E       LDY #$6E\nF505  4C AF F5    JMP $F5AF\nF508  A0 AA       LDY #$AA              ; <cr>OK<cr>\nF50A  4C 85 F1    JMP $F185             ; print message from table $F000\nF50D  A2 00       LDX #$00\nF50F  86 D3       STX $D3\nF511  86 96       STX $96\nF513  86 D1       STX $D1\nF515  E8          INX\nF516  86 D4       STX $D4\nF518  20 58 F5    JSR $F558\nF51B  20 D4 C8    JSR $C8D4\nF51E  86 D2       STX $D2\nF520  20 4D F5    JSR $F54D\nF523  20 9F F4    JSR $F49F\nF526  86 D4       STX $D4\nF528  E0 03       CPX #$03\nF52A  90 02       BCC $F52E\nF52C  C6 D3       DEC $D3\nF52E  20 4D F5    JSR $F54D\nF531  20 9F F4    JSR $F49F\nF534  86 D3       STX $D3\nF536  20 4D F5    JSR $F54D\nF539  20 55 F5    JSR $F555\n\nF53C  20 98 BD    JSR $BD98\nF53F  20 B5 C7    JSR $C7B5\nF542  85 D1       STA $D1\nF544  A5 1F       LDA $1F\nF546  85 DA       STA $DA\nF548  A5 20       LDA $20\nF54A  85 DB       STA $DB\nF54C  60          RTS\nF54D  20 76 00    JSR $0076             ; chrgot\nF550  D0 02       BNE $F554\nF552  68          PLA\nF553  68          PLA\nF554  60          RTS\nF555  20 F5 BE    JSR $BEF5             ; syntax error if no \",\"\n\nF558  20 76 00    JSR $0076             ; chrgot\nF55B  D0 F7       BNE $F554\nF55D  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\nF560  20 0D F5    JSR $F50D\nF563  A5 D2       LDA $D2\nF565  F0 F6       BEQ $F55D\nF567  A0 0E       LDY #$0E\nF569  20 C1 F2    JSR $F2C1\nF56C  F0 41       BEQ $F5AF\nF56E  A6 AE       LDX $AE\nF570  A0 00       LDY #$00\nF572  84 96       STY $96\nF574  E0 0A       CPX #$0A\nF576  F0 37       BEQ $F5AF\nF578  E6 AE       INC $AE\nF57A  A5 D2       LDA $D2\nF57C  9D 51 02    STA $0251,X\nF57F  A5 D3       LDA $D3\nF581  09 60       ORA #$60\nF583  85 D3       STA $D3\nF585  9D 65 02    STA $0265,X\nF588  A5 D4       LDA $D4\nF58A  9D 5B 02    STA $025B,X\nF58D  F0 55       BEQ $F5E4\nF58F  C9 03       CMP #$03\nF591  F0 51       BEQ $F5E4\nF593  90 03       BCC $F598\nF595  4C A5 F4    JMP $F4A5\nF598  A5 D3       LDA $D3\nF59A  29 0F       AND #$0F\nF59C  D0 2B       BNE $F5C9\nF59E  20 57 F8    JSR $F857\nF5A1  20 49 F4    JSR $F449\nF5A4  A5 D1       LDA $D1\nF5A6  F0 1A       BEQ $F5C2\nF5A8  20 D3 F4    JSR $F4D3\nF5AB  D0 24       BNE $F5D1\nF5AD  A0 24       LDY #$24\nF5AF  20 A2 F2    JSR $F2A2\nF5B2  A9 0D       LDA #$0D\nF5B4  20 66 F2    JSR $F266\nF5B7  A9 3F       LDA #$3F\nF5B9  20 66 F2    JSR $F266\nF5BC  20 85 F1    JSR $F185\nF5BF  4C ED B3    JMP $B3ED\nF5C2  20 E5 F5    JSR $F5E5\nF5C5  F0 E6       BEQ $F5AD\nF5C7  D0 08       BNE $F5D1\nF5C9  20 8C F8    JSR $F88C\nF5CC  A9 04       LDA #$04\nF5CE  20 19 F6    JSR $F619\nF5D1  A6 D4       LDX $D4\nF5D3  A9 BF       LDA #$BF\nF5D5  A4 D3       LDY $D3\nF5D7  C0 60       CPY #$60\nF5D9  F0 07       BEQ $F5E2\nF5DB  A0 00       LDY #$00\nF5DD  A9 02       LDA #$02\nF5DF  91 D6       STA ($D6),Y\nF5E1  98          TYA\nF5E2  95 BA       STA $BA,X\nF5E4  60          RTS\n\nF5E5  A5 9D       LDA $9D\nF5E7  48          PHA\nF5E8  20 9A F8    JSR $F89A             ; read tape\nF5EB  A0 00       LDY #$00\nF5ED  B1 D6       LDA ($D6),Y\nF5EF  C9 05       CMP #$05\nF5F1  F0 21       BEQ $F614\nF5F3  C9 01       CMP #$01\nF5F5  F0 04       BEQ $F5FB\nF5F7  C9 04       CMP #$04\nF5F9  D0 ED       BNE $F5E8\nF5FB  AA          TAX\nF5FC  20 51 F3    JSR $F351\nF5FF  D0 11       BNE $F612\nF601  A0 A3       LDY #$A3\nF603  20 85 F1    JSR $F185\nF606  A0 05       LDY #$05\nF608  B1 D6       LDA ($D6),Y\nF60A  20 D2 FF    JSR $FFD2\nF60D  C8          INY\nF60E  C0 15       CPY #$15\nF610  D0 F6       BNE $F608\nF612  A0 01       LDY #$01\nF614  68          PLA\nF615  85 9D       STA $9D\nF617  98          TYA\nF618  60          RTS\nF619  85 B4       STA $B4\nF61B  20 95 F6    JSR $F695\nF61E  A5 FC       LDA $FC\nF620  48          PHA\nF621  A5 FB       LDA $FB\nF623  48          PHA\nF624  A5 CA       LDA $CA\nF626  48          PHA\nF627  A5 C9       LDA $C9\nF629  48          PHA\nF62A  A0 BF       LDY #$BF\nF62C  A9 20       LDA #$20\nF62E  91 D6       STA ($D6),Y\nF630  88          DEY\nF631  D0 FB       BNE $F62E\nF633  A5 B4       LDA $B4\nF635  91 D6       STA ($D6),Y\nF637  C8          INY\nF638  A5 FB       LDA $FB\nF63A  91 D6       STA ($D6),Y\nF63C  C8          INY\nF63D  A5 FC       LDA $FC\nF63F  91 D6       STA ($D6),Y\nF641  C8          INY\nF642  A5 C9       LDA $C9\nF644  91 D6       STA ($D6),Y\nF646  C8          INY\nF647  A5 CA       LDA $CA\nF649  91 D6       STA ($D6),Y\nF64B  C8          INY\nF64C  84 B5       STY $B5\nF64E  A0 00       LDY #$00\nF650  84 B4       STY $B4\nF652  A4 B4       LDY $B4\nF654  C4 D1       CPY $D1\nF656  F0 0C       BEQ $F664\nF658  B1 DA       LDA ($DA),Y\nF65A  A4 B5       LDY $B5\nF65C  91 D6       STA ($D6),Y\nF65E  E6 B4       INC $B4\nF660  E6 B5       INC $B5\nF662  D0 EE       BNE $F652\nF664  20 AB F6    JSR $F6AB\nF667  A9 69       LDA #$69\nF669  85 C3       STA $C3\nF66B  20 D5 F8    JSR $F8D5\nF66E  68          PLA\nF66F  85 C9       STA $C9\nF671  68          PLA\nF672  85 CA       STA $CA\nF674  68          PLA\nF675  85 FB       STA $FB\nF677  68          PLA\nF678  85 FC       STA $FC\nF67A  60          RTS\n; tape address subroutines\nF67B  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF67E  A2 00       LDX #$00\nF680  A0 01       LDY #$01\nF682  B1 D6       LDA ($D6),Y\nF684  95 C7       STA $C7,X\nF686  E8          INX\nF687  C8          INY\nF688  E0 04       CPX #$04\nF68A  D0 F6       BNE $F682\nF68C  A5 C7       LDA $C7\nF68E  85 FB       STA $FB\nF690  A5 C8       LDA $C8\nF692  85 FC       STA $FC\nF694  60          RTS\n; set (D6) to point to either cassette buffer #1 or #2\nF695  A9 7A       LDA #$7A\nF697  85 D6       STA $D6\nF699  A9 02       LDA #$02\nF69B  85 D7       STA $D7\nF69D  A5 D4       LDA $D4\nF69F  4A          LSR A\nF6A0  B0 08       BCS $F6AA\nF6A2  A9 3A       LDA #$3A\nF6A4  85 D6       STA $D6\nF6A6  A9 03       LDA #$03\nF6A8  85 D7       STA $D7\nF6AA  60          RTS\n; sets (FB) and (C9) from (D6)\nF6AB  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF6AE  20 95 F6    JSR $F695\nF6B1  A5 D6       LDA $D6\nF6B3  85 FB       STA $FB\nF6B5  18          CLC\nF6B6  69 C0       ADC #$C0\nF6B8  85 C9       STA $C9\nF6BA  A5 D7       LDA $D7\nF6BC  85 FC       STA $FC\nF6BE  69 00       ADC #$00\nF6C0  85 CA       STA $CA\nF6C2  60          RTS\n; perform SYS, $FFDE comes here\nF6C3  20 84 BD    JSR $BD84\nF6C6  20 2D C9    JSR $C92D\nF6C9  6C 11 00    JMP ($0011)\n; sets (FB) and (C9) to start and end of BASIC, used in LOAD\nF6CC  A5 2A       LDA $2A\nF6CE  85 C9       STA $C9\nF6D0  A5 2B       LDA $2B\nF6D2  85 CA       STA $CA               ; EAL\nF6D4  A5 29       LDA $29\nF6D6  85 FC       STA $FC\nF6D8  A5 28       LDA $28\nF6DA  85 FB       STA $FB               ; STAL\nF6DC  60          RTS\n; perform SAVE, $FFD8 comes here\nF6DD  20 7D F4    JSR $F47D             ; fetch parameters for LOAD, SAVE, or VERIFY\nF6E0  20 CC F6    JSR $F6CC\nsaveprg\nF6E3  A5 D4       LDA $D4               ; drv#\nF6E5  D0 05       BNE $F6EC\nF6E7  A0 74       LDY #$74              ; ?DEVICE NOT PRESENT\nF6E9  4C AF F5    JMP $F5AF             ; error exit to BASIC\nF6EC  C9 03       CMP #$03\nF6EE  F0 F7       BEQ $F6E7\nF6F0  90 50       BCC $F742             ; tape or disk?\nF6F2  A9 61       LDA #$61\nF6F4  85 D3       STA $D3               ; sa\nF6F6  A4 D1       LDY $D1               ; fnlen\nF6F8  D0 03       BNE $F6FD\nF6FA  4C 00 BF    JMP $BF00             ; ?SYNTAX ERROR\n\n.C:f6fd  20 A5 F4    JSR $F4A5          ; send name string to IEEE buss\n.C:f700  20 D5 F0    JSR $F0D5          ; send 'listen'\n.C:f703  A5 D3       LDA $D3            ; SA\n.C:f705  20 43 F1    JSR $F143          ; send one char and clear ATN\n.C:f708  A0 00       LDY #$00\n.C:f70a  20 BB FB    JSR $FBBB          ; put (FB) into (C7) header pointer back to start of buffer\n.C:f70d  A5 C7       LDA $C7\n.C:f70f  20 9E F1    JSR $F19E          ; send IEEE char\n.C:f712  A5 C8       LDA $C8            ; START address\n.C:f714  20 9E F1    JSR $F19E\n\n.C:f717  20 0B FD    JSR $FD0B          ; check low addr = high addr?\n.C:f71a  F0 10       BEQ $F72C\n.C:f71c  B1 C7       LDA ($C7),Y\n.C:f71e  20 9E F1    JSR $F19E          ; output file characters\n.C:f721  20 43 F3    JSR $F343          ; test STOP key\n.C:f724  E6 C7       INC $C7\n.C:f726  D0 EF       BNE $F717\n.C:f728  E6 C8       INC $C8\n.C:f72a  D0 EB       BNE $F717\n.C:f72c  20 B9 F1    JSR $F1B9          ; send 'unlisten'\n.C:f72f  24 D3       BIT $D3\n.C:f731  30 78       BMI $F7AB\n.C:f733  20 D5 F0    JSR $F0D5          ; send 'listen'\n.C:f736  A5 D3       LDA $D3\n.C:f738  29 EF       AND #$EF\n.C:f73a  09 E0       ORA #$E0\n.C:f73c  20 43 F1    JSR $F143          ; send one char and clear ATN\n.C:f73f  4C B9 F1    JMP $F1B9          ; send 'unlisten'\n.C:f742  20 95 F6    JSR $F695          ; set (D6) = 027A or 033A\n.C:f745  20 8C F8    JSR $F88C\n.C:f748  20 51 F3    JSR $F351\n\n\n\n\n\nSAVEDATA\nF8CE  20 2B F9    JSR $F92B             ; await IRQ return to normal\nF8D1  A9 14       LDA #$14\nF8D3  85 C3       STA $C3\nF8D5  20 8C F8    JSR $F88C\nF8D8  78          SEI\nF8D9  A9 A0       LDA #$A0\nF8DB  8D 4E E8    STA $E84E\nF8DE  A2 08       LDX #$08\nF8E0  02          JAM\nF8E1  E0 FC       CPX #$FC\nF8E3  A9 02       LDA #$02\nF8E5  85 DE       STA $DE\nF8E7  20 C9 FB    JSR $FBC9\nF8EA  CE 13 E8    DEC $E813\nF8ED  A6 D4       LDX $D4\nF8EF  CA          DEX\nF8F0  D0 09       BNE $F8FB\nF8F2  A9 34       LDA #$34\nF8F4  8D 13 E8    STA $E813\nF8F7  85 F9       STA $F9\nF8F9  D0 0A       BNE $F905\nF8FB  AD 40 E8    LDA $E840\nF8FE  86 FA       STX $FA\nF900  29 EF       AND #$EF\nF902  8D 40 E8    STA $E840\nF905  A2 FF       LDX #$FF\nF907  A0 FF       LDY #$FF\nF909  88          DEY\nF90A  D0 FD       BNE $F909\nF90C  CA          DEX\nF90D  D0 F8       BNE $F907\nF90F  8D 49 E8    STA $E849\nF912  58          CLI\nF913  A9 E4       LDA #$E4\nF915  C5 91       CMP $91\nF917  F0 11       BEQ $F92A\nF919  20 35 F9    JSR $F935\nF91C  2C 13 E8    BIT $E813\nF91F  10 F2       BPL $F913\nF921  2C 12 E8    BIT $E812\nF924  20 68 F7    JSR $F768\nF927  4C 13 F9    JMP $F913\nF92A  60          RTS\n; await IRQ return to normal\nF92B  20 35 F9    JSR $F935\nF92E  A9 E4       LDA #$E4\nF930  C5 91       CMP $91\nF932  D0 F7       BNE $F92B\nF934  60          RTS\n\nstart address for tape load\nFBBB  A5 FC       LDA $FC\nFBBD  85 C8       STA $C8\nFBBF  A5 FB       LDA $FB\nFBC1  85 C7       STA $C7\nFBC3  60          RTS\n\n\n\n.s \"ohyeah\",09,50fe,5100\n(C9)        end of file                         `blkbuf`\n(FB)        start of file                                   `vmbuf`\n(FD)        end of file                                     `blkbuf`\nB4          tape buffer leading character / MLM             07 ??\nD1          length of filename 0=no name                    6 (\"ohyeah\".len)\nD2          current file number LA\nD3          current secondary addr OR'ed e.g. with #60\nD4          device                                          `drv#`\n\n\n\nempty-buffers\nload-buffers\n    reloads buffers from `filename` on `drv#`\nflush\n  : flush   ( -- ) save-buffers empty-buffers ;\nload\"\n    sets `filename` `#drv`\nsave\"\nsave-buffers\nverify-buffers\nsave-forth\n0\n       PNTR                    in                          screen horiz position\n       TBLX                    0                           screen vertical line position\n       (PNT)                   blkbuf+lin*40               screen line address\n       LNMX                    40 or 80                    39 or 79, logical line length\n\nin   ( -- addr )\n   uservar, horizontal position in line buffer\n   initialized by `expect`\n   updated by `skip` and `scan`\n\n\n\n\n: +     ( n1 n2 -- sum )\n\n\n\n\nlin   ( -- value )\n   upper byte of `in`, vertical line in line buffer\n   always points to start of a logical line\n   initialized by `load`\n   updated by `lin+`\n\neol?   ( -- flag )\n   true when `in` reached end of line\n   true when in >= span\n\neoi?   ( -- flag )\n   true when `lin` reached end of screen\n   true when lin >= l/scr\n\nempty?   ( -- flag )\n   true when `expect` received a blank line of input\n\nlin+   ( -- )\n   add +1 (40) or +2 (80) to virtual screen pointer `lin`, based on `sib` size\n   line size from `cursor` LNMX field\n\nrefill   ( -- )\n   `expect` transforms (via CHRIN) a line from `blkbuf` into `sib`,\n   retrieve the block if `prev` <> `blk`\n\nquery   ( -- )\n   receive a (logical) line of input from the terminal into `tib`\n\nexpect   ( buff size -- )\n   receive up to `size` characters into `buff` via CHRIN\n   initialize `in` and `span`\n   leave a true copy of span in `n0` for `empty?`\n   called by `query` and `refill`\n\n=cursor   ( addr|0 -- )\n   swap hardware cursor with `cursor`\n\nparse   ( -- size )\n   identify next token in the input stream, returning its length\n   set `n8` = length\n   point `in` at the character following the parsed token\n\nskip   ( -- )\n   skip to non-match of char in `n7`, in line buffer pointed to by `(n6)`\n\nscan   ( -- )\n   scan to next match of char in `n7`, in line buffer pointed to by `(n6)`\n\nname   ( -- nfa|0 )\n   Return a 0 when the input stream is exhausted, otherwise parse the next\n   token and return its address, a counted string in the line buffer\n\ninterpret   ( -- )\n    process a unit of source code in the input stream, which is either:\n       an entire line (interactive)\n       an entire screen (loading)\n   each space-delimited token is parsed, then searched for `symtab`, then\n   possibly executed, turned into a number, or added to the dictionary as\n   per the rules of the interpreter and compiler.\n\nenter\n    txa             ;[2]\n    pha             ;[3]\n    tsx             ;[2]\n;\n    lda pip         ;[3]\n    clc             ;[2]\n    adc #2          ;[2]\n    ldy $0102,x     ;[4]\n    sta $0102,x     ;[5]\n    iny             ;[2]\n    bne enter02     ;[3]\n    inc $0103,x\nenter02\n    sty pip         ;[3]\n    lda pip+1       ;[3]\n    ldy $0103,x     ;[4]\n    sta $0103,x     ;[5]\n    sty pip+1       ;[3]\n;\n    pla             ;[4]\n    tax             ;[2]\n    jmp nexto       ;[3]\n                    ;[55 clocks]\n\n\nenter\n    lda pip+1                   ;[3]\n    sta z                       ;[3]\n    ldy pip                     ;[3]    preserve IP in Z,Y\n    pla                         ;[4]\n    clc                         ;[2]\n    adc #1                      ;[2]\n    sta pip                     ;[3]\n    pla                         ;[4]\n    adc #0                      ;[2]\n    sta pip+1                   ;[3]    replace IP with RS +1\n    cpy #$FE                    ;[2]\n    iny                         ;[2]\n    iny                         ;[2]\n    lda z                       ;[3]\n    adc #0                      ;[2]\n    pha                         ;[3]\n    tya                         ;[2]\n    pha                         ;[3]\n    jmp nexto                   ;[3]\n;[50]\n\nenter\n    stx z                       ;[3]\n    ldy pip                     ;[3]\n    ldx pip+1                   ;[3]\n    clc                         ;[2]\n    pla                         ;[4]\n    adc #1                      ;[2]\n    sta pip                     ;[3]\n    pla                         ;[4]\n    adc #0                      ;[2]\n    sta pip+1                   ;[3]\n    iny                         ;[2]\n    iny                         ;[2]\n    bne +                       ;[3]\n    inx\n+\n    txa                         ;[2]\n    pha                         ;[3]\n    tya                         ;[2]\n    pha                         ;[3]\n    ldx z                       ;[3]\n    jmp nexto                   ;[3]\n;[52]\n\n    txa\n\n    pla             ; replaces pip+1\n    inx\n    stx pip\n    clc\n    bne +\n    sec\n+\n    adc #0\n    ;clc\n    ldx pip+1\n    sta pip+1\n    iny\n    iny\n    bne +\n    inx\n+\n    txa\n    pha\n    tya\n    pha\n    ldx z\n    jmp nexto\n\n\n    ldy pip\n    stx pip\n    iny\n    iny\n    bne +\n    inc pip+1\n\n    tax\n    plp\n    bne +\n    inx\n    jmp next1\n\n\nenter\n    inc pip         ;[5]\n    inc pip         ;[5]\n    bne +           ;[3]\n    inc pip+1\n+\n    pla             ;[4]\n    tay             ;[2]\n    pla             ;[4]\n    sta z           ;[3]\n\n    iny             ;[2]\n    php             ;[3]\n    lda pip+1       ;[3]\n    sty pip+1\n    ldy z           ;[3]\n    plp\n\n    pha             ;[3]\n    lda pip         ;[3]\n    pha             ;[3]\n    sta pip         ;[3]\n    jmp nexto       ;[3]\n;[55]\n\nenter\n    pla             ;[4]\n    tay             ;[2]\n    pla             ;[4]\n    sta z           ;[3]\n    iny             ;[2]\n    bne +           ;[3]\n    inc z\n+\n    inc pip         ;[5]\n    inc pip         ;[5]\n    bne +           ;[3]\n    inc pip+1\n+\n    lda pip+1       ;[3]\n    pha             ;[3]\n    lda pip         ;[3]\n    pha             ;[3]\n    sty pip         ;[3]\n    lda z           ;[3]\n    sta pip+1       ;[3]\n    jmp nexto       ;[3]\n;[55]\n\n    iny\n    bne +\n    inc z\n\n    txa             ;[2]\n    pha             ;[3]\n    tsx             ;[2]\n;\n    lda pip         ;[3]\n    clc             ;[2]\n    adc #2          ;[2]\n    ldy $0102,x     ;[4]\n    sta $0102,x     ;[5]\n    iny             ;[2]\n    bne enter02     ;[3]\n    inc $0103,x\nenter02\n    sty pip         ;[3]\n    lda pip+1       ;[3]\n    ldy $0103,x     ;[4]\n    sta $0103,x     ;[5]\n    sty pip+1       ;[3]\n;\n    pla             ;[4]\n    tax             ;[2]\n    jmp nexto       ;[3]\n                    ;[55 clocks]\n\n\n\n~todo: cold start populates `drv#` with DFLTN\n~todo: .tab 9 emit ;\n~todo: implement bra, opcodes beq, bne, bmi, bpl, bvc, bvs, bcc, bcs,\n\nHave you ever went over a friends house to eat\nAnd the food just ain't no good?\nI mean the macaroni's soggy, the peas are mushed\nAnd the chicken tastes like wood\nSo you try to play it off like you think you can\nBy saying that you're full\nAnd then your friend says, \"mama, he's just being polite\nHe ain't finished, uh-uh, that's bull!\"\nSo your heart starts pumpin' and you think of a lie\nAnd you say that you already ate\nAnd your friend says \"man, there's plenty of food\"\nSo you pile some more on your plate\nWhile the stinky food's steamin', your mind starts to dreamin'\nOf the moment that it's time to leave\nAnd then you look at your plate and your chicken's slowly rottin'\nInto something that looks like cheese\nOh so you say \"that's it, I gotta leave this place\nI don't care what these people think\nI'm just sittin' here makin' myself nauseous\nWith this ugly food that stinks\"\nSo you bust out the door while it's still closed\nStill sick from the food you ate\nAnd then you run to the store for quick relief\nFrom a bottle of Kaopectate\nAnd then you call your friend two weeks later\nTo see how he has been\nAnd he says, \"I understand about the food\nBaby Bubba, but we're still friends\"\n\n~todo documentation style\n\n/* tiddlypettil\ntitle: ?REFILL\ntags: secondary outer extra nosymbol\n\n=forth\n: ?refill   ( -- )\n    lin+  eoi? ?exit  refill ;\n=end\n=pronounced maybe-refill\n*/\n\n/*\n=forth\n: pzize   ( header -- size )  $7FF and ;\n=end\n=pronounced pea-size\n=registers a tos\n=time 11\n=size 9\n*/\npsize\n    lda #7\npsize01                                 ; useful entry point for xxFF AND\n    and tos+1\n    sta tos+1\n    jmp next\n\ncode 0tuck\n    dex\n    lda #0\n    sta stackl,x\n    sta stackh,x\n    jmp next\ncode 0tuck\n    dex\n    lda #0\n    sta stackl,x\n    sta stackh,x\n    jmp next\n\n\ncode wrap@   ( -- wrapbits )\n    dex\n    dex\n    txa\n    pha\n    sec\nwrapfetch01\n    asl LDTB1,x\n    php\n    ror LDTB1,x\n    plp\n    rol n+0,x\n    rol n+1,x\n    rol n+2,x\n    rol n+3,x\n    inx\n    cpx #LPERSCR                ; or 25, probably\n    bcc wrapfetch01\n    pla\n    tax\n    jmp dashrot\n\n/* tiddlypettil\ncreated: 20191004085624546\ncreator: chitselb\n\nmodified: 20191004091301129\nmodifier: PETTIL\n\ntags: fun seamonkeys deprecated concepts\ntitle: tiddlypettil documentation test\n\n[img[logo2018-05-13-22-58.png]]\n<br/>This should be fun\n\nIf all goes well, I will become an actual tiddler in the generated docs.\n\nIn tiddler .tid format to make exported tiddlers more usable\n\n|table|are|easy|now|h\n|such||table||\n||^ wow|table||\n||~|>| yes|\n| woot footer|<|<||f\n*/\n\n\n/*\ntags:\nuservar                         system variable\nconstant                        value\nvariable                        address\nvocabulary                      add vocabid to `vocabs`\nsubroutine\nprimitive\nsecondary\ndata                            messages, initialization values, BASIC loader\ntable                           data containing addresses\n\n*/\n\n32                              space, no prefix\n33 !\n34 \"                            \"C\" ( -- $43 )          character value inside quotes without spaces\n35 #                            #867 ( -- $0363 )       this time, use decimal base\n36 $                            $105 ( -- $0105 )       this time, use hex base\n37 %                            %110011011 ( -- $019B ) this time, use binary base\n38 &                   ( addr ) &symbol                 temporary labels with forward reference capability\n39 '                            'symbol ( addr )\n40 (\n41 )\n42 *\n43 +\n44 ,\n45 -                            -37 ( -- $FFDB )        negation\n46 .                            $12B9.B0A1 ( -- 314159265 ) decimal point, put 32-bit double on stack, also set `dpl`\n47 /\n48 0                            @symbol\n49 1\n50 2\n51 3\n52 4\n53 5\n54 6\n55 7\n56 8\n57 9\n58 :\n59 ;\n60 <                            <N0 <R15 <{#}\n61 =                            =N0 =R15 ={#}\n62 >                            >N0 >R15 >{#}\n63 ?\n\n\ncode eol?\n    in lda,\n    span cmp,\n    'xpushc jmp,\n\n\n~todo: what if the PETTIL native source had a facility to access the xa65 symbol table dump?\n\n\n\n\n\n\n\n\n;--------------------------------------------------------------\n#if 0\nname=MORE?\nstack=( -- flag )\ntags=primitive,outer,extra,nosymbol\nIs the input stream valid?\n\nThis relies on `N0` as a very temporary mailbox written by `expect`!\n\ninteractive session\nfalse\n    the user hit 'return' on an empty line\n    end of the line in `tib`\ntrue\n    0 <= in < span\n\nloading?\nfalse\n    `eoi?` when both conditions are false `eoi?`\ntrue\n    0 <= lin < l/scr\n    0 <= in < span\n    before last line of `sib`\n\nThis relies on `N0` as a very temporary mailbox written by `expect`!\n\n#endif\n#include \"align.i65\"\n_moreq\n    jsr enter\n#include \"page.i65\"\n    .word blkfetch\n#include \"parm.i65\"\n    .word pquerycolon\n    .word eoiq\n    .word eoiq\n#include \"pad.i65\"\n    .word zeq\n#include \"past.i65\"\n    .word exit\n\n\ninputs\n    blk                     0 = interactive                 +u = loading\n    in                      position on line\n    lin\n    span\n    prev\n\n\n    N6                      line buffer pointer for `found?`                    set by `name`\n    N7                      search character                                    set by `name`\n    N8                      name.len                                            set by `parse`\n\nprocesses & outputs\n\n    cursor                      interactive                 loading\n        DFLTN                   Kernel screen               3\n        PNTR                    editor values               0\n        TBLX                                                0\n        PNT                                                 (blkbuf + lin * 40)\n        LNMX                                                40|80  <-- this line's linewrap bit\n    tib                         x\n    sib                                                     x\n\nstartup\n    prev = 0\ninterpret\nname\nquery\nexpect\n\n1 load\n    blk in lin span >r          0 6 0 5\n    blk = 1\n    in/lin = -1\ninterpret\n\nname\n\n`m>r   ( count addr -- )`\npush `count` bytes from `addr` to return stack\n\n`r>m   ( count addr -- )`\npop `count` bytes from return stack to `addr`\n\n/*\n                        .word eolq\n                    #include \"parm.i65\"\n                        .word qbranch\n                        .byt <(interpret04-*+1)\n                    #include \"pad.i65\"\n                        .word blkfetch\n                    #include \"parm.i65\"\n                        .word qbranch\n                        .byt <(interpret02-*+1)\n                    #include \"pad.i65\"\n                        .word _refill\n                    #include \"page.i65\"\n                        .word linplus\n                    #include \"parm.i65\"\n                        .word branch\n                        .byt <(interpret04-*+1)\n                    #include \"pad.i65\"\n                    interpret02\n                        .word _query\n                    #include \"page.i65\"\n                    interpret04\n                        .word _moreq\n                    #include \"parm.i65\"\n                        .word qbranch\n                        .byt <(interpret05-*+1)\n                    #include \"pad.i65\"\n*/\n\n: interpret   ( -- )           begin\n    ?stack eol?               if\n      blk@                if\n      refill lin+       else\n      query             then\n                            then\n    more?                      while\n    bl name ?dup               until\n    found? ?dup ?: interpret.cfa number\n                              repeat   ;\n\n: name   ( -- nfa|0 )\n\n: interpret   ( -- )\n    begin\n        ?stack  more?\n    while\n        bl name ?dup\n        if\n            found? ?dup\n            ?: interpret.cfa number\n        then\n    repeat ;\n\nabort\n    quit\n        interpret\n            name\n                ?refill\n                    query\n                        tib 80\n                        expect\n\n                    refill\n                        sib lin.size\n                        0 =cursor\n                        expect\n                                        ( in=0 span )\n                        0 =cursor\n        .ok\n    again\n\n    load\n        interpret\n            name\n\n\nexpect\n\n\n\n\n: interpret   ( -- )\n    begin\n        refill?  ( !eoi )\n    while\n        bl name ?dup\n        if\n            found? ?dup\n            ?: interpret.cfa number\n        then\n    repeat ;\n\n\n: quit\n    rp! blk 12 erase            \\ erases line editing uservars\n    begin                       \\ `interpret` will get new line from keyboard\n        interpret\n        compiling? ?: cr .ok\n    again  \\ ; -2 allot\n\n\nchkeoi\n    lda userblk\n    beq chkeoi01\n    lda userlin\n    cmp #LPERSCR+1              ; C = end of screen?\nchkeoi01\n    rol usereoi\n    bcc skipscan05\n\n\n\n\nuserarea\n; ---- initialization values per each `cold`\n8   user0base       .word 10\nuser0filename   .word currname+3 ;1 counted string, default \"PETTILPACKETS\"\n8   user0sanum      .word 0         ;2 default secondary address is 0, (PRG file)\n8   user0drvnum     .word 1         ;3 default drive (datasette #1),\n\n; ---- UP points to here, all live user variables\nuarea\n; ---- not re-initialized or initialized another way\n8   usersp0         .word bos+1     ; `abort` does `sp!`\n8   userrp0         .word $01FE     ; `quit` does `rp!`\nuserirq         .word 0         ; see `=irq`\nuserbrk         .word SW16      ; see `=brk` `!sw16`\nusernmi         .word 0         ; see `=nmi`\nuserstartup     .word fencepost ;`studio` begins here\nuserwarning     .word _doterr   ;1/ `studio` replaces `.err` with `error.msg`\nuserdp          .word fencepost\nuserfence       .word fencepost\nusersymtab      .word 0\n\nucore\n    .dsb uarea-userarea+80,$cc  ; storage for user variables\n\n; ---- re-initialized by `cold`\n8   userbase        = ucore+0\nuserfilename    = ucore+2\n8   usersanum       = ucore+4\n8   userdrvnum      = ucore+6\n\nustart = ucore+8\nuservmbuf       = ustart+0      ;1 There is code that relies on adjacency of\n8   usernumblk      = ustart+2      ;2 1 these sets of uservariables, so that bytes\n8   userscr         = ustart+4      ;3 2 and clocks may be saved\n8   userprev        = ustart+6      ;  3 most recently referenced block\n8   userblk         = ustart+8      ;1 4\n8   userin          = ustart+10     ;2                                        8-bit\n8   userlin          = userin+1     ; upper byte is physical line counter\n8   userspan        = ustart+12     ;3                                        8-bit\n8   usereoi          = userspan+1   ; upper byte is end of input flag\nusernumline     = ustart+14     ;4\nusernumout      = ustart+16     ;5\n8   userediting     = ustart+18     ;\n8   userdpl         = ustart+20     ;                                         8-bit\n8   userhld         = ustart+22     ;\nusercursor      = ustart+24     ;                                       6 bytes\n\nuendcore = ustart+30            ; mark our place for piggyback app's uservar base\nuser0studio     .word user0studio\nuser0tdp        .word studioend\n8   user0numvoc     .word 2         ; `editor` & `assembler`\nuser0vocabs     .byt 9\nustudio\n\n; ---- copy from initialization values\nuserstudio      = uendcore+0    ;1\nusertdp         = uendcore+2    ;2\n8   usernumvoc      = uendcore+4    ;3\nuservocabs      = uendcore+6    ;                                       10-byte\n\n; ---- WARM will set to 0\n8   usercsp         = uendcore+16\n8   usercurrent     = uendcore+18\nuserredefined   = uendcore+20\nusernewest      = uendcore+22\n8   userstate       = uendcore+24\nuserpwrap       = uendcore+26   ;                                        4-byte\nuserpaste       = uendcore+30\nusersymnew      = uendcore+32   ;1\nusersymtail     = uendcore+34   ;2\nuserbloom       = uendcore+36   ;3                                       64-bit\nuserpassbits    = uendcore+44   ;                                        32-bit\nutend = uendcore+48\n\n\n\nskip\n    lda #$F0                    ; BEQ opcode\n    .byt $2C                    ; BIT abs\n/*\nN6 line buffer\nN7 char delimiter\n\n|0                  |1                  |2                  |3\n|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|****\n|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|\n D U P   D R O P                                               . \"   F I N A L \"\n :   U   . \"   a b c \"   ;   :   I J   . \"   d e f \"   ;   :   K   . \"   g h i \"\n ;\n\n   D U P   D R O P                                             . \"   F I N A L \"\n|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-| *\n|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9| *\n|0                  |1                  |2                  |3                  |4                  |5                  |6                  |7                  | *\n\n   D U P   D R O P                                             . \"   F I N A L \"\n\n|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|\n|0                  |1                  |2                  |3\n\n\ninterpret\n    name\n        ?refill\n            ?: refill query\n\nline.size ( 40, or 80? )\n\n/*\n    rol usereoi\n    beq skipscan02\n    lda userblk\n    beq skipscan04\n    inc userlin\n    lda userlin\n    cmp #LPERSCR\n    bcs skipscan04\n*/\n#endif\nscan\n    lda #$D0                    ; BNE opcode\n    sta skipscan03              ; #selfmodifying\n    ldy userin                  ; `in`\n    dey\nskipscan01                                                                      BEGIN\n    iny\n    cpy userspan\n    rol usereoi                 ; end of line sets EOI\n    bne skipscan04\nskipscan02\n    lda (R0L+2*N6),y            ; get char from buffer\n    eor R0L+2*N7                ; compare to character we seek\nskipscan03\n    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)             UNTIL\nskipscan04\n    sty userin                  ; found char !, move `in`\n    tya\n    jmp push0a                  ;( offset )\n\nskipscan05\n    lda userblk                 ; interactive sesh?\n    beq skipscan04\n    bne skipscan04\n\n\n: refill\n    \\ eoi? ?exit\n    sib line.size 0 =cursor expect 0 =cursor ;\n    jsr enter\n;    .word eoiq\n;    .word _qexit\n    .word sib\n    .word _linesize\n// also set up `cursor` prior to INPUT\n    .word zero\n    .word exchgcursor\n    .word expect\n    .word zero\n    .word exchgcursor\n    .word exit\n\n\n\n~feature: use 8-bit uservars where appropriate\n066C USERAREA\n066C user0base                  8           value           0A                  decimal\n066E user0filename                      16  address         'pettilpackets'\n0670 user0sanum                 8           value           00                  prg file\n0672 user0drvnum                8           value           01                  tape\n0674 UAREA\n0674 usersp0                    8           value           30                  data stack\n0676 userrp0                    8           value           FE                  return stack\n0678 userirq                            16  vector          0000\n067A userbrk                            16  vector          SW16\n067C usernmi                            16  vector          0000\n067E userstartup                        16  vector          WARM\n0680 userwarning                        16  vector          ERROR.MSG\n0682 userdp                             16  HERE            1A55\n0684 userfence                          16  address         1A55\n0686 usersymtab                         16  address         5700\n0688 UCORE\n0688 userbase                   8           value           0A\n068A userfilename                       16  address         'pettilpackets'\n068C usersanum                  8           value           00\n068E userdrvnum                 8           value           01\n0690 USTART\n0690 uservmbuf                          16  address         0000\n0692 usernumblk                 8           value           00\n0694 userscr                    8           value           00\n0696 userprev                   8           value           00\n0698 userblk                    8           value           00\n069A userin                     8           value           00\n069B userlin                    8           value           00\n069C userspan                   8           value           00\n069D usereoi                    8           flag            00\n069E usernumline                        16  counter         0000\n06A0 usernumout                         16  counter         0000\n06A2 userediting                8           flag            00\n06A4 userdpl                    8           value           00\n06A6 userhld                    8           value           00\n06A8 usercursor                     48      structure       00 00 00 00 00 00 00\n06AE UENDCORE\n06AE userstudio                         16  address\n06B0 usertdp                            16  address\n06B2 usernumvoc                 8\n06B4 uservocabs                     80      string of vocabid       00 00 00 00 00 00 00 00 00 00\n06BE usercsp                    8           datastack pointer\n06C0 usercurrent                8           vocabid\n06C2 userredefined                      16  address         0000                nfa     `create`\n06C4 usernewest                         16  address         0000                nfa     `create`\n06C6 userstate                  8           flag            00\n06C8 userpwrap                      24      bitfield        000000\n06CC userpaste                          16  address\n06CE usersymnew                         16  address\n06D0 usersymtail                        16  address\n06D2 userbloom                      64      bitfield\n06DA userpassbits                   32      bitfield\n06DE UTEND\n06E0 alive                      8           flag\n06E1 COREBASE\n\n: load\n0 #blk @ third between? 0= 8 ?error \\ \"BLOCK OUT OF RANGE\"\n h\n\n_load\n    jsr enter\n#include \"page.i65\"\n    .word zero\n#include \"page.i65\"\n    .word numblk\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word third\n#include \"page.i65\"\n    .word betweenq\n#include \"page.i65\"\n    .word zeq                   ; `blk` must be available in `vmbuf`\n#include \"parm.i65\"\n    .word qerror\n    .byt 8                      ; \"BLOCK OUT OF RANGE\"\n#include \"pad.i65\"\n    .word blk\n#include \"page.i65\"\n    .word tuck                  ;( blk u blk )\n#include \"page.i65\"\n    .word threefetchtor         ; stash `blk` `in` `span` on return stack\n#include \"page.i65\"\n    .word _storeplus            ; just like `blk !  in`\n#include \"page.i65\"\n    .word twooff                ; `in` and `span` both off\n#include \"page.i65\"\n    .word prev\n#include \"page.i65\"\n    .word on                    ; forces `block` to load buffer\n#include \"page.i65\"\n    .word _interpret            ; interpret has two clients, `load` and `quit`\n#include \"page.i65\"\n    .word blk\n#include \"page.i65\"\n    .word threerfromstore       ; restore prior `blk` `in` `span`\n#include \"past.i65\"\n    .word exit\n\n\n\n\n066C userarea\n066C user0base                  8\n066E user0filename              16\n0670 user0sanum                 8\n0672 user0drvnum                8\n0674 uarea\n0674 usersp0                    8\n0676 userrp0                    8\n0678 userirq                    16\n067A userbrk                    16\n067C usernmi                    16\n067E userstartup                16\n0680 userwarning                16\n0682 userdp                     16\n0684 userfence                  16\n0686 usersymtab                 16\n0688 ucore\n0688 userbase                   8\n068A userfilename               16\n068C usersanum                  8\n068E userdrvnum                 8\n0690 uservmbuf                  16\n0690 ustart\n0692 usernumblk                 8 ?\n0694 userscr                    8\n0696 userprev                   8\n0698 userblk                    8\n069A userin                     16\n069B userlin                    8\n069C userspan                   8\n069D usereoi                    8\n069E usernumline                16\n06A0 usernumout                 16\n06A2 userediting                8\n06A4 userdpl                    8\n06A6 userhld                    8\n06A8 usercursor                 48\n06AE uendcore\n06AE userstudio                 16\n06B0 usertdp                    16\n06B2 usernumvoc                 8\n06B4 uservocabs                 10\n06BE usercsp                    8\n06C0 usercurrent                8\n06C2 userredefined              16\n06C4 usernewest                 16\n06C6 userstate                  8\n06C8 userpwrap                  24\n06CC userpaste                  16\n06CE usersymnew                 16\n06D0 usersymtail                16\n06D2 userbloom                  64\n06DA userpassbits               32\n06DE utend\n06E0 alive\n\n\nin @ csplit\n( lin pntr )\n\ncursor\n        3\n    c!+\n        blkbuf b/scr + lin >bit cbit@\n            ?: forty eighty\n        tuck\n    c!+\n        blkbuf lin rot 0= + 40* +\n    !+\n        in\n    c!+\n\n\n`expect`\n\ncode objectives:\noutput to SIB or TIB            ~Sweet16 register?\n\n\n\nuse CHRIN at kernel entry point, if possible\nE116 otherwise\n    setup C6, (C4)\n\ninteractive: let the screen editor do its thing\n\ncursor\n    should be fast\nAF = 3\n(C4) PNT = screencode buffer\nC6 PNTR = pointer along line\nD8 LNMX = 40|80\nD5 TBLX = 0??\n\n(C4)    PNT   pointer to line\nC6      PNTR\n\nD5      TBLX  lin\nD8      LNMX\n\n\nfirmwarecursor\n    ;    $AF   $C6  $D5  ($C4)     $D8\n    .byt DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX\n    ;    3     in   lin  lin*40    40|80\n    ;                    +blkbuf\n; C4 PNT   current (logical) screen line address\n; C6 PNTR  current cursor column on current line\n; D8 LNMX  width of the screen (39 or 79)\n\n\nquarter-block graphics\nvertical bar graphics\nhorizontal bar graphics\nvertical line graphics\nhorizontal line graphics\netch-a-sketch turtle graphics\npanels: copy, paste, fill, rotate, shift\n\n\ntapeio\nsave-buffers\nload-buffers\nverify-buffers\nspace bug\n\n\nsbufs\noverwrite tail with vmbuf size\nsave it\n\nwe will need:\ndevice #\nvmbuf start\nvmbuf end\n\n\n;device = 0 input from keyboard buffer\nE0A7  AC 6F 02    LDY $026F\nE0AA  A2 00       LDX #$00\nE0AC  BD 70 02    LDA $0270,X\nE0AF  9D 6F 02    STA $026F,X\nE0B2  E8          INX\nE0B3  E4 9E       CPX $9E\nE0B5  D0 F5       BNE $E0AC\nE0B7  C6 9E       DEC $9E\nE0B9  98          TYA\nE0BA  58          CLI\nE0BB  60          RTS\nE0BC  20 02 E2    JSR $E202\nE0BF  A5 9E       LDA $9E\nE0C1  85 A7       STA $A7\nE0C3  F0 FA       BEQ $E0BF\nE0C5  78          SEI\nE0C6  A5 AA       LDA $AA\nE0C8  F0 09       BEQ $E0D3\nE0CA  A5 A9       LDA $A9\nE0CC  A0 00       LDY #$00\nE0CE  84 AA       STY $AA\nE0D0  20 06 E6    JSR $E606\nE0D3  20 A7 E0    JSR $E0A7\nE0D6  C9 83       CMP #$83\nE0D8  D0 10       BNE $E0EA\nE0DA  78          SEI\nE0DB  A2 09       LDX #$09\nE0DD  86 9E       STX $9E\nE0DF  BD 73 E6    LDA $E673,X\nE0E2  9D 6E 02    STA $026E,X\nE0E5  CA          DEX\nE0E6  D0 F7       BNE $E0DF\nE0E8  F0 D5       BEQ $E0BF\nE0EA  C9 0D       CMP #$0D\nE0EC  D0 CE       BNE $E0BC\nE0EE  A4 D5       LDY $D5\nE0F0  84 AC       STY $AC\nE0F2  B1 C4       LDA ($C4),Y\nE0F4  C9 20       CMP #$20\nE0F6  D0 03       BNE $E0FB\nE0F8  88          DEY\nE0F9  D0 F7       BNE $E0F2\nE0FB  C8          INY\nE0FC  84 A1       STY $A1\nE0FE  A0 00       LDY #$00\nE100  84 C6       STY $C6\nE102  84 CD       STY $CD\nE104  A5 A3       LDA $A3\nE106  30 16       BMI $E11E\nE108  C5 D8       CMP $D8\nE10A  D0 12       BNE $E11E\nE10C  A5 A4       LDA $A4\nE10E  85 C6       STA $C6\nE110  C5 A1       CMP $A1\nE112  90 0A       BCC $E11E\nE114  B0 2B       BCS $E141\n\n.C:f224  C9 03       CMP #$03\n.C:f226  D0 09       BNE $F231\n.C:f228  85 AC       STA $AC            input from screen = 3\n.C:f22a  A5 D5       LDA $D5\n.C:f22c  85 A1       STA $A1\n.C:f22e  4C 16 E1    JMP $E116\n\nset A1 = 40 or 80\nset AC = 3 (input from screen device)\nC6 position of cursor along line\n(C4) start of line\n\nD9 = char at cursor\nCD = quote flag\n\nE116  98          TYA\nE117  48          PHA\nE118  8A          TXA\nE119  48          PHA\nE11A  A5 AC       LDA $AC               device\nE11C  F0 A1       BEQ $E0BF\nE11E  A4 C6       LDY $C6\nE120  B1 C4       LDA ($C4),Y\nE122  85 D9       STA $D9               screen code\nE124  29 3F       AND #$3F\nE126  06 D9       ASL $D9\nE128  24 D9       BIT $D9\nE12A  10 02       BPL $E12E\nE12C  09 80       ORA #$80\nE12E  90 04       BCC $E134\nE130  A6 CD       LDX $CD               quote flag\nE132  D0 04       BNE $E138\nE134  70 02       BVS $E138\nE136  09 40       ORA #$40\nE138  E6 C6       INC $C6               move cursor right\nE13A  20 67 E1    JSR $E167             check for quotes\nE13D  C4 A1       CPY $A1               count of characters of line input from screen (40/80??)\nE13F  D0 17       BNE $E158\nE141  A9 00       LDA #$00\nE143  85 AC       STA $AC\nE145  A9 0D       LDA #$0D\nE147  A6 AF       LDX $AF\nE149  E0 03       CPX #$03\nE14B  F0 06       BEQ $E153\nE14D  A6 B0       LDX $B0               output device default = 3 (screen)\nE14F  E0 03       CPX #$03\nE151  F0 03       BEQ $E156\nE153  20 02 E2    JSR $E202     output a CR\nE156  A9 0D       LDA #$0D\n                                ; get out\nE158  85 D9       STA $D9\nE15A  68          PLA\nE15B  AA          TAX\nE15C  68          PLA\nE15D  A8          TAY\nE15E  A5 D9       LDA $D9\nE160  C9 DE       CMP #$DE\nE162  D0 02       BNE $E166\nE164  A9 FF       LDA #$FF\nE166  60          RTS\n\nE167  C9 22       CMP #$22\nE169  D0 08       BNE $E173\nE16B  A5 CD       LDA $CD\nE16D  49 01       EOR #$01\nE16F  85 CD       STA $CD\nE171  A9 22       LDA #$22\nE173  60          RTS\n\nE174  09 40       ORA #$40\nE176  A6 9F       LDX $9F\nE178  F0 02       BEQ $E17C\nE17A  09 80       ORA #$80\nE17C  A6 DC       LDX $DC\nE17E  F0 02       BEQ $E182\nE180  C6 DC       DEC $DC\nE182  20 06 E6    JSR $E606             output char to screen\nE185  E6 C6       INC $C6\nE187  A4 D5       LDY $D5\nE189  C4 C6       CPY $C6\nE18B  B0 19       BCS $E1A6\nE18D  A6 D8       LDX $D8\nE18F  C0 4F       CPY #$4F\nE191  D0 0C       BNE $E19F\nE193  20 B3 E1    JSR $E1B3\nE196  20 43 E3    JSR $E343\nE199  A9 00       LDA #$00\nE19B  85 C6       STA $C6\nE19D  F0 07       BEQ $E1A6\nE19F  E0 18       CPX #$18\nE1A1  D0 1B       BNE $E1BE\nE1A3  20 C4 E1    JSR $E1C4\nE1A6  68          PLA\nE1A7  A8          TAY\nE1A8  A5 DC       LDA $DC\nE1AA  F0 02       BEQ $E1AE\nE1AC  46 CD       LSR $CD\nE1AE  68          PLA\nE1AF  AA          TAX\nE1B0  68          PLA\nE1B1  58          CLI\nE1B2  60          RTS\n\nE1B3  E0 17       CPX #$17\nE1B5  B0 06       BCS $E1BD\nE1B7  B5 E2       LDA $E2,X\nE1B9  09 80       ORA #$80\nE1BB  95 E2       STA $E2,X\nE1BD  60          RTS\n\n\n1\n2\n4\n8\n16\n32\n64\n128\n>C:0000  03 63 28 00  ae 07 c1 56  1c 00 8f 63  02 00 00 00   cc(@.gAV\\@.cb@@@\n>C:0010  30 01 20 00  0b 00 34 d5  00 01 1c ff  0a 3a 20 6c   0a @k@4U@a\\.j: l\n>C:0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n>C:0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n>C:0040  aa aa aa aa  aa aa ff 00  80 01 01 00  27 28 30 01   .......@.aa@'(0a\n>C:0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n>C:0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n>C:0070  bb bb bb bb  bb bb ff 53  00 00 00 00  00 00 01 10   .......S@@@@@@ap\n>C:0080  00 00 00 00  74 06 e6 8b  e6 8b 6c e2  68 01 c2 e8   @@@@tf....l.haB.\n>C:0090  55 e4 55 06  ff b3 00 ff  00 6a 01 ff  00 00 00 00   U.Uf..@.@ja.@@@@\n>C:00a0  00 27 00 00  11 00 ff 01  08 20 00 00  00 00 00 03   @'@@q@.ah @@@@@c\n>C:00b0  03 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   c@@@@@@@@@@@@@@@\n>C:00c0  00 00 00 00  d0 55 00 00  84 04 47 00  00 00 00 00   @@@@PU@@.dG@@@@@\n>C:00d0  00 00 00 00  00 27 00 00  12 21 00 00  00 00 00 00   @@@@@'@@r!@@@@@@\n>C:00e0  80 80 80 80  80 80 80 81  81 81 81 81  81 82 82 82   ................\n>C:00f0  82 82 82 82  83 83 83 83  83 00 00 25  48 ff ff 2d   .........@@%H..-\n(C:$0100) d e0a7 e172\n.C:e0a7  AC 6F 02    LDY $026F\n.C:e0aa  A2 00       LDX #$00\n.C:e0ac  BD 70 02    LDA $0270,X\n.C:e0af  9D 6F 02    STA $026F,X\n.C:e0b2  E8          INX\n.C:e0b3  E4 9E       CPX $9E\n.C:e0b5  D0 F5       BNE $E0AC\n.C:e0b7  C6 9E       DEC $9E\n.C:e0b9  98          TYA\n.C:e0ba  58          CLI\n.C:e0bb  60          RTS\n.C:e0bc  20 02 E2    JSR $E202          print char to screen\n.C:e0bf  A5 9E       LDA $9E            line width\n.C:e0c1  85 A7       STA $A7\n.C:e0c3  F0 FA       BEQ $E0BF\n.C:e0c5  78          SEI\n.C:e0c6  A5 AA       LDA $AA\n.C:e0c8  F0 09       BEQ $E0D3\n.C:e0ca  A5 A9       LDA $A9\n.C:e0cc  A0 00       LDY #$00\n.C:e0ce  84 AA       STY $AA\n.C:e0d0  20 06 E6    JSR $E606\n.C:e0d3  20 A7 E0    JSR $E0A7\n.C:e0d6  C9 83       CMP #$83\n.C:e0d8  D0 10       BNE $E0EA\n.C:e0da  78          SEI\n.C:e0db  A2 09       LDX #$09\n.C:e0dd  86 9E       STX $9E\n.C:e0df  BD 73 E6    LDA $E673,X\n.C:e0e2  9D 6E 02    STA $026E,X\n.C:e0e5  CA          DEX\n.C:e0e6  D0 F7       BNE $E0DF\n.C:e0e8  F0 D5       BEQ $E0BF\n.C:e0ea  C9 0D       CMP #$0D\n.C:e0ec  D0 CE       BNE $E0BC\n.C:e0ee  A4 D5       LDY $D5\n.C:e0f0  84 AC       STY $AC\n.C:e0f2  B1 C4       LDA ($C4),Y\n.C:e0f4  C9 20       CMP #$20\n.C:e0f6  D0 03       BNE $E0FB\n.C:e0f8  88          DEY\n.C:e0f9  D0 F7       BNE $E0F2\n.C:e0fb  C8          INY\n.C:e0fc  84 A1       STY $A1\n.C:e0fe  A0 00       LDY #$00\n.C:e100  84 C6       STY $C6\n.C:e102  84 CD       STY $CD\n.C:e104  A5 A3       LDA $A3\n.C:e106  30 16       BMI $E11E\n.C:e108  C5 D8       CMP $D8\n.C:e10a  D0 12       BNE $E11E\n.C:e10c  A5 A4       LDA $A4\n.C:e10e  85 C6       STA $C6\n.C:e110  C5 A1       CMP $A1\n.C:e112  90 0A       BCC $E11E\n.C:e114  B0 2B       BCS $E141\n.C:e116  98          TYA\n.C:e117  48          PHA\n.C:e118  8A          TXA\n.C:e119  48          PHA\n.C:e11a  A5 AC       LDA $AC\n.C:e11c  F0 A1       BEQ $E0BF\n.C:e11e  A4 C6       LDY $C6\n.C:e120  B1 C4       LDA ($C4),Y\n.C:e122  85 D9       STA $D9\n.C:e124  29 3F       AND #$3F\n.C:e126  06 D9       ASL $D9\n.C:e128  24 D9       BIT $D9\n.C:e12a  10 02       BPL $E12E\n.C:e12c  09 80       ORA #$80\n.C:e12e  90 04       BCC $E134\n.C:e130  A6 CD       LDX $CD\n.C:e132  D0 04       BNE $E138\n.C:e134  70 02       BVS $E138\n.C:e136  09 40       ORA #$40\n.C:e138  E6 C6       INC $C6\n.C:e13a  20 67 E1    JSR $E167\n.C:e13d  C4 A1       CPY $A1\n.C:e13f  D0 17       BNE $E158\n.C:e141  A9 00       LDA #$00\n.C:e143  85 AC       STA $AC\n.C:e145  A9 0D       LDA #$0D\n.C:e147  A6 AF       LDX $AF\n.C:e149  E0 03       CPX #$03\n.C:e14b  F0 06       BEQ $E153\n.C:e14d  A6 B0       LDX $B0\n.C:e14f  E0 03       CPX #$03\n.C:e151  F0 03       BEQ $E156\n.C:e153  20 02 E2    JSR $E202\n.C:e156  A9 0D       LDA #$0D\n.C:e158  85 D9       STA $D9\n.C:e15a  68          PLA\n.C:e15b  AA          TAX\n.C:e15c  68          PLA\n.C:e15d  A8          TAY\n.C:e15e  A5 D9       LDA $D9\n.C:e160  C9 DE       CMP #$DE\n.C:e162  D0 02       BNE $E166\n.C:e164  A9 FF       LDA #$FF\n.C:e166  60          RTS\n.C:e167  C9 22       CMP #$22\n.C:e169  D0 08       BNE $E173\n.C:e16b  A5 CD       LDA $CD\n.C:e16d  49 01       EOR #$01\n.C:e16f  85 CD       STA $CD\n.C:e171  A9 22       LDA #$22\n.C:e173  60          RTS\n\n\n\n\nE202  48          PHA\nE203  85 D9       STA $D9\nE205  8A          TXA\nE206  48          PHA\nE207  98          TYA\nE208  48          PHA\nE209  A9 00       LDA #$00\nE20B  85 AC       STA $AC\nE20D  A4 C6       LDY $C6\nE20F  A5 D9       LDA $D9\nE211  10 03       BPL $E216\nE213  4C A4 E2    JMP $E2A4\nE216  C9 0D       CMP #$0D\nE218  D0 03       BNE $E21D\nE21A  4C 59 E3    JMP $E359\n\n\nE343  38          SEC\nE344  46 A3       LSR $A3\nE346  A6 D8       LDX $D8\nE348  E8          INX\nE349  E0 19       CPX #$19\nE34B  D0 03       BNE $E350\nE34D  20 69 E3    JSR $E369\nE350  B5 E0       LDA $E0,X\nE352  10 F4       BPL $E348\nE354  86 D8       STX $D8\nE356  4C 7F E0    JMP $E07F\n\nE359  A9 00       LDA #$00\nE35B  85 DC       STA $DC\nE35D  85 9F       STA $9F\nE35F  85 CD       STA $CD\nE361  85 C6       STA $C6\nE363  20 43 E3    JSR $E343\nE366  4C A6 E1    JMP $E1A6\n\n\n\n /*\nname=DOTAPEIO\nstack=( -- )\ntags=vm,i/o,kernel,nosymbol\nPerform a ROM call framed between calls to `aloha`. This is\nneeded in particular for tape I/O, which might error out to a\nCommodore BASIC `ready.` prompt.\n\nLike `execute` and the Sweet-16 interpreter, this word\nuses the machine stack ($0100-$01ff) and RTS trick to transfer\ncontrol from one subroutine to the next, so that code executes\nin this order:\n\n    stashforth --> rts\n    SAVEPRG --> rts\n    restoreforth --> rts\n    exit\n\n_dotapeio\n    jsr topfas\n    jsr stashforth\ntapeio\n    jsr plugh\n    jsr restoreforth\n\n    jsr enter\n#include \"parm.i65\"\n    .word plit\n    .word restoreforth-1\n#include \"pad.i65\"\n    .word caller\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word oneminus\n#include \"page.i65\"\n    .word twotor\n#include \"past.i65\"\n    .word stashforth\n\n*/\n\n    rts\nstashforth01 .byt 0             ; temp storage for X register during tape I/O\n\n\n\nglossary:\n\nTIM\nTerminal Input Monitor\n\n\n\ntags:\n\n~golf       less memory, fewer clocks\n~todo       general & bugfixes\n~2.0        future release\n~doc\n\n\nbefore:\n    drv#        1, 2, 8, or 9\n    filename    0D \"PETTILPACKETS\"\n\n\n#define GETSTOP     $F335\n                                ; low-level tape i/o entry points\n                                ; (load/verify) rest of program\n#define READDATA    $F3F8\n                                ; (load/verify) named header - search for a named tape header block\n#define READHEAD    $F4D3\n                                ; (save) progran to disk or tape\n#define SAVEPRG     $F6E3\n                                ; write file header\n#define SAVEHEAD    $F619\n                                ; copy tape buffer start/end to SAL(c7) / EAL(c9) / STAL(fb)\n#define SETEALSTAL  $F66E\n                                ; copy tape buffer start/end to SAL(c7) / EAL(c9) / STAL(fb)\n#define TAPEPTR     $F67B\n                                ; copy tape buffer start SAL (c7) to STAL(fb)\n#define SETSTAL     $F68C\n                                ; copy cassette buffer addresses to STAL/EAL\n#define SETCASBUF   $F6AB\n                                ; write arbitrary data to tape\n#define SAVEDATA    $F8CE\n\nsave-buffers\nverify-buffers  1\nload-buffers    0\n(loadverify)\n\ntape or disk?\n\ntape\n    set tape\n\ndisk\n\n\n\ndetermine whether `abort` would clean up editor if we VERIFY ERROR\nerror there?\n\ndisk opener ends at $F150\n\ndrv# c@ 3 < if ( it's disk ) else ( it's tape ) then\n\n\n(FB) is address where stuff is loaded\n\n\n\n`editor`\n`load`\n    fix bug where code is required on last line of block\n`load-buffers`\n    relocating loader\n    works with disk or tape\n`save-buffers`\n    works with disk or tape\n`forget`\n     needs to move `vmbuf` area\n\n`create` tests\n\ndoes linesa operate okay without calling the cursor update routine?\n\n\ncreate foo create foo\n-- should see \"EXISTS\" message\n    handles vocabulary rules properly\n    handles `redefined` word properly\n    smudges older definition at `closedef`\n\nredefined words\n\n\nVocabularies should be added to the transient dictionary, they're only 4 bytes\nwhat if someone uses save-forth/load-forth to preserve session?\n\nusing save-forth / load-forth to preserve session\n\nusing save-buffers / load-buffers to preserve source\n\n wait wut? people without ROM toggled in several bytes of bootstrap code to load paper tape\n I have seen this done, in person, for real, in 1978, by Joe O'Laughlin on his SWTPC 6800\n\n;--------------------------------------------------------------\n#if 0\nname=?PAGES\nstack=( -- n )\ntags=ext,subroutine,nosymbol\n\n(query-page)\n#endif\nqpages\n    ldy pip\n    iny\n    beq plusparms\n    rts\n\n\n\nclr\nfill 9400 with purple\nfill bottom of scr with rvs-space\nk$=\"\":display\n\nbug: redefined words should issue a warning\n\n.C:6b0e  20 46 07    JSR .uservar   - A:6D X:2F Y:0D SP:f6 ..-.....  291447433\n\n.C:6b0e   .bloom:\n.C:6b0e  20 46 07    JSR .uservar\n.C:6b11  5E 20 46    LSR $4620,X\n\nSP - 6502 stack pointer\nDS - data stack pointer (X register)\nRS - Sweet16 return stack pointer (R12)\n\nSweet16 registers\n      R0    R1     R2    R3     R4    R5     R6    R7\n        ACC   TOS     N0    N1     N2    N3     N4    N5\n0000  00 00 F9 10  86 07 05 FF  04 40 D2 5F  03 00 00 00\n0010  B7 06 01 02  04 00 34 D5  00 01 0D D0  0E 83 86 00\n         N6    N7     N8   EXT     RS   CPR     SR    PC\n      R8    R9     R10   R11    R12   R13    R14   R15\n\nForth data stack (split)\n0040  aa aa aa aa  aa aa aa 08  88 6c 07 ae  00 01 f9 01\n0070  bb bb bb bb  bb bb bb 00  06 06 00 06  00 02 10 10\n\n      zi    zlim   up    next         nexto     time\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 0f  6d 00 1a 91\n\nMachine stack\n01e0  65 e3 01 30  0d c9 10 9a  0f c7 05 68  06 a2 2e 57\n01f0  03 ea 2e 6c  20 68 11 50  70 de 6e 28  6f 48 6f 01\n\nTerminal input buffer\n0200  3a 03 46 4f  4f 54 55 52  42 2d 56 2e  30 22 2c 39\n\nUser area begins at 066C\n0660  01 88 84 1f  85 1e 20 c5  04 4c 66 06  0a 00 7d 17\n0670  00 00 01 00  31 00 fe 01  fb 1a 78 d4  00 00 32 68\n0680  bc 6e 49 1a  49 1a 00 57  0a 00 7d 17  00 00 01 00\n0690  fe 52 00 00  00 00 ff ff  00 00 06 00  05 01 00 00\n06a0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 67\n06b0  ee 7e 02 00  09 00 00 00  00 00 00 00  00 00 00 00\n06c0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 d0 64\n06d0  ce 64 ff 80  00 00 00 00  00 00 cc cc  cc cc cc cc\n06e0  01 a0 0a 2c  a0 08 2c a0  06 2c a0 04  2c a0 02 b5\n\n6480  4f 44 85 09  04 3f 44 55  50 44 18 04  3f 4b 45 59\n6490  43 09 04 4f  56 45 52 7f  7e 44 4f 52  41 2c 01 40\n64a0  10 05 3f 45  58 49 54 39  0e 06 3f 50  41 55 53 45\n64b0  81 10 06 3f  53 54 41 43  4b 5d 73 26  3f 4c 45 41\n64c0  56 45 3f 0a  09 3f 54 45  52 4d 49 4e  41 4c 00 00\n64d0  00 aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n64e0  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n64f0  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n6500  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n\n\n\n;--------------------------------------------------------------\n#if 0\nname=INCRS\ntags=inner,subroutine,nosymbol\nstack=( -- )\nAdd 1 to (presumed) 16-bit value on return stack\n\n#endif\nincrs\n    txa\nincrsb\n    tsx                         ; S +2 at this entry point\nincrs01\n    inx\n    inc $0102,x\n    beq incrs01                 ; assumes we never wrap 16 bit value\n    tax\n    rts\n\n\n\ndodoes??\n    jsr slip\n    stx z\n    tsx\n    sec\n    lda $0103,x\n    adc #0\n    sta tos\n    lda $0104,x\n    adc #0\n    sty tos+1\n    ;clc\n    lda pip\n    adc #2\n    sta $0103,x\n    lda pip+1\n    adc #0\n    sta $0104,x\n    ldx z\n    ;fall through\n\n\n\n\"test it until you trust it\"\n(C:$10c7)\n.C:10c7   .dodoes:\n.C:10c7  20 91 09    JSR .slip\n.C:10ca  86 FF       STX .z\n.C:10cc  BA          TSX\n.C:10cd  BC 03 01    LDY $0103,X\n.C:10d0  C8          INY\n.C:10d1  84 02       STY .tos\n.C:10d3  BC 04 01    LDY $0104,X\n.C:10d6  A5 02       LDA .tos\n.C:10d8  D0 01       BNE .dodoes01\n.C:10da  C8          INY\n.C:10db   .dodoes01:\n.C:10db  84 03       STY $03\n.C:10dd  18          CLC\n.C:10de  A5 8B       LDA .pip\n.C:10e0  69 02       ADC #$02\n.C:10e2  9D 03 01    STA $0103,X\n.C:10e5  A5 8C       LDA $8C\n.C:10e7  69 00       ADC #$00\n.C:10e9  9D 04 01    STA $0104,X\n.C:10ec  A6 FF       LDX .z\n.C:10ee   .toforth:\n.C:10ee  8A          TXA\n.C:10ef  BA          TSX\n.C:10f0   .toforth01:\n.C:10f0  E8          INX\n.C:10f1  FE 00 01    INC $0100,X\n.C:10f4  F0 FA       BEQ .toforth01\n0000  03 61 01 10  86 07 c1 06  03 11 dd 61  01 00 00 00   caap.gAfcq.aa@@@\n0010  b6 06 ff 01  01 00 34 d5  00 01 0d d0  0a 1b 1b 6c   .f.aa@4U@amPj[[l\n0040  aa aa aa aa  aa aa aa 08  88 01 22 01  03 01 76 01   .......h.a\"acava\n0070  bb bb bb bb  bb bb bb 00  06 00 57 02  11 00 70 10   .......@f@Wbq@pp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 79  70 00 37 1a   @@@@tf....lyp@7z\n01e0  65 e3 01 30  0d c9 10 9a  0f b1 03 57  03 3b 01 00   e.a0mIp.o.cWc;a@\n01f0  23 cf 05 68  06 01 01 31  70 de 6e 28  6f 48 6f 01   #Oehfaa1p.n(oHoa\n.C:0991  CA          DEX            - A:30 X:30 Y:70 SP:f4 ..-B....  389996745\n(C:$0991) m 6ec0 707f\n6ec0  0b 81 11 07  67 16 09 c1  0f b9 18 fb  18 61 18 53   k.qggviAo.x.xaxS\n6ed0  6f 20 03 11  26 70 a5 0a  08 10 21 10  03 70 6f 11   o cq&p.jhp!pcpoq\n6ee0  ad 9c 06 8d  9a 06 ad 98  06 d0 03 ee  9d 06 4c 86   ..f..f..fPc..fL.\n6ef0  00 20 03 11  f1 09 1f 0a  6e 18 fe 6e  6f 11 ad 9c   @ cq.i_jnx.noq..\n6f00  06 d0 03 ee  9d 06 4c 86  00 20 03 11  81 10 80 68   fPc..fL.@ cq.p.h\n6f10  bf 08 94 11  18 28 0a 1c  69 85 09 94  11 f0 82 6c   .h.qx(j\\i.i.q..l\n6f20  85 09 08 10  d1 6e 2b 6a  a3 11 e3 6f  11 20 03 11   .ihpQn+j.q.oq cq\n6f30  4a 10 03 20  4f 4b 61 18  6f 11 20 03  11 37 10 a8   Jpc OKaxoq cq7p.\n6f40  07 7f 11 0c  bb 0b 09 6f  26 70 08 10  61 18 2d 6f   g.ql.kio&phpax-o\n6f50  a3 11 f5 20  03 11 f4 0f  a8 6e b3 6e  3a 6f a0 ff   .q. cq.o.n.n:o .\n6f60  c8 68 91 02  c0 05 d0 f8  4c 9b 0f 20  03 11 44 0a   Hh.b.eP.L.o cqDj\n6f70  9c 07 c1 0f  39 0b 65 0a  71 0a 9c 10  08 a8 07 61   .gAo9kejqj.ph.ga\n6f80  09 ad 13 bf  0d ef 08 a4  07 0e 09 09  6f a8 07 5e   i.s.m.h.gniio.g^\n6f90  6f 6f 11 20  03 11 7c 07  9b 09 6f 11  20 03 11 7b   ooq cq|g.ioq cq{\n6fa0  0c 8c 0f 37  0a 93 6f 6f  11 20 03 11  7b 0c 8a 0f   l.o7j.ooq cq{l.o\n6fb0  3a 0a 93 6f  6f 11 20 03  11 28 0a a9  6f 9c 6f 6f   :j.ooq cq(j.o.oo\n6fc0  11 20 03 11  81 11 79 11  7b 0c 8c 0f  81 11 00 01   q cq.qyq{l.o.q@a\n6fd0  7b 0c b5 0f  13 09 93 6f  6f 11 ad c6  06 d0 10 a0   {l.osi.ooq.FfPp\n6fe0  05 4c 8e 10  a0 01 e6 8b  ad 82 06 d1  8b b0 d2 4c   eL.p a....fQ..RL\n6ff0  86 00 ad 82  06 c9 fd d0  f6 20 91 09  a9 ea 85 02   .@..fI.P. .i...b\n7000  4c a9 6f 20  03 11 e4 6f  fd 9c 6f 6f  11 20 03 11   L.o cq.o..ooq cq\n7010  2d 71 f5 0a  8b 09 0a 6b  8c 0f 8b 09  c1 0f 7c 07   -q.j.ijk.o.iAo|g\n7020  8c 0f f2 08  6f 11 ad c6  06 ac c7 06  4c 1c 12 20   .o.hoq.Ff.GfL\\r\n7030  c7 10\nwind up here---v `?comp`\n               da 6f  c1 0f 03 70  6f 11 20 03  11 81 11 d6   GpZoAocpoq cq.qV\n7040  0d 04 6d 6f  11 20 03 11  91 72 f2 6f  81 11 03 11   mdmoq cq.r.o.qcq\n7050  04 6d 83 72  2d 71 b1 6b  9a 71 6f 11  20 03 11 9c   dm.r-q.k.qoq cq.\n7060  72 7c 72 2d  71 af 6b ee  6a c1 0f 85  09 94 11 04   r|r-q.k.jAo.i.qd\n7070  b1 6b 91 71  6f 11 20 03  11 2f 70 6f  11 5c 70 6f   .k.qoq cq/poq\\po\n(C:$7080)\n\n\n\n(C:$10c7)\n.C:10c7   .dodoes:\n.C:10c7  20 91 09    JSR .slip\n.C:10ca  86 FF       STX .z\n.C:10cc  BA          TSX\n.C:10cd  BC 03 01    LDY $0103,X\n.C:10d0  C8          INY\n.C:10d1  84 02       STY .tos\n.C:10d3  BC 04 01    LDY $0104,X\n.C:10d6  A5 02       LDA .tos\n.C:10d8  D0 01       BNE .dodoes01\n.C:10da  C8          INY\n.C:10db   .dodoes01:\n.C:10db  84 03       STY $03\n.C:10dd  18          CLC\n.C:10de  A5 8B       LDA .pip\n.C:10e0  69 02       ADC #$02\n.C:10e2  9D 03 01    STA $0103,X\n.C:10e5  A5 8C       LDA $8C\n.C:10e7  69 00       ADC #$00\n.C:10e9  9D 04 01    STA $0104,X\n.C:10ec  A6 FF       LDX .z\n.C:10ee   .toforth:\n.C:10ee  8A          TXA\n.C:10ef  BA          TSX\n.C:10f0   .toforth01:\n.C:10f0  E8          INX\n.C:10f1  FE 00 01    INC $0100,X\n.C:10f4  F0 FA       BEQ .toforth01\n0000  03 61 01 10  86 07 c1 06  03 11 dd 61  01 00 00 00   caap.gAfcq.aa@@@\n0010  b6 06 ff 01  01 00 34 d5  00 01 0d d0  0a 1b 1b 6c   .f.aa@4U@amPj[[l\n0040  aa aa aa aa  aa aa aa 08  88 01 22 01  03 01 76 01   .......h.a\"acava\n0070  bb bb bb bb  bb bb bb 00  06 00 57 02  11 00 70 10   .......@f@Wbq@pp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 79  70 00 37 1a   @@@@tf....lyp@7z\n01e0  65 e3 01 30  0d c9 10 9a  0f b1 03 57  03 3b 01 00   e.a0mIp.o.cWc;a@\n01f0  23 cf 05 68  06 01 01 31  70 de 6e 28  6f 48 6f 01   #Oehfaa1p.n(oHoa\n.C:0991  CA          DEX            - A:30 X:30 Y:70 SP:f4 ..-B....  389996745\n(C:$0991) m 6ec0 707f\n6ec0  0b 81 11 07  67 16 09 c1  0f b9 18 fb  18 61 18 53   k.qggviAo.x.xaxS\n6ed0  6f 20 03 11  26 70 a5 0a  08 10 21 10  03 70 6f 11   o cq&p.jhp!pcpoq\n6ee0  ad 9c 06 8d  9a 06 ad 98  06 d0 03 ee  9d 06 4c 86   ..f..f..fPc..fL.\n6ef0  00 20 03 11  f1 09 1f 0a  6e 18 fe 6e  6f 11 ad 9c   @ cq.i_jnx.noq..\n6f00  06 d0 03 ee  9d 06 4c 86  00 20 03 11  81 10 80 68   fPc..fL.@ cq.p.h\n6f10  bf 08 94 11  18 28 0a 1c  69 85 09 94  11 f0 82 6c   .h.qx(j\\i.i.q..l\n6f20  85 09 08 10  d1 6e 2b 6a  a3 11 e3 6f  11 20 03 11   .ihpQn+j.q.oq cq\n6f30  4a 10 03 20  4f 4b 61 18  6f 11 20 03  11 37 10 a8   Jpc OKaxoq cq7p.\n6f40  07 7f 11 0c  bb 0b 09 6f  26 70 08 10  61 18 2d 6f   g.ql.kio&phpax-o\n6f50  a3 11 f5 20  03 11 f4 0f  a8 6e b3 6e  3a 6f a0 ff   .q. cq.o.n.n:o .\n6f60  c8 68 91 02  c0 05 d0 f8  4c 9b 0f 20  03 11 44 0a   Hh.b.eP.L.o cqDj\n6f70  9c 07 c1 0f  39 0b 65 0a  71 0a 9c 10  08 a8 07 61   .gAo9kejqj.ph.ga\n6f80  09 ad 13 bf  0d ef 08 a4  07 0e 09 09  6f a8 07 5e   i.s.m.h.gniio.g^\n6f90  6f 6f 11 20  03 11 7c 07  9b 09 6f 11  20 03 11 7b   ooq cq|g.ioq cq{\n6fa0  0c 8c 0f 37  0a 93 6f 6f  11 20 03 11  7b 0c 8a 0f   l.o7j.ooq cq{l.o\n6fb0  3a 0a 93 6f  6f 11 20 03  11 28 0a a9  6f 9c 6f 6f   :j.ooq cq(j.o.oo\n6fc0  11 20 03 11  81 11 79 11  7b 0c 8c 0f  81 11 00 01   q cq.qyq{l.o.q@a\n6fd0  7b 0c b5 0f  13 09 93 6f  6f 11 ad c6  06 d0 10 a0   {l.osi.ooq.FfPp\n6fe0  05 4c 8e 10  a0 01 e6 8b  ad 82 06 d1  8b b0 d2 4c   eL.p a....fQ..RL\n6ff0  86 00 ad 82  06 c9 fd d0  f6 20 91 09  a9 ea 85 02   .@..fI.P. .i...b\n7000  4c a9 6f 20  03 11 e4 6f  fd 9c 6f 6f  11 20 03 11   L.o cq.o..ooq cq\n7010  2d 71 f5 0a  8b 09 0a 6b  8c 0f 8b 09  c1 0f 7c 07   -q.j.ijk.o.iAo|g\n7020  8c 0f f2 08  6f 11 ad c6  06 ac c7 06  4c 1c 12 20   .o.hoq.Ff.GfL\\r\n7030  c7 10 da 6f  c1 0f 03 70  6f 11 20 03  11 81 11 d6   GpZoAocpoq cq.qV\n7040  0d 04 6d 6f  11 20 03 11  91 72 f2 6f  81 11 03 11   mdmoq cq.r.o.qcq\n7050  04 6d 83 72  2d 71 b1 6b  9a 71 6f 11  20 03 11 9c   dm.r-q.k.qoq cq.\n7060  72 7c 72 2d  71 af 6b ee  6a c1 0f 85  09 94 11 04   r|r-q.k.jAo.i.qd\n7070  b1 6b 91 71  6f 11 20 03  11 2f 70 6f  11 5c 70 6f   .k.qoq cq/poq\\po\n(C:$7080)\n\n\n#10 (Stop on  exec 10c7)  250 006\n.C:10c7  20 91 09    JSR .slip      - A:1A X:2E Y:7F SP:f4 ..-.....  967080838\n(C:$10c7) d;m 0 1f;m 40 4f;m 70 8f;m 1e0 1ff\n.C:10c7   .dodoes:\n.C:10c7  20 91 09    JSR .slip\n.C:10ca  86 FF       STX .z\n.C:10cc  BA          TSX\n.C:10cd  BD 04 01    LDA $0104,X\n.C:10d0  85 03       STA $03\n.C:10d2  BD 03 01    LDA $0103,X\n.C:10d5  85 02       STA .tos\n.C:10d7  20 E5 0D    JSR .inctos\n.C:10da  20 50 12    JSR .topfas\n.C:10dd  A5 8C       LDA $8C\n.C:10df  9D 04 01    STA $0104,X\n.C:10e2  A5 8B       LDA .pip\n.C:10e4  9D 03 01    STA $0103,X\n.C:10e7  A6 FF       LDX .z\n.C:10e9   .toforth:\n.C:10e9  20 EF 10    JSR .incrs\n.C:10ec  4C 65 11    JMP .exit\n.C:10ef   .incrs:\n.C:10ef  8A          TXA\n.C:10f0   .incrsb:\n.C:10f0  BA          TSX\n.C:10f1   .incrs01:\n.C:10f1  E8          INX\n.C:10f2  FE 02 01    INC $0102,X\n.C:10f5  F0 FA       BEQ .incrs01\n.C:10f7  AA          TAX\n.C:10f8  60          RTS\n.C:10f9   .enter:\n.C:10f9  8A          TXA\n0000  00 00 30 02  00 07 fe 7e  04 40 05 50  06 60 07 70   @@0b@g.~d@ePf`gp\n0010  08 80 09 90  0a a0 0b b0  00 01 0d d0  0e e0 0f f0   h.i.j k.@amPn o.\n0040  aa aa aa aa  aa aa aa aa  aa aa aa aa  fe 30 b8 01   .............0.a\n0070  bb bb bb bb  bb bb bb bb  bb bb bb bb  65 02 81 10   ............eb.p\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 7f  1a 00 0d 7a   @@@@tf....l.z@mz\n01e0  65 e3 01 30  0d eb 10 9a  0f b1 57 44  36 2d 1b 57   e.a0m.p.o.WD6-[W\n01f0  e4 dd 23 20  21 b4 0b c1  0b 81 b7 00  01 01 1d fd   ..# !.kAk..@aa].\n(C:$0200) m b80\n0b80  0b 20 8a 0b  a9 00 48 a9  85 48 b5 20  d0 02 d6 50   k .k.@H..H. PbVP\n0b90  d6 20 60 20  ea 06 a9 0f  48 a9 9a 48  18 a5 02 c6   V ` .f.oH..Hx.bF\n0ba0  07 10 05 38  a4 06 f0 09  88 91 04 d0  fb e6 05 90   gpe8.f.i..dP..e.\n0bb0  ee 60 20 c7  10\n\n\n\n                         bf 0f 93  0b 65 11 20  b2 0b 00 20   .` Gp.o.keq .k@\n0bc0  b2 0b\n               20 20  c7 10 bf 0f  dc 08 ee 0a  ae 12 16 09   .k  Gp.o.h.j.rvi\n0bd0  bf 0f 24 12  a7 0a 8a 11  09 8b 09 7e  0a 8a 11 ec   .o$r.j.qi.i~j.q.\n0be0  ea 08 df 0d  65 11 20 c3  0b 00 20 c3  0b 20 38 29   .h.meq Ck@ Ck 8)\n0bf0  18 20 ea 06  86 ff a9 0f  48 a9 9a 48  b0 2d a6 03   x .f...oH..H.-.c\n0c00  18 8a 65 05  85 05 18 8a  65 07 85 07  e8 a4 02 f0   x.ee.ex.eg.g..b.\n(C:$0c10)\n\n---------------------\n\n(C:$e0c3) bk .dodoes\nBREAK: 10  C:$10c7  (Stop on exec)\n(C:$e0c3) g\n\n#10 (Stop on  exec 10c7)  040 052\n.C:10c7  20 91 09    JSR .slip      - A:05 X:2E Y:00 SP:f2 N.-B....  536780084\n(C:$10c7)\n(C:$10c7) d;m 0 1f;m 40 4f;m 70 8f;m 1e0 1ff\n.C:10c7   .dodoes:\n.C:10c7  20 91 09    JSR .slip\n.C:10ca  86 FF       STX .z\n.C:10cc  BA          TSX\n.C:10cd  BD 04 01    LDA $0104,X\n.C:10d0  85 03       STA $03\n.C:10d2  BD 03 01    LDA $0103,X\n.C:10d5  85 02       STA .tos\n.C:10d7  20 E5 0D    JSR .inctos\n.C:10da  20 50 12    JSR .topfas\n.C:10dd  A5 8C       LDA $8C\n.C:10df  9D 04 01    STA $0104,X\n.C:10e2  A5 8B       LDA .pip\n.C:10e4  9D 03 01    STA $0103,X\n.C:10e7  A6 FF       LDX .z\n.C:10e9   .toforth:\n.C:10e9  20 EF 10    JSR .incrs\n.C:10ec  4C 65 11    JMP .exit\n.C:10ef   .incrs:\n.C:10ef  8A          TXA\n.C:10f0   .incrsb:\n.C:10f0  BA          TSX\n.C:10f1   .incrs01:\n.C:10f1  E8          INX\n.C:10f2  FE 02 01    INC $0102,X\n.C:10f5  F0 FA       BEQ .incrs01\n.C:10f7  AA          TAX\n.C:10f8  60          RTS\n.C:10f9   .enter:\n.C:10f9  8A          TXA\n0000  03 61 05 00  86 07 00 00  00 00 9c 61  01 00 00 00   cae@.g@@@@.aa@@@\n0010  b6 06 ff 01  01 00 34 d5  00 01 0d d0  0a ff 1b 6c   .f.aa@4U@amPj.[l\n0040  aa aa aa aa  aa aa aa 08  31 30 30 99  33 ff 8c 01   .......h100.3..a\n0070  bb bb bb bb  bb bb bb 00  00 00 00 1a  6f ff 72 10   .......@@@@zo.rp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 98  72 00 60 c6   @@@@tf....l.r@`F\n01e0  57 03 a8 19  57 03 ba 19  20 21 86 57  03 4f 01 00   Wc.yWc.y !.WcOa@\n01f0  23 cf 05 b4  0b bd 0b 4a  70 de 6e 28  6f 48 6f 01   #Oe.k.kJp.n(oHoa\n(C:$0200) m 7280\n7280  06 d0 4e 8e  be 06 4c 86  00 20 d6 0d  00 00 00 00   fPN..fL.@ Vm@@@@\n7290  00 20 f9 10  89 72 2e 0a  bb 0b 65 11  20 f9 10 89   @ .p.r.j.keq .p.\n72a0  72 c1 09 4a  09 ad 13 a7  08 a7 08 9c  10 06 65 11   rAiJi.s.h.h.pfeq\n72b0  86 ff a6 02  10 11 ca 8a  49 ff 85 02  aa a9 00 85   ...bpqJ.I..b..@.\n72c0  03 de 8b 72  de 8b 72 fe  8b 72 30 03  4c 39 0f a0   c..r..r..r0cL9o\n72d0  06 4c 8e 10  20 f9 10 ea  08 f5 0a dc  08 65 11 20   fL.p .p.h.j.heq\n72e0  c7 10 da 6f  cb 09 4a 09  c1 09 b0 72  4a 09 d4 72   GpZoKiJiAi.rJiTr\n72f0  20 f9 10 9b  0f 03 70 7b  0c 44 0a a9  6f 65 11 20    .p.ocp{lDj.oeq\n7300  f9 10 7b 0c  43 09 13 09  df 0d 4a 09  8a 0f 65 11   .p{lCisi.mJi.oeq\n(C:$7310) m 7040\n7040  0d 04 6d 65  11 20 f9 10  91 72 f2 6f  77 11 f9 10   mdmeq .p.r.owq.p\n7050  04 6d 83 72  2d 71 b1 6b  9a 71 65 11  20 f9 10 9c   dm.r-q.k.qeq .p.\n7060  72 7c 72 2d  71 af 6b ee  6a c1 0f 85  09 8a 11 04   r|r-q.k.jAo.i.qd\n7070  b1 6b 91 71  65 11 20 f9  10 2f 70 65  11 5c 70 65   .k.qeq .p/peq\\pe\n7080  11 20 f9 10  da 6f 2f 70  08 10 ce 6c  9c 6f ce 6c   q .pZo/phpNl.oNl\n7090  9c 6f 65 11  20 f9 10 7c  07 de 6a 06  0e 65 11 20   .oeq .p|g.jfneq\n70a0  f9 10 da 6f  91 72 2f 70  65 11 7c 07  c1 0f de 6a   .pZo.r/peq|gAo.j\n70b0  c1 0f ca 0a  8a 11 04 94  70 77 11 c7  10 b6 6f 65   AoJj.qd.pwqGp.oe\n70c0  11 20 ea 06  00 c1 34 62  c2 b4 35 63  c3 36 71 a5   q .f@A4bB.5cC6q.\n(C:$70d0) m 0b80\n0b80  0b 20 8a 0b  a9 00 48 a9  85 48 b5 20  d0 02 d6 50   k .k.@H..H. PbVP\n0b90  d6 20 60 20  ea 06 a9 0f  48 a9 9a 48  18 a5 02 c6   V ` .f.oH..Hx.bF\n0ba0  07 10 05 38  a4 06 f0 09  88 91 04 d0  fb e6 05 90   gpe8.f.i..dP..e.\n0bb0  ee 60 20 c7  10 bf 0f 93  0b 65 11 20  b2 0b 00 20   .` Gp.o.keq .k@\n0bc0  b2 0b 20 20  c7 10 bf 0f  dc 08 ee 0a  ae 12 16 09   .k  Gp.o.h.j.rvi\n0bd0  bf 0f 24 12  a7 0a 8a 11  09 8b 09 7e  0a 8a 11 ec   .o$r.j.qi.i~j.q.\n0be0  ea 08 df 0d  65 11 20 c3  0b 00 20 c3  0b 20 38 29   .h.meq Ck@ Ck 8)\n0bf0  18 20 ea 06  86 ff a9 0f  48 a9 9a 48  b0 2d a6 03   x .f...oH..H.-.c\n0c00  18 8a 65 05  85 05 18 8a  65 07 85 07  e8 a4 02 f0   x.ee.ex.eg.g..b.\n(C:$0c10)\n\n\n\n\n\n#7 (Stop on  exec 04a5)  169 025\n.C:04a5  60          RTS            - A:FE X:EF Y:00 SP:ed ..-....C   28075673\n(C:$04a5) d;m 0 1f;m 40 4f;m 70 8f;m 1e0 1ff;z\n.C:04a5   .plugh:\n.C:04a5  60          RTS\n.C:04a6   .BRTBL:\n.C:04a6  CF F9 3A    DCP $3AF9\n.C:04a9  00          BRK\n.C:04aa  3D 77 40    AND $4077,X\n.C:04ad  18          CLC\n.C:04ae  45 09       EOR $09\n.C:04b0  4A          LSR A\n.C:04b1  80 51       NOOP #$51\n.C:04b3  8A          TXA\n.C:04b4  C7 22       DCP $22\n.C:04b6  E9 9E       SBC #$9E\n.C:04b8  E7 EB       ISB $EB\n.C:04ba  62          JAM\n.C:04bb  B1 94       LDA ($94),Y\n.C:04bd  26 58       ROL $58\n.C:04bf  B3 E5       LAX ($E5),Y\n.C:04c1  11 74       ORA ($74),Y\n.C:04c3  A8          TAY\n\n.C:04c4  63 E6       RRA ($E6,X)\n.C:04c6  1E D0 02    ASL $02D0,X\n.C:04c9  E6 1F       INC $1F\n.C:04cb   .SW16D:\n.C:04cb  A9 05       LDA #$05\n.C:04cd  48          PHA\n.C:04ce  A0 00       LDY #$00\n0000  00 00 00 00  00 07 19 ff  04 40 db 64  06 60 07 70   @@@@@gy.d@.df`gp\n0010  08 80 09 90  00 a0 0b b0  00 01 0d d0  00 c1 86 00   h.i.@ k.@amP@A.@\n0040  aa aa aa aa  aa aa aa 08  88 6d 00 00  80 bc 00 01   .......h.m@@..@a\n0070  bb bb bb bb  bb bb bb 00  06 06 00 00  06 6e 00 10   .......@ff@@fn@p\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c fe  46 00 06 6d   @@@@tf....l.F@fm\n01e0  ba e4 2c 11  20 20 ba ba  e4 ff 2c cf  00 c5 04 11   ..,q  ....,O@Edq\n01f0  2f 39 68 34  68 05 66 b2  1a 81 b7 00  01 01 41 fd   /9h4hef.z..@aaA.\n.C:1105  E6 8C       INC $8C        - A:FE X:EF Y:00 SP:ef ..-....C   28075679\n(C:$1105)\n.C:1105  E6 8C       INC $8C\n.C:1107  A9 FD       LDA #$FD\n.C:1109   .enter01:\n.C:1109  69 02       ADC #$02\n.C:110b  BC 02 01    LDY $0102,X\n.C:110e  9D 02 01    STA $0102,X\n.C:1111  C8          INY\n.C:1112  D0 03       BNE .enter02\n.C:1114  FE 03 01    INC $0103,X\n.C:1117   .enter02:\n.C:1117  84 8B       STY .pip\n.C:1119  A5 8C       LDA $8C\n.C:111b  BC 03 01    LDY $0103,X\n.C:111e  9D 03 01    STA $0103,X\n.C:1121  84 8C       STY $8C\n.C:1123  68          PLA\n.C:1124  AA          TAX\n.C:1125  4C 8A 00    JMP .nexto\n.C:1128   .pploop:\n.C:1128  38          SEC\n.C:1129  A5 80       LDA .zi\n.C:112b  E5 82       SBC .zlim\n.C:112d  85 04       STA .n\n.C:112f  A5 81       LDA $81\n.C:1131  E5 83       SBC $83\n.C:1133  49 80       EOR #$80\n.C:1135  A8          TAY\n0000  00 00 00 00  00 07 19 ff  04 40 db 64  06 60 07 70   @@@@@gy.d@.df`gp\n0010  08 80 09 90  00 a0 0b b0  00 01 0d d0  00 c1 86 00   h.i.@ k.@amP@A.@\n0040  aa aa aa aa  aa aa aa 08  88 6d 00 00  80 bc 00 01   .......h.m@@..@a\n0070  bb bb bb bb  bb bb bb 00  06 06 00 00  06 6e 00 10   .......@ff@@fn@p\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c fe  46 00 06 6d   @@@@tf....l.F@fm\n01e0  ba e4 2c 11  20 20 ba ba  e4 ff 2c cf  00 c5 04 11   ..,q  ....,O@Edq\n01f0  2f 39 68 34  68 05 66 b2  1a 81 b7 00  01 01 41 fd   /9h4hef.z..@aaA.\n.C:1107  A9 FD       LDA #$FD       - A:FE X:EF Y:00 SP:ef ..-....C   28075684\n(C:$1107) m 46c0\n46c0  31 1a 20 e9  10 f4 0f 5d  10 08 7e 06  0e 04 86 00   1z .p.o]ph~fnd.@\n46d0  ae 1a e4 46  33 22 7a 47  6d 18 8c 0f  8c 0f 8c 0f   .z.F3\"zGmx.o.o.o\n46e0  8c 0f 0d 04  20 e9 10 af  18 90 18 2d  11 7f 11 56   .omd .p.x.x-q.qV\n46f0  3c 18 31 0a  5c 0e 5b 10  bc 6e 80 06  8c 0f 34 68   <x1j\\n[p.n.f.o4h\n4700  20 c7 10 c1  09 de 08 7f  11 9e 8a 0f  2e 12 44 0a    GpAi.h.q..o.rDj\n4710  cf 11 11 c1  09 17 12 81  11 6f 02 16  09 8a 0f 54   OqqAiwr.qobvi.oT\n4720  11 f3 ea 08  9b 0f 6f 11  20 00 47 05  49 4e 46 4f   q..h.ooq @GeINFO\n4730  0d 00 00 a5  8b 8d 31 47  a5 8c 8d 32  47 20 e9 10   m@@...1G...2G .p\n4740  28 47 5b 10  ed 06 6d 18  8c 0f 4c 47  ad 31 47 85   (G[p.fmx.oLG.1G.\n(C:$4750)\n\n\n\n\n\nbefore\n    pop return stack +1 is new IP\n    ip + needs to be pushed\n\n\n\n\n\n\nenter\n    txa\n    pha\n    tsx\n;interleaved repopulating return stack with A & Y\n; in pop direction, add +1 with pagebump for $00\n; in push direction, add +2 with pagewrap for $FF or $00\n; pop return stack and 16-bit add 1, that becomes new IP.\n; finish with nexto\n\n;\n    lda pip\n    cmp #$FD\n    bcc +\n    inc pip+1\n    lda #$FD\n+\n    adc #2\n                        ldy $0103,x\n                        sta $0103,x\n    iny\n    bne +\n    inc 0104,x\n+\n    sty pip\n    lda pip+1\n                        ldy $0104,x\n                        sta $0104,x\n    sty pip+1\n    pla\n    tax\n    jmp nexto\n\n\n;\n    ldy pip\n    cpy #$FD\n    bcs +\n    inc pip+1\n    ldy #0\n+\n    lda pip+1\n\n\n\n\nenter\n    lda #1\n    jsr paday\n    dex\n    sta stackh,x\n    sty stackl,x\n    pla\n    tay\n    pla\n    cpy #$FD\n    adc #0\n    sta pip+1\n    sty pip\n    lda stackh,x\n    pha\n    lda stackl,x\n    pha\n    inx\n;    jsr plugh\n    jmp next1\n\n\n\n\n\n\n    adc pip\n    cmp #$FF\n    tay\n    bcc +\n    iny\n    cpy\n    iny\n    bne paday\n\n\n\n\n\n\n\n\n\n\n\npaday\n    sec                         ; A+1 = offset to be added to IP\n;    .byt $29                    ; AND # opcode to skip CLC\npadaync\n;    clc\n    ;\n    adc pip\n    tay\n    iny\n    bne paday01\n    sec\n    iny\npaday01\n    dey\n    lda pip+1\n    adc #0\n    rts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngetting started with the PETTIL cross-assembler environment\n\nany linux bash prompt\n\npettil/tools/chkenv should verify that these are installed\n\nxa65\nruby\nvice\ngawk\nsed\n\n\n\n\n~/bin/disturb execute (all|{specified targets}) tests remotely\n~/bin/perturb execute (all|{specified targets}) tests locally\n~/bin/chkperturb update perturb.log from\n\n\n\n\n\nall\nremote\npettil\n~mkpet\n    pet\n    pet3\n    pet4\n    pet80\n    vic20\n    c64\n    c128\n    plus4\n    petpic - pet3 w/$9000 PicChip ROM, KOSMON\n~floppy disk images\n\n~build\n    ~housekeeping\n        clean\n        pristine\n    ~code\n    ~6502 cross assembler\n        pettil\n        perturb\n    ~media\n        mkd64\n        mkd64pettil\n        mkd64perturb\n~documentation\n    tiddlypettil\n    publish\ngroups of words\n    inner\n    outer\n    dictionary\n    compiler\n\n\n\n\n\nold dog chow\nenter\n    pla\n    tay\n    pla\n    sta z\n    iny\n    bne enter00\n    inc z\nenter00\n    inc pip\n    inc pip\n    lda #$FE\n    cmp pip\n    bcs enter01\n    inc pip\n    inc pip+1\nenter01\n    lda pip+1\n    pha\n    lda pip\n    pha\n    lda z\n    jmp jumpay\n\n\n\n\n\n/*\nenter\n    lda #1\n    jsr paday\n    sty z\n    tay\n\n    pla\n    sta pip\n    pla\n    sta pip+1\n    tya\n    pha\n    lda z\n    pha\n\n\n    dex\n    sty stackl,x\n    sta stackh,x\n    pla\n    tay\n    iny\n    pla\n    sta z\n    lda stackh,x\n    pha\n    lda stackl,x\n    pha\n    inx\n    lda z\n\npaday\n    sec                         ; A+1 = offset to be added to IP\n;    .byt $29                    ; AND # opcode to skip CLC\npadaync\n;    clc\n    ;\n    adc pip\n    tay\n    iny\n    bne paday01\n    sec\n    iny\npaday01\n    dey\n    lda pip+1\n    adc #0\n    rts\n\n    lda pip\n    clc\n    adc #2\n\n    ldy pip\n    iny\n    iny\n    cpy #$FE\n*/\n\n#10 (Stop on  exec 702f)  082 007\n702f  20 C7 10    JSR .dodoes    - A:70 X:30 Y:7B SP:f8 ..-B...C  132717255\n$702f) d;m 0 1f;m 40 4f;m 70 8f;m 1e0 1ff;z\n702f   .docompile:\n702f  20 C7 10    JSR .dodoes\n7032  03 0E       SLO ($0E,X)\n7034  DA          NOOP\n7035  6F C1 0F    RRA .fetch\n7038  03 70       SLO ($70,X)\n703a  63 11       RRA ($11,X)\n703c   ._create:\n703c  20 F9 10    JSR .enter\n703f  75 11       ADC $11,X\n7041  D6 0D       DEC $0D,X\n7043  04 6D       NOOP $6D\n7045  63 11       RRA ($11,X)\n7047   ._colon:\n7047  20 F9 10    JSR .enter\n704a  91 72       STA ($72),Y\n704c  F2          JAM\n704d  6F 75 11    RRA .plit\n7050  F9 10 04    SBC .zpbuf,Y\n\n7053  6D 83 72    ADC .storecsp\n7056  2D 71 B1    AND $B171\n7059  6B 9A       ARR #$9A\n705b  71 63       ADC ($63),Y\n705d  11 20       ORA (.stackl),Y\n705f  F9 10 9C    SBC $9C10,Y\n7062  72          JAM\n7063  7C 72 2D    NOOP $2D72,X\n0000  03 61 01 10  86 07 c1 06  f9 10 e8 61  01 00 00 00   caap.gAf.p.aa@@@\n0010  b6 06 05 02  01 00 58 6b  00 01 0d d0  0a 06 1b 6c   .feba@Xk@amPjf[l\n0040  aa aa aa aa  aa aa aa 08  88 01 22 01  f9 01 78 01   .......h.a\"a.axa\n0070  bb bb bb bb  bb bb bb 00  06 00 57 02  10 00 70 10   .......@f@Wbp@pp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 7b  70 00 13 a2   @@@@tf....l{p@s.\n01e0  65 e3 01 30  0d eb 10 57  03 04 06 06  20 57 03 57   e.a0m.pWcdff WcW\n01f0  03 cf 05 68  06 01 01 29  30 de 6e 28  6f 48 6f 01   cOehfaa)0.n(oHoa\n10c7  20 91 09    JSR .slip      - A:70 X:30 Y:7B SP:f6 ..-B...C  132717261\n$10c7)\n10c7   .dodoes:\n10c7  20 91 09    JSR .slip\n10ca  86 FF       STX .z\n10cc  BA          TSX\n10cd  BD 04 01    LDA $0104,X\n10d0  85 03       STA $03\n10d2  BD 03 01    LDA $0103,X\n10d5  85 02       STA .tos\n10d7  20 E5 0D    JSR .inctos\n10da  20 4E 12    JSR .topfas\n10dd  A5 8C       LDA $8C\n10df  9D 04 01    STA $0104,X\n10e2  A5 8B       LDA .pip\n10e4  9D 03 01    STA $0103,X\n10e7  A6 FF       LDX .z\n10e9   .toforth:\n10e9  20 EF 10    JSR .incrs\n10ec  4C 63 11    JMP .exit\n10ef   .incrs:\n10ef  8A          TXA\n10f0   .incrsb:\n10f0  BA          TSX\n10f1   .incrs01:\n10f1  E8          INX\n10f2  FE 02 01    INC $0102,X\n10f5  F0 FA       BEQ .incrs01\n10f7  AA          TAX\n10f8  60          RTS\n10f9   .enter:\n10f9  68          PLA\n0000  03 61 01 10  86 07 c1 06  f9 10 e8 61  01 00 00 00   caap.gAf.p.aa@@@\n0010  b6 06 05 02  01 00 58 6b  00 01 0d d0  0a 06 1b 6c   .feba@Xk@amPjf[l\n0040  aa aa aa aa  aa aa aa 08  88 01 22 01  f9 01 78 01   .......h.a\"a.axa\n0070  bb bb bb bb  bb bb bb 00  06 00 57 02  10 00 70 10   .......@f@Wbp@pp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 7b  70 00 13 a2   @@@@tf....l{p@s.\n01e0  65 e3 01 30  0d eb 10 57  03 04 06 06  20 57 03 57   e.a0m.pWcdff WcW\n01f0  03 cf 05 68  06 01 01 31  70 de 6e 28  6f 48 6f 01   cOehfaa1p.n(oHoa\n0991  CA          DEX            - A:70 X:30 Y:7B SP:f4 ..-B...C  132717267\n$0991) m 7040\n7040  11 d6 0d 04  6d 63 11 20  f9 10 91 72  f2 6f 75 11   qVmdmcq .p.r.ouq\n7050  f9 10 04 6d  83 72 2d 71  b1 6b 9a 71  63 11 20 f9   .pdm.r-q.k.qcq .\n7060  10 9c 72 7c  72 2d 71 af  6b ee 6a c1  0f 85 09 88   p.r|r-q.k.jAo.i.\n7070  11 04 b1 6b  91 71 63 11  20 f9 10 2f  70 63 11 5e   qd.k.qcq .p/pcq^\n7080  70 63 11 20  f9 10 da 6f  2f 70 08 10  ce 6c 9c 6f   pcq .pZo/phpNl.o\n7090  ce 6c 9c 6f  63 11 20 f9  10 7c 07 de  6a 06 0e 63   Nl.ocq .p|g.jfnc\n70a0  11 20 f9 10  da 6f 91 72  2f 70 63 11  7c 07 c1 0f   q .pZo.r/pcq|gAo\n70b0  de 6a c1 0f  ca 0a 88 11  04 96 70 75  11 c7 10 b6   .jAoJj.qd.puqGp.\n70c0  6f 63 11 20  ea 06 00 c1  34 62 c2 b4  35 63 c3 36   ocq .f@A4bB.5cC6\n$70d0) d 1163 1163\n1163   .exit:\n1163  68          PLA\n1164  A8          TAY\n$1165)\n\ncaller\n    jsr slip\n    pla\n    tay\n    pla\n    sta z\n    pla\n    sta tos\n    pla\n    sta tos+1\n    lda z\n    pha\n    tya\n    pha\n    jmp oneplus\n\n\nqpages\n    ldy pip\n    iny\n    beq plusparms\n    rts\n\ntoforth\n    pla\n    tay\n    pla\nchkpage\n    cpy #$FF\n    adc #0\n    iny\n    jmp jumpay\n\npage\n    inc pip+1\n    ldy #0\n    beq exit03      ; bra\n\n\n             bits   range (hex)         range (decimal)\nbit             1   0..1                0..1\nnybble          4   0..F                0..15\nbyte            8   00..FF              0..255\nword           16   0000..FFFF          0..65535\ndouble         32   00000000..FFFFFFFF  0..4294967295\n\nthere are 256 bytes on a page\nthere are 256 pages in the address space\non the PET, the lower half of address space is 32K maximum RAM\n\n\nproducts\n    t-shirts\n    mugs\n    tapes PET VIC-20 C=64\n        studio\n        dir\n        games\n        business\n        science\n        math\n        tools\n        graphics\n    carts VIC-20 C=64\n    ROMset PET 8K core/loader 4.0 ROM only\n    ROMset PET 12K core/loader Upgrade ROM only\n\nCartridge notes\n16K cart,\n    core\n    name\n    number\n    menu\n    ? interpret\n    ? editor\n\nsymbol table and STUDIO stored separately, on STUDIO tape\nload STUDIO [requires symbols]\nminimal interpreter?\n    no editor\n    no compiler (no defining words, read-only symbol table)\n    no assembler\n    [requires symbols]\nload from an indexed tape (the `dir` idea)\n    `dir` repeats tape menu\n    `${PROGRAM_NAME}` does `forget` to just past `dir` and loads from tape\n    fast-forward, rewind transport control fully integrated\n\nWhat is PETTIL?\n\n\nPETTIL is a little weird and unlike most other programming languages.  It's a\nvery interactive programming environment more than capable of handline the everyday computer chores of editing text, reading and writing cassette tapes, and interfacing with the user through the familiar and intuitive PET command line.\n\nPETTIL is Forth.\nPETTIL adheres as closely as it can to the Forth-83 standard\nPETTIL is a register machine\nPETTIL has virtual memory on cassette tape\nPETTIL is a conversational language\nPETTIL connects high-level abstraction and low-level bare-metal\nPETTIL provides access to every facet of the PET\nPETTIL is a large collection of small programs\nPETTIL programs are easy to run, just type the name\n\nIt presents to the programmer as a large collection of short programs, each of\nwhich can be invoked by typing its name.\n\n(Pick your three favorite things about PETTIL and write them on a card.\nShow how the cards\ncan be processed by existing software as data on the computer, graphed on the screen, saved to tape)\n\n\nOn the web and on phones, programs are called apps, but in Forth, programs are\ncalled words.  You don't write a program in Forth.  You define a new word in the dictionary.  This word definitions in a dictionary is a pretty solid metaphor.  Forth even groups words in `vocabularies` which we'll look at later.\n\n\n\nThere are no programs in Forth\n\nA Forth word is very much like a word in the dictionary. consists of a name, which is what you type to make it go, and the\ndefinition\n\nParts of a word\nLink Field Address -- used to connect the symbol, or name of the word, to its\nexecutable code definition\n\n\n\n[ `(?:)` lo]                    ; CFA Code Field Address\n[ `(?:)` hi]\n[ cfa-true lo]                  ; PFA Parameter Field Address\n[ cfa-true hi]\n[ cfa-false lo]\n[ cfa-false hi]\n\n\n--> to attic\n;--------------------------------------------------------------\n#if 0\nname=PADJUST\nstack=( -- )\ntags=nosymbol\n!!!Subroutine\nAllows primitives to adjust `IP` when there are inline arguments,\nto properly cross a page boundary.\n\n#endif\npadjust\n    sec                         ; A+1 = offset to be added to IP\npadjustb\n    adc pip\n    tay\n    bcs qadjust02               ; crossed a page boundary?\n    cpy #$FF\n    bne qadjust02\n    iny\nqadjust02\n    lda pip+1\n    adc #0\n    sta pip+1\n    sty pip\n    rts                                 ; ~ok\n\n\n\n/*\nstart\n    DS          howmany\n                from\n    RS          dofill+2\n                blank+2\n    ip          1a8a in `(cold)`\n\nnear end of (does>)\n    DS          blank+3\n                howmany\n                from\n    RS          dofill+3\n                1a8c *\n    ip          dofill+3\n\nexit...                         c@ fill ;\n\n    lda #1\n    jsr padjust                 ; where do we come from?\n    jsr slip\n    stx z\n    tsx\n    ldy 0104,x\n    sty tos+1\n    ldy 0103,x\n    iny\n    sty tos                     ; pushed blank+3\n    bne +\n    inc tos+1\n+\n    ldy pip+1\n    sty 0104,x\n    ldy pip\n    iny\n    sty 0103,x                  ; straight up copy IP to RS\n    bne +\n    inc 0104,x\n+\n\n    inc 0101,x                  ; incrs\n    bne +\n    inc 0102,x\n+\n    ldx z\n    jmp exit\n***\n    dex\n    pla\n    tay\n    pla\n    jsr incay\n    sta stackh,x\n    sty stackl,x\n    pla\n    tay\n    pla\n    jsr incay\n    sta tos+1\n    sty tos\n\n    lda pip+1\n    ldy pip\n    iny\n    jsr incay\n    pha\n    tya\n    pha\n    jmp exit\n\n\n*/\n\nincay\n    iny\n    bne incay01\n    clc\n    adc #1\nincay01\n    rts\n\n\n\n\n066c   .user0base\n066e   .user0filename\n0670   .user0sanum\n0672   .user0drvnum\n0674   .usersp0\n0676   .userrp0\n0678   .userirq\n067a   .userbrk\n067c   .usernmi\n067e   .userstartup\n0680   .userwarning\n0682   .userdp\n0684   .userfence\n0686   .usersymtab\n0688   .userbase\n068a   .userfilename\n068c   .usersanum\n068e   .userdrvnum\n0690   .uservmbuf\n0692   .usernumblk\n0694   .userscr\n0696   .userprev\n0698   .userblk\n069a   .userin\n069b   .userlin\n069c   .userspan\n069d   .usereoi\n069e   .usernumline\n06a0   .usernumout\n06a2   .userediting\n06a4   .userdpl\n06a6   .userhld\n06a8   .usercursor\n06ae   .userstudio\n06b0   .usertdp\n06b2   .usernumvoc\n06b4   .uservocabs\n06be   .usercsp\n06c0   .usercurrent\n06c2   .userredefined\n06c4   .usernewest\n\n06c6   .userstate\n06c8   .userpwrap\n06cc   .userpaste\n06ce   .usersymnew\n06d0   .usersymtail\n06d2   .userbloom\n06da   .userpassbits\n06de   .utend\n06e0   .zpmode\n\naddressing modes\nstart with A\n    no INC A\n    no PER U\n    no AND E\n\na word about PETTIL's Z register and software patents\n\n\nbig endian vs little endian\n\n3    pla\n2    tay\n2    iny\n2    tya\n4    pha\n\n2    txa\n2    tsx\n5    inc 0101,x\n2    tax\n\ncalls preceded by `nop` at $xxFC\n\n    jsr enter\n    jsr dodoes\n\n10bf  CA          DEX            - A:81 X:2E Y:88 SP:f4 N.-.....   52349084\n\n81b8 0230\n\n\nstart\n    DS          howmany\n                from\n    RS          dofill+2\n                blank+2\n    ip          1a8a in `(cold)`\n\nnear end of (does>)\n    DS          blank+3\n                howmany\n                from\n    RS          dofill+3\n                1a8c *\n    ip          dofill+3\n\n                                jmp exit\n\nafter (does>)\n    DS          blank+3\n                howmany\n                from\n    RS          1a8c *\n    ip          dofill+3\n\n    jsr enter\n        caller\n\n\ndodoes\n    jsr slip\n    stx z\n    clc\n    lda $0103,x\n    adc #1\n    sta tos\n    lda $0104,x\n    adc #0\n    sta tos+1\n\n    jsr incrs\n\nincrs\n    txa\n    tsx\n    inc $0103,x\n    bne incrs01\n    inc $0104,x\nincrs01\n    tax\n    rts\n\n\n    jmp exit\n\n    ldx z\n    bne exit\n;---\n\n\n    pla\n    tay\n    iny\n    pla\n\n\ndodoes\n    dex\n    pla\n    sta stackl,x\n    pla\n    sta stackh,x\n    jsr oneplunders\n    pla\n    sta tos\n    pla\n    sta tos+1\n    jsr inctos\n    ;push PIP + 2\n    ldy pip\n    iny\n    iny\n    bne enter03                 ;    bra    ~orly?\n\n\n\n0000  00 00 30 02  78 07 fe 7f  04 40 05 50  06 60 07 70\n0010  08 80 09 90  0a a0 0b b0  00 01 0d d0  0e e0 0f f0\n0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n0040  aa aa aa aa  aa aa aa aa  aa aa aa aa  fe 0c b8 01\n0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb\n0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb\n0070  bb bb bb bb  bb bb bb bb  bb bb bb bb  65 20 81 10\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 8a  1a 00 03 b2\n0090  09 1b 55 06  ff b3 00 ff  00 44 01 ff  00 00 00 00\n01d0  ff ff ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff\n01e0  ff ff ff ff  ff ff 57 44  57 e4 3c 44  36 3b 1b 57\n01f0  e4 0c f4 d6  13\n\n0bb6 .dofill   bb7 -> ip\n0bc3 .blank    c@(bc4) = ' '\n\n                         b6 0b c3  0b 81 b7 00  01 01 1d fd\n0200  8a 00 4e 00  52 54 55 52  42 2d 56 2e  30 22 2c 39\n0210  00 2c 00 00  00 00 00 00  00 00 00 00  00 00 00 00\n0220  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00\n0230  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00\n0240  ff ff ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff\n0660  01 88 84 1f  85 1e 20 c5  04 4c 66 06  0a 00 8d 17\n0670  00 00 01 00  31 00 fe 01  55 e4 78 d4  00 00 00 66\n0680  90 10 54 1a  54 1a 00 00  cc cc cc cc  cc cc cc cc\n0690  cc cc cc cc  cc cc cc cc  cc cc cc cc  cc cc cc cc\n06a0  cc cc cc cc  cc cc cc cc  cc cc cc cc  cc cc cc cc\n06b0  cc cc cc cc  cc cc cc cc  cc cc cc cc  cc cc cc cc\n06c0  cc cc cc cc  cc cc cc cc  cc cc cc cc  cc cc cc cc\n06d0  cc cc cc cc  cc cc cc cc  cc cc cc cc  cc cc cc cc\n06e0  01 a0 0a 2c  a0 08 2c a0  06 2c a0 04  2c a0 02 b5\n\n\n0b80  20 8c 0b 20  8c 0b a9 00  48 a9 85 48  b5 20 d0 02\n0b90  d6 50 d6 20  60 20 ea 06  a9 0f 48 a9  9c 48 18 a5\n0ba0  02 c6 07 10  05 38 a4 06  f0 09 88 91  04 d0 fb e6\n0bb0  05 90 ee 60  .dofill  c@     fill  ;\n                      20 bf 10 c1  0f 95 0b 3e  11 20 b4 0b\n0bc0  00 .blank   ' '\n            20 b4 0b  20 20 bf 10  c1 0f de 08  f0 0a be 12\n0bd0  18 09 c1 0f  29 12 a9 0a  6d 11 09 8d  09 80 0a 6d\n0be0  11 ec ec 08  e1 0d 3e 11  20 c5 0b 00  20 c5 0b 20\n0bf0  38 29 18 20  ea 06 86 ff  a9 0f 48 a9  9c 48 b0 2d\n0c00  a6 03 18 8a  65 05 85 05  18 8a 65 07  85 07 e8 a4\n\n\n1080  05 03 f0 06  20 60 12 a8  d0 e6 20 a9  0f 4c db 11\n1090  20 d8 10 b6  19 df 11 04  3f 45 52 52  48 0a 1d 0e\n10a0  0d 04 20 d8  10 e7 13 fc  0a 3e 11 38  65 8b a8 b0\n10b0  05 c0 ff d0  01 c8 a5 8c  69 00 85 8c  84 8b 60 .dodoes\n                                                         ca\n10c0  68 95 20 68  95 50 20 79  0b 68 85 02  68 85 03 20\n10d0  e7 0d a4 8b  c8 c8 d0 1a  68 a8 c8 68  85 ff e6 8b\n10e0  e6 8b a9 fe  c5 8b b0 04  e6 8b e6 8c  a5 8c 48 a5\n10f0  8b 48 a5 ff  4c 41 11 38  a5 80 e5 82  85 04 a5 81\n1100  e5 83 49 80  a8 18 a5 04  65 02 98 65  03 08 18 a5\n\n\n1a80  76 07 8e 0f  fb 11 30 02  b8 81 blank\n                                         c1 0b  30 0a 5e 0e\n1a90  fb 11 0a 20  c9 00 cd 09  7b 09 cd 09  18 09 4c 09\n1aa0  c3 0f 45 09  15 09 2a 6b  f2 0b 9d 0f  b6 1a 2a 1a\n1ab0  07 1a 07 66  0d 04 20 d8  10 22 6b 18  0a bd 0b 44\n1ac0  6b 86 07 c3  0f 2a 0a 4f  6b cc 0a 6d  11 07 ff 06\n1ad0  0a c1 0d af  6b de 09 4f  6b 7a 6b 03  4f 6b 73 0a\n1ae0  6d 11 e6 1a  6b eb 1a b4  0f 3e 11 00  25 71 c5 25\n1af0  71 b0 75 07  20 d8 10 2a  1a 4b e0 ee  0d 52 11 ea\n1b00  f9 13 58 11  4d 95 0b 3e  11 20 20 1b  20 12 1b 6c\n\n\n;--------------------------------------------------------------\n#if 0\nname=ALLCAPS\nstack=\ntags=\n\n#endif\n;#include \"align.i65\"\n;--------------------------------------------------------------\nexit\n    pla\n    tay\n    pla\njumpay\n    sta pip+1\nexit03\n    sty pip\n    jmp nexto\n\n;--------------------------------------------------------------\n\ntopfas\n    add 2 to IP\n    retrieve following byte in A\n    set Y to zero\n\n\n\n\n\ntucknext\n    stx z\n    pla\n    pha\n    pha\n    pha\n    tsx\n    lda $0104,x\n    sta $0102,x\n    lda #>next\n    sta $0104,x\n    lda #<next\n    sta $0103,x\n    rts\n\ntucknext\n    stx z\n    pla\n    tax\n    pla\n    tay\n    lda #>(next-11)\n    pha\n    lda #<(next-1)\n    pha\n    tya\n    pha\n\nlist\n\n 1 u=1:mx=320-9:b=2:h=8\n 2 c$=\"ETGB.HYG\"\n 3 b$=\"R RERTRURArVrJrG\"\n 4 s$=\"r\n        \"\n 10 deffns(x)=int((u+sin(x))*mx/b)\n 20 deffnm(x)=x-h*t%+u\n 30 deffnd(x)=(x-h*t%)*b+u\n 100 fori=0to.*7step./40\n 110 rem x=fns(i):t%=x/h:printspc(t%)mid\n$(c$,fnm(x),u)\n 120 x%=fns(i):t%=x%/h:printleft$(s$,t%+\nu)mid$(b$,fnd(x%),b)\n 130 next\nready.\n\n\n 1 u=1:mx=320\n 10 deffns(x)=(u+sin(x))*mx/b\n 100 fori=0to.*2step./70\n 110 x=fns(i):printspc(x/8)\".\"\n 120 next\nready.\nrun\n\n?division by zero error in  110\nready.\n\n\n\n\n\n\n\n\n\n\n\n\n\nm 0 9f;m 1d0 24f;m 660\n\nCompiler may insert junk byte before or after `jsr toforth`\n`xt,` should could take care of this\n\nplits\n    jsr slip\n    jsr topfas\n    sta n\nplits01\n    dex\n    jsr plusparms\n    sta stackl,x\n    jsr plusparms\n    sta stackh,x\n    dec n\n    bne plits01\nsetip                           ; useful entry point, pass in Y=offset\n    jsr slide\n    jsr qpages\n    jmp next\n\n\nplit\n    sec\n    tay\n    .byt $2C\nclit\n    jsr topfas\n    jsr\n    jmp push0a\n\n    clc\n    lda #0\n    beq lit01                   ; bra\n\nplit\n    sec                         ; add 2 to IP\n    ldy #3\n    lda (pip),y\nlit01\n    tay\n    jsr slip\n    sty tos+1\n    ldy #2\n    lda (pip),y\n    sta tos\n    .byt $29                    ; AND # opcode to skip CLC\nbump\n    clc                         ; add 1 to IP\n    lda #3                      ; ip+3 or ip+4 depending on Carry\n    bne branch02                ; bra\n\n\n\n\n120e   .dlit:\n120e  20 8F 09    JSR .slip\n1211  CA          DEX\n1212  20 64 12    JSR .topfas\n1215  95 20       STA .stackl,X\n1217  C8          INY\n1218  B1 8B       LDA (.pip),Y\n121a  95 50       STA .stackh,X\n121c  C8          INY\n121d  B1 8B       LDA (.pip),Y\n121f  85 02       STA .tos\n1221  C8          INY\n1222  B1 8B       LDA (.pip),Y\n1224  85 03       STA $03\n1226  98          TYA\n1227  D0 8B       BNE .pad\n1229   .i:\n1229  A4 81       LDY $81\n122b  A5 80       LDA .zi\n122d   .pushya:\n122d  48          PHA\n122e  CA          DEX\n122f  A5 03       LDA $03\n1231  95 50       STA .stackh,X\n1233  A5 02       LDA .tos\n1235  95 20       STA .stackl,X\n1237  68          PLA\n0000  00 00 01 10  74 07 fe 7f  04 40 05 50  06 60 07 70   @@aptg..d@ePf`gp\n0010  08 80 09 90  0a a0 0b b0  00 01 0d d0  0e e0 0f f0   h.i.j k.@amPn o.\n0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n0040  aa aa aa aa  aa aa aa 73  a5 3d 0d b2  fe 0c 00 01   .......s.=m..l@a\n0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n0070  bb bb bb bb  bb bb bb 18  47 22 47 1a  65 20 66 10   .......xG\"Gze fp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c 84  1a 00 03 db   @@@@tf....l.z@c.\n01e0  ff ff ff ff  ff ff 57 44  cd b7 bb 44  37 3b 1b 57   ......WDM..D7;[W\n01f0  e4 61 a0 0c  21 39 0c 74  7e 81 b7 00  01 01 1d fd   .a l!9lt~..@aa].\n098f  CA          DEX            - A:01 X:30 Y:10 SP:f6 N.-....C   17735184\n$098f) m 1a80\n1a80  72 07 a1 0f  0e 12 30 02  b8 81 bd 0b  2c 0a 66 0e   rg.onr0b...k,jfn\n1a90  0e 12 0a 20  c9 00 c9 09  77 09 c9 09  14 09 48 09   nrj I@IiwiIitiHi\n1aa0  cc 0f 41 09  11 09 2a 6b  ee 0b b0 0f  b6 1a 2a 1a   LoAiqi*k.k.o.z*z\n1ab0  07 1a 86 00  0d 04 20 fe  10 22 6b 14  0a b9 0b 44   gz.@md .p\"ktj.kD\n1ac0  6b 82 07 cc  0f 26 0a 4f  6b c8 0a 9e  11 07 ff 06   k.gLo&jOkHj.qg.f\n1ad0  0a bd 0d af  6b da 09 4f  6b 7a 6b 03  4f 6b 6f 0a   j.m.kZiOkzkcOkoj\n1ae0  9e 11 e6 1a  6b eb 1a c7  0f 67 11 00  25 71 c5 25   .q.zk.zGogq@%qE%\n1af0  71 b0 75 07  20 fe 10 2a  1a 4b e0 f6  0d 7c 11 ea   q.ug .p*zK .m|q.\n1b00  fd 13 82 11  4d 91 0b 67  11 20 20 1b  20 12 1b 6c   .s.qM.kgq  [ r[l\n$1b10)\n`plants` and its ilk are rubbish, consider deletion\n\nplants12\n    ldy #12\n    .byt $2c                    ; BIT abs opcode\n    ; fall through\nplants10\n    ldy #10\n    .byt $2c                    ; BIT abs opcode\n    ; fall through\nplants8\n    ldy #8\n    .byt $2c                    ; BIT abs opcode\n    ; fall through\nplants6\n    ldy #6\n    .byt $2c                    ; BIT abs opcode\n    ; fall through\nplants4\n    ldy #4\n    .byt $2c                    ; BIT abs opcode\n    ; fall through\nplants2\n    ldy #2\n    ; fall through\nplants\n    dex\n    lda n-1,y\n    sta stackh,x\n    lda n-2,y\n    sta stackl,x\n    dey\n    dey\n    bne plants\n    rts\n\n\n\n1254  48          PHA\n1255  CA          DEX\n1256  A5 03       LDA $03\n1258  95 50       STA .stackh,X\n125a  A5 02       LDA .tos\n125c  95 20       STA .stackl,X\n125e  68          PLA\n0000  00 00 01 10  95 07 fe 7f  04 40 05 50  06 60 07 70\n0010  08 80 09 90  0a a0 0b b0  00 01 0d d0  0e e0 0f f0\n0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa\n0040  aa aa aa aa  aa aa aa aa  aa aa aa aa  fe 39 00 01\n0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb\n0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb\n0070  bb bb bb bb  bb bb bb bb  bb bb bb bb  65 20 66 10\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c b4  1a 00 12 f9\n01e0  ff ff ff ff  ff ff ff 44  cd b7 bb 44  36 68 1b 57\n01f0  e4 33 ce 0f  21 60 0c 95  7e 81 b7 00  01 01 1d fd\n128b  E6 8B       INC .pip       - A:01 X:30 Y:10 SP:f6 N.-....C\n\n                      pcold\n1a80  f3 a6 ff 60  20 65 1a 20  98 11 29 10  24 1b 5a 1a\n1a90  2b 1a ae 11  36 1b 87 07  c8 0f 5a 1a  37 1a ae 11\n1aa0  37 20 ea 09  80 09 62 09  f3 0f 1c 0b  13 0c 1c 0b\n1ab0  93 07 c8 0f  dlit\n                      35 12 30 02  b8 81 e1 0b  4d 0a 8d 0e\n1ac0  35 12 37 20  c9 00 ea 09  98 09 ea 09  35 09 69 09\n1ad0  f3 0f 62 09  32 09 2a 6b  15 0c d7 0f  e6 1a 5a 1a\n1ae0  37 1a 07 66  0d 04 20 25  11 22 6b 35  0a dd 0b 44\n1af0  6b a3 07 f3  0f 47 0a 4f  6b e9 0a c5  11 07 20 07\n1b00  0a e4 0d af  6b fb 09 4f  6b 7a 6b 03  4f 6b 90 0a\n$1b10)\nrts2rti\n    txa\n    tsx\n    inc $0102,x\n    tax\n    rts\n\n6600  20 24 11 10  68 0d 04 20  24 11 d8 10  20 13 11 11    $qphmd $qXp sqq\n6610  11 11 11 11  11 11 11 11  11 11 11 11  11 11 11 9d   qqqqqqqqqqqqqqq.\n6620  9d 9d 9d 9d  12 52 41 4d  20 9d 9d 9d  9d a4 07 f4   ....rRAM .....g.\n6630  0f 4d 12 de  ad be ef 3c  0b 51 0a 33  09 a0 0c 63   oMr....<kQj3i lc\n6640  09 79 0a c4  11 0b 99 09  5b 0b 2d 13  d3 11 e4 d8   iyjDqk.i[k-sSq.X\n6650  0f a0 0c 2d  13 d8 10 07  92 49 4e 49  54 0d 0d 0d   o l-sXpg.INITmmm\n6660  04 ea ea ea  ea ea ea ea  ea ea ea ea  ea ea ea ea   d...............\n6670  ea ea ea ea  ea ea ea ea  ea ea ea ea  ea ea ea ea   ................\n6680  ea ea ea ea  ea ea ea ea  ea ea ea ea  ea ea ea ea   ................\n$6690)\n1. set a breakpoint NEXT when we're near the end of a page\n@ram:8b > $FC\n2. have a single point of exit\n\nexit\n    lda #2          ; [2]\nexit04\n    clc             ; [2]\nexit05\n    sta pip          ; [3]       ; entry A is added to IP\n    pla             ; [4]\n    adc pip          ; [3]\n    tay             ; [2]\n    pla             ; [4]\nexit01\n    adc #0          ; [2] = [12]\n\nexit\n    pla\n\n    cmp #$FF\n    adc #0\n    tay                         ;[5]\n    pla\n\n\n    clc\n    lda ip\n    adc #2\n    sta ip\n    bne enter01\n    inc ip+1                    ;[11]\n\nenter\n    inc ip\n    inc ip\n    bne enter01\n    inc ip+1                    ;[8]\nenter01\n    lda ip+1\n    pha\n    lda ip\n    pha\n\njumpay\n    sta pip+1        ; [3]\nexit03\n    sty pip          ; [3]\n    jmp nexto       ; [3]\n\n\n\n\nIn Forth, 'word' is an overloaded word.  These are the different meanings of 'word,' depending on context.\n\nIn FIG Forth, words look like this\n\nbranchNFA\n[bit7|6] [\"B\"] [\"R\"] [\"A\"] [\"N\"] [\"C\"] [bit7|\"H\"]\nbranchLFA\n[otherNFA lo] [otherNFA hi]\n[branch lo] [branch hi]\nbranch\n    cpx #$11\n    bcc\n;~~~\nL04e2 .byt 6 | bit7\n .asc \"BRANC\",\"H\"|bit7\n .word L049b\nBRANCH .word *+2\n cpx #$11\n bcc $04c6\n lda $e812\n cmp #$ef\n beq $04d7\n clc\n lda (ip),y\n adc ip\n pha\n iny\n lda (ip),y\n adc ip+1\n sta ip+1\n pla\n sta ip\n jmp NEXT2\n\n;~~~\nL050b .byt 7 | bit7\n .asc \"0BRANC\",\"H\"|bit7\n .word L04e2\nZBRAN .word *+2\n inx\n inx\n lda $fe,x\n ora $ff,x\n beq $04ed\n clc\n lda ip\n adc #$02\n sta ip\n bcc $052a\n inc ip+1\n JMP NEXT\n\n\n\nin PETTIL, words are laid out in two different areas.\n\n\nword - a program in the dictionary\na word's address in the symbol table is the NFA (Name Field Address)\n    NFA -->    name - symbol table entry\n\n[CFA lo] [CFA hi] [imm/voc/IVS flags/length] [\"N\"] [\"A\"] [\"M\"] [\"E\"] {vocab}\n\n\nthe address of a word's code in the dictionary is the CFA (Code Field Address)\n    CFA -->    definition - the code itself\n\nWORD - Forth-83, Forth-79, FIG -- replaced by NAME in PETTIL\n\nword - 16 bits\n\nwords with inline parameters leave via `nexto`\n\n\nzpnext\n    inc pip\n    inc pip\n;ip = *+1\n    jmp ($cafe)\n\n;--------------------------------------------------------------\n; [PLITS] <len> [val0] [val1] [val2] [val3] [val(len)]\nplits\n    jsr slip\n    ldy #2\n    lda (pip),y\n    sta n\nplits01\n    dex\n    iny\n    lda (pip),y\n    sta stackl,x\n    iny\n    lda (pip),y\n    sta stackh,x\n    dec n\n    bne plits01\nsetip\n    jsr slide\n    tya\n\n\npad\n    sec\nbranch02\n    adc pip\n    ;clc\n    tay\n    iny\n    bne pad02\n    sec\npad02\n    lda pip+1\n    adc #0\n    bcc jumpay\n\n\n\n\n    jmp pad\n\n;--------------------------------------------------------------\npquerycolon\n    ldy #3\n    lda tos\n    ora tos+1\n    bne pquerycolon01\n    ldy #5\npquerycolon01\n    lda (pip),y\n    pha\n    dey\n    lda (pip),y\n    pha\n    lda #3\n    jsr padjust\n    bne exec01                  ; bra\n\n;--------------------------------------------------------------\nqerror\n    lda tos\n    ora tos+1\n    beq qerror01\n    ldy #2\n    lda (pip),y\n    tay\n    bne error                   ; bra\nqerror01\n    jsr slide\n    jmp bump\n\n;--------------------------------------------------------------\n_pdq\n    jsr enter\n#include \"page.i65\"\n    .word rfrom\n#include \"page.i65\"\n    .word twoplus\n#include \"page.i65\"\n    .word count\n#include \"page.i65\"\n    .word twodup\n#include \"page.i65\"\n    .word type\n#include \"pass.i65\"\n    .word *+2\n    lda stackl,x\n    sta pip\n    lda stackh,x\n    sta pip+1\n    inx\n    ldy tos\n    dey\n    jmp setip\n\n;--------------------------------------------------------------\npadjust\n    sec                         ; A+1 = offset to be added to IP\n    adc pip\n    sta pip\n    bcs qadjust02               ; crossed a page boundary?\n    ;clc\n    adc #$03                    ; xxFD xxFE xxFF will set carry flag\n    bne qadjust01               ; was it $FD?  avoid `jmp ($xxFF)`\n    inc pip                     ; bump `pip` to xxFE when it is xxFD\nqadjust01\n    bcc qadjust03               ; about to cross a page boundary?\nqadjust02\n    inc pip+1                   ; move `pip` to next page\nqadjust03\n    rts\n\n;--------------------------------------------------------------\nenter\n    pla\n    tay\n    pla\n    sta z\nenter01\n    lda pip+1\n    pha\n    lda pip\n    pha\n    cpy #$FD\n    iny\n    lda z\n    bcc enter00\n    ldy #0\n    adc #0\nenter00\n    bcc jumpay\n\n;--------------------------------------------------------------\nexit\n    lda #2\nexit04\n    clc\nexit05\n    sta pip\n    pla\n    adc pip\n    tay\n    pla\nexit01\n    adc #0\n\n;--------------------------------------------------------------\njumpay\n    sta pip+1\nexit03\n    sty pip\n    jmp nexto\n\npage\n    inc pip+1\n    ldy #0\n    beq exit03                  ; bra\n\n;--------------------------------------------------------------\nplit\n    sec\n    ldy #3\n    lda (pip),y\nlit01\n    tay\n    jsr slip\n    sty tos+1\n    ldy #2\n    lda (pip),y\n    sta tos\n    .byt $29                    ; AND # opcode\nbump\n    clc\n    lda #3\n    bne branch02                ; bra\n\n;--------------------------------------------------------------\nbranch\n    ldy #2\n    lda (pip),y\n    bpl pad\n    dec pip+1\npad\n    sec\nbranch02\n    adc pip\n    tay\n    iny\n    bne branch05\n    inc pip+1\n    .byt $29\nbranch05\n    tay\n    lda pip+1\n    adc #0\n    bcc jumpay\n\n;--------------------------------------------------------------\npdo\n    clc\n    rol z\n    ldy #2\n    lda (pip),y\n    clc\n    adc pip\n    tay\n    dey\n    lda pip+1\n    adc #0\n    pha\n    tya\n    pha\n    lsr z\n    bcc pdo01\n    jsr peq\n    bne pdo01\n    inx\n    jsr slide\n    jmp exit\npdo01\n    jsr harvests2\n    ldy #3\npdo02\n    lda zi,y\n    pha\n    lda tos,y\n    sta zi,y\n    dey\n    bpl pdo02\npdo03\n    jsr slide\n    bne bump                    ; bra\n\n;--------------------------------------------------------------\ndlit\n    ldy #5\ndlit01\n    lda (pip),y\n    pha\n    dey\n    bne dlit01\n    pla\n    lda #3\n    jsr padjust\n    jmp tworfrom\n\n;--------------------------------------------------------------\npquerycolon\n    ldy #3\n    lda tos\n    ora tos+1\n    bne pquerycolon01           ; true?\n    ldy #5                      ; false.\npquerycolon01\n    lda (pip),y\n    pha\n    dey\n    lda (pip),y\n    pha\n    lda #3\n    jsr padjust\n    bne exec01                  ; bra\n\n;--------------------------------------------------------------\ndocursor\n    ldy #2\n    lda (pip),y\n    sta PNTR                            ; horizontal cursor position\n    iny\n    lda (pip),y\n    sta TBLX                            ; physical line of cursor\n    txa\n    pha\n    jsr PUTCURSOR\n    pla\n    tax\n    lda #3\n    jmp pad\n\n;--------------------------------------------------------------\ntozp\n    ldy #2\n    lda (pip),y\n    tay\ntozp01\n    lda tos+1\n    sta 1,y\n    lda tos\n    sta 0,y\n    jmp bump\n\n;--------------------------------------------------------------\nzpfrom\n    ldy #2\n    lda (pip),y\nzpfrom01\n    tay\nzpfrom02\n    jsr slip\n    lda 1,y\n    sta tos+1\n    lda 0,y\n    sta tos\n    jmp bump\n\n;--------------------------------------------------------------\nzpex\n    ldy #2\n    lda (pip),y\n    tay\n    lda 1,y\n    pha\n    lda 0,y\n    pha\n    lda tos+1\n    sta 1,y\n    lda tos\n    sta 0,y\n    lda #1\n    jsr padjust\n    jmp rfrom\n\n;--------------------------------------------------------------\npagemargin\n    ldy #1\n    inc pip                      ; unsafe, but only used in pettil-compiler\n    lda userdp\n    cmp (pip),y\n    bcs _nextpage\npagemargin01\n    jmp next\n\n_nextpage\n    jsr enter\n#include \"pass.i65\"\n    .word plit\n    .word page\n#include \"page.i65\"\n    .word here\n#include \"page.i65\"\n    .word store\n#include \"pass.i65\"\n    .word plit\n    .word $100\n#include \"page.i65\"\n    .word here\n#include \"page.i65\"\n    .word lsb\n#include \"page.i65\"\n    .word minus\n#include \"page.i65\"\n    .word _allot\n#include \"pass.i65\"\n    .word exit\n\n;--------------------------------------------------------------\nsymplus\n    ldy #2\n    lda (pip),y\n    jsr sympluss\n    jmp bump\n\nsympluss\n    sta R0L+2*ACC\n    jsr symlens\n    adc R0L+2*ACC\n    adc R0L+2*N3\n    sta R0L+2*N3\n    bcc symplus01\n    inc R0L+2*N3+1\nsymplus01\n    rts\n\n;--------------------------------------------------------------\nflagme\n    ldy #2\n    lda (pip),y\n    pha\n    and R0L+2*N6+1\n    beq flagme01                ; blergh! `not found`\n    iny                         ; ldy #3\n    jmp error\nflagme01\n    pla\n    asl\n    asl\n    asl\n    asl\n    ora R0L+2*N6+1\n    sta R0L+2*N6+1\n    jmp bump\n\n\n\n\n\n0 sys40960:!re:goto100\n1 x1=0:y1=3:x2=0:y2=18:m=fnm(y):return\n100 n=1:x0=0:y0=0:c=58:!sf\n110 def fnm(y)=int((y2-y1)/2-y+y1)\n9999 !co\n120fory=0tofnm(0):?fnm(y);:next\n\n0000  00 00 01 10  02 20 03 30  04 40 05 50  06 60 07 70   @@apb c0d@ePf`gp\n0010  08 80 09 90  0a a0 0b b0  00 01 0d d0  0e e0 0f f0   h.i.j k.@amPn o.\n0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n0040  aa aa aa aa  aa aa aa aa  aa aa 5b 00  01 00 5b 01   ..........[@a@[a\n0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................\n0070  bb bb bb bb  bb bb bb bb  bb bb 03 00  00 00 03 10   ..........c@@@cp\n0080  00 00 00 00  74 06 e6 8b  e6 8b 6c fe  46 00 03 5c   @@@@tf....l.F@c\\\n0090  55 e4 55 06  ff b3 40 ff  00 ee 00 ff  00 00 00 00   U.Uf..@.@.@.@@@@\n0170  ff ff ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff   ................\n0180  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   @@@@@@@@@@@@@@@@\n0190  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   @@@@@@@@@@@@@@@@\n01a0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   @@@@@@@@@@@@@@@@\n01b0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   @@@@@@@@@@@@@@@@\n01c0  ff ff ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff   ................\n01d0  ff ff ff ff  ff ff ff ff  ff ff ff ff  ff ff ff ff   ................\n01e0  ff ff ff ff  bb e4 02 44  cd bb e4 8a  2d 00 20 b2   ......bDM...-@ .\n01f0  09 d5 00 e5  0a 8e 0e 86  0f 81 b7 00  01 01 41 fd   iU@.j.n.o..@aaA.\n008a  6C FF 46    JMP ($46FF)    - A:86 X:30 Y:FD SP:f6 N.-.....   54412259\n$008a) m 4680\n4680  18 09 03 4f  46 46 89 0d  04 2f 4d 4f  44 a5 09 04   xicOFF.md/MOD.id\n4690  3f 44 55 50  52 18 04 3f  4b 45 59 63  09 04 4f 56   ?DUPRxd?KEYcidOV\n46a0  45 52 9a 7e  44 4f 52 41  2c 01 5c 10  05 3f 45 58   ER.~DORA,a\\pe?EX\n46b0  49 54 5e 0e  06 3f 50 41  55 53 45 83  10 06 3f 53   IT^nf?PAUSE.pf?S\n46c0  54 41 43 4b  6e 73 26 3f  4c 45 41 56  45 5f 0a 09   TACKns&?LEAVE_ji\n46d0  3f 54 45 52  4d 49 4e 41  4c 00 00 00  de 46 a9 dc   ?TERMINAL@@@.F..\n46e0  85 c9 a9 46  85 ca 20 36  1a 20 81 11  1e 10 b6 18   .I.F.J 6z .q^p.x\n46f0  96 18 17 10  92 11 56 42  18 51 0a 81  0e 2b 1a 9b   .xwp.qVBxQj.n+z.\n4700  b0 aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................\n\n\ngather all words that touch pip\nall words that are followed by a parameter\nall words that define such a word\n\ncaller\ndocreate\n\nmanner of exit\nstack effect\n\n\n\n\nForth is a framework for assembly language\nForth is written in Forth (PORTAL)\nForth is an extensible language\nForth is a domain-specific language\nForth is lightweight\nForth is fast\nForth is compact\nForth is simple\nForth has two stacks\nForth interpreter is easily understood\nForth compiler features structured coding\nForth has minimal syntax\nForth is a skill amplifier\nForth places no restrictions on the programmer\nForth provides no error checking (no bozos programming philosophy)\nForth\n\n; # design pattern idea?\nmains\n    jmp pitcher\n\n_main\n    lda #>(next-1)\n    pha\n    lda #<(next-1)\n    pha\n    ;fall through\npitcher\n                                ; the object pushes its parameters to return stack\n    lda parm1\n    pha\n    lda parm2\n    pha\n    lda parmn\n    pha\n\n    lda #>catcher               ; and the addr-1 of its method (also a subroutine)\n    pha\n    lda #<catcher\n    pha\n    rts                         ; control passed to method.  `parmn` now top of return stack\n\ncatcher\n    pla\n    sta parmn\n    pla\n    sta parm2\n    pla\n    sta parm1\n    rts\n\nForth is a computer programming language created by Charles Moore during the\n1970s.  Forth has the greatest power to weight ratio of any programming\nlanguage I have ever used.\n\n compact\namplifier\n\npage\nasmip\nexit\nsetip\nbranch\n\njsr getarg\nreturns first inline byte following word\nreturns AY = new IP\n\n~todo: How does `rehash` do automem at halftime?\nshould leave 256 + remainder of page\n\npha\npla\ndata stack\n16-bit wide data stack (not split)\n\nstill uses X e.g. tsx for data stack\n\n\n\n`=zp`\nzpex\n\npadjust\n    sec                         ; A+1 = offset to be added to IP\n\n\nstack           IP     A = +3\n                50F8    50FC\n                50F9\n                50FA\n                50FB\n                50FC\n                50FD\n                50FE\n                50FF\n                5000\n                5001\n                5002\n\n\n; good alternate entry point e.g. plit vs. clit\npadjust_planb\n    adc ip\n    sta ip\n    bcs qadjust02               ; crossed a page boundary?\n    ;clc\n    adc #$03                    ; xxFD xxFE xxFF will set carry flag\n    bne qadjust01               ; was it $FD?  avoid `jmp ($xxFF)`\n    inc ip                      ; bump `ip` to xxFE when it is xxFD\nqadjust01\n    bcc qadjust03               ; about to cross a page boundary?\nqadjust02\n    inc ip+1                    ; move `ip` to next page\nqadjust03\n    rts\n\npadjust\n    sec                         ; A+1 = offset to be added to IP\n    adc ip\n    sta ip\n    bcs qadjust02               ; crossed a page boundary?\n    cmp #$FD                    ; xxFD xxFE xxFF will set carry flag\n    adc #0\n    sta ip\nqadjust01\n    bcc qadjust03               ; about to cross a page boundary?\nqadjust02\n    inc ip+1                    ; move `ip` to next page\nqadjust03\n    rts\n\n11d0   .pad:\n11d0  38          SEC\n11d1   .branch02:\n11d1  65 8B       ADC .ip\n11d3  A8          TAY\n11d4  C8          INY\n11d5  D0 03       BNE .branch05\n11d7  E6 8C       INC ip+1\n11d9  29          .byt $29\n11da  .branch05:\n11da  A8          TAY\n11db  A5 8C       LDA ip+1\n11dd  69 00       ADC #$00\n11df  90 A4       BCC .jumpay\n\n\nprintf '\\33]50;%s\\007' \"9x15bold,xft:Kochi Gothic\"\n\n\ngo on stackoverflow and answer my own question\nhow do you program a PET like a boss?\n\n\ngawk --posix \\\n'/^([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}).*/{a=$0;nub=NR;}END{print a,nub;}' pettil/perturb.log\n\n\n\nset up a PETTIL word containing a string which prefixes hexdumps\n0000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00   ................\n.:  0000 00 00 00 00 00 00 00 00\n\nthoughts on melding with the cursor\n\nroutines\nE079 .home\nE202 output a character, even a cursor control\n\n~todo   `<\" filename\"` peform input redirection\nutils   `>\" filename\"` perform output redirection\n\nblk wht red cyn pur grn blu yel\norn brn pnk gr1 gr2 ltg ltb gr3\n\n|Address Modes:|<|<|h\n|0|A       |Accumulator|\n|1|abs     |absolute|\n|2|abs,X   |absolute, X-indexed|\n|3|abs,Y   |absolute, Y-indexed|\n|4|#       |immediate|\n|5|impl    |implied|\n|6|ind     |indirect|\n|7|X,ind   |X-indexed, indirect|\n|8|ind,Y   |indirect, Y-indexed|\n|9|rel     |relative|\n|a|zpg     |zeropage|\n|b|zpg,X   |zeropage, X-indexed|\n|c|zpg,Y   |zeropage, Y-indexed|\n\n\njsr enter\n    compiling? <> ?: execute xt,\n\n~todo: mkd64 target should not rebuild `mkpettil` but should go with what's in obj/ , for building arbitrarily-constructed disk spins\n\n\n    ; VICE monitor commands\n    ; to load symbols, test in debugger\npb \"obj/perturb/perturb-iv.mon0\"\ndis 9;en 6;en 4;g\npb \"obj/perturb/perturb-iii.mon0\"\ndis 9;en 6;en 4;g\npb \"obj/perturb/perturb-iv.mon4\"\ndis 9;en 6;en 4;g\npb \"obj/perturb/perturb-iv.mon5\"\ndis 9;en 6;en 4;g\npb \"obj/perturb/perturb-iv.mon1\"\ndis 9;en 6;en 4;g\n\nkeybuf load\"perturb-iii.0\",9\\x0drun\\x0d\n\n    ; to reset the test\ng fd16\nkeybuf load\"perturb-iv.0\",9\\x0drun\\x0d\ndis 9;en 6;en 4;g\n    ; step to `next`\nz\nd;m 0;g\n    ; step once\nd;m 0;z\n\nHow do other people write a 6502 debugger?\nHow can I leverage the remote debugger and allow a web user to debug code in VICE?\nHow can I deploy to the web via emulation?\nHow do I manage persistence?\n    a1: you download it and store it locally\n    a2: it is associated with your email-auth'ed account\n        without creating an unmonitored messaging area?\n\n\n\n|0000|A9| DUP  LDA #00\n|0000|00|\n|0000|48|     PHA\n|0000|A9|     LDA #85\n|0000|85|\n|0000|48| SLIP  PHA\n|0000|CA|     DEX\n|0000|A5|     LDA 03\n\n\n\n\nfrom this line ----+\n                   |\n                   |\n                   v\n#ifdef output e.g. tests or tiddlywiki\n|\n|\n+----> until end of file or\n#endif\n\n\n~todo: test stack overflow message\n\n\nWord    Explanation\n0foo    Clear foo, reset foo\nfoo0    Initial state of foo\n+foo    Add to foo\n-foo    Remove from foo, or disable foo\nfoo!    Store a foo at an address\nfoo@    Fetch a foo from an address\n!foo    Set foo, or enable foo\n@foo    Get foo (sorry GitHub user @foo)\n<foo    From foo\n=foo    exchange with foo\n>foo    Convert to foo, or push onto foo\nfoo>    Pop from foo\n?foo    Optionally do foo\nfoo?    Return a boolean value\nfoo'    Accept an address or xt as input\n'foo    Address or xt of foo\nfoo\"    Parse a string and do foo\n\"foo    Accept a string as input\nfoo,    Compile a foo, or assemble foo instruction\n#foo    Number of foos\nfoo#    Foo index\n/foo    Size of foo\nfoo:    Define a foo\n.foo    Print a foo\n[foo]   Do foo at compile time\n(foo)   Internal implementation of foo, runtime action of foo\n\n\n2019-08-04T00:28:19-04:00\n\n\nfix the problem of\n\nsymrewind\n\n0BC0  D6 20 60\n0BC3 .fill     20  EC 06 A9 0F  48 A9 CD 48  18 A5 02 C6\n0BD0  07 10 05 38  A4 06 F0 09  88 91 04 D0  FB E6 05 90\n0BE0  EE 60\n0BCC .fills\n0BCF .fill01\n0BD8 .fill02\n0BE1 .fill03\n0BE2 .dofill   does>    c@   fill     ;\n            20 FE  10 E8 0F C3  0B 73 11\n0BEB .erase            jsr dofill $00    20  E2 0B 00\n0BEF .blank                                           20\n0BF0  E2 0B 20         jsr dofill ' '\n0BF3 .dodashbuf   does>    c@     >r  begin ...\n               20  FE 10 E8 0F  02 09 1E 0B  C2 12 91 11\n0C00  46 09 E8 0F  4D 12 D7 0A  B3 11 09 BB  09 AE 0A B3\n0C10  11 EA 10 09  11 0E 73 11\n0BFA .dbuf01\n0C12 .dbuf02\n                       jsr dodashbuf $00\n0C18 .dashnulls                 20 F3 0B 00\n                       jsr dodashbuf ' '\n0C1C .dashtrailing                           20 F3 0B 20\n0C20 .cmove\n0C20  38 29 18 20  EC 06 86 FF  A9 0F 48 A9  CD 48 B0 2D\n0C30  A6 03 18 8A  65 05 85 05  18 8A 65 07  85 07 E8 A4\n0C40  02 F0 0E 88  F0 07 B1 04  91 06 88 D0  F9 B1 04 91\n\n2019-08-02T14:48:55-04:00\n\n\n\n\n2019-08-02T00:11:58-04:00\n\n1st restart\n    iv/000.i65\n    PERTURBORG\n\n    replace EAL to point after `symtab` (effectively unloading perturb)\n    swap out lower half of zeropage <--> `zpbuf`\n    `>forth` ; 6502 to Forth\n    `sp!`    ; initialize Forth data stack\n\n    iv/001.i65\n    _perturb_iv\n\n    replace `restart` PERTURBORG with `userstartup`\n    install `_perturb_iv_callback` @pettil-studio/perturbpatch\n    to return here instead of `_warm`\n\n2nd restart\n    studio/pettil-cold.a65\n    `(cold)`\n        \\ turn on forth, fill the screen with a pattern\n        ?aloha >forth sp!  diagfill  ( -- )\n        \\ set BRK and IRQ vectors\n        call !sw16  'splashirq cinv !  call =irq  ( -- )\n        \\ cmove `studio` code into place\n        'there @+ tuck over @ 2+  ( hitop-2 there+2 hitop-2 size )\n        cmove  2+ ( 'studio )  startup !  ( -- )\n        \\ erase the bottom half of the screen\n        11 40* VIDRAM + 14 40* blank  ( -- )\n        'there+2 EAL @+ + 2+ swap @ over -  ( ~?~ )\n        \\ measure 16 threads, set `symtab`, cmove symbols into place\n        !symtab symtab ! bl +under cmove>  ( -- )\n\n3rd restart\n    studio/pettil-studio.a65\n    `(studio)`\n\n    _cold\n    warm | _perturb_iv_callback\n\n2019-07-31T18:03:44-04:00\nPETTIL\nPORTAL\nPERTURB\nPUPPET\nVorth\n- Queen Bee (colony simulator)\n- Chit-Chat (card graphics)\n- PET Trek (classic game)\n- MMM (interactive comics)\n- amazing (graphics)\n- Life (1/4 block graphics)\n- Hammurabi (classic game)\n- Rerun at Rigel (adventure)\n- Awari (classic game)\n- Twonky (classic game)\n- Wumpus (classic game)\n- Moon Patrol (classic game)\n- Lunar Lander (classic game)\n- Artillery (classic game)\n- TECO (Tape Editor and Corrector)\n- Revisiting Rigel (game)\nPETTILmobile\n- rover (tinyhome)\n- cargo (empty)\n- bus (passengers)\n- station (streaming)\n- pupPET show (celebrity)\nPETTILmob\n- Human Computer game (moore's law, hardware)\n- Code Golf\n- Maker Faires, Libraries, Schools, Aftercare, Festivals\n- website, github, facebook, twitter, instagram\n- laminated, signed, numbered membership cards\n- contests and games\n- Sea Monkey Circus\nPETTILmini\n- Raspberry Pi case\n- detachable display head\n- detached bluetooth PET replica keyboard\n- internal battery\n- cassette deck is microSD slot\n- case keyboard is power switch\n- case keypad is reset switch\n\n~Revisiting Rigel ?\n\n2019-07-29T21:40:08-04:00\n\n~todo: rename tdict because phonetics\n\n2019-07-23T20:07:47-04:00\n\n!todo\nVIDRAM should be malleable, not a constant.\n    implement as primitive QUAN with 6C opcode?\nvector the startup thingy that sends us out to ERROR at warm start\n\n2019-07-21T16:13:38-04:00\n\n~todo\nPETTIL should populate NMI vector with `NMI SENSED` message then `abort`\n\n2019-07-21T11:49:15-04:00\n\n~todo\nrename CRSRDOWN et al to their 2001 keycap names\nRVS     OFF\nHOME    CLR\nDOWN    UP\nRIGHT   LEFT\nDEL     INST\n\n2019-07-17T22:33:33-04:00\n\nLNMX d5 `width`\n T  $    #\n 0  27  39\n 4  27  39\n 1  27  39\n 3  4f  79\n 4  15  21\n 5  27  39\n\nStarting:\n\n1. run the tests\n\n2. did it pass?\n    yes:    cool!\n            write some more tests\n\n    nope:   why not?\n            check perturb.log\n            look at the screen shots in data/perturb vs. tmp/perturb\n            fix it\n\n3. repeat .  <-- go to step 1\n\ne04b  A0 83       LDY #$83\ne04d  A2 18       LDX #$18\ne04f  94 E0       STY $E0,X\ne051  E0 14       CPX #$14\ne053  F0 08       BEQ $E05D\n\nA0 83 A2 18 94 E0 E0 14 F0 08\n\n2019-07-15T20:24:27-04:00\nbuild system controls\n    Makefile targets\n        1`\n\nlocate/create all match.png files\ncreate tests to generate matching scrsh files\n\nne.n.open oven.get jug,bread.frotz jug.s.ne.se.ne.drink water.fill jug.sw.se.sw\nsw.s.\ngnusto rezrov.ne.ne.e.learn rezrov.g.e.rezrov gate.e.n.n.u.get egg.rezrov egg.\nget shredded.drop egg.d.e.e.e.e.e.learn nitfol,rezrov.rezrov gate.n.get scroll\nkrebf shredded.e.nitfol frogs.look under pad.w.s.gnusto cleesh.w.w.w.w.w.s.s.s\ns.e.d.open door.n.move block.e.get all.gnusto exex.gnusto zifmia.eat bread.\nw.s.u.n.get all.s.drop all.e.move lighted.get all from niche.w.get all.w.u.\ndrink water.learn rezrov.rezrov bedpost.get gold.gnusto vaxum.blorb book.\nlie down.get up.open strong.get book.learn zifmia,vaxum.d.n.n.n.n.e.\n\nzifmia adventurer.vaxum adventurer.\ne.e.e.e.e.\nadventurer, open door.n.get purple,map,pencil.s.w.s.get dusty.read it\n\n2019-07-13T20:58:07-04:00\n\nrestart roles\n`cold` startup\n`perturb` handles its own cold startup\n.X exit command in machine language monitor\n\n\n2019-07-13T20:13:51-04:00\n\nIf you are already experienced in 6502 coding and might like to go back again and take it to a new level, please say hello.\n\n2019-07-11T00:42:18-04:00\n\nfor pettilobj in obj/pettil.prg?\ndo\n    load=$(dd  bs=1 count=2 conv=swab status=none <${pettilobj} | xxd -p)\n    echo load addr ${load}\n    targetid=${pettilobj: -1}\n    echo \"targetid $targetid\"\n#    pertub=$(echo \"ibase=10;obase=16;$(echo `stat -c'%s' ${pettilobj}` \"+\" `echo \"obase=10;ibase=16;$(hd -e '\"%04x\"' -n2 ${pettilobj})\"|bc`|bc)\"|bc)\n    objsize=$(stat -c'%s' ${pettilobj})\n    objaddr=$(echo \"obase=10;ibase=16;$(hexdump -e '\"%04x\"' -n2 ${pettilobj})\"|bc)\n    perturb=$(echo \"${objsize} + ${objaddr}\"|bc)\n    echo ${targetid} ${perturb} ${objsize} ${objaddr}\n    for tricks in $(ls -d src/perturb/*/)\n    do\n        cheese=$(basename ${tricks#*/})\n        feat=\"perturb-${cheese}\"\n        foo=`echo \"obase=10;ibase=16;$(hexdump -e '\"%04x\"' -n2 ${pettilobj})\"|bc`\n        echo derp ${tricks} derp ${cheese} derp ${feat} derp ${foo}\n        cat ./src/perturb/${cheese}/*.i65> ./tmp/perturb/${feat}.a65\n        ls ${tricks}\n        cd ./tmp/perturb/\n        ls -la\n\n        case ${targetid} in\n            0)\n                echo \"wow! my PET!\"\n                romopts=5\n                hitop=6400\n                ;;\n            4)\n                echo \"hey! VIC-20!\"\n                romopts=32\n                load=1201\n                hitop=6300\n                ;;\n        esac\n\n#            cat ${feat}.a65\necho before comment\n: <<'ENDO'\nremoved './doc/sizes.txt'\n'./tmp/sizes.csv' -> 'doc/sizes.csv4'\n./tools/mkperturb\nmkdir: created directory 'obj/perturb'\nobj/pettil.prg0\n18867 17842 1025\nderp src/perturb/i/ derp i derp perturb-i derp\nENDO\necho after comment\n\n#            cat ${feat}.a65\n        xa ${feat}.a65                             \\\n            -DPERTURB=${feat}                      \\\n            -DPERTURBORG=${perturb}                     \\\n            -DROM_OPTIONS=${romopts}                    \\\n            -DHITOP=${hitop}                            \\\n            -DSPECIALOPTS=${load}                       \\\n            -I ../common/                               \\\n            -I ../../tmp/                               \\\n            -o ../../obj/perturb/${feat}.prg${targetid}      \\\n            -e ../../tmp/${feat}.err${targetid}    \\\n            -l ../../tmp/${feat}.lab${targetid}    \\\n            -v\n        cd -\n        ls -la ./obj/perturb/${feat}.prg${targetid}\n        cd obj\n#        c1541 -attach ../pettil.d64 -del ${feat}.prg${targetid}\n        c1541 -attach ../pettil.d64 -write ./perturb/${feat}.prg${targetid}\n   done\n#            cat obj/pettil-core.obj${target}                                    \\\n#                tmp/${feat}.obj${target} > obj/${feat}.prg${target}\n#            cd obj\n#                c1541 -attach ../pettil.d64 -del ${feat}.prg${target}\n#                c1541 -attach ../pettil.d64 -write ${feat}.prg${target}\n#            cd ..\n#            c1541 -attach pettil.d64 -dir\n\ndone\n\nif [ 1 -eq 0 ]; then\n\ncd ~/pettil\nfor a in obj/pettil.prg?\ndo\n    echo $a\ndone\n\nfi\n\n# cd pettil\n\n# This script usually runs the test automation in the `at` queue.\necho you are not at Y2\n    mkdir -v obj/perturb\n    c1541 -attach pettil.d64 -dir\n    export DISPLAY=:0\n    echo -----------------\n    c1541 -attach pettil.d64 -del \"perturb*\" -dir\n    for target in 0 4\n    for pettilprg in obj/pettil.prg?\n    do\n        pettilfile=$(basename ${pettilprg#*/})\n        echo \"target $target\"\n      #sh ./tools/buildpettil.sh 0     5       6500  0401\n          case $target in\n            0)\n                echo \"hey! a PET!\"\n                romopts=5\n                load=0401\n                hitop=6400\n                ;;\n            4)\n                echo \"VIC-20!\"\n                romopts=32\n                load=1201\n                hitop=6400\n                ;;\n        esac\n        echo \"${romopts} ${load} ${hitop}\"\n        for suite in `ls -d ./src/perturb/*/`\n        do\n            cheese=$(basename ${suite#*/})\n            feat=\"perturb-${cheese}\"\n            foo=`echo \"obase=10;ibase=16;$(hd -e '\"%04x\"' -n2 ./obj/pettil.prg${target})\"|bc`\n            echo feat cheese\n            echo $feat $cheese $foo\n            cat ./perturb/${cheese}/*.i65> ./tmp/perturb/${feat}.a65\n\n            cd ./tmp/perturb\n\n            xa ${feat}.a65                     \\\n                -DPERTURB=${feat}              \\\n                -DROM_OPTIONS=${romopts}            \\\n                -DHITOP=${hitop}                   \\\n                -DSPECIALOPTS=${load}               \\\n                -I ../../src/common                 \\\n                -o ./${feat}.obj${target}     \\\n                -e ./${feat}.err${target}     \\\n                -l ./${feat}.lab${target}     \\\n                -v\n            cd -\n\n#            cat obj/pettil-core.obj${target}                                    \\\n#                tmp/${feat}.obj${target} > obj/${feat}.prg${target}\n            ls -la ./obj/${feat}.prg${target}\n#            cd obj\n#                c1541 -attach ../pettil.d64 -del ${feat}.prg${target}\n#                c1541 -attach ../pettil.d64 -write ${feat}.prg${target}\n#            cd ..\n#            c1541 -attach pettil.d64 -dir\n        done\n    done\n\n    date -Iseconds >> perturb/perturb.log\n    rm -v perturb/*.scrsh.png\n    for object in obj/perturb-*.prg4\n    do\n        cheese=$(basename ${object#*/})\n        extension=\"${cheese##*.}\"\n        namer=\"${cheese%.*}\"\n        echo \"chintz ${object}\\n${cheese}\\n${namer}\"\n        cp -v obj/perturb.mon4 tmp/\n        echo \"bk E089\\ncommand 9 \\\"scrsh \\\\\\\"perturb/${namer}.scrsh\\\\\\\" 2;quit\\\"\\nkeybuf load\\\"${cheese}\\\",9\\x0drun\\x0d\" >> tmp/perturb.mon4\n        tail -9 tmp/perturb.mon4\n        /home/chitselb/bin/xvic \\\n         -verbose \\\n         -directory data/VIC20/ \\\n         -moncommand tmp/perturb.mon4 \\\n         -config data/sdl2_chitselb.vicerc \\\n         -warp \\\n         -8 chitselb.d64 \\\n         -9 pettil.d64\n        if [ ! -f perturb/${namer}.match.png ]; then\n            echo \"🍅 ${namer}\\t-- no match!\" >> perturb/perturb.log\n        fi\n        diff -s -b perturb/${namer}.scrsh.png perturb/${namer}.match.png        \\\n        |sed 's/^.*-\\([ivxlcdm]*\\).*differ$/🍅 \\1 \\t\\t-- different\\!/'           \\\n        |sed 's/^.*-\\([ivxlcdm]*\\).*identical$/🥑 \\1 \\t\\t...pass/'                                       \\\n        >> perturb/perturb.log\n    done\n\n    for object in perturb/perturb-*.match.png\n    do\n        cheese=$(basename ${object#*/})\n        extension=\"${cheese#*.}\"\n        namer=\"${cheese%%.*}\"\n        if [ ! -f perturb/${namer}.scrsh.png ]; then\n            echo \"🍅 ${namer}\\t-- no scrsh!\" >> perturb/perturb.log\n        fi\n    done\n    exit\n\n#~/pettil/buglist.txt\n\n[ ] ?:\n[x] stop-ins\n[x] stop-del\n[ ] case# else then\n[ ] create existing word\n[ ] number \" prefix\n[ ] /\n[ ] enter/exit, which one increments IP?\n[ ] load-buffers\n        relocates\n[ ] save-buffers\n[ ] verify-buffers\n\nVideos\n======\n0. architecture                 hardware, 5 minutes\nkicking the tires               firmware, 5 minutes\nhop in let's go...              pettil demo, 5 minutes\n\n\n2019-07-10T04:24:34-04:00\n\nfile extensions\n                used by `xa65`\n    a65         input 6502 assembly source code\n    obj         output 6502 object code\n    lab         output labels\n    err         output stderr\n\n                used within `PETTIL`\n    i65         6502 source include file\n    prg         Commodore PRG file\n    mon         VICE monitor\n    def\n\n\n2019-07-08T23:11:42-04:00\nZ.Z.GET COFFER.X PORTHOLE.Z.HIT MAN WITH COFFER.G.Z.READ MISSIVE.YES.HIT DAVIS\n\n    (You begin in a cabin)\nGET UP.Z.Z.GET COFFER.X PORTHOLE.X COFFER.Z.HIT PIRATE WITH COFFER.G.Z.\n        (12 moves)\nREAD MISSIVE.YES.Z.\n        (15 moves)\nGET UP.LOOK AT RING.GET RING.X WINDOW.REMOVE FROCK.N.OPEN CUPBOARD.IN.GET ALL.\n    (+1 get clothes)\n        (24 moves)\nWEAR PANTS.WEAR SHIRT.OUT.RIP FROCK.D.N.N.GET BOTTLE.S.S.U.S.OPEN COFFER.\n    (+1 get bottle)\n        (37 moves)\nGET INVITATION.HIT WINDOW WITH COFFER.S.GET ROPE.U.U.U.U.N.N.PUT RAG IN WATER.\n    (+1 break window)\n    (+1 get to poop deck)\n        (48 moves)\nOPEN HATCH.D.THROW RAG ON FUSE.U.N.RAISE LEVER.IN.GET DAGGER.OUT.S.S.ENTER CASK\n    (+1 extinguish fuse)\n        (60 moves)\nCUT LINE WITH DAGGER.GET PORK.Z.Z.EXIT.W.N.E.GET ALL.W.W.NE.U.REMOVE CLOTHES\n        (73 moves)\nGET GOWN.WEAR GOWN.N.E.D.GIVE INVITATION TO BUTLER.S\n        (80 moves)\n\n\n\n2019-06-20T01:54:15-04:00\n\nsjw\ndaal\nsamosa\npakora\nbook\nmelatonin\nlight\nknife\nfolder\nclipboard\nsharpener\namerican history book\nnotary public\nclothes\nfreezer bag\n\n2019-06-18T22:13:41-04:00\n\n\n\n2019-06-08T22:37:38-04:00\n$ foo=`echo \"obase=10;ibase=16;$(hexdump -e '\"%04x\"' -n2 obj/pettil.prg0)\"|bc`\nchitselb@tarabuza:~/pettil$ echo $foo\n\n\nhexdump -e '\"%04x\"' -n2 obj/pettil.prg0\nfoo=`echo $(hexdump -e '\"%04x\"' -n2 obj/pettil.prg0)`\necho $foo\n\nt.3 two-byte absolute address of `startup` in core\n\n\n\ndd bs=1 if=pettil.prg0 of=t.3 skip=15 count=2 status=none\ndd bs=1 if=pettil.prg0 of=t.4 skip=0 count=15 status=none\necho -e -n \"\\xAB\\xCD\" >> t.4\ndd bs=1 if=pettil.prg0 of=t.5 skip=17 status=none\ncat t.4 t.5 > t.6\ncoresiz=$(stat -c%s pettil-core.obj0)\npettilsiz=$(stat -c%s pettil.prg0)\ndifsiz=`expr $pettilsiz - $coresiz`\necho ${coresiz} ${pettilsiz} ${difsiz}\n\nEAL =\n$ hd t.3\n00000000  7e 06                                             |~.|\n00000002\n\n\ndd skip=102567 count=253 if=input.binary of=output.binary bs=1\n\n\n2019-06-07T21:03:40-04:00\n\n1000  A2 0F       LDX #$0F\n1002  BD 40 E8    LDA $E840,X\n1005  9D 00 80    STA $8000,X\n1008  CA          DEX\n1009  10 F7       BPL $1002\n100b  AD 48 E8    LDA $E848\n100e  9D 00 81    STA $8100,X\n1011  CA          DEX\n1012  30 F7       BMI $100B\n1014  9D FF 81    STA $81FF,X\n1017  BD 80 80    LDA $8080,X\n101a  E8          INX\n101b  D0 F7       BNE $1014\n101d  CE 10 10    DEC $1010\n1020  CE 19 10    DEC $1019\n1023  CE 16 10    DEC $1016\n1026  30 E9       BMI $1011\n1028  A9 83       LDA #$83\n102a  8D 10 10    STA $1010\n102d  8D 16 10    STA $1016\n1030  8D 19 10    STA $1019\n1033  CE 19 10    DEC $1019\n1036  D0 C8       BNE $1000\n\n: vic-colors   ( -- )\n    $E921 \\ color table\n    8 0 do\n    c@+ emit\n    .\" /\\/\\/\\\"\n    loop drop ;\n\n2019-06-06T05:49:24-04:00\n\n\ncore                            0401\n        core\nfencepost                       1A58\ncold                            1A5B\n        temp\n        ?perturb\nthere                           1FA7\n        ------\nhitop, _studio                  6500\n        splashirq, deadbeef\ntdictbase                       6600\n        studio\ntdictend                        7FDB\n\n                                0401\ncore\n    locals\n    user\n    nucleus\n    extra\n    inner\n    double\n    vm\n    io\n                                fencepost\n3bytes?\n                                cold\nstartup1\n    bannermsg\n?perturb\n                                there\n-------\n                                hitop\nstartup2\nsplashirq\ndeadbeef\n                                tdictbase\nstudio\n    name\n    number\n    user\n    dictionary\n    interpreter\n    compiler\n    utils\n    editor\n    assembler\n                                tdictend\n\n2019-06-05T16:49:06-04:00\n* enter ascii codes\n🍅 ctrl+shift+u 1F345\n\n2019-05-30T01:26:42-04:00\n\n*\n\n\n\n2019-05-22T17:46:57-04:00\n\n$(basename ${s%.*})\n$(basename ${s} .${s##*.})\n\n\nJeffrey,\n\nThanks for taking a minute to listen on Sunday.  I have been planning this project for a little over a year, with the movie prop 2001 tunnel, a VIC-20 RAM model comprised of 5120 ping pong balls and 285 egg cartons, etc...  Following VCF East, I registered domains at Godaddy (ugh!), found free hosting (because this is 'low resource'), and will put a placeholder Tiddlywiki page up as soon as I get it working on my laptop.\n\nAn endorsement from the Vintage Computer Federation would be a huge feather in the cap for this project.  How can I get there? What are the specific details and parameters of the 'bus project'?  Why did it not happen? Corey told me to email someone who wasn't present, described as the champion of the 'bus project,' but I lost the card he gave me.   I would really like to learn more from him.\n\nIt is very hard to do something when you're afraid to do it, or when you know exactly what it is you want to do but have no idea which piece to work on next.  I know that I am going to do this, and would like it to be as good as possible.  If we could recapture that ethos of the time, where magazines at the library were the freshest content out there, apply 8-bit solutions to modern problems, and modern solutions to 8-bit problems, it will be interesting, and it could even be very useful to the people I'm trying to help.\n\nThank you,\n\nCharlie\n\n\n\n\npunctuation convention:\n\n[puzzles]   square brackets\n?flags?     boolean flags\n#variable#  numeric variable\n\"string\"\n'items'     single quotes\n*actions*   asterisks\n\nsequence of play/episode guide\n1. 7/4/74, day woodsfield full -- high energy\nwe meet our 12-year old protagonist on a bicycle\n{ 'red wood dope', 'green wood dope', 'plastic cement', 'clear dope' ,\n    'comic book', ?janitor? }\nA. Library - a giant pacman screen.\nleft exit is rear door (janitor has key)\nright exit is front door (locked at night)\n\nThe library interior occupies the entire south wing of the Courthouse building, dominated in the center by a large, square desk, in the center of which you see Ms. Pfelfry, the [[librarian.|Today she is wearing her { red(blinky) , orange(clyde) , blue(inky) , pink(y) } dress. She bustles back and forth within her work area, furiously sorting cards.]]\n\n\n\n\n[pacman] - a pacman-shaped dot = steps\n[one] [two] [three] [four] [five]\n       nw wing          ne wing\n[six] [seven] [eight] [nine] [ten]\n             center area\n      [rear] [desk] [front]\n          surrounding desk\n [eleven] [twelve] [thirteen]\n [fourteen] [fifteen] [sixteen] [seventeen] [eighteen]\n [nineteen] [twenty] [twentyone]\n\n\n\nbiog\n2. Now, day igloo -- depressed\nWe meet our older self, in bed\n[igloo] negotiate your apartment and leave\n{ 'keys', 'wallet', 'phone', 'farecard', ?showered? , ?dressed? }\n\n\n[morning]\nYou must somehow navigate the igloo and leave without forgetting anything within a short amount of time.  Failure inside leads to going back to bed (restart).  Failure outside ends game.\n\n\n morning Igloo  [metro]\n\nnight woodsfield\n7/4 night woodsfield\ntoday morning Igloo\n\n\n7/4 day full woodsfield\n[shopping]\n(inventory, shopping)\n\n[metro]\nIf you ever die in Woodsfield, you will wake up in the Igloo.\nChoices you make in the Igloo affect your health now\nIf you remain aboard Metro, you can\n\n7/19 day new dc\n7/19 night new dc\n10/15  night new woodsfield\n\nThe game begins in Woodsfield on 1974-07-04.  The [moon] is full\n\n\n[moon]\nthe lunar phase puzzle\n7/19 day new dc\n7/19 night new dc\n7/19 night new dc\n10/15  night new woodsfield\n\n\nLunar phase\n1974-07-04 (Woodsfield town square)\nyou are free to roam about the entire town on your bicycle\nyou can spend as long as EFC-Ballston [zzzz]\n1974-07-19 (birthday in DC)\n[lines]\n\n[plot]\n\n1974-07-04 (Thu, full).  Daylight.  Woodsfield Town square.  Shopping.\n\n1974-07-19 You are visiting your grandparents in DC.  They are building Metro, and you slip away to hide a thing you bought inside the Dupont Circle station.\n\n\nCourthouse\nThe mayor is standing on the front steps, talking to townsfolk about the scourge of inflation.\n\n\nLibrary\nJuly 4th, this is your one visit to the library.  You will check out three books for two weeks.  One of them must be in your bed on the 19th.\n\nYou have already read most of these but you didn't have much time to read.  This is a nice quiet place, with all that parade and noisy politicians outside.\nMake noise, get kicked out by librarian\n\nMagic Tricks (you will need this)\nHerbert S. Zim's Knot Book\nHoudini biography\nAgriculture - by October, you have grown a large pumpkin\nAstronomy - you learn how to navigate by the stars\n\nYou see the janitor slip a book onto his cart.  There is a giant picture of Superman on the cover, and you think you can make out the words \"Dream Machines\" from across the room.\n\nYou sneak closer.\n[Chase the janitor among the Pacman-shaped shelves maze]\n\nChasing him, the librarian stops you\nJanitor goes into courthouse via connecting door that only he has the key\n\n\nWestern Auto\nMonroe Theater\n5&10 Store\nSchwall's Drug Store Restaurant\nSchwall's Drug Store (soda fountain, penny candy(not enough),10 cent pepsi bottles)\nSchwall's Gas Station (10 cent candy, pop)\nPickwick (comics & candy & ice cream)\nSchwall's Sporting goods (5c Welch's fudge candy bar!!, guns, ammo, bow, arrows, fins, mask, snorkel)\nYou had better buy batteries and a fresh bulb. You will need them for the second dream.\nYou will need a snack.  Make it the cheapest food available, or you will come up five cents short on the other things you need to purchase today.\nTestor's cement (29 cents, one tube)\nTestor's paint (19 cents, clear gloss, colors are 10 cents more)\nYou need red and green for the starboard/port wings, and clear\nred on on starboard side, green on port, white aft light\nit will fly with bulb, length of wire, battery, and fit the flashlight mirror cone as the nose, light will reflect off the mirror inside the wings\nSelf1974 must construct and paint a model wooden airplane\n\n\nYou need to fly the model plane past the clock tower at midnight, with the correct wing colors\nThis lets Self2019 determine the color of the resistor to use in the endgame\n\n\n11 colors\nyou bake cookies and sell them.\nYou read a weird math book at the library, and are all about base 11 numbers now.\nYou buy the ingredients and make 100 cookies (double batch)\n11 base 11 is 12 (baker's dozen).  For 11 cents a cookie or 11 for a dollar.\n\nYou need to earn $10.00 from the bake sale\n\n\n\nclear black brown\n red orange yellow\n  green blue violet\n   grey white )\n\nBilly Saffel chases you and money falls from your pockets\n\n\n1974-07-19 (Fri, new)\nget model wooden airplane for birthday\n\nslip away during the trip to DC and drop off Testor's plastic glue inside the Dupont Metro\nYou get a copy of \"If Beale Street Could Talk\" and\na balsa wood airplane -- P51 Mustang\n\nthe bulb and batteries are both dead.\nHope you bought fresh ones.\n\n  Find the stick/rope in the woods.\nget the flashlight\n\ninside your bag:\nthere is a new pack of batteries here.\nthere is a new flashlight bulb here.\nanother bag, containing marbles.\n\nreplace the battery\nreplace the bulb\nslip out the back door\nmake a beeline for the woods\n\ntiming is tight\n\n1974-10-15 (Tue, new)\n\n1974-10-30 (Wed, new)\n\nOversleeping SelfNow must ride into DC and set the phone alarm to wake up at Metro Center, then again at Dupont.\n\n Metro stop the Metro train.  You can always do this (pull the red lever) but it gets you in trouble.  This time you must, in order to pull an all nighter outside in Woodsfield.  Stop the train at Dupont.  The endgame is nigh.  It gets all Dan Brown now.\n\n\n1974-10-31 (Thu, new)\nemergency shopping, final\nrecover Ted's book\n\nsee the WIN button\nsneak out of the house\n\nSilver Line (rolling)\n\n> take a nap\nYou begin to feel more like yourself than you have felt in quite some time, as the rolling train gently rocks you into a deep, REM sleep.\n\n\n\n\nThe train is coming to a stop\nSilver Line (rolling)\nThe train is coming to a stop\nSilver Line (stopped)\nThe doors have opened\nSilver Line (rolling)\nSilver Line (rolling)\nSilver Line (rolling)\nSilver Line (rolling)\n\n\n\n1974-10-15 (Tuesday, new moon)\n1974-10-30 (Wednesday, full moon)\n\n''your bed''\n\n[[get up]]  [[look]]  [[inventory]]  [[something else]]\n\nYour focus sharpens rapidly as you waken, resting on the spine of the [[book]] beside your [[pillow]].  Even though you were deeply asleep a few seconds ago, you are now quite alert.  //That's good, because America needs more lerts.  Ha ha I crack myself up.//\n\nitems: covers , book , pillow\n* the flashlight has a burnt out bulb\n* the flashlight has dead batteries\n* the flashlight is closed\n* the flashlight is hidden under the covers\n* the flashlight makes noise when it drops\n* the flashlight will be operable when the batteries & bulb are replaced\n+ in 1974, rechargeable batteries were not a thing\n\n* gett\n\n\n''your bed''\nYou struggle to open your eyelids, they seem welded shut as though trying to contain whatever peace you could gather in your brief, fitful nap. You are in your bed, with an unpleasant taste in your toes.  The smell is so loud it propels itself up through your entire body, wracking all your senses at once with an indescribably intense ennui.\n\n\n[themes]\noutdoors during the day is unpleasant\n    indian summer, it's too hot\n    it's too windy\n    it's too\noutdoors at night is pleasant\n\n[timeline]\n1974-08     Ford takes office\n\n> read phone\nYou begin to read a random Wikipedia article\n\n* future me reads up on \"WIN\" buttons\nWIN Buttons\n\n\"One of the worst economic crises in US history, marked by high unemployment and inflation rising to 12.3% that year following the 1973 oil crisis.\"\n@pagedown\n#1974-10-08\n\n''Ford's \"Whip Inflation Now\" speech before Congress declared inflation \"Public Enemy Number One\".'' //Huh.  Just by licking a stamp and mailing in a form, US Citizens could help stamp out inflation, and help capture that notorious fiend, the abstract concept of \"Inflation\"!  I wonder what the wanted poster at the Post Office looked like?//\n\n\"WIN\" buttons immediately became objects of ridicule; skeptics wore the buttons upside down, explaining that \"NIM\" stood for \"No Immediate Miracles,\" \"Nonstop Inflation Merry-go-round,\" or \"Need Immediate Money.\"\n\nYeah, I could use some of that.  You put your phone into your shirt pocket and doze off...\n\n\n1974-10-16  First dream\nsneak downstairs, see the \"WIN\" button, can't get it, out of time\nsneak out back door, find stick and rope in woods.  Put under bed.\n\n@bed\n> look under sheet.\n> put flashlight under pillow.\n> slide out of bed.\n* wakes up mom if flashlight is under sheet\n@bedroom\n> open door.\n* wakes up mom if I walk into door\n> north.\n@hallway west\n> east.\n@hallway east\n> down stairs\n* makes noise if you walk normally\n> sneak down stairs.\n* You hear that disheartening creaky stair noise.  Moments later, after mom swiftly escorted you back in your room, as your head settles back into the pillow, you drift off dreaming of being outside   -> @bed\n> down\n\n\n\n1974-10-16  Second dream\nsneak downstairs, see the \"WIN\" button, can't get it\n\n1974-10-16  Third dream\n1974-10-31 Halloween, Full Moon, Mooney Mansion Mission\nYou have to stop the Metro train\nYou ride your bike\n[locations]\n@Igloo\n\n@Bed\n\n@Your room\n\n@Hallway\n\n@Bathroom\n\n@Front Door\n@Balcony\n@Living Room\n\n@Metro Station\n@entrance\n@escalator\n\n@Dupont Circle\nSomeone has covered up the sign outside the train window with a [tarp], so you can't see what station this is. And furthermore, you didn't hear the announcement on the loudspeaker because your mind was lost in thought.\n=tarp\n\"Are you Stretch Armstrong or something?  Nevermind that the sign is 10 feet away from you, there is also a train car wall in between the tarp and your stubby, T-rex-like arms!  Just slip your arm through that crowd of people, out the door, and you might be able to move the tarp then.  If you hurry, you might [[get out of the train]] before the doors close!\n\n[[Board]] [[Disembark]] [[Sleep]]\n\n[items]\nflashlight (openable)\nbatteries @(5&10 Store, hardware section)\nflashlight bulb @(5&10 Store, hardware section)\nyour bed\n+sheet\n+pillow\n\n[verbs]\nunscrew\nunscrew head cap (replace bulb)\nunscrew tail cap (replace batteries)\n\n\nlook under sheet (find flashlight +1)\n=flashlight\n==battery\n==bulb\n==tail cap\n==head cap\n==switch\n==assembled\n==taken apart\n==turn on\n==turn off\n\n(the battery is dead.)\n> unscrew flashlight\nWhich end?  The head cap or the tail cap?\n\n\nThe cover of the book says \"102 Magic Tricks\"\nget up\n\n\n\nDream #1 (get out of house at night)\npillow\nsheet (look under sheet)\nflashlight\ndead batteries\ndead bulb\nsewing room has batteries\nif you snitch them, they work, but you can't keep them or get them out the window (the batteries fall out of your pockets, clattering to the ground.  Moments later, the porch light comes on and your mom is there.\n\n\"Oh, you must have been sleepwalking again.\" -> bed\n\nBathroom light can see bulb is burnt\n\n\n\ndates\nThu Jul 04 day (woodsfield, town square)\n$ red model paint\n$ white model paint\n$ blue model paint\n$ 2x AAA battery\n$ welch's fudge bar (nutrition for bike ride)\n\nThu Jul 04 night (full moon)\nFri Jul 19 day (birthday, DC)\n+ Spad balsa wood model airplane\n\nThu Jul 19 night (new moon)\nTue Oct 15 night (new moon)\nWed Oct 30 night (full moon)\nThu Oct 31 day (at school)\nThu Oct 31 night (Mooney Mansion)\n\nJuly 4th\nJuly 4th night (full moon)\nJuly 4th night (full moon)\n\nitems\n\nlocations\nMooney Mansion\n\n\nThe Effect:\n\n0000 03FF [ zp | stack | system ]\n0400 040C [ basic ]\n040D 040F [ `restart` ]\n0410 1A57 [ pettil-core ]\n1A58 [ launcher ]\n[ pettil-studio ]\n[ symtab ]\n\n\n\n\n0000 03FF [ zp | stack | system ]\n0400 040C [ basic ]\n040D 040F [ `restart` ]\n0410 1A57 [ pettil-core ]\n[ launcher ]\n[ pettil-studio ]\n[ symtab ]\n\n\n\n\n\nTESTING ADD/SUBTRACT: + - 1+ 1- ABS NEGATE\n\nT{ 0 5 + -> 5 }T\nT{ 5 0 + -> 5 }T\nT{ 0 -5 + -> -5 }T\nT{ -5 0 + -> -5 }T\nT{ 1 2 + -> 3 }T\nT{ 1 -2 + -> -1 }T\nT{ -1 2 + -> 1 }T\nT{ -1 -2 + -> -3 }T\nT{ -1 1 + -> 0 }T\nT{ MID-UINT 1 + -> MID-UINT+1 }T\n\n2019-05-21T20:43:06-04:00\n\njul 04 woodsfield town square, shopping\n* comic book\n* batteries\n* paints\n* send hint letter to grandma\n\njul 19 dc birthday\n* model airplane\noct 16 new\noct 30 full\noct 31 halloween\n\n\njul 04 full --\njul 19 new -- test flight at Ballston (sledding hill)\noct 16 new -- flight at court house\noct 30 full -- take apart vacuum\noct 31 halloween\n\ndiehl's clothing\nmonroe county court house\nmonroe county public library\n\ntesting startup\ndoes\nlistoflists.txt\n\nchallenges/problems/issues/trash/dealbreakers/impossible-makers:\nfeatures: pettilmobile pettilmini pettilmob\nbenefits:\nhow I believe it was all very intertwingled, somehow:\nwhy:\n\ninventory: (check, and conform to Infocom 1 or 2 spaces after comma and other punctuation conventions)\n    Commodore PET-16N. The PET contains:\n        serial number tag #700251\n        32K RAM upgrade\n        BASIC 4.0 ROM upgrade\n        Radio Shack SPST normal/diag switch\n        Radio Shack DPDT reset/nmi switch\n        CB2 sound card.\n            The alligator clip is disconnected.\n        Bitfixer PETvet\n            A 6502 chip is plugged into the board.\n        Bitfixer PETdisk\n        rocker switch\n            The PET is powered off.\n    a comic book\n\ngathering metrics\n\n\n\n* general problem solving\nYou are here and you want to get there\nunderstand why you want to get there.\ndecide what \"there\" should look like\nfind out how\n\n\n\n\n\nYour room\n    It is your birthday and you got $12 from your grandparents, and a dumb card. I don't think you'll be getting in that submarine you wanted and sailing away, anytime soon.\n\n>east\n    The door is closed.  You are 12, remember?\n\n>look at door\nThe back of the door is covered with a map from the US Geological Survey. A merit badge sash hangs over the hook above the map. The door is closed.\n\n>get map. open door. east.\nYou roll up the map and carry it.\n\nHallway\nYou are standing in the upstairs hallway.  Doors are visible at the end of the hallway to the east, and another doorway leads to a bathroom on the west.  There are stairs going down.\n\nFront porch\n    There is a bicycle here.  It is not a 10-speed.\n> look at map.\n\nThis is a map of Woosdfield,OH and the land surrounding it, available at {url}\n> ride bicycle. down.\n(you are riding a bicycle)\n> west. north. north. west.\nAt the corner of Marietta & Main St. There is a stop sign here.\n> stop. get off bike.\n\nCorner Marietta/Main\nYou are standing on the sidewalk.  Your bike is here.\n> enter\n\nYou go into Schwall's Sporting Goods store\n> buy candy bar\nWhich one?  They have Payday, Hersheys, Snickers, and Welch's Fudge.\n\nSchwall's Sporting Goods\n    Here's your change.  Thank you!\n> inventory\nYou are carrying:\n    $11.95 in cash\n    a Welch's Fudge candy bar\n> leave\n\nCorner Marietta/Main\nYou are standing on the sidewalk.  Your bike is here.\n> ride bike. west. west. stop. get off bike. enter\n\nKV Store\nBefore you stretches a vast cornucopia of allowance-grabbing treasure.  You stop at the front of the store, at the comic book rack.\n        (nw: model making stuff)\n        (ne: tools)\n        (sw: comic book rack)\n        (se: candy)\n        (south center: cash register)\n\n\n\n\n\n\n\n\nThere are\n\n>open door. east.\n\n\n    After Opening the cover of the book, you see a full-page ad for Sea Monkeys(tm).  {further description of some actual 1974 comic book}.  With the warm summer breeze,  You fall asleep, reading it.\n\nBench under tree.\n\n\njust enough LISP to get where you want to go\n\njust enough Erlang to get to where you want to go to\n\ngetting to where you want to go\n\n\n2019-05-21T02:08:06-04:00\n\nfile=\"obj/perturb*.prg4\"\nt = \"$(basename $file .prg4)\"\n## without using basename ##\nt=\"${t%.prg4}\"\necho \"$t\"\nt=\"${t%.prg?}\"\necho \"$t\"\n\nfor f in obj/perturb*prg*\ndo\n  t = `$(basename $f .prg4)`\n echo \"processing $f file $t\"\ndone\n\n\n1. set up a PET\n    prg file for each show\n        pettil/obj/perturb-I.prg0\n        pettil/obj/perturb-I.prg4\n        pettil/obj/perturb-II.prg0\n        pettil/obj/perturb-II.prg4\n        pettil/obj/perturb-III.prg0\n        pettil/obj/perturb-III.prg4\n        pettil/obj/perturb-IV.prg0\n        pettil/obj/perturb-IV.prg4\n    moncommand scripts\n        pettil/obj/perturb-I.mon0\n        pettil/obj/perturb-I.mon4\n        pettil/obj/perturb-II.mon0\n        pettil/obj/perturb-II.mon4\n        pettil/obj/perturb-III.mon0\n        pettil/obj/perturb-III.mon4\n        pettil/obj/perturb-IV.mon0\n        pettil/obj/perturb-IV.mon4\n2. launch it\n\n\n\n\n2019-05-21T00:09:35-04:00\n\n1. generate a perturb-I001.prg\n\nPERTURB test automation\ntrick:\nepic:\n\n\n2019-05-20T22:16:12-04:00\n\n2019-05-20T00:32:06-04:00\n\nvariable {baz} --   symtab entry for `baz`\n                    2 bytes (uninitialized)\n23C0 20\n\n147 constant {bar} --   symtab entry for `bar`\n                    2 byte value (93 00)\n\ncreate {foo} -- symtab entry for `foo`\n                `create` does not `allot` storage\n\n$ffd2 :label chrout -- no symtab entry, labels are ethereal\n                `chrout` behaves like a constant, pushing `$FFD2` at TOS\n\n\n\n\n\n{ perturb.sh -- a bash script\n    { xpet -- launch a PET to run each $SUITE (unique .PRG file)\n    { each $SUITE is a list of `tricks` }\n\n\n\n2019-05-17T20:02:53-04:00\n\n\ncreate table user (\nf1 varchar(30) primary key,\nf2 text,\nf3 real\n );\n\n\n\nCREATE TABLE tbl2 (\nf1 varchar(30) primary key,\nf2 text,\nf3 real\n );\n\nqlite>\nchallenge ID: number, 001..998\nchallenge ID: 001 = preparation\nchallenge ID: 001 = preparation\ntestquest ID: number, lowercase roman numerals\n\n[users]\n\n\n\ntrick id:   [id]\ntrick name: [name]\ndesigned by: [user.id]\ndesigned on: [d.designed]\nexecuted on: [d.executed]\npriority: {low|medium|high}\nmodule: [module.name]\neffect: {describe the test objective in brief.}\npreparation: {conditions that must be set up before execution of this case}\ndependencies: {describe related test cases or test requirements}\nmethod:\n* list all\n* execution steps\n* in detail\n* in the order in which they should be executed\n* make sure to provide as many details as you can\n* describe the test conditions, test data and user roles\ndata: {describe the test data inputs and outputs for this test case}\nExpected Result:  What should be the system output after test execution? Describe the expected result in detail including message/error that should be displayed on the screen.\n\nPost-condition: What should be the state of the system after executing this test case?\n\nActual result: Actual test result should be filled after test execution. Describe the system behavior after test execution.\n\nStatus (Pass/Fail): If actual result is not as per the expected result, then mark this test as failed. Otherwise, update it as passed.\n\nNotes/Comments/Questions: If there are some special conditions to support the above fields, which can?t be described above or if there are any questions related to expected or actual results then mention them here.\n\nAdd the following fields if necessary:\n\nDefect ID/Link: If the test status is failed, then include the link to the defect log or mention the defect number.\n\n\nDECIMAL\nT{ #1289       -> 1289        }T\nT{ #12346789.  -> 12346789.   }T\nT{ #-1289      -> -1289       }T\nT{ #-12346789. -> -12346789.  }T\nT{ $12eF       -> 4847        }T\nT{ $12aBcDeF.  -> 313249263.  }T\nT{ $-12eF      -> -4847       }T\nT{ $-12AbCdEf. -> -313249263. }T\nT{ %10010110   -> 150         }T\nT{ %10010110.  -> 150.        }T\nT{ %-10010110  -> -150        }T\nT{ %-10010110. -> -150.       }T\nT{ 'z'         -> 122         }T\n\n\n\n\nThe effect:\n`+` will properly add the top two stack elements together, replacing them with the sum\nPreparation:\n* place two numbers on the stack\n*\nOperation:\nThe secret:\n\n* PETTILmob rules\n*#. PETs are fun!\n*#. Always talk about rule #1\n*#. The ideal amount to spend is $0\n*#.\n*#.\n\nThis is essentially a one-man communication project, and I've been one poor correspondent.\n\n\n* /\n* PERTURB\n* PETTILmobile Tiddlywiki\n* PETTILmobile Instagram\n* PETTILmobile Twitter\n* PETTILmobile YouTube\n** allocate youtube.com/user/PETTILmobile\n**\n* Pivotal Tracker public PETTILmobile project\n** PETTILmini\n** PETTILmobile\n** PETTILmob\n** Add PT link on pettilmobile.com\n** github.com/chitselb/pettilmobile -- repo for website\n\n2019-04-30T20:20:57-04:00\n\nbuildkite agent token\ndae9bcd298f85f597616abb8f7a87ab0e7aa1cc8e9b77e108d\n\n\n2019-04-23T01:03:39-04:00\n\nchitselb@tarabuza:~/pettil$ git diff core/\ndiff --git a/core/src/pettil-core.a65 b/core/src/pettil-core.a65\nindex 38e6ccb..6a53bb7 100644\n--- a/core/src/pettil-core.a65\n+++ b/core/src/pettil-core.a65\n@@ -487,10 +487,14 @@ fencepost\n     .word callme\n #include \"page.i65\"\n     .word setsw16               ; so we may use BRK to access Sweet16\n-#include \"page.i65\"\n-    .word callme\n-#include \"page.i65\"\n-    .word swapirq               ; use `splashirq` entertainment\n+;~190330 move this function up to studio\n+; `splashirq` handler resides in symtab expansion page\n+; which `deadbeef` doesn't overwrite.  Thus it can continue\n+; during e.g. first 3 seconds of cursor blink\n+;#include \"page.i65\"\n+;    .word callme                ; push `next 1-` to return stack, to call subroutine as a primitive\n+;#include \"page.i65\"\n+;    .word swapirq               ; use `splashirq` entertainment\n #include \"page.i65\"\n     .word _barf                 ; fill the screen with '/' graphic\n #include \"pass.i65\"\nchitselb@tarabuza:~/pettil$\n\nchitselb@tarabuza:~/pettil$ git diff studio/\ndiff --git a/studio/src/pettil-studio.a65 b/studio/src/pettil-studio.a65\nindex ed436fa..a615f0f 100644\n--- a/studio/src/pettil-studio.a65\n+++ b/studio/src/pettil-studio.a65\n@@ -186,9 +186,11 @@ stack=( size -- size addr )\n tags=system,startup,throwaway,nosymbol\n Calculate `symtab` memory requirements, given a size\n\n-\n-\n ```\n+: calcmem   ( size -- size addr )\n+    tdict @\n+    over msb 1+ cswap - ;\n+\n | zp | stack | system | core | available RAM | vmbuf | blkbuf | symtab | tdict |\n ```\n #endif\nchitselb@tarabuza:~/pettil$\n\n\n\n2019-04-22T04:19:49-04:00\n\nget VIC-20 intro working\n\nbreak `yeahboy`\nsys 1039 restart(cold)\n\n\n2019-03-30T18:35:07-04:00\n\nfloating point stack\nFACC1 and/or FACC2? bytes are rolled onto hardware stack from\nfinal pop restores original Forth data stack\n\ngroups of five bytes on hardware stack with\n\nfpush\nfpop\n\n\ntsx\nstx datastack\nldx floatstack\ntxs\n\n    do whatevs, the data stack is yo bitch\n PHA/PLA five bytes\n\ntsx\nstx floatstack\nldx datastack\ntxs\n\n\n2019-03-05T13:34:28-05:00\n\nbackpack\npet/vic/mac\nguitar\nkeyboard\ndrum\nThe Magic LAMP\nFPCs\nPETTILmini sheet metal\ncables\n\n2019-03-03T17:12:43-05:00\n\n\nThis is about goal-directed behavior.  You are here and you want to get there.  We will be programming the machine to accomplish goals, so we better get good at it ourselves first.\n\nthe important questions:\n\n1. what do I want? exactly? (early view of the goal)\n\nThis part is good for paper/pencil.  Write down little phrases, ideas, pictures and diagrams.  Keep adding details.\n=\n(the Hipster Tablet)\n    clipboard\n    paper\n    Fisher space pen\n\n    three ring binder\n    notebooks\n    graph paper\n    three hole punch\n    pens, pencils, crayons, markers\n\n2. how do I know when I've won?  (exit criteria)\n3. what are next steps? (tasks)\n4. what is the least I need to start now?\n\nproject:\n1. bare bones pi commodore emulator\n2. cycle accurate, loads instantly to a preconfigured Commodore setup\n3. [x] put it out there in the VIC-20 FB group\n4. Pi, C compiler, pi1541 project sources\n\ntake time to plan\nmeasure everything, including your time\nwrite things down in a journal (moshpit.txt)\nbookmark, screencap and voice record ideas and inspirations\n2019-03-02T00:43:34-05:00\n\nPETTIL loads up, things are in chunks.\n\nthe BASIC bootstrap\nsends control to `restart`\nwhich redirects via `startup`\nto `liftoff`\n10 sys1037\n    restart --> liftoff\n`liftoff`\n    ;\n    ;\n    ;\n    ;STARTUP\n    ;\n    ; swap out 141-byte region of BASIC zero page <--> with 141-byte PETTIL zpimage\n    ;   Sweet16 registers       [32]\n    ;   stackl                  [96]\n    ;   stackh\n    ;   zi                      [ 6]\n    ;   zlim\n    ;   up\n    ;   `next`                  [ 7]\n    ;                           ====\n    ;                           141 bytes\n    ?aloha\n    ; initialize X register data stack pointer to $30 (stack size is 48 words)\n    ; a split stack is used, with 48 low bytes at 0020..004F and 48 high bytes\n    ; at 0050..007F .\n    sp!\n    ; swap IRQ vector, replacing $E455 with `splashirq` for entertainment\n    =irq\n    ; swap BRK vector, replacing $D478 (monitor) with BRK --> `sw16`\n    !sw16\n    ; start entertainment prior to `tdict` cmove\n    barf\n    there @+ tuck over @ 2+ cmove 2+ startup !\n    ( \\cold user variables\\ ) cmove erase\n    restart --> `studio`\n\n\n\nA - core\n    BASIC bootstrap\n    lower zero page image\n    Sweet16\n    Forth dictionary\n--> here\n\nB - studio\n    interpreter\n    developer tools\n    symbol table\n    compiler\n    editor\n    assembler\n\nC - symtab\n    CFA | SVI length | \"NAME\" | {vocab}\n    09B7|  -       3 |    DUP |\n    09B7|  +       3 |   NOP, | 1\n    0000|         00 | (three nulls) marks end of symtab\n    * SVI = smudge, vocab, immediate flags\n\n2019-03-01T11:51:37-05:00\n\nsys1037\nrestart     `040D 6C xx xx jmp (userstartup)`\n    * liftoff\n2019-02-25T12:55:45-05:00\n\ncartridge PETTIL for VIC-20 & C=64\n\n\n\n\n2019-02-11T17:53:38-05:00\n\nAs I start work on the metacompiler, I'm thinking of adding additional `number` punctuation prefixes:   \" & '\n\n\" quoted_character\"                e.g. \"P\" puts $0050 on the stack\n# decimal_value                 \\\n$ hex_value                      \\ these are working\n% binary_value                   / already in `number`\n& resolve_reference                    resolves reference\n' labeled_forward_reference        forward reference\n\n`is` set quancfa to `dois`              !\n`at` set quancfa to `doat`              '\nelse quancfa is `doquan`                @\n\n2019-02-10T16:22:29-05:00\n\nPETTIL modes:\nstudio                          interactive development environment\n                                anything referencing symtab\n                                interpreter\n                                editor\n                                compiler\n                                assembler\n                                utilities\n                                metacompiler\n                                kosmon integration\n                                petpic\n                                TAFFYPULL\n\ncore                            next\n                                inner interpreter\n                                control words\n                                virtual memory\n                                math\n                                number\n\ntest                            Test Automation Framework\n\nvorth                           target compiler\n                                lightweight Forth for 5K VIC-20\n\nmachines\nPET #700251\nPET 4.0\nPET Upgrade\nPET 80-column\nVIC-20\nC=64\nC128\nC16\nApple ][\n\n2019-02-07T00:03:00-05:00\n\nenter\n    pla             ;[4]\n    tay             ;[2]\n    pla             ;[4]\n    sta z           ;[3]\nenter01\n    lda ip+1        ;[3]\n    pha             ;[3]\n    lda ip          ;[3]\n    pha             ;[3]\n    lda z           ;[3]\n    iny\n    bne jumpay      ;[3] bra `jsr enter` never goes at $xxFD\nyikes\n    sec\n    bcs exit01                  ; bra\n\nbranch\n    ldy #2          ; [2]\n    lda (ip),y      ; [5]\n    bpl pad         ; [2|3]\n    dec ip+1        ; [5]\npad\n    sec             ; [2]\nbranch02\n    adc ip          ; [3]\n    tay             ; [2]\n    iny\n    bne branch05\n    inc ip+1\n    .byt $29\nbranch05\n    tay\n    lda #0          ;[2]\n    adc ip+1        ;[3]\n    bcc jumpay      ;[3] bra /18/\n\nexit\n    lda #2          ; [2]\nexit04\n    clc             ; [2]\nexit05\n    sta ip          ; [3]       ; entry A is added to IP\n    pla             ; [4]\n    adc ip          ; [3]\n    tay             ; [2]\n    pla             ; [4]\nexit01\n    adc #0          ; [2] = [12]\n    ;bcc jumpay\n                    ; pass AY = new IP\n                    ; >FORTH -- Sets IP <- AY then NEXT, essentially a GOTO AY\n                    ; transition from 6502 Assembly back up to to Forth\njumpay\n    sta ip+1        ; [3]\nexit03\n    sty ip          ; [3]\n    jmp nexto       ; [3]\n\ntoforth\n    pla\n    tay\n    iny\n    cmp #$FF\n    pla\n    adc #0\n    jmp jumpay\n\n\n\n2019-02-05T22:59:23-05:00\n\nbye\n    jsr seeya\n    jmp ($FFFA)\nseeya\n    lsr zpmode\n    jsr aloha                   ; restore BASIC zpage\n    jsr swapbrk                 ; turn off Sweet16\n    jsr swapnmi                 ;\n    lsr zpmode                  ; lights off!\n    rts\n\nqaloha\n    lsr zpmode\n    inc zpmode\n    bcs aloha4\n    ;fall through\naloha\n    ldx #TIME                   ; swap zero page with `zpbuf`\naloha3\n    lda <(ACC-1),x\n    ldy zpbuf-1,x\n    sty <(ACC-1),x\n    sta zpbuf-1,x\n    dex\n    bne aloha3\naloha4\n    rts\n\ninitialization/transitions\nRESET to BASIC\n    (FFFC) -> FD16\n    irq  brk  nmi  zp?\n    E455 D478 B3FF [ ]\n\nirqlist\n    tape i/o\n    E455 D478 -    [ ]\n        /9012\n\nBASIC to KOSMON\n    irq  brk  nmi  zp?\n    E455 D478 B3FF [ ]\n                                ; activate kosmon first\n                                poke 60202,1\n                                l \"tools/kosmon$9-4032.prg\" 0 9000\n                                sys 36864\n    E455 9012 B3FF [ ]\n\nKOSMON to BASIC\n    irq  brk  nmi  zp?\n    E455 9012 -    [ ]\n                                .x\n    -    -    -    [ ]\n\nBASIC to PETTIL (cold)\n                                set top of memory\n    aloha\n    setsw16\n\n    irq  brk  nmi  zp?\n    E455 D478 B3FF [ ]\n                                run\n    -    SW16 WARM [x]\n\nBASIC to PETTIL (warm)\n    setzpmode\n    setsw16\n\n    irq  brk  nmi  zp?\n    E455 D478 B3FF [ ]\n                                load \"pettil.prg\"\n                                run\n    -    SW16 WARM [x]\n\nPETTIL to KOSMON\n    irq  brk  nmi  zp?\n    E455 9012 B3FF [ ]\n                                load \"pettil.prg\"\n                                run\n    -    SW16 -    [x]\n                                mon\n    -    9012 -    [x]\n                                .g\n                                jmp restart\n    -    SW16 -    [x]\n\nPETTIL to TIM\n    irq  brk  nmi  zp?\n    -    D478 -    [ ]\n                                load \"pettil.prg\"\n                                run\n    -    SW16 WARM [x]\n                                mon\n    -    D478 WARM [x]\n                                .g\n\nPETTIL to BASIC\n                                bye\n\nbugfix: kosmon, in `:` , output should `rvs` last 8 chars of text after dump\nbugfix: kosmon, for #700251 and PET3, should have autorepeat\n\n2019-02-05T21:07:18-05:00\n\n2019-02-05T01:30:48-05:00\n\n 71 0a 01 30   .m...i....`.q..0\n3bf0  e8 0f 01 40  1f 7c 41 50  02 9e 0a 02  30 3d ab 0a   ...@.|AP....0=..\n3c00  02 30 3c bc  0a 02 30 3e  c0 7d 42 30  3d 01 c4 7d   .0<...0>.}B0=..}\n3c10  42 30 3c 01  f8 09 02 40  2b a0 0a 03  30 3c 3e b4   B0<....@+...0<>.\n3c20  0c 03 50 41  44 4c 7c 43  50 4f 50 01  56 7c 43 50   ..PADL|CPOP.V|CP\n3c30  55 54 01 c3  07 04 50 52  45 56 8d 13  04 50 49 43   UT....PREV...PIC\n3c40  4b 70 7e 44  50 48 41 2c  01 74 7e 44  50 48 50 2c   Kp~DPHA,.t~DPHP,\n3c50  01 78 7e 44  50 4c 41 2c  01 7c 7e 44  50 4c 50 2c   .x~DPLA,.|~DPLP,\n3c60  01 48 0e 05  50 41 55 53  45 d3 67 05  50 41 53 54   .H..PAUSE.g.PAST\n3c70  45 33 0e 06  40 53 57 41  50 21 51 7c  46 50 4f 50   E3..@SWAP!Q|FPOP\n3c80  54 57 4f 01  5b 7c 46 50  55 53 48 59  41 01 65 7c   TWO.[|FPUSHYA.e|\n3c90  46 50 4c 41  4e 54 53 01  cc 14 08 50  4b 54 2e 54   FPLANTS....PKT.T\n3ca0  48 49 53 20  72 08 50 45  54 53 43 49  49 22\n\n    stx z\n\n    lda #>symtab\n    sta ACC+2*N0+1              ; address\n    lda #0\n    sta ACC+2*N0\n    sta ACC+2*N1                ; thread index\n\n    lda #34\nsetthread\n    tay\n    ldx ACC+2*N1\n    sta symtab,x\n    lda ACC+2*N0+1\n    sta symtab+1,x\n    inc ACC+2*N1\n    inc ACC+2*N1                ; thread += 2\nhop\n\n\n2019-02-04T13:04:20-05:00\n\n    BASIC to PETTIL             ; cold\n    BASIC to PETTIL             ; warm\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\n\n\nirq\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\nbrk\n    BASIC to PETTIL             ; `warm\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\nnmi\n    BASIC to PETTIL             ; `warm`\nzpmode\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\nsetsw16\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\nsetzp\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\naloha\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\nswapbrk\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\nswapirq\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\nswapnmi\n    BASIC to PETTIL             ; no change\n    KOSMON to PETTIL            ; `warm`\n    TIM to PETTIL               ; `warm`\n    PETTIL to KOSMON            ; `kosmon`\n    PETTIL to TIM               ; `timbrk`\n\n\n2019-02-01T02:57:36-05:00\n\ncold\n    top of memory\n    cld\n    ffcc\n    ffe7\n    aloha\n\n\nswapbrk\n    ldy #2\n    .byt $2c\nswapnmi\n    ldy #4\n    .byt $2c\nswapirq\n    ldy #0\n    sei\n\n    cli\n    rts\n\nsetsw16\n    lda CBINV+1\n    cmp #>(SW16)            ; BRK on Sweet16 page?\n    beq +                   ; considered as a guarantee of !pzp\n    jsr swapbrk\n\ncommonstartup\n    jsr setsw16\n    lsr zpmode\n    inc zpmode\n    bcs +\n    jsr aloha\n+\n    rts\n\naufwiedersehen\n    jsr aloha\nmon\n    jsr swapbrk                 ; restore brk vector\n    lsr zpmode\n\ncold\n    commonstartup\n    sei\n    jsr setsw16\n    cli\nwarm\n    commonstartup\n\n\n\n\nbasic  |                |  pettil\n       | sys 1037\n       | load\"pettil.prg\":run\n       | .g 040D\n\n       | aloha\n\n       reentry from `restart`\nwarm\n    lda CBINV+1\n    cmp #>(SW16)            ; BRK on Sweet16 page?\n    beq +                   ; considered as a guarantee of !pzp\n    !sw16\n    lsr zpmode\n    inc zpmode\n    bcs +\n    jsr aloha\n    sei\n    !pzp\n    cli\n+\n\n    rts\n\n       | 1st time: `cold`\n            | cmove `tdict`\n            | `rehash`\n            | `warm`\n       | 2nd time: `warm`\n            | !irq !nmi !brk !aloha\n            | save orig brk in `userbrk`\n            | cmove initialization block to uservariables\n            | erase block of uservariables\n            | `0 fail`\n       |\n       |\n\npettil |                |  basic\n       | bye\n            | 0irq 0nmi 0brk 0aloha\n\n\npettil |                |  kosmon\n        doo dahh\n\nkosmon |                |  pettil\n        doo dahh\n\n\nbasic  | brk = !sw16    |  pettil\npettil | brk = restore  |  basic\npettil | brk = restore  |  kosmon\nkosmon |                |  pettil\n\nbasic  | brk = sw16 |  pettil\nbasic  | brk = sw16 |  pettil\nbasic  | brk = sw16 |  pettil\n\n\n2019-01-30T14:57:10-05:00\ncold\n\nwarm - return from monitor\nwarm - invoke warm\n\nsetsw16\n    lda CINV+3\n    cmp #>(SW16)\n    beq swapirq03\n    ldy #2\n    .byt $2c\n\nVIDRAM ambiguity (where used as a $8000, use K32 instead)\ninterrupt vector\nexchange shadow vector\ntest/set zpmode\naloha\n    lsr zpmode\n    inc zpmode\n    bcs +\n    jsr swapirq\n    jsr swapbrk\n\nswapirq\n    ldy #0\n    ;\n    lda userirq+1,y\n    beq +\n    sei\n    clc\n    .byt $24\n-\n    sec\n    ;\n    lda userirq+1,y\n    pha\n    lda CINV+1,y\n    sta userirq+1,y\n    pla\n    sta CINV+1,y\n    dey\n    bcc -\n    cli\n+\n    rts\n\n+\n\n\n!! //!IRQ//&nbsp;&nbsp;&nbsp;( -- )\n\n[[<<|?]]&nbsp;address:&nbsp;$27f7&nbsp;&nbsp;size:&nbsp;3&nbsp;[[>>|!BRK]]\n\n\nswap IRQ at $0090 with `userirq`\n\nthis and `!brk` are general purpose IRQ management\n\n||^BASIC|<|<|^PETTIL|<|^Sweet16|<|^KOSMON$9000|<|^tape i/o|<|h\n|^!BASIC |^E455 0000|<|^<br/>D478 SW16|^a|<|^<br/>b|^a|<|<br/>b|^a|<|^<br/>b|^a|<|^<br/>b|\n|^!PETTIL |^a|<|^<br/>b|^E455 0000|<|^<br/>SW16 D478|^|^a|<|^<br/>b|^a|<|^<br/>b|\n|^!Sweet16 |^a|<|^<br/>b|^a|<|^<br/>b|E455 0000|<|^<br/>SW16 D478|^a|<|^<br/>b|^a|<|^<br/>b|\n|^!KOSMON$9000 |^E455|<|^<br/>D478|^a|<|^<br/>b|^a|<|^<br/>b|^E455 0000|<|^<br/>SW16 D478|^a|<|^<br/>b|\n|^!tape i/o |^a|<|^<br/>b|^a|<|^<br/>b|^a|<|^<br/>b|^a|<|^<br/>b|^E455 0000|<|^<br/>SW16 D478|\n\n<$button popup=\"$:/state/codeSlider\">code</$button><$reveal type=\"nomatch\" text=\"\" default=\"\" state=\"$:/state/codeSlider\" animate=\"yes\">\n\n```\nswapirq\n    ldy #0\n    .byt $2C                    ; BIT abs\n```\n\n\n\n2019-01-30T00:23:08-05:00\n\ntransitions\n\nzpmode not\nif\n  zeropage swap\n  !brk\n  !irq\n  zpmode inc\nthen\n\n        addr    BASIC   PETTIL  KOSMON\nIRQ     0090    E455    -\nBRK     0092    D478    sw16\nNMI     0094    B3FF    restart\nrestart 040E    liftoff\nuserirq 067A    0000    E455\nuserbrk 067C    sw16    D478\nzpmode  06E4    00      01\nz.p.    0000    basic   pettil\n\n0   E455      0000\n\n\n\n* BASIC to TIM\n** sys 54386 , `sys 1024`\n\n* BASIC to KOSMON\n** `sys 36864` , `sys 9*4096`\n\n* BASIC to PETTIL\n** `run` , `sys 1037`\n** performs `restart`\n** userbrk = SW16; userirq = 0\n** IRQ --> userirq\n** BRK --> userbrk\n** BRK <-- `sw16`\n** `aloha` z.p.\n** zpmode\n\n* PETTIL to BASIC\n** `bye`\n** before tape I/O\n** [x] IRQ <-- userirq\n** [x] BRK <-- userbrk\n** [x] `aloha` z.p.\n\n* PETTIL to TIM\n** `mon`\n** [x] IRQ <-- userirq\n** [x] BRK <-- userbrk\n** [ ] `aloha` z.p.\n** `brk`\n\n**\n\n\n;--------------------------------------------------------------\n#if 0\nname=COLD\nstack=( -- )\ntags=system,startup\nCOLD starts up the system and when invoked as a command will attempt\nto restore the system to as pristine a condition as possible.\n#endif\n#include \"align.i65\"\n_cold\n    jsr alohard\n    ldx usersp0\n    dex\n#include \"align.i65\"\n    jsr toforth                 ; transition from 6502 Assembly to Forth\n#include \"pass.i65\"\n    .word plits\n    .byt 5\n    .word ustart                ; erase\n    .word uendcore-ustart\n    .word userarea              ; cmove\n    .word ucore\n    .word uarea-userarea\n#include \"page.i65\"\n    .word cmove\n#include \"page.i65\"\n    .word erase\n#include \"page.i65\"\ncoldpatch\n    .word next                  ; later transformed into `rehash`\n; ~ '#include page' can't be used here, but this may not break page alignment\n    .word next                  ; later transformed into `emptybuffers`\n#include \"pass.i65\"\n    .word restart               ; restart #2 (of 3) `studio`\n\n;--------------------------------------------------------------\n#if 0\nname=AUFWIEDERSEHEN\ntags=startup,nosymbol\nExit Forth, restoring BASIC z.p.\n#endif\naufwiedersehen\n    lsr zpmode                  ; lights off!\n    beq aloha2                  ; bra\n\n;--------------------------------------------------------------\n#if 0\nname=ALOHARD\ntags=startup,nosymbol\n`aloha` invoked by `cold` and `liftoff` also closes files\n#endif\nalohard\n    cld                         ; clear decimal mode\n    jsr CLRCHN                  ; restore default I/O channels\n    jsr CLALL                   ; close all open files\n\n;--------------------------------------------------------------\n#if 0\nname=ALOHA\ntags=startup,nosymbol\nFlips back and forth between BASIC and PETTIL modes.\n\n* Swap part of zero page with zpbuf\n* required by tape I/O\n\n* used to access TIM monitor\n* toggle Sweet16 BRK vector at ($0090)\n* `pettil-studio` does not use the IRQ vector except in the Editor\n* performs swapzp, toggleirq and togglesw16\n#endif\naloha\n    lsr zpmode                  ; check lights\n    inc zpmode                  ; lights on!\n    bcs aloha4                  ; were the lights already on?\naloha2                          ; entry point for tape I/O\n;~~~    jsr toggleirqbrk\n    stx z                       ; preserve Forth data stack pointer\n    ldx #TIME                   ; loop from ACC $00 up to the jiffy clock $8D\naloha3\n    lda <(ACC-1),x\n    ldy zpbuf-1,x\n    sty <(ACC-1),x\n    sta zpbuf-1,x\n    dex\n    bne aloha3\n    ldx z                       ; restore Forth data stack pointer\naloha4\n    rts\n\n;upper location for `fencepost` for development (includes `cold`)\n;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n;==============================================================\n; move the `fencepost` label to either lower or upper location\n;==============================================================\n;--------------------------------------------------------------\n#if 0\nname=FENCEPOST\ntags=system,startup,nosymbol\nThis is where [[FENCE]] points, and also [[DP]] after initial\nbuild of the symbol table.  First-run startup code beyond\nthis point (`fencepost` to `there`) may not have symbol table\nentries pointing to it.\n#endif\nfencepost\n; beyond lies the Abyss...\n;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n;==============================================================\n;==============================================================\n;===-===-===-===-===-===-===-===-===-===-===-===-===-===-===-==\n;==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==\n;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\n;=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-\n;---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=--\n;--------------------------------------------------------------\n;---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.--\n;--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--\n;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.\n;..............................................................\n;... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ..\n;.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..\n;. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n; .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .\n;   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .\n;.     .     .     .     .     .     .     .     .     .     .\n;   .        .        .        .        .        .        .\n;   .     .        .             .              .     .\n;                        .             .                   .\n;         .     .              .            .\n;\n;\n;\n;\n;\n;\n\n;--------------------------------------------------------------\n#if 0\nname=LIFTOFF\ntags=system,startup,throwaway,nosymbol\nA primitive relocator to move already-linked code to upper memory\nGets us from `pettil-core` to module LAUNCH\n\n* CMOVE transient dictionary to upper memory\n* EXECUTE first word in transient dictionary\n\nSetting the `size` of the transient dictionary to 0 will prevent\nmoving anything; control still transfers to `loadaddr+2`.\n\n```\n: liftoff   ( -- )\n    ['] there @+ tuck over @ 2+ cmove 2+ execute\n```\n#endif\n#include \"align.i65\"\nliftoff\n    lda userlimit\n    ldy userlimit+1\n    bne fs01                    ; something there already? leave it alone\n    lda MEMSIZ                  ; nothing there?  get it from BASIC MEMSIZ($34)\n    ldy MEMSIZ+1\nfs01\n    sta userlimit\n    sty userlimit+1\n    jsr alohard\n    ldx usersp0\n    dex\n#include \"align.i65\"\n    jsr toforth                 ; transition from 6502 Assembly to Forth\n#include \"pass.i65\"\n    .word plit\n    .word there\n#include \"page.i65\"\n    .word fetchplus             ; link to upper dictionary\n#include \"page.i65\"\n    .word tuck\n#include \"page.i65\"\n    .word over\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word twoplus\n#include \"page.i65\"\n    .word cmove                 ; but first, make an upper dictionary\n#include \"page.i65\"\n    .word twoplus\n#include \"page.i65\"\n    .word startup\n#include \"page.i65\"\n    .word store                 ; `studio` -> `startup` for 2nd `restart`\n#include \"page.i65\"\n    .word _cold\n\n\n\n_splash\n    jsr enter\n    .word barf\n    .word plits\n    .byt 3\n    .word splashirq\n    .word VIDRAM+11*40\n    .word 14*40\n    .word blank\n    .word _banner\n    .word irqstore\n    .word exit\n\n\n\n\n2019-01-27T01:06:39-05:00\n\n`call subroutine`\n\n`call` pushes `next-1` to  stack before `jmp next`\n\ncall\n    lda #>(next-1)\n    pha\n    lda #<(next-1)\n    pha\n    jmp next\n\nirq/brk vectors\n\n\nirq 0090\nbrk 0092\nuserirq\nuserbrk\n\n\n2019-01-24T12:40:22-05:00\n\n1201 - BASIC\n\n\n\n\n2019-01-22T23:12:49-05:00\n\nbee day\n2 17 cleaning\n5 13 nursing & serving\n13 19 fanning\n13 19 nectar transfer\n19 21 guarding\n13 36 wax making\n23 42 foraging\n\n\n2019-01-22T18:38:16-05:00\n\nbasic\npettil\n              editor\n\n2019-01-22T00:39:27-05:00\n\ncode golf  -- `error.msg` routine calls ROM routine to output a strinG instead\nof messages address table, or use a byte offset\n\nthis code here, how does $B3D8 ever execute? what is going on there with that?\nb3d0  10 F0       BPL $B3C2\nb3d2  07 20       SLO .stackl\nb3d4  CC FF A9    CPY $A9FF\nb3d7  00          BRK\nb3d8  85 10       STA $10\nb3da  20 DF BA    JSR $BADF\nb3dd  20 44 BB    JSR $BB44\nb3e0  BD 0D B2    LDA $B20D,X\n\n\n2019-01-14T15:02:17-05:00\n\n        !irqbrk\n20 07 1A    JSR .toggleirqbrk\n\n        ?aloha\n4E E4 06    LSR .zpmode\nEE E4 06    INC .zpmode\nB0 16       BCS .aloha4\n\n\n        aloha\n86 FF       STX .z\nA2 8D       LDX #$8D\n        aloha3\nB5 FF       LDA .z,X\nBC 0F 04    LDY $040F,X\n94 FF       STY .z,X\n9D 0F 04    STA $040F,X\nCA          DEX\nD0 F3       BNE .aloha3\nA6 FF       LDX .z\n        aloha4\n60          RTS\n\nd .aloha\n1adb   .aloha:\n1adb  4E E4 06    LSR .zpmode\n1ade  EE E4 06    INC .zpmode\n1ae1  B0 16       BCS .aloha4\n1ae3   .aloha2:\n1ae3  20 07 1A    JSR .toggleirqbrk\n1ae6  86 FF       STX .z\n1ae8  A2 8D       LDX #$8D\n1aea   .aloha3:\n1aea  B5 FF       LDA .z,X\n1aec  BC 0F 04    LDY $040F,X\n1aef  94 FF       STY .z,X\n1af1  9D 0F 04    STA $040F,X\n1af4  CA          DEX\n1af5  D0 F3       BNE .aloha3\n1af7  A6 FF       LDX .z\n1af9   .aloha4:\n1af9  60          RTS\n1afa   .liftoff:\n1afa  DE AD BE    DEC $BEAD,X\n1afd  EF BE EF    ISB $EFBE\n\n\n2019-01-13T21:43:17-05:00\n\nget to a state where I can kosmon $9000 the latest build on mypet\n\n2019-01-12T14:14:33-05:00\n\nname=NEXTVOCAB?\nstack=( -- flag )\nReturn `true` if there is a next vocabulary\nnextvocabq\n    brk\n    .byt ld | N5\n    .byt push\n    .byt ldi | N6\n    .byt st | N5\n    .byt nxt\n\nname=(FOUND?)\nstack=( name vocabs -- )\nset up Sweet16 registers for `found?`\n\n|register|contents|h\n|n3|name|\n|n4|len|\n|n5|vocabid|\n|n6|vocabs|\n|n7|name|\n|n8|len|\n\npfoundq\n    brk\n    .byt ld | N8                ; `n4` `n8` len\n    .byt st | N4\n    .byt ld | TOS\n    .byt st | N6\n    .byt inr | N6\n    .byt ldi | N6\n    .byt st | N5                ; first vocab\n    .byt pull\n    .byt st | N7                ; `n3` `n7` name\n    .byt st | N3\n    .byt pull\n    .byt nxt\n\nname=FOUND?\nstack=( nfa -- xfa flag )\nThis replaces the Forth-83 standard word `find`, idea from Albert van der Horst\nin comp.lang.forth\n\nstarting with the most recently added to `vocabs`\nfor each vocabulary\n    try searches in this order\n        word+trialvocabid `symnew`\n        word+trialvocabid `symtab`\nuntil vocabulary was (0)forth\nif still not found, 0\n\n* search order\n** begin\n** each vocab\n** symnew .. symtail, unsized\n** while not found\n** symtab thread, sized\n** while not found\n** until vocab was 0\n** exit\n\n|^`nfa`|^the `name` we are looking for<br/>(e.g. counted string in `tib` buffer)|<|\n|^`xfa`|^`flag`|<|\n|nfa|0|not found|\n|cfa|-1|found normal word|\n|cfa|+1|found immediate word|\n\n|^`forth editor assembler`<br/>`vocabulary tools`<br/>`tools definitions`<br/>|<|<|<|\n|>|Search order example|<|<|h\n|1|`tools` vocabulary|`symtail`|unsorted|\n|2|`tools` vocabulary|`thread`|sorted|\n|3|`assembler` vocabulary|`symtail`|unsorted|\n|4|`assembler` vocabulary|`thread`|sorted|\n|5|`editor` vocabulary|`symtail`|unsorted|\n|6|`editor` vocabulary|`thread`|sorted|\n|7|`core` vocabulary|`symtail`|unsorted|\n|8|`core` vocabulary|`thread`|sorted|\n|9|not found|<|<|\n\n`core` is always the last vocabulary searched.  A name/vocabulary combination\nis `unique` meaning it has at most one active symbol.  Prior copies of\nredefined symbols remain in the symbol table, smudged. Smudged words are\nignored (not a match) by `found?`\n\n```\n: found?   ( name -- xfa flag )\n\n\n        for the nfa(n7) in `symnew` list (ordered by age)\n    calculate pearson hash for word if it were in this vocabulary\n    get thread start\n    search for the nfa(n7) in `symtab` list (ordered by length)\n    search for the nfa(n7) in `sym\n\n: found?   ( name -- xfa flag )\n    vocabs (found?) bloomfilter cbit@\n    if\n        symnew (seek)\n        if\n            symtab @ >thread (seek)\n        if\n            nextvocab\n        repeat\n        '(seek) init.411\n    bloomfilter cbit@\n    if  vocabs c@+ symnew @\n        set.76 swap73\n        ext-until ?exit\n        1- c@+\n```\n#endif\n#include \"align.i65\"\n_foundq\n    jsr enter\n#include \"page.i65\"\n    .word vocabs\n#include \"page.i65\"\n    .word pfoundq\n#include \"page.i65\"\n    .word _bloomfilter          ; sum of decimal digits in name % 64\n#include \"page.i65\"\n    .word cbitfetch\n#include \"pass.i65\"\n    .word qbranch               ; if\n    .byt <(found04-*+1)\n#include \"page.i65\"\nfoundq01                        ;     begin (loop through vocabs)\n    .word symnew\n#include \"page.i65\"\n    .word pseek                 ; returns inverted found? flag\n#include \"pass.i65\"\n    .word qbranch               ;     while (branches if found)\n    .byt <(foundq03-*+1)\n#include \"page.i65\"\n    .word symtab\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word tothread\n#include \"page.i65\"\n    .word pseek\n#include \"pass.i65\"\n    .word qbranch               ; inverted flag, so branch if found\n    .byt <(foundq03-*+1)\n#include \"page.i65\"\n    .word nextvocabq\n#include \"page.i65\"\n    .word zeq\n#include \"pass.i65\"\n    .word qbranch               ; loop if more vocabs\n    .byt <(foundq01-*+1)\n#include \"page.i65\"\nfound04                         ; then\n    .word zpfrom\n    .byt ACC+2*N7               ; original `nfa`\n#include \"page.i65\"\n    .word false                 ; and nope, this name was not found\n#include \"pass.i65\"\n    .word exit\n#include \"pass.i65\"\nfoundq03                        ; found it\n    .word zpfrom\n    .byt ACC+2*N3               ; the CFA\n#include \"page.i65\"\n    .word namefrom\n#include \"page.i65\"\n    .word true                  ; assume it's a normie -1\n#include \"page.i65\"\n    .word immedornot            ; maybe add 2 if it's immediate\n#include \"page.i65\"\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=EXISTS?\nstack=( -- addr flag )\ntags=interpreter,ext\nparses the next token in the input stream.  Returns either the\naddress of the (unfound) token at HERE and a 0, or the code\nfield address of the word and -1 for normal, +1 for immediate\nwords\n\n```\n: exists?\n   bl word ?dup ?: found? 0 and ;\n```\n#endif\n#include \"align.i65\"\n_existsq\n    jsr enter\n#include \"page.i65\"\n    .word bl\n#include \"page.i65\"\n    .word _name            ; ~~2\n#include \"page.i65\"\n    .word qdup\n#include \"pass.i65\"\n    .word pquerycolon\n    .word _foundq\n    .word zero\n#include \"page.i65\"\n    .word andx\n#include \"pass.i65\"\n    .word exit\n\n\n\n    2019-01-10T10:28:48-05:00\n\nanimation language\n\nactor:\n  delay       number of jiffies between visible actions\n  step        position within a script\n\nmethods:\n  start       perform a script\n  step        perform next step of script\n\nscript:\n  list of commands\n\ncommands\n!xy\nframe\" string...\" next delay of this actor\n\n\n2019-01-10T03:24:38-05:00\n\n\n(create)\n    ( cfa [\"name\"] -- )\n\n    Caller                      CFA\n    ======                      ===\n    code-setup                  here\n    create                      docreate\n    :                           enter\n    constant                    doconstant\n    cconstant                   docconstant\n    2constant                   dotwoconst\n    vocabulary                  dovocab\n\n    Variables                   Value\n    =========                   =====\n    current                     vocabid (see: `definitions`)\n    symtail                     + 2 + 1 + len [ + vocab ] (see: `(create)`)\n    here                        cfa for `code` primitives\n\n\n<builds\n    compiles `(create)`\n\n\n: \"name\"    ... ... ... ;\n: \"name\"    ... ... ... ;code ... ... ... end-code\n\n: \"builder\"\n    <builds ...\n    does> ... ;\n\n\n2019-01-09T18:43:36-05:00\n\n UxForth\nNext:\n lda (gIp),Y                    ;[5] byte code.\n asl                            ;[2] *2 for gVecs index\n                                ;Also 'Enter' bit in Carry\n iny                            ;[2] inc gIp.lo\n beq Next10                     ;[3] page inc?\n   ;no page inc, fall-through.\nNext5:\n bcc Enter ;Handle Enter.\nNext7:\n sta Next7+4                    ;[4] modify following Jmp.\n jmp (gVecs) ;exec byte code.   ;[5 = 21]\nNext10:\n inc gIp+1 ;inc page\n bcs Next7 ;now handle token/enter.\n\n\n 2019-01-04T22:14:36-05:00\n\n* if ... [ else ] ... then\n** %0001 mask for pairing\n** compile `?branch`\n* case# [ alpha bravo charlie delta ] [ else handle default ... ] then\n** compile `tkpcase` 04 `tkalpha` `tkbravo` `tkcharlie` `tkdelta` ...\n** with else, compile `branch` `handle` `default` ...\n* begin [ while ] { until | again,repeat }\n** compile `qbranch`\n* { do | ?do } ... [ ?leave ] ... { loop | +loop }\n** comple `tkpdo` or `tkpqdo`\n* ?: alpha baker\n** binary choice operator, perform `alpha` if true, or `baker` if false\n** compile `tkpquerycolon` `tkalpha` `tkbaker`\n\n\n2018-12-29T14:31:34-05:00\n\n\n\n\ndocreate\ndofill\ndodashbuf\ndocconst\ndoconst\ndodotc\n\n\ncvariable delay\n5 delay c!\n\n\ndelay\n    jsr docreate\n    .byt 5\n\ndocreate\n    dex\n    dex\n    pla\n    sta STACK,x\n    pla\n    sta STACK+1,x\n    inc STACK,x\n    bne docreate01\n    inc STACK+1,x\ndocreate01\n    jmp nextx\n\ndodelay\n    lda #>(delay+3)\n    pha\n    lda #<(delay+3)\n    pha\n    ;fall through\nrfrom\n    dex\n    dex\n    pla\n    sta STACK,x\n    pla\n    sta STACK+1,x\n    jmp nextx\n\n\n\n\n2018-12-28T17:02:35-05:00\n\ncode capabilities demo\n  PETTIL\n  6502\n  Sweet16\n  BASIC\n  kosmon\n  xa65\n  ruby\n  make\n  Sublime Text 3\n  regex\n\nvideo capabilities demo\n  Face Synthesizer\n  PicChip\n  PETTIL editor\n  PETTIL animations\n  OBS\n  kdenlive\n\ncreate\n\n2019-01-13T21:43:17-05:00\n\nget to a state where I can kosmon $9000 the latest build on mypet\n\n2019-01-12T14:14:33-05:00\n\nname=NEXTVOCAB?\nstack=( -- flag )\nReturn `true` if there is a next vocabulary\nnextvocabq\n    brk\n    .byt ld | N5\n    .byt push\n    .byt ldi | N6\n    .byt st | N5\n    .byt nxt\n\nname=(FOUND?)\nstack=( name vocabs -- )\nset up Sweet16 registers for `found?`\n\n|register|contents|h\n|n3|name|\n|n4|len|\n|n5|vocabid|\n|n6|vocabs|\n|n7|name|\n|n8|len|\n\npfoundq\n    brk\n    .byt ld | N8                ; `n4` `n8` len\n    .byt st | N4\n    .byt ld | TOS\n    .byt st | N6\n    .byt inr | N6\n    .byt ldi | N6\n    .byt st | N5                ; first vocab\n    .byt pull\n    .byt st | N7                ; `n3` `n7` name\n    .byt st | N3\n    .byt pull\n    .byt nxt\n\nname=FOUND?\nstack=( nfa -- xfa flag )\nThis replaces the Forth-83 standard word `find`, idea from Albert van der Horst\nin comp.lang.forth\n\nstarting with the most recently added to `vocabs`\nfor each vocabulary\n    try searches in this order\n        word+trialvocabid `symnew`\n        word+trialvocabid `symtab`\nuntil vocabulary was (0)forth\nif still not found, 0\n\n* search order\n** begin\n** each vocab\n** symnew .. symtail, unsized\n** while not found\n** symtab thread, sized\n** while not found\n** until vocab was 0\n** exit\n\n|^`nfa`|^the `name` we are looking for<br/>(e.g. counted string in `tib` buffer)|<|\n|^`xfa`|^`flag`|<|\n|nfa|0|not found|\n|cfa|-1|found normal word|\n|cfa|+1|found immediate word|\n\n|^`forth editor assembler`<br/>`vocabulary tools`<br/>`tools definitions`<br/>|<|<|<|\n|>|Search order example|<|<|h\n|1|`tools` vocabulary|`symtail`|unsorted|\n|2|`tools` vocabulary|`thread`|sorted|\n|3|`assembler` vocabulary|`symtail`|unsorted|\n|4|`assembler` vocabulary|`thread`|sorted|\n|5|`editor` vocabulary|`symtail`|unsorted|\n|6|`editor` vocabulary|`thread`|sorted|\n|7|`core` vocabulary|`symtail`|unsorted|\n|8|`core` vocabulary|`thread`|sorted|\n|9|not found|<|<|\n\n`core` is always the last vocabulary searched.  A name/vocabulary combination\nis `unique` meaning it has at most one active symbol.  Prior copies of\nredefined symbols remain in the symbol table, smudged. Smudged words are\nignored (not a match) by `found?`\n\n```\n: found?   ( name -- xfa flag )\n\n\n        for the nfa(n7) in `symnew` list (ordered by age)\n    calculate pearson hash for word if it were in this vocabulary\n    get thread start\n    search for the nfa(n7) in `symtab` list (ordered by length)\n    search for the nfa(n7) in `sym\n\n: found?   ( name -- xfa flag )\n    vocabs (found?) bloomfilter cbit@\n    if\n        symnew (seek)\n        if\n            symtab @ >thread (seek)\n        if\n            nextvocab\n        repeat\n        '(seek) init.411\n    bloomfilter cbit@\n    if  vocabs c@+ symnew @\n        set.76 swap73\n        ext-until ?exit\n        1- c@+\n```\n#endif\n#include \"align.i65\"\n_foundq\n    jsr enter\n#include \"page.i65\"\n    .word vocabs\n#include \"page.i65\"\n    .word pfoundq\n#include \"page.i65\"\n    .word _bloomfilter          ; sum of decimal digits in name % 64\n#include \"page.i65\"\n    .word cbitfetch\n#include \"pass.i65\"\n    .word qbranch               ; if\n    .byt <(found04-*+1)\n#include \"page.i65\"\nfoundq01                        ;     begin (loop through vocabs)\n    .word symnew\n#include \"page.i65\"\n    .word pseek                 ; returns inverted found? flag\n#include \"pass.i65\"\n    .word qbranch               ;     while (branches if found)\n    .byt <(foundq03-*+1)\n#include \"page.i65\"\n    .word symtab\n#include \"page.i65\"\n    .word fetch\n#include \"page.i65\"\n    .word tothread\n#include \"page.i65\"\n    .word pseek\n#include \"pass.i65\"\n    .word qbranch               ; inverted flag, so branch if found\n    .byt <(foundq03-*+1)\n#include \"page.i65\"\n    .word nextvocabq\n#include \"page.i65\"\n    .word zeq\n#include \"pass.i65\"\n    .word qbranch               ; loop if more vocabs\n    .byt <(foundq01-*+1)\n#include \"page.i65\"\nfound04                         ; then\n    .word zpfrom\n    .byt ACC+2*N7               ; original `nfa`\n#include \"page.i65\"\n    .word false                 ; and nope, this name was not found\n#include \"pass.i65\"\n    .word exit\n#include \"pass.i65\"\nfoundq03                        ; found it\n    .word zpfrom\n    .byt ACC+2*N3               ; the CFA\n#include \"page.i65\"\n    .word namefrom\n#include \"page.i65\"\n    .word true                  ; assume it's a normie -1\n#include \"page.i65\"\n    .word immedornot            ; maybe add 2 if it's immediate\n#include \"page.i65\"\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=EXISTS?\nstack=( -- addr flag )\ntags=interpreter,ext\nparses the next token in the input stream.  Returns either the\naddress of the (unfound) token at HERE and a 0, or the code\nfield address of the word and -1 for normal, +1 for immediate\nwords\n\n```\n: exists?\n   bl word ?dup ?: found? 0 and ;\n```\n#endif\n#include \"align.i65\"\n_existsq\n    jsr enter\n#include \"page.i65\"\n    .word bl\n#include \"page.i65\"\n    .word _name            ; ~~2\n#include \"page.i65\"\n    .word qdup\n#include \"pass.i65\"\n    .word pquerycolon\n    .word _foundq\n    .word zero\n#include \"page.i65\"\n    .word andx\n#include \"pass.i65\"\n    .word exit\n\n\n\n    2019-01-10T10:28:48-05:00\n\nanimation language\n\nactor:\n  delay       number of jiffies between visible actions\n  step        position within a script\n\nmethods:\n  start       perform a script\n  step        perform next step of script\n\nscript:\n  list of commands\n\ncommands\n!xy\nframe\" string...\" next delay of this actor\n\n\n2019-01-10T03:24:38-05:00\n\n\n(create)\n    ( cfa [\"name\"] -- )\n\n    Caller                      CFA\n    ======                      ===\n    code-setup                  here\n    create                      docreate\n    :                           enter\n    constant                    doconstant\n    cconstant                   docconstant\n    2constant                   dotwoconst\n    vocabulary                  dovocab\n\n    Variables                   Value\n    =========                   =====\n    current                     vocabid (see: `definitions`)\n    symtail                     + 2 + 1 + len [ + vocab ] (see: `(create)`)\n    here                        cfa for `code` primitives\n\n\n<builds\n    compiles `(create)`\n\n\n: \"name\"    ... ... ... ;\n: \"name\"    ... ... ... ;code ... ... ... end-code\n\n: \"builder\"\n    <builds ...\n    does> ... ;\n\n\n2019-01-09T18:43:36-05:00\n\n UxForth\nNext:\n lda (gIp),Y                    ;[5] byte code.\n asl                            ;[2] *2 for gVecs index\n                                ;Also 'Enter' bit in Carry\n iny                            ;[2] inc gIp.lo\n beq Next10                     ;[3] page inc?\n   ;no page inc, fall-through.\nNext5:\n bcc Enter ;Handle Enter.\nNext7:\n sta Next7+4                    ;[4] modify following Jmp.\n jmp (gVecs) ;exec byte code.   ;[5 = 21]\nNext10:\n inc gIp+1 ;inc page\n bcs Next7 ;now handle token/enter.\n\n\n 2019-01-04T22:14:36-05:00\n\n* if ... [ else ] ... then\n** %0001 mask for pairing\n** compile `?branch`\n* case# [ alpha bravo charlie delta ] [ else handle default ... ] then\n** compile `tkpcase` 04 `tkalpha` `tkbravo` `tkcharlie` `tkdelta` ...\n** with else, compile `branch` `handle` `default` ...\n* begin [ while ] { until | again,repeat }\n** compile `qbranch`\n* { do | ?do } ... [ ?leave ] ... { loop | +loop }\n** comple `tkpdo` or `tkpqdo`\n* ?: alpha baker\n** binary choice operator, perform `alpha` if true, or `baker` if false\n** compile `tkpquerycolon` `tkalpha` `tkbaker`\n\n\n2018-12-29T14:31:34-05:00\n\n\n\n\ndocreate\ndofill\ndodashbuf\ndocconst\ndoconst\ndodotc\n\n\ncvariable delay\n5 delay c!\n\n\ndelay\n    jsr docreate\n    .byt 5\n\ndocreate\n    dex\n    dex\n    pla\n    sta STACK,x\n    pla\n    sta STACK+1,x\n    inc STACK,x\n    bne docreate01\n    inc STACK+1,x\ndocreate01\n    jmp nextx\n\ndodelay\n    lda #>(delay+3)\n    pha\n    lda #<(delay+3)\n    pha\n    ;fall through\nrfrom\n    dex\n    dex\n    pla\n    sta STACK,x\n    pla\n    sta STACK+1,x\n    jmp nextx\n\n\n\n\n2018-12-28T17:02:35-05:00\n\ncode capabilities demo\n  PETTIL\n  6502\n  Sweet16\n  BASIC\n  kosmon\n  xa65\n  ruby\n  make\n  Sublime Text 3\n  regex\n\nvideo capabilities demo\n  Face Synthesizer\n  PicChip\n  PETTIL editor\n  PETTIL animations\n  OBS\n  kdenlive\n\ncreate delay 5 c,\ncode jiffies\n    STACK ,x lda,\n    CLOCK    adc,\n         begin,\n    CLOCK    cmp,\n         0=\n         until,\n    drop     jmp,\nend-code\n: zz   ( -- )\n    delay @ jiffies ;\n: bird1\n    .\" JWK[lf][lf][lf]\" ;\n: bird2\n    .\" @W@[lf][lf][lf]\" ;\n: bird3\n    .\" UWI[lf][lf][lf]\" ;\n: birdx\n    .\"    [lf][lf][lf]\" ;\n: flap   ( -- )\n    bird1 zz bird2 zz bird3 zz bird2 zz birdx ;\ncreate compass\npetscii\" [dn]\" c,\npetscii\" [rt]\" c,\npetscii\" [up]\" c,\npetscii\" [lf]\" c,\n: flit   ( -- )\n    randu 3 and compass + c@ emit ;\n: fly   ( -- )\n    begin\n        flap flap flit\n        ?terminal\n    until ;\n\nmetacompiler:\nallot\n,\nc,\n:\n;\n<builds\ndoes>\ncase#\nif\nelse\nthen\nbegin\nwhile\nrepeat\nuntil\nagain\ndo\n?do\nloop\n+loop\n?exit\n?leave\n?terminal\nkey\n?key\nbasic\nbumpip\nnext\nnexto\nnextx\nbumpip\nvidram\n(lit)\n00\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\nirqvec!\nbrkvec!\nsp!\ncreate\nconstant\ndrop\ndup\nrot\nswap\nover\nand\nor\nxor\nnot\nnegate\n+\n-\n*\n/\n% (modulo)\n/mod\num/mod\nm/mod\nm*\num*\n\n\nreserved:\n\n40/mod\n22/mod\n20/mod\n\n\n\n2018-12-27T00:50:43-05:00\n\n;-------------------------------\n#if 0\n\n(.\")\n\n#endif\npdq\n    sty $84\n    lda iphi\n    sta $85\n    ldy #0\n    lda ($84),y\n    pha\n    tax\npdq01\n    iny\n    lda ($84),y\n    jsr $ffd2\n    dex\n    bne pdq01\n    pla\n    clc\n    adc $84\n    tay\n    lda iphi\n    adc #0\n    sta iphi\n    jmp next\n\n;-------------------------------\n#if 0\n\n.CR\n\n#endif\ndotcr\n    lda #$0D\n    .byt $2C\n    ;fall through\n\n040d   .basend:\n040d  A9 35       LDA #$35\n040f  85 92       STA .BRKVEC\n0411  A9 04       LDA #$04\n0413  85 93       STA $93\n0415   .restart:\n0415  6C A4 04    JMP (.userstartup)\n0418   .exit:\n0418  68          PLA\n0419  A8          TAY\n041a  68          PLA\n041b  68          PLA\n041c  68          PLA\n041d  68          PLA\n041e  68          PLA\n041f   .gotoay:\n041f  8D 2B 04    STA .iphi\n0422  D0 02       BNE .nextx\n0424   .spstore:\n0424  A2 00       LDX #$00\n0426   .nextx:\n0426  86 60       STX .STACK\n0428   .next:\n0428  C8          INY\n0429   .nexto:\n0429  BE 00 17    LDX $1700,Y\n042c  BD AF 04    LDA .cfahi,X\n042f  48          PHA\n0430  BD A6 04    LDA .tkexit,X\n0433  48          PHA\n0434  60          RTS\n0435   .enter:\n0435  BC 06 01    LDY $0106,X\n0438  AD 2B 04    LDA .iphi\n043b  9D 06 01    STA $0106,X\n043e  8C 2B 04    STY .iphi\n0441  BC 05 01    LDY $0105,X\n0444  88          DEY\n0445  4C 29 04    JMP .nexto\n0448   .branch:\n0448  AD 2B 04    LDA .iphi\n044b  85 05       STA $05\n044d  18          CLC\n044e  98          TYA\n044f  71 04       ADC ($04),Y\n0451  A8          TAY\n0452  90 03       BCC .branch01\n0454  CE 2B 04    DEC .iphi\n0457   .branch01:\n0457  4C 28 04    JMP .next\n045a   .qbranch:\n045a  4C 28 04    JMP .next\n045d   .pdq:\n045d  84 84       STY $84\n045f  AD 2B 04    LDA .iphi\n0462  85 85       STA $85\n0464  A0 00       LDY #$00\n0466  B1 84       LDA ($84),Y\n0468  48          PHA\n0469  AA          TAX\n046a   .pdq01:\n046a  C8          INY\n046b  B1 84       LDA ($84),Y\n046d  20 D2 FF    JSR $FFD2\n0470  CA          DEX\n0471  D0 F7       BNE .pdq01\n0473  68          PLA\n0474  18          CLC\n0475  65 84       ADC $84\n0477  A8          TAY\n0478  AD 2B 04    LDA .iphi\n047b  69 00       ADC #$00\n047d  8D 2B 04    STA .iphi\n0480  4C 28 04    JMP .next\n0483   .dotcr:\n0483  A9 0D       LDA #$0D\n0485  2C A9 2A    BIT $2AA9\n0488  20 D2 FF    JSR $FFD2\n$048b) d 486 488\n0486   .simplest:\n0486  A9 2A       LDA #$2A\n0488  20 D2 FF    JSR $FFD2\n\n2018-12-26T04:02:42-05:00\n\\ fly\n: fly   ( -- )\n    begin\n        flap flap flit\n        ?terminal\n    until ;\n\n: flap   ( -- )\n    4 1 do\n        i frame zz\n    loop 0 frame ;\n\n: flit   ( -- )\n    \" udlr\" randu 3 and + c@ emit ;\n\nvariable delay        delay off\ncreate animation      10 allot\nvariable frames       frames off\n\n: zz   ( -- )\n    delay @ jiffies ;\n\n: frame   ( index -- )\n    2* animation + @ goto ;\n\n: +frame   ( addr -- )\n    <builds ,\n        frames 1+!\n    does>\n        @ $. ;\n\n\"    lll\" +frame\n\" UWIlll\" +frame\n\" @W@lll\" +frame\n\" JWKlll\" +frame\n\" @W@lll\" +frame\n\n\n$1090) p 1000\n    4096\n$1090) p 100d\n    4109\n\n\nThe top line of Vorth source is a backslash (\\) followed by blank-delimited names corresponding with\nVorth words.  Code is metacompiled recursively from a single outermost definition, which is hooked in `startup`  An example might be easier:\n\n\nVorth\n* interpret\n** never executes code, only generates compiled output\n** iterative searches through, stacks, and resolves names to source blocks.\n** related words may be combined on a source block\n** `-->` word to create multiblock source\n** parse off a word\n** is it in the symbol table already?\n** Vorth symbol table structure (same as PETTIL)\n*** cfa\n*** len/flags 8-bit\n*** name 8-bit string\n\n* interpret\n\ncompilation statuses\n* pending compilation\n** has negative token id\n** lowest number is compiled next\n* compiling\n\n\n\nCFA table, first low bytes then high bytes\n~ use a skip list to calculate token -> high byte, #words on each page\ntoken ids increment as each new entry is added to the dictionary\nwords are assigned a token id when they reach compile status\nwords are assigned a negative token id when they are in pending status\nprimitives created by `code` are compiled when encountered\n\n\n$0473) m 90 9f;m 1e0 1ff;z\n0090  2e e6 40 04  89 c3 40 1b  00 21 02 ff  00 00 00 00\n01e0  03 30 03 12  5c e3 39 02  2e 52 04  3d 03 36 31 39\n01f0  04 0d 5e 04  30 3c bb 17  04 fc c6 00  01 01 d7 fc\n0454  EA          NOP            - A:52 X:00 Y:3A SP:ea ..-B...C\n$0454) m 0400\n0400  00 0b 04 66  19 9e 31 30  33 37 00 00  00 a9 40 85   ...f..1037....@.\n0410  92 a9 04 85  93 20 1b 04  4c 15 04 6c  6c 04 8d 24   ..... ..L..ll..$\n0420  04 c8 b9 00  04 aa bd 73  04 48 bd 6e  04 48 60 a9   .......s.H.n.H`.\n0430  2e 20 d2 ff  4c 21 04 00  02 02 00 02  02 03 03 00   . ..L!..........\n0440  bc 06 01 ad  24 04 9d 06  01 8c 24 04  bc 05 01 88   ....$.....$.....\n0450  4c 22 04 ea  ea ea ea ea  ea ea ea ea  68 a8 68 aa   L\"..........h.h.\n0460  68 40 00 01  08 61 62 63  64 65 66 00  3a 04 52 61   h@...abcdef.:.Ra\n0470  2e 36 39 04  04 04 04 04  84 84 ad 24  04 85 85 a0   .69........$....\n0480  00 b1 84 48  aa c8 b1 84  20 d2 ff ca  d0 f7 68 18   ...H.... .....h.\n0490  65 84 a8 ad  24 04 69 00  8d 24 04 4c  21 04 aa aa   e...$.i..$.L!...\n$04a0)\n\n\n$0473) m 90 9f;m 1e0 1ff;z\n0090  2e e6 40 04  89 c3 40 1b  00 21 02 ff  00 00 00 00   ..@...@..!......\n01e0  03 30 03 12  5c e3 39 02  2e 52 04 3d  03 36 31 39   .0..\\.9..R.=.619\n01f0  04 0d 5e 04  30 3c bb 17  04 fc c6 00  01 01 d7 fc   ..^.0<..........\n0454  EA          NOP            - A:52 X:00 Y:3A SP:ea ..-B...C   43274035\n$0454) m 0400\n0400  00 0b 04 66  19 9e 31 30  33 37 00 00  00 a9 40 85   ...f..1037....@.\n0410  92 a9 04 85  93 20 1b 04  4c 15 04 6c  6c 04 8d 24   ..... ..L..ll..$\n0420  04 c8 b9 00  04 aa bd 73  04 48 bd 6e  04 48 60 a9   .......s.H.n.H`.\n0430  2e 20 d2 ff  4c 21 04 00  02 02 00 02  02 03 03 00   . ..L!..........\n0440  bc 06 01 ad  24 04 9d 06  01 8c 24 04  bc 05 01 88   ....$.....$.....\n0450  4c 22 04 ea  ea ea ea ea  ea ea ea ea  68 a8 68 aa   L\"..........h.h.\n0460  68 40 00 01  08 61 62 63  64 65 66 00  3a 04 52 61   h@...abcdef.:.Ra\n0470  2e 36 39 04  04 04 04 04  84 84 ad 24  04 85 85 a0   .69........$....\n0480  00 b1 84 48  aa c8 b1 84  20 d2 ff ca  d0 f7 68 18   ...H.... .....h.\n0490  65 84 a8 ad  24 04 69 00  8d 24 04 4c  21 04 aa aa   e...$.i..$.L!...\n$04a0)\n\n\n\n\n2018-12-25T16:07:59-05:00\nVorth\n\nToken threaded\n\nData stack\n* byte immediately above data stack is stack pointer mirror\n* builds downward from $5F\n* hybrid 16-bit/8-bit stack ( + - * /   operate on 8-bit values by default )\n* `drop nip dup tuck`   operate on 8-bits\n* unless you know it's in X already, SP can be found here\n* store X here if you're about to use it for something else\n\n\\ stack dup enter\n$60 cconstant stack\n\ncode dup\n    stack ,x  lda,\n              dex,\n    stack ,x  sta,\n    stack     stx,\n    next      jmp,\nend-code\n\n              ;    brk\n              ;($FFFE) ; --> $E61B\n              ;    pha\n              ;    txa\n              ;    pha\n              ;    tya\n              ;    pha\n              ;    tsx\n              ;    lda $0104,x\n              ;    and #$10\n              ;    beq +\n              ;    jmp ($0092)  ; --> enter\n              ;+\n              ;    jmp ($0090)\n\n              ;0107,x\n              ;0106,x RTI hi    ; <-- set IPHI to this page\n              ;0105,x RTI lo    ; <-- points to where BRK instruction is +2\n              ;0104,x P\n              ;0103,x A\n              ;0102,x X         ; data stack pointer\n              ;0101,x Y         ; IPLO\n              ;0100,x           ; <-- next stack entry goes here\n                                ; X = stack pointer\n                                ; A = #$10\n                                ; Y = IPLO\ncode enter\n    ldy $0106,x\n    lda iphi\n    sta $0106,x\n    sty iphi\n    ldy $0105,x\n    dey\n    jmp nexto\n\ncode exit\n\n\ne61b  48          PHA\ne61c  8A          TXA\ne61d  48          PHA\ne61e  98          TYA\ne61f  48          PHA\ne620  BA          TSX\ne621  BD 04 01    LDA $0104,X\ne624  29 10       AND #$10\ne626  F0 03       BEQ $E62B\ne628  6C 92 00    JMP ($0092)\ne62b  6C 90 00    JMP ($0090)\ne62e  20 EA FF    JSR $FFEA\ncode !\n    stack 2+\n          ,x  lda,\n    stack x)  sta,\n              inx,\n              inx,\n              inx,\n    next 2-   jmp,\nend-code\n\ncode @\n    stack x)  lda,\n              inx,\n    stack ,x  sta,\n    next 2-   jmp,\nend-code\n\nSecondary\n* a list of other secondaries or primitives\n* each word in the dictionary has a token value of $00-$FF\n* `$00` is the token for `exit`\n* 6502 `brk` instruction is used to call `enter` for `:` definitions\n\nchain secondaries with only one intervening null byte\nReturn stack\n* SP register, 6502 machine stack\n\n$050f) d 500 50c\n6502 function to generate\n0 1 2 3 2 --->---|\n^-----<----------|\n\n0500  A9 00       LDA #$00\n0502  49 01       EOR #$01\n0504  49 03       EOR #$03\n0506  49 01       EOR #$01\n0508  49 01       EOR #$01\n050a  49 02       EOR #$02\n050c  4C 02 05    JMP $0502\n\n\n\n\n2018-12-25T02:57:08-05:00\n\nvorth\nbrk = enter\n00 = exit token\n01+ = user tokens\nVIC-20 Vorth object code is target compiled as-needed from source on PETTIL host\nusing `brk` and `00` for `enter` and `exit` means one extra `00` byte can be squeezed out between every adjacent pair of colon definitions\nVorth rewards hi level Forth\nmemory model based on uxForth writeups\ntoken-threaded means we never have to worry about pesky `jmp ($xxFF)` bug\nUse Vorth compiler like so\n\n15 vorth   \\ load block 15 with the Vorth compiler\n          \\ this word is the startup word and it will\n          \\ grab and build source for all other words\n          \\ it needs, locating them by searching the\n          \\ `index` lines of source screens.  Although\n          \\ only 40 characters are displayed by `index`\n          \\ the entire (up to 88 characters on a VIC-20)\n          \\ logical line is searchable, and so\n          \\ should contain all words defined on a screen\n\n\n\\ screen 15 should look like:\n\n\\ fly\n: fly   \\ --\n    begin\n        flap flap flit\n        ?terminal\n    until ;\n\n\n\\ screen 16:\n\n\\ delay bird1 bird2 bird3 birdx zz flit flap\nvariable delay 5 delay !\n: bird1   .\" UWIlll\" ;\n: bird2   .\" @W@lll\" ;\n: bird3   .\" JWKlll\" ;\n: birdx   .\"    lll\" ;\n: zz   delay @ jiffies ;\n: flap bird1 zz bird2 zz\n  bird3 zz bird2 zz birdx ;\n: flit \" udlr\" randu 3 and + c@ emit ;\n\n\n\n\n\n\n2018-12-23T18:17:03-05:00\n\npet 3032\npet #700251\npet 4032\npet 8032\nkosmon 9000\n\n\n\n\n\n2018-12-15T19:57:33-05:00\n\nthe mission -- I want PETTIL to talk to the PicChip ROM\n\n1. xa65 sourcify the PicChip ROM\nIn this game, a contest of human programmer vs. wall clock and impenetrable binary numbers, we disassemble the 4K ROM, dividing it into data and code and labeling the code.  \"How do we know when we are done?\"\n\nWe'll have a code listing\nthat builds with xa65\nproducing the original binary object\n\n\n\n\n`enter` wll be the `brk` instruction\n\n\n\nfoo.low\nfoo.high\n\nfoo\n  1040    00       brk\n  (FFFC)\n  FF72    48       pha\n  FF73    8A       txa\n  FF74    48       pha\n  FF75    98       tya\n  FF76    48       pha\n  FF77    BA       tsx\n  FF78    BD 04 01 lda $0104,x\n  FF7B    29 10    and #$10\n  FF7D    F0 03    beq $FF82\n  FF7F    6C 16 03 jmp ($0316)\n  FF82    6c 14 03 jmp ($0314)\n\nA = $10\nX = SP\nY = ip.lo\n\n  (0316)\n  1780\n      txa\n      clc\n      adc #4\n      tax\n      txs\n      pla\n      sta callerlo\n      pla\n      sta callerhi\n      pla\n\n(FFFE)\n      pha\n      txa\n      pha\n      tya\n      pha\n      tsx\n      lda $0104,x\n      and #$10\n      beq +\n      jmp ($0316)\n+\n      jmp ($0314)\n\n\nfoo\n00    enter\n03    dup\n02    exit\n\n\n\nexit\n\n\n\nnextl\n1000 A4 FF       ldy iplo       ;[3] alternate entry point if Y was stashed here,\nnext\n1003 C8          iny            ;[2] bump instruction pointer\niphi = *+2\n1004 BE 00 13    ldx ip,y       ;[4] fetch instruction token, self-modifying code here\n1007 BD 00 14    lda tablehi,y  ;[4] high byte of code field address (CFA)\n100A 48          pha            ;[3]\n100B BD 00 15    lda tablelo,y  ;[4] low byte of code field address (CFA)\n100E 48          pha\n100F 60          rts\n\ntablelo/tablehi is a set of code field addresses, up to 256 of them.  The Vorth compiler builds\nthe entire target dictionary from source and includes only words required by the top level code.\n\nWhen a word is first referenced in source, the symbol table is scanned.  If it isn't listed, it is added and its own source block is called to compile it into the dictionary.  Any words referenced\nare added in a recursive/nested fashion until the initial source block is completed.\n\n\n     ; compiler will insert 'page' in a secondary to increment iphi\n    ; iphi-1 always contains 0\n    ldx iphi_0,y                ; fetch the token at the instruction pointer\n    lda tablehi,x               ; high byte of code field address for token X\n    pha\n    lda tablelo,x               ; low byte of code field address (minus 1) for token X\n    pha\n    rts\n\n    ldy #8\n    ;bit abs\n    ldy #6\n    ;bit abs\n    ldy #4\n    ;bit abs\n    ldy #2\n    ;bit abs\n    jsr setirq\n\n\nsetirq\n    ldy table\n    lda table+1,y\n    pha\n    lda table,y\n    pha\n    tya\n\ntable\n    .word MAINIRQ               ; E455\n    .word\n\nPETTIL\nintegrated KOSMON\n#700251 upgrade 4.0 80\n\n\n10 printchr$(147)\n20 x=1\n30 f$=\"facebook-c64-group\"\n40 n=1\n50 c$=left$(f$,1)\n60 fori=0ton\n70 print\" \";\n80 next\n90 printc$\n100 n=n+1\n110 ifn=39thenn=0:x=x+1:c$=mid$(f$,x,1)\n120 printchr$(145);\n130 goto60\n\n2018-12-14T22:44:42-05:00\n\n\n6502 Programmers wanted: github.com/chitselb/pettil + VICE\n\nThe PETTILmob is a group coding project, here on Facebook.  Please participate!  Forth for the Commodore PET which I want to get to a solid 1.0 release on multiple Commodore platforms (PET VIC-20 C=64 C128 Plus/4)\n\nTo get into metacompilation (make the \"Forth is written in Forth\" thing happen) I'm going to do a follow-on Forth for Unexpanded VIC-20 called Vorth.  PETTIL will generate binaries including a kernel that run on an unexpanded VIC-20, with each program built entirely from libraries of source.  It borrows a lot from the ideas and information found at http://oneweekwonder.blogspot.com/2017/03/uxforth-unexpanded-forth-for-standard.html\n\ntoken-threaded (within a secondary,\n\nmax 256 words\n\nno development environment on target machine, but writing a small Vorth monitor program with some assembly capability might be a good project\n\n\nRules of Code Golf\n1. save bytes\n2. save cycles\n3. lowest score wins!\n\nI prefer saving bytes to saving cycles, but it usually works out both ways.\n\n\n\nporting to the rest of the Commodore 8-bits\nsetting up VICE configurations for a variety of hardware\nfinding/fixing bugs\nadd test automation\n\nPlaying in the unstable branch (noobranch)\n\n1. get VICE\n2. grab the recent .d64 from `main` branch\n3. run it on your configuration\n4. if a thing doesn't work, put a screenshot here, ask me and I'll know why\n5. if you like to find this yourself, compare the code to the same word in prior branches, or ask me\n\nThere's a coding style that has evolved during the long life of this project, If someone wants to write it up or do any other documentation fixes, that would be very helpful.  I'm comfortable with it, but if something really bugs you, I'm eager to hear suggestions\n\n\nDocs for each word are above the code but the `tiddlypettil.html` is easier to read.\n\n\nSWOT\nstrenghs\nweaknesses\nopportunities\n\n2018-12-12T02:28:57-05:00\n\nirq\nbrk\nnmi\n\n1. identify mentions of irq, brk, nmi\nirq\nbrk\nnmi\ntoggle\nsei\ncli\n\n\nread:\nsei\njiffyfetch\n\nwrite:\nirqstore\ntoggleirqs\n_edit\n_mackinac\ntoggleirqbrk\nuserirqtoggle\nuserbrktoggle\n\n\n\n\n\nBASIC\nirq\nbrk\nnmi\n  save (brk) vector\n  brk = Sweet16\n  swap zeropage\n\nPETTIL --> BASIC\n  brk = (saved)\n  swap zeropage\n\nPETTIL --> MONA\n  swap zeropage\n  brk = (saved)\n\nPETTIL --> MON\n  leave zeropage alone\n  brk = (saved)\n\nKosmon --> PETTIL\n\nKosmon --> BASIC\n\nKosmon --> caller\n\n\n? calculate expression or show commands\n, modify disassembly\n: modify memory\n; modify registers\n< modify screencode\n> modify ascii\n[  modify character data\n]  modify sprite data\n@ disk command\n\nA [A]ssembler\nB [B]ank number\nC [C]ompare memory\nD [D]isassemble memory\nEC [E]dit [C]haracter\nES [E]dit [S]prite\nF [F]ill memory\nG [G]oto address\nGF [G]oto address in disk drive\nH [H]unt memory\nI [I]nitialize I/O\nJ [J]SR address\nK ascii memory dump\nL [L]oad file\nM [M]emory dump\n~N\n~O [O]ut to BASIC\nP [P]rint output prefix\n~Q [Q]uit monitor\nR [R]egister dump\nS [S]ave file\nT [T]ransfer memory range\n~U\nV [V]erify file\n~W\nX e[X]it monitor\nY hunt disassembl[Y]\n~Z\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2018-12-08T12:56:39-05:00\n\nfor i in *.asm\ndo\n  NAME=`basename $i .asm`\n  echo \"----- $NAME -----\"\n  ../bin/dasm $i -f1 -o$NAME.bin -DINEEPROM\n  # echo \"dasm returned $?\"\n  cmp -s $NAME.bin $NAME.bin.ref\n  if [ $? == 0 ]\n  then\n    echo \"------------------------good\"\n  else\n    echo \"------------------------error\"\n  fi\n  ../bin/ftohex 1 $NAME.bin $NAME.hex\n  # echo \"ftohex returned $?\"\n  cmp -s $NAME.hex $NAME.hex.ref\n  if [ $? == 0 ]\n  then\n    echo \"------------------------good\"\n  else\n    echo \"------------------------error\"\n  fi\ndone\n\n\n2018-12-06T12:33:49-05:00\n\nRP repeat on\nRO repeat off\n\nAI invert\nAN normal\nAF fill\nAR reverse\n\n\n\n(create)\n                      00-8C    IRQ     BRK     NMI    FFFA    FFFC    FFFE\n700251/4.0\n  default             basic   E455    D478    B3FF\n  supermon            ?\n  micromon            ?       7355    75EB\n  pettil                              0655\n  mon                 basic           D478\n  mona                pettil          D478\n\nUpgrade\n  default             basic                           FCFE    FCD1    E61B\n  supermon            ?\n  micromon            ?\n  pettil\n  mon                 basic\n  mona                pettil\n\n2018-12-05T20:22:53-05:00\nwhat is MICROMON doing with $E813\n\n2018-12-05T00:39:46-05:00\n\nbuglist:\n\nvideo#2:\n\n============\n1.0 release:\n  builds\n    #700251\n      max deadbeef\n      supermon 7A00\n      micromon 6B00\n    4.0\n    80-col\n    upgrade\n  /mod\n    create differences with F83 doc section -- symmetric vs. floored\n    create unit tests\n  Sweet16 assembler\n  test/fix assembler\n============\nnice to have:\n  builds\n    VIC-20+24K\n    VIC-20 cart\n    C=64\n    C=64 cart\nVorth kernel, metacompiled\n\n2018-12-04T03:55:06-05:00\n\nfirst, set up an elaborate set of intertwingled loops to govern building, committing, pushing,\nreleasing, designing, discussing... the elements of your process\nbegin making development faster everywhere you can, starting with ignoring your own process rules!\n\nFor example, augment pivotal tracker with `~/pettil/buglist.txt` with the current focus on top should work.  Each bug is a phrase.  Notes can be inserted below, after all, it's just a textfile.  Keep this one open.  During 'hot pursuit' development, just keep tabs on what you're doing in buglist.txt and maybe even journal notes to paste into pivotal tracker later.  Now your view is just text, limited to the problem space, formatted by you with a simple tool (your preferred text editor) instead of the complicated PT web UI.  Your brain doesn't have to struggle as much switching context into yet another tool.\n\nI keep an idea list called `moshpit` which sometimes has code, other times thoughts.\n\n\n\n\n\n\n\n2018-12-04T01:23:59-05:00\n\n\n\nthe effect: several versions are built for different hardware/software configurations, and\nthree of them launch:\nPET 700251 max deadbeef         0\nPET 700251 supermon             1\nPET 700251 micromon             2\n\n2018-11-30T16:33:55-05:00\nfixup cbm.def\n\n\n2018-11-27T20:39:56-05:00\n\n [Return to Main Page] NMOS 6502 Opcodes by John Pickens, Updated by Bruce Clark and by Ed Spittles\n[Up to Tutorials and Aids]\nINDEX\nBranches    Decimal Mode    Interrupt Flag  Overflow Flag   Program Counter     Stack   Times   Wrap-around\n\nADC     AND     ASL     BCC\nBCS     BEQ     BIT     BMI\nBNE     BPL     BRK     BVC\nBVS     CLC   CLD   CLI\nCLV     CMP     CPX     CPY\nDEC     DEX     DEY     EOR\nINC     INX     INY     JMP\nJSR     LDA     LDX     LDY\nLSR     NOP     ORA     PHA\nPHP     PLA     PLP     ROL\nROR     RTI   RTS   SBC\nSEC     SED     SEI     STA\nSTX     STY     TAX     TAY\nTSX     TXA     TXS     TYA\n\n\nADC (ADd with Carry)\n\nAffects Flags: S V Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     ADC #$44      $69  2   2\nZero Page     ADC $44       $65  2   3\nZero Page,X   ADC $44,X     $75  2   4\nAbsolute      ADC $4400     $6D  3   4\nAbsolute,X    ADC $4400,X   $7D  3   4+\nAbsolute,Y    ADC $4400,Y   $79  3   4+\nIndirect,X    ADC ($44,X)   $61  2   6\nIndirect,Y    ADC ($44),Y   $71  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nADC results are dependant on the setting of the decimal flag. In decimal mode, addition is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal).\n\nThere is no way to add without carry.\n\n\nAND (bitwise AND with accumulator)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     AND #$44      $29  2   2\nZero Page     AND $44       $25  2   3\nZero Page,X   AND $44,X     $35  2   4\nAbsolute      AND $4400     $2D  3   4\nAbsolute,X    AND $4400,X   $3D  3   4+\nAbsolute,Y    AND $4400,Y   $39  3   4+\nIndirect,X    AND ($44,X)   $21  2   6\nIndirect,Y    AND ($44),Y   $31  2   5+\n\n+ add 1 cycle if page boundary crossed\n\n\nASL (Arithmetic Shift Left)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ASL A         $0A  1   2\nZero Page     ASL $44       $06  2   5\nZero Page,X   ASL $44,X     $16  2   6\nAbsolute      ASL $4400     $0E  3   6\nAbsolute,X    ASL $4400,X   $1E  3   7\n\nASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.\n\n\nBIT (test BITs)\n\nAffects Flags: N V Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     BIT $44       $24  2   3\nAbsolute      BIT $4400     $2C  3   4\n\nBIT sets the Z flag as though the value in the address tested were ANDed with the accumulator. The S and V flags are set to match bits 7 and 6 respectively in the value stored at the tested address.\n\nBIT is often used to skip one or two following bytes as in:\n\nCLOSE1 LDX #$10   If entered here, we\n       .BYTE $2C  effectively perform\nCLOSE2 LDX #$20   a BIT test on $20A2,\n       .BYTE $2C  another one on $30A2,\nCLOSE3 LDX #$30   and end up with the X\nCLOSEX LDA #12    register still at $10\n       STA ICCOM,X upon arrival here.\n\nBeware: a BIT instruction used in this way as a NOP does have effects: the flags may be modified, and the read of the absolute address, if it happens to access an I/O device, may cause an unwanted action.\n\n\nBranch Instructions\n\nAffect Flags: none\n\nAll branches are relative mode and have a length of two bytes. Syntax is \"Bxx Displacement\" or (better) \"Bxx Label\". See the notes on the Program Counter for more on displacements.\n\nBranches are dependant on the status of the flag bits when the op code is encountered. A branch not taken requires two machine cycles. Add one if the branch is taken and add one more if the branch crosses a page boundary.\n\nMNEMONIC                       HEX\nBPL (Branch on PLus)           $10\nBMI (Branch on MInus)          $30\nBVC (Branch on oVerflow Clear) $50\nBVS (Branch on oVerflow Set)   $70\nBCC (Branch on Carry Clear)    $90\nBCS (Branch on Carry Set)      $B0\nBNE (Branch on Not Equal)      $D0\nBEQ (Branch on EQual)          $F0\n\nThere is no BRA (BRanch Always) instruction but it can be easily emulated by branching on the basis of a known condition. One of the best flags to use for this purpose is the oVerflow which is unchanged by all but addition and subtraction operations.\n\nA page boundary crossing occurs when the branch destination is on a different page than the instruction AFTER the branch instruction. For example:\n\n  SEC\n  BCS LABEL\n  NOP\n\nA page boundary crossing occurs (i.e. the BCS takes 4 cycles) when (the address of) LABEL and the NOP are on different pages. This means that\n\n        CLV\n        BVC LABEL\n  LABEL NOP\n\nthe BVC instruction will take 3 cycles no matter what address it is located at.\n\n\nBRK (BReaK)\n\nAffects Flags: B\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       BRK           $00  1   7\n\nBRK causes a non-maskable interrupt and increments the program counter by one. Therefore an RTI will go to the address of the BRK +2 so that BRK may be used to replace a two-byte instruction for debugging and the subsequent RTI will be correct.\n\n\nCMP (CoMPare accumulator)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CMP #$44      $C9  2   2\nZero Page     CMP $44       $C5  2   3\nZero Page,X   CMP $44,X     $D5  2   4\nAbsolute      CMP $4400     $CD  3   4\nAbsolute,X    CMP $4400,X   $DD  3   4+\nAbsolute,Y    CMP $4400,Y   $D9  3   4+\nIndirect,X    CMP ($44,X)   $C1  2   6\nIndirect,Y    CMP ($44),Y   $D1  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nCompare sets flags as if a subtraction had been carried out. If the value in the accumulator is equal or greater than the compared value, the Carry will be set. The equal (Z) and sign (S) flags will be set based on equality or lack thereof and the sign (i.e. A>=$80) of the accumulator.\n\n\nCPX (ComPare X register)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CPX #$44      $E0  2   2\nZero Page     CPX $44       $E4  2   3\nAbsolute      CPX $4400     $EC  3   4\n\nOperation and flag results are identical to equivalent mode accumulator CMP ops.\n\n\nCPY (ComPare Y register)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     CPY #$44      $C0  2   2\nZero Page     CPY $44       $C4  2   3\nAbsolute      CPY $4400     $CC  3   4\n\nOperation and flag results are identical to equivalent mode accumulator CMP ops.\n\n\nDEC (DECrement memory)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     DEC $44       $C6  2   5\nZero Page,X   DEC $44,X     $D6  2   6\nAbsolute      DEC $4400     $CE  3   6\nAbsolute,X    DEC $4400,X   $DE  3   7\n\n\nEOR (bitwise Exclusive OR)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     EOR #$44      $49  2   2\nZero Page     EOR $44       $45  2   3\nZero Page,X   EOR $44,X     $55  2   4\nAbsolute      EOR $4400     $4D  3   4\nAbsolute,X    EOR $4400,X   $5D  3   4+\nAbsolute,Y    EOR $4400,Y   $59  3   4+\nIndirect,X    EOR ($44,X)   $41  2   6\nIndirect,Y    EOR ($44),Y   $51  2   5+\n\n+ add 1 cycle if page boundary crossed\n\n\nFlag (Processor Status) Instructions\n\nAffect Flags: as noted\n\nThese instructions are implied mode, have a length of one byte and require two machine cycles.\n\nMNEMONIC                       HEX\nCLC (CLear Carry)              $18\nSEC (SEt Carry)                $38\nCLI (CLear Interrupt)          $58\nSEI (SEt Interrupt)            $78\nCLV (CLear oVerflow)           $B8\nCLD (CLear Decimal)            $D8\nSED (SEt Decimal)              $F8\n\nNotes:\n\n  The Interrupt flag is used to prevent (SEI) or enable (CLI) maskable interrupts (aka IRQ's). It does not signal the presence or absence of an interrupt condition. The 6502 will set this flag automatically in response to an interrupt and restore it to its prior status on completion of the interrupt service routine. If you want your interrupt service routine to permit other maskable interrupts, you must clear the I flag in your code.\n\n  The Decimal flag controls how the 6502 adds and subtracts. If set, arithmetic is carried out in packed binary coded decimal. This flag is unchanged by interrupts and is unknown on power-up. The implication is that a CLD should be included in boot or interrupt coding.\n\n  The Overflow flag is generally misunderstood and therefore under-utilised. After an ADC or SBC instruction, the overflow flag will be set if the twos complement result is less than -128 or greater than +127, and it will cleared otherwise. In twos complement, $80 through $FF represents -128 through -1, and $00 through $7F represents 0 through +127. Thus, after:\n\n  CLC\n  LDA #$7F ;   +127\n  ADC #$01 ; +   +1\n\nthe overflow flag is 1 (+127 + +1 = +128), and after:\n\n  CLC\n  LDA #$81 ;   -127\n  ADC #$FF ; +   -1\n\nthe overflow flag is 0 (-127 + -1 = -128). The overflow flag is not affected by increments, decrements, shifts and logical operations i.e. only ADC, BIT, CLV, PLP, RTI and SBC affect it. There is no op code to set the overflow but a BIT test on an RTS instruction will do the trick.\n\n\nINC (INCrement memory)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     INC $44       $E6  2   5\nZero Page,X   INC $44,X     $F6  2   6\nAbsolute      INC $4400     $EE  3   6\nAbsolute,X    INC $4400,X   $FE  3   7\n\n\nJMP (JuMP)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nAbsolute      JMP $5597     $4C  3   3\nIndirect      JMP ($5597)   $6C  3   5\n\nJMP transfers program execution to the following address (absolute) or to the location contained in the following address (indirect). Note that there is no carry associated with the indirect jump so:\n\nAN INDIRECT JUMP MUST NEVER USE A\nVECTOR BEGINNING ON THE LAST BYTE\nOF A PAGE\n\nFor example if address $3000 contains $40, $30FF contains $80, and $3100 contains $50, the result of JMP ($30FF) will be a transfer of control to $4080 rather than $5080 as you intended i.e. the 6502 took the low byte of the address from $30FF and the high byte from $3000.\n\n\nJSR (Jump to SubRoutine)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nAbsolute      JSR $5597     $20  3   6\n\nJSR pushes the address-1 of the next operation on to the stack before transferring program control to the following address. Subroutines are normally terminated by a RTS op code.\n\n\nLDA (LoaD Accumulator)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDA #$44      $A9  2   2\nZero Page     LDA $44       $A5  2   3\nZero Page,X   LDA $44,X     $B5  2   4\nAbsolute      LDA $4400     $AD  3   4\nAbsolute,X    LDA $4400,X   $BD  3   4+\nAbsolute,Y    LDA $4400,Y   $B9  3   4+\nIndirect,X    LDA ($44,X)   $A1  2   6\nIndirect,Y    LDA ($44),Y   $B1  2   5+\n\n+ add 1 cycle if page boundary crossed\n\n\nLDX (LoaD X register)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDX #$44      $A2  2   2\nZero Page     LDX $44       $A6  2   3\nZero Page,Y   LDX $44,Y     $B6  2   4\nAbsolute      LDX $4400     $AE  3   4\nAbsolute,Y    LDX $4400,Y   $BE  3   4+\n\n+ add 1 cycle if page boundary crossed\n\n\nLDY (LoaD Y register)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     LDY #$44      $A0  2   2\nZero Page     LDY $44       $A4  2   3\nZero Page,X   LDY $44,X     $B4  2   4\nAbsolute      LDY $4400     $AC  3   4\nAbsolute,X    LDY $4400,X   $BC  3   4+\n\n+ add 1 cycle if page boundary crossed\n\n\nLSR (Logical Shift Right)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   LSR A         $4A  1   2\nZero Page     LSR $44       $46  2   5\nZero Page,X   LSR $44,X     $56  2   6\nAbsolute      LSR $4400     $4E  3   6\nAbsolute,X    LSR $4400,X   $5E  3   7\n\nLSR shifts all bits right one position. 0 is shifted into bit 7 and the original bit 0 is shifted into the Carry.\n\n\nWrap-Around\n\nUse caution with indexed zero page operations as they are subject to wrap-around. For example, if the X register holds $FF and you execute LDA $80,X you will not access $017F as you might expect; instead you access $7F i.e. $80-1. This characteristic can be used to advantage but make sure your code is well commented.\n\nIt is possible, however, to access $017F when X = $FF by using the Absolute,X addressing mode of LDA $80,X. That is, instead of:\n\n  LDA $80,X    ; ZeroPage,X - the resulting object code is: B5 80\n\nwhich accesses $007F when X=$FF, use:\n\n  LDA $0080,X  ; Absolute,X - the resulting object code is: BD 80 00\n\nwhich accesses $017F when X = $FF (a at cost of one additional byte and one additional cycle). All of the ZeroPage,X and ZeroPage,Y instructions except STX ZeroPage,Y and STY ZeroPage,X have a corresponding Absolute,X and Absolute,Y instruction. Unfortunately, a lot of 6502 assemblers don't have an easy way to force Absolute addressing, i.e. most will assemble a LDA $0080,X as B5 80. One way to overcome this is to insert the bytes using the .BYTE pseudo-op (on some 6502 assemblers this pseudo-op is called DB or DFB, consult the assembler documentation) as follows:\n\n  .BYTE $BD,$80,$00  ; LDA $0080,X (absolute,X addressing mode)\n\nThe comment is optional, but highly recommended for clarity.\n\nIn cases where you are writing code that will be relocated you must consider wrap-around when assigning dummy values for addresses that will be adjusted. Both zero and the semi-standard $FFFF should be avoided for dummy labels. The use of zero or zero page values will result in assembled code with zero page opcodes when you wanted absolute codes. With $FFFF, the problem is in addresses+1 as you wrap around to page 0.\n\n\nProgram Counter\n\nWhen the 6502 is ready for the next instruction it increments the program counter before fetching the instruction. Once it has the op code, it increments the program counter by the length of the operand, if any. This must be accounted for when calculating branches or when pushing bytes to create a false return address (i.e. jump table addresses are made up of addresses-1 when it is intended to use an RTS rather than a JMP).\n\nThe program counter is loaded least signifigant byte first. Therefore the most signifigant byte must be pushed first when creating a false return address.\n\nWhen calculating branches a forward branch of 6 skips the following 6 bytes so, effectively the program counter points to the address that is 8 bytes beyond the address of the branch opcode; and a backward branch of $FA (256-6) goes to an address 4 bytes before the branch instruction.\n\n\nExecution Times\n\nOp code execution times are measured in machine cycles; one machine cycle equals one clock cycle. Many instructions require one extra cycle for execution if a page boundary is crossed; these are indicated by a + following the time values shown.\n\n\nNOP (No OPeration)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       NOP           $EA  1   2\n\nNOP is used to reserve space for future modifications or effectively REM out existing code.\n\n\nORA (bitwise OR with Accumulator)\n\nAffects Flags: S Z\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     ORA #$44      $09  2   2\nZero Page     ORA $44       $05  2   3\nZero Page,X   ORA $44,X     $15  2   4\nAbsolute      ORA $4400     $0D  3   4\nAbsolute,X    ORA $4400,X   $1D  3   4+\nAbsolute,Y    ORA $4400,Y   $19  3   4+\nIndirect,X    ORA ($44,X)   $01  2   6\nIndirect,Y    ORA ($44),Y   $11  2   5+\n\n+ add 1 cycle if page boundary crossed\n\n\nRegister Instructions\n\nAffect Flags: S Z\n\nThese instructions are implied mode, have a length of one byte and require two machine cycles.\n\nMNEMONIC                 HEX\nTAX (Transfer A to X)    $AA\nTXA (Transfer X to A)    $8A\nDEX (DEcrement X)        $CA\nINX (INcrement X)        $E8\nTAY (Transfer A to Y)    $A8\nTYA (Transfer Y to A)    $98\nDEY (DEcrement Y)        $88\nINY (INcrement Y)        $C8\n\n\nROL (ROtate Left)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ROL A         $2A  1   2\nZero Page     ROL $44       $26  2   5\nZero Page,X   ROL $44,X     $36  2   6\nAbsolute      ROL $4400     $2E  3   6\nAbsolute,X    ROL $4400,X   $3E  3   7\n\nROL shifts all bits left one position. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.\n\n\nROR (ROtate Right)\n\nAffects Flags: S Z C\n\nMODE           SYNTAX       HEX LEN TIM\nAccumulator   ROR A         $6A  1   2\nZero Page     ROR $44       $66  2   5\nZero Page,X   ROR $44,X     $76  2   6\nAbsolute      ROR $4400     $6E  3   6\nAbsolute,X    ROR $4400,X   $7E  3   7\n\nROR shifts all bits right one position. The Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry.\n\n\nRTI (ReTurn from Interrupt)\n\nAffects Flags: all\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       RTI           $40  1   6\n\nRTI retrieves the Processor Status Word (flags) and the Program Counter from the stack in that order (interrupts push the PC first and then the PSW).\n\nNote that unlike RTS, the return address on the stack is the actual address rather than the address-1.\n\n\nRTS (ReTurn from Subroutine)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nImplied       RTS           $60  1   6\n\nRTS pulls the top two bytes off the stack (low byte first) and transfers program control to that address+1. It is used, as expected, to exit a subroutine invoked via JSR which pushed the address-1.\n\nRTS is frequently used to implement a jump table where addresses-1 are pushed onto the stack and accessed via RTS eg. to access the second of four routines:\n\n LDX #1\n JSR EXEC\n JMP SOMEWHERE\n\nLOBYTE\n .BYTE <ROUTINE0-1,<ROUTINE1-1\n .BYTE <ROUTINE2-1,<ROUTINE3-1\n\nHIBYTE\n .BYTE >ROUTINE0-1,>ROUTINE1-1\n .BYTE >ROUTINE2-1,>ROUTINE3-1\n\nEXEC\n LDA HIBYTE,X\n PHA\n LDA LOBYTE,X\n PHA\n RTS\n\n\nSBC (SuBtract with Carry)\n\nAffects Flags: S V Z C\n\nMODE           SYNTAX       HEX LEN TIM\nImmediate     SBC #$44      $E9  2   2\nZero Page     SBC $44       $E5  2   3\nZero Page,X   SBC $44,X     $F5  2   4\nAbsolute      SBC $4400     $ED  3   4\nAbsolute,X    SBC $4400,X   $FD  3   4+\nAbsolute,Y    SBC $4400,Y   $F9  3   4+\nIndirect,X    SBC ($44,X)   $E1  2   6\nIndirect,Y    SBC ($44),Y   $F1  2   5+\n\n+ add 1 cycle if page boundary crossed\n\nSBC results are dependant on the setting of the decimal flag. In decimal mode, subtraction is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal).\n\nThere is no way to subtract without the carry which works as an inverse borrow. i.e, to subtract you set the carry before the operation. If the carry is cleared by the operation, it indicates a borrow occurred.\n\n\nSTA (STore Accumulator)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STA $44       $85  2   3\nZero Page,X   STA $44,X     $95  2   4\nAbsolute      STA $4400     $8D  3   4\nAbsolute,X    STA $4400,X   $9D  3   5\nAbsolute,Y    STA $4400,Y   $99  3   5\nIndirect,X    STA ($44,X)   $81  2   6\nIndirect,Y    STA ($44),Y   $91  2   6\n\n\nStack Instructions\n\nThese instructions are implied mode, have a length of one byte and require machine cycles as indicated. The \"PuLl\" operations are known as \"POP\" on most other microprocessors. With the 6502, the stack is always on page one ($100-$1FF) and works top down.\n\nMNEMONIC                        HEX TIM\nTXS (Transfer X to Stack ptr)   $9A  2\nTSX (Transfer Stack ptr to X)   $BA  2\nPHA (PusH Accumulator)          $48  3\nPLA (PuLl Accumulator)          $68  4\nPHP (PusH Processor status)     $08  3\nPLP (PuLl Processor status)     $28  4\n\n\nSTX (STore X register)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STX $44       $86  2   3\nZero Page,Y   STX $44,Y     $96  2   4\nAbsolute      STX $4400     $8E  3   4\n\n\nSTY (STore Y register)\n\nAffects Flags: none\n\nMODE           SYNTAX       HEX LEN TIM\nZero Page     STY $44       $84  2   3\nZero Page,X   STY $44,X     $94  2   4\nAbsolute      STY $4400     $8C  3   4\n\nLast Updated May 5, 2017.\n\n\nAt powerup, the PET (hopefully) comes on and stays on, and about one second later shows this banner, a READY. prompt, and a winking cursor.\n\nWhich way to go?  These arrows can move it around.  What most people would do next is write some BASIC or load something into memory.  We're going to go backwards instead.   How did all of that happen?  Let's take a look at what happens when the system starts up. [FFF0-FFFF]\nFor six clock cycles, or 0.000006 seconds, not much.  After waiting for the dust to settle, the CPU fetches the byte at $FFFC and the byte after it, which it loads into the program counter.  We're off.  [FD16 railroad track+cpu]\n\non the ninth clock cycle, the program counter goes on the address buss and the read signal goes on.  tick.  *tick* This hopefully points to an opcode and the responsible memory chip returns the stored value on the data buss.\nThe CPU decodes this, but meanwhile, the Program counter increments again and another read request is on the way to the chip it addresses.   Tick.  By now the opcode is decoded internally and the CPU knows what to do.  Suppose it's A2 FF LDX #$FF, which Mr. ROM tells us it indeed is.  The second read request  retrieves the value #$FF from ROM and the CPU puts it into the X register.   Tick.  * tick* The impatient Program Counter is already getting another byte!  [$78 SEI]  It's SEI, which is the 'do not disturb' instruction.  Tick. * tick* The CPU sets the I flag.  Now, when IRQ comes in, the CPU will ignore it.  GO away, interrupt signal. We are busy doing something important that can't be interrupted.\n\nTXS * tick * loads the stack pointer to some value to setup the stack area.  This doesn't happen very often, usually once in the startup code or when the programmer is intentionally using the stack to pass data around to a subroutine\n[TSX / LDA $0103,X -- passed argument example]\n\n[CLD] oh excuse me mr. program counter needs me to get back to it.  * tick *\n\n\n\n\nThe PET is a computer, and the computer is a tool.  But it is a tool that has very precise rules about how it can be used.  If your code conforms to those rules and does what you wanted it to do, you win!  If your code fails to accomplish the mission, try again.  Programming is playing the game against the PET until the PET says you win, and does exactly what you wanted it to do.\n\nBack to the cursor. It winks at a rate of 37 frames per second and occupies 1/10th of 1% of the total screen.  That seems insignificant, until you realize that your eye has been drawn to it since you first saw it.  That transformative experience, dropped on a world that had never really experienced a computer before, is what I hope to recreate.\n\n\n\n\n\n\n\n\n\nSuppose we went outside one day and found this Commodore PET sitting there by itself. After we brought it indoors, what would that be like?  And what exactly do we have here?\n\nIn these videos, we're going to show you how to do that, using an emulator you can run on just about any modern hardware.  We will then see what the PET can do for us today.\n\nLet's start by looking at the hardware.  There is a case that opens up, and it even has a kickstand to hold it open.  Pretty nifty.\n\nThere's a big power transformer in the corner, but the main feature is this big green board that spreads out over most of the floor of the case.  This one was made in 1979 and was sold by Newman Computer Exchange at 1250 North Main Street, in Ann Arbor, Michigan.  It has a few modifications.  We'll go over the standard parts first, then talk about the changes.\n\nAround the outer edges of the board there are several gold-plated connectors for plugging in other things.  We're going to plug in a cassette tape drive, and that's pretty much it.  There are many ways to connect a PET to the rest of the world, and by far the easiest is to use the emulator.  That's what we'll be doing most of the time.\n\nThe parallel user port was once connected to an acoustic coupled modem, and it also used to talk to a Petunia sound card.\n\nThere is an IEEE-488 buss, for connecting the PET to printers, disk drives, and maybe lab equipment.  We have an SD card reader that pretends to be a disk drive, which we'll use as a convenient path to get to the internet when it's time to operate the live hardware.\n\nHere is the other cassette tape port, this one connects to device #1.  Device #0 is the keyboard, device #2 is the other tape drive, and device #3 is the screen.  To keep things simple, these are the only devices we will be concerned with.\n\nThere is a lot of hardware in here and a lot more going on, but we are in a hurry to get to the end of this video so the programming can begin.\n\nWhat are all these chips then?\n\nUp at the front of the board I have 32K of random access memory, or RAM chips.  That is the maximum RAM allowed by law on this model of computer.  Originally it was sold as a 16K PET.  It has the most recent version of Microsoft BASIC now, and twice as much memory as the day it was made.\n\nThis batch of chips next to the RAM is the video circuitry.  On later Commodore computers this circuitry would be squeezed down into a single chip or two.  The dots that display when the PET draws a character are in this character generator ROM chip.  ROM means read only memory and works like RAM, or random access memory, except duh, you can't write to ROM.  Whatever is in the ROM chips stays the same forever, even when the machine is turned off.\n\n This character generator ROM is not connected to the address buss on the PET computer, which means it can't be seen by the CPU chip.  These are the shapes that you get to draw with.\n\nThere are two alphabets and each alphabet has a reverse.  Future Commodore computers like the VIC-20 will be able see and change what these dot patterns are, but not the PET.\n\nMoving toward the back, we find Seven ROM sockets. Five of them have a ROM chip in them.  The first two sockets are for chips we might purchase or create ourselves.  The next three are  Microsoft BASIC, then the Screen Editor, and last, the Kernel.  These chips have the programs in them that work the hardware and let the human being operate the computer from the keyboard and screen.\n\nThere are three more important chips, collectively referred to as the I/O chips, There are two Peripheral Interface Adapter or PIA chips, also called 6520 chips.  The other one is a Versatile Interface Adapter or VIA chip, with the number 6522.   They connect the Processor to external devices.\n\n There is this special add-on board called a PETvet that I plugged into the machine here, it has switches on it that let me use different ROM images, and a serial cable that lets me observe the PET remotely from another computer, and some other cool tricks.  But the main chip on this board is the actual, original  6502 CPU that came with this PET.  This is the chip I think about when I think about \"The Computer.\"  Here is a little bit of the story of this chip.\n\nIn 1974 a team of engineers at Motorola created the 6800 chip.  One of those engineers wanted to design a sort of younger brother to the 6800 as a follow-on project. Chip yield, which means how many working chips do you get when you test a batch of them, was not very good at first.  By cutting down the number of transistors by around 20%, they could build a less complicated processor out of fewer transistors, and more of them would work when they baked a wafer of silicon.  These new chips could be sold for 1/10th as much but so many more of them could be used inside more devices, that the high volume would make it a massively profitable venture.\n\n Nobody wanted to believe the engineer.  He left Motorola and did it anyway, in late 1974 and early 1975 at MOS Technology.\n\nMeanwhile, another company was a big customer of MOS Technology, and this company decided it didn't trust chip vendors anymore, so it wanted to make its own chips.  MOS Technology already had a processor chip and a single board computer, the KIM-1, which could save data on cassette tape.  Some people had already been building kit computers and connecting terminals to them.  Why not do all that work for them and just give them a video terminal they could turn on with a built-in microcomputer running BASIC?\n\nThe head of Commodore, Jack Tramiel, gave the engineer, Chuck Peddle, the green light, and the PET was introduced at the Consumer Electronics Show in Chicago in January of 1977.  It took a while to spin up the production line, but the PET started reaching customers by Summer of that year.\n\nThe central processing unit can put a 16-bit address on the address buss and read or write 8 bits of data on the data buss.  That's about all it can do.  Oh yeah, it runs at a million clock cycles per second.  The I/O chips, the RAM chips, and the ROM chips all have an address somewhere, and the CPU will very rapidly read and write to those addresses.  That's it.  That's the whole story of how it works.\n\nThink of the memory as being like bookshelves, but each book is just an 8-bit binary number between 0 and 255 decimal.  You can read it, you can write it, but you can't do too much with the values unless they are inside the CPU in a register.  The 6502 has one 8-bit main register \"A\" and two 8-bit index registers \"X\" and \"Y\".  There are also seven flag bits, an 8-bit stack pointer, and a 16-bit program counter.  There are just 56 bits of total register space inside the CPU chip.\n\nLet's close up the case and turn it on.\n\nThat case.  It is said to have been inspired by Stanley Kubrick's movie, \"2001: A Space Odyssey\" There is that trapezoidal shape, and the microgramma font on the label is also in the movie.\n\nBut what about the PET part?  The Pet Rock was a marketing phenomenon where a guy figured out how to sell rocks in boxes.  He made millions of dollars doing this.  Since nobody had ever tried to sell computers to people for their homes befor e, maybe they thought people who were stupid enough to buy Pet Rocks would be smart enough to buy PET computers.  I don't know.\n\nBut I do know that it shows 1000 characters on the screen and has 74 buttons on the keyboard, or 73 if you have the original PET.  I don't know how those earlier PET owners got anything done without a shift-lock key.\n\n\nNow is the time it was a dark and stormy night. The rain fell hard, and leaves blew against the car antennae, and did I properly pluralize antenna there?  The twanging sound, like a jew's harp, that's what woke him up.\n\nlead            suit = topic suit; value >= topic value\n                        topic suit = suit (unchanged)\n                        topic value = value\n                        +1\n\nfollow          suit = topic suit; value < topic value\n                        topic suit = suit (unchanged)\n                        topic value = value\n                        +0\n\nchange          suit = last suit; suit <> topic suit\n                        topic suit = suit\n                        topic value = value\n\nchange lead     suit = last suit; suit <> topic suit\n                        topic suit = suit\n                        topic value = value\n\nsmall talk      suit <> topic; value <= topic value\n                    topicvalue = 0\n\nforce change    play two identical suited cards <> topic suit\n                    only draw one\n                    flush play area\n                    play them as +1\n\n\n1 (controller)\n1.0 turn model\n1.2 turn view\n2 (strategies)\n2.0 random\n2.1 change\n2.2 topic\n6-7 (model)\n6.8 clear play pile\n6.9 legal move?\n7.0 new game\n7.1 play\n7.2 set topic\n7.3 draw\n7.4 move pile\n7.5 append\n7.6 extract\n7.7 deal\n7.8 sort hand\n7.9 shuffle\n8 (view)\n8.2 highlight move\n8.4 debugger output\n8.5 show move\n8.6 display hand\n8.7 highlight/border\n8.8 erase\n8.9 display card\n9 utility\n9.0 initialization\n9.2 init deck\n9.3 debug:dump deck\n9.4 hit a key\n.9 data\n\n    -999\n1000-1799\n1800-6999\n7000-7399\n7400-7699\n7700-8199\n8200-8699\n8700-8999\n9000-9199\n9200-\n\nexit\n    pla\n    sta ip\n    pla\n    sta ip+1\n    jmp nexto\n\nenter\n    pla\n    tay\n    pla\n    sta z\n\n    lda ip+1\n    clc\n    adc #2\n    pha\n    lda ip\n    adc #0\n    pha\n\n    lda z\n    iny\n    bne jumpay\n\nenter\n    pla             ;[4]\n    tay             ;[2]\n    pla             ;[4]\n    sta z           ;[3]\nenter01\n    lda ip+1        ;[3]\n    pha             ;[3]\n    lda ip          ;[3]\n    pha             ;[3]\n    lda z           ;[3]\n    iny\n    bne jumpay      ;[3] bra `jsr enter` never goes at $xxFD\nyikes\n    sec\n    bcs exit01                  ; bra\n\n;--------------------------------------------------------------\n#if 0\nname=EXIT\nstack=( -- )\ntags=inner,nosymbol,pads,forth-83\nThe runtime behavior of ;\nExits a colon definition, unnesting to the next higher level of\nthe return stack\n#endif\nexit\n    lda #2          ; [2]\nexit04\n    clc             ; [2]\nexit05\n    sta ip          ; [3]       ; entry A is added to IP\n    pla             ; [4]\n    adc ip          ; [3]\n    tay             ; [2]\n    pla             ; [4]\nexit01\n    adc #0          ; [2] = [12]\n                    ; pass AY = new IP\n                    ; >FORTH -- Sets IP <- AY then NEXT, essentially a GOTO AY\n                    ; transition from 6502 Assembly back up to to Forth\njumpay\n    sta ip+1        ; [3]\nexit03\n    sty ip          ; [3]\n    jmp nexto       ; [3]\n\n\n\n\n    subroutine to play stupid stack tricks\nactor\n    jsr doact\n    .word display\n    .word erase\n    .word moveleft\n    .word moveup\n    .word movedown\n    .word moveright\n    .word movepath\n\ndoact\n    jmp (action)\n\ndisplay\nerase\nmoveup\nmoveleft\nmovedown\nmoveright\nmovepath\n\n\ncaller\n    pha\n    pha     ; junk\n    jsr callee\n    rts\n\ncallee\n    txa\n    tay\n    tsx\n    lda #$CA\n    sta $0101,x\n    lda #$FE\n    lda #$CA\n    sta $0102,x\n    rts\n\n\n\nbee\n    jsr doact\n\nbee attributes\n    gender                      1\n    action\n    phase\n    goal\n    age\n    skill level\n    injuries\n                                ; head\n                                ;   5 eyes\n                                ;   2 antennae\n                                ;   tongue\n                                ;       water\n                                ;       nectar\n                                ;   mandibles\n                                ;       pollen\n                                ;       beeswax\n                                ; thorax\n                                ;   2 wings\n                                ;   6 legs\n                                ;   carriers\n                                ; abdomen\n                                ;   organs\n                                ;   sting (females only)\n                                ;   wax glands\n                                ;   scent glands (tracking, signaling)\n                                ;   boners (males only)\n                                ;   queen parts (queen only)\n\n\n\n\n    .word display\n    .word erase\n    .word moveleft\n    .word movenw\n    .word movesw\n    .word movene\n    .word movese\n    .word moveright\n    .word movepath\n    ; class-related\n    .word pickup\n    .word dropoff               ; workers\n                                ; nectar +nectar jelly egg water pollen beeswax\n                                ; find pollen (scout)\n                                ; cleaning\n                                ; build (builder)\n                                ; babysit (babysitter)\n                                ;\n    .word fly\n                                ; workers (scout)\n    .word build\n    .word fight\n                                ; head\n                                ;   5 eyes\n                                ;   2 antennae\n                                ;   tongue\n                                ;       water\n                                ;       nectar\n                                ;   mandibles\n                                ;       pollen\n                                ;       beeswax\n                                ; thorax\n                                ;   2 wings\n                                ;   6 legs\n                                ;   carriers\n                                ; abdomen\n                                ;   organs\n                                ;   sting (females only)\n                                ;   wax glands\n                                ;   scent glands (tracking, signaling)\n                                ;   boners (males only)\n                                ;   queen parts (queen only)\n\n\n                                ; gender\n                                ;   male\n                                ;   female\n\n                                ; type\n                                ;   worker\n                                ;       carrier (default)\n                                ;       scout\n                                ;       soldier\n                                ;   drone\n                                ;   larva\n                                ;\n\n                                ; goals/capabilities\n                                ;   build\n                                ;   fight\n                                ;\n\n                                ; actions\n                                ;   dance\n                                ;\n    Worker Bee\n        Role Timeline\n            Making Honey - eat it, feed larvae\n                Fanning\n                Wax Making - 8 kg of honey to produce just 1 kg of beeswax.\n                Nectar transfer - youngest workers\n                                - carry from door to empty cell\n                                - \"tremble dance\" - incoming! more carriers please\n\n                Foraging        - midlife\n                                - dangerous, risks\n                                - chilled, birds\n                                - it is tiring\n                                - most bees die while foraging (they leave and do not return)\n\nWild Colonies\n\nPrior to the arrival of the Europeans, a strain of stingless bees provided a source of honey for North America's First Peoples. These bees are now extinct since they lacked resistance to diseases introduced with imported bees.\n\nThe honeybees we see most often today in North America are not native to this part of the world but, rather, have been imported. Those found in the wild now are actually domesticated bees that have swarmed and built new hives in a natural setting. Bees often use hollow trees as shelters.\n\nAlthough once seen frequently, fewer and fewer wild colonies exist today. This is in part because beekeepers are getting better at preventing swarms, and in part because wild bees, without the help of beekeepers, have a difficult time fighting off many of the now common parasites and diseases.\n\nLife in a Hive\n\nA honeybee hive usually has between 20 000 and 80 000 bees living together in a colony. A colony is made up of one queen bee and several hundred drones (males), with female worker bees making up the balance. All the bees share one goal: survival of the colony.\n\nDrone\n\nDrones are male bees and their sole purpose is to mate with the queen: they don't work, don't make honey and can't sting. Since a queen only needs to mate once, most of the drones won't even get the chance to fulfil their role. But worker bees keep them around, just in case a new queen needs mating.\n\nDrones usually live for about eight weeks and, in that time, have all their needs met by worker bees. In the fall, the worker bees kick the drones out of the hive because keeping them through the winter demands too much work and food.\n\nYou can recognize drones because they are stouter and a little bit longer than worker bees. Their eyes are twice the size of worker bees' eyes because a drone needs good eyesight when he follows the queen high up in the air to mate.\n\nQueen Bee\n\nEach honeybee colony usually has only one fertile female, the queen and she lays all the eggs in the hive. In the spring, when the colony is growing at its fastest pace, a productive queen can lay up to 2 000 eggs per day. She spends most of her life in the brood chamber of the hive and depends on the worker bees to feed her and dispose of her waste.\n\nWhen worker bees decide that a new queen is needed (because, for example, her egg production is dwindling), they feed a new larva on royal jelly alone. As a result, it develops into a sexually mature female bee. She is fed only royal jelly for the rest of her life, which can be up to four years.\n\nYou can recognize the queen by her longer and larger abdomen, although beekeepers often mark her with a permanent pen or a daub of paint so she's easier to identify. Beekeepers need to make sure the queen stays healthy and continues to lay eggs so that the colony survives.\n\nBrood Chamber\n\nThe brood chamber (usually in the bottom boxes of the hive) houses worker-made cells where the eggs, larvae and pupae develop. Some of the cells in this part of the hive also hold pollen, nectar or honey that's used to feed the developing larvae.\n\nMany beekeepers use a screen called a \"queen excluder\" to keep the queen in the hive's lower boxes. This stops her from laying eggs in the honey supers, or upper boxes, which hold the frames that the beekeeper removes to collect the honey.\n\nStages of Bee Development\n\nEgg\nThe queen lays one egg per cell. Knowing what the colony needs to survive, the worker bees have built appropriate cells for the queen. In most of the cells, she lays a fertilized egg that will develop into a worker bee. In cells that are slightly larger than the worker cells, she lays unfertilized eggs that will grow into drones. The egg stage of development lasts only three days.\n\nLarva\nAfter three days, the egg hatches into a worm-like form called a larva. The worker bees feed the larva royal jelly for the first few days and then switch to honey and pollen. An exception to this is a future queen: this larva continues its diet of royal jelly. A larva eats almost constantly and grows quickly. Within just five days, it grows 1 500 times larger than its original size. At this point, worker bees cap the cell with wax and the larva spins a cocoon around itself. The larval stage lasts about six days. It's shorter for the queen, longer for the worker bees and longest for the drones.\n\nPupa\nIn the pupa stage, the tiny organism hidden under the capping is starting to look like an adult bee. Its legs, eyes and wings develop and, finally, the little hairs that cover its body grow. After seven to fourteen days in this stage, depending on the type of bee, the now adult bee chews its way out of the cell. This stage is shorter for the queen, longer for the worker bees and longest for the drones.\n\n\nWorker Bee\n\nWorker bees are female but are not capable of reproducing. They do all the work in the hive, and they control most of what goes on inside. Their jobs include housekeeping, feeding the queen, drones and larvae, collecting the pollen and nectar, and making the wax. Because they work so hard, during the busy season worker bees live for only about six weeks.\n\nWorker bees are shorter and more slender than drones and the queen, and their back legs have special baskets to help them collect pollen. Like the queen, they also have stingers, but they can only sting mammals once and then they die. They can, however, sting other insects over and over again to protect the hive.\n\nForaging\n\nAt midlife, worker bees begin to go out of the hive to collect nectar, a sweet liquid from flowering plants such as fruit trees, for the colony. They cover a radius of about 4 km from the hive and visit 4 410 000 flowers to make 1 kg of honey. A single worker bee makes just 0.8 g (1/10 of a teaspoon) of honey over a lifetime.\n\nForaging is a difficult and dangerous job for worker bees and, eventually, their bodies wear out. In the open fields, they face huge risks, such as getting chilled or even being eaten by a bird. They work as long as they can, but most worker bees die while out foraging.\n\n\n                    Bee Dance\n                            tremble dance - carry nectar in\n                            swarm dance\n                            waggle dance (outdoors) - locate food\n                            clean cells\nBee Dance\n\nSince honeybees can't talk, they perform special dances as a means of communication. They use dances to relay different messages, from the need to swarm, to the direction of and distance to a source of food.\n\nField bees use the \"waggle dance\" in particular. When they find a great source of nectar, they perform the dance back at the hive to tell other bees where to find the flowers. The dance shows the direction of the flowers relative to the sun, and the bees automatically adjust the dance according to the changing position of the sun in the sky. The speed of the dance indicates how far the nectar is from the hive.\n\n\nCaring for the Colony\n\nAll bees work together to ensure the survival of the colony. Every bee has a special job to help keep the colony healthy. Worker bees are responsible for cleaning the hive, feeding the young, guarding the hive and many other tasks in the hive.\n\n\nCleaning\n\nA beehive is one of the cleanest and most sterile natural environments. Worker bees keep it that way to prevent disease. All cells need to be cleaned before they are reused for storing honey or new eggs.\n\nYoung worker bees also remove diseased and dead larvae or bees from the hive as quickly as possible, taking them as far away from the hive as they can. If they sting a large intruder (like a mouse) to death, it's too big for them to remove. Instead, they seal the body off with propolis (a sticky substance containing antimicrobial properties) that they collect from trees. Propolis is often called \"bee glue\".\n\n\n                                carry food\n                                carry pollen\n                                carry royaljelly\n                                carry eggs\n                                nurture eggs\nNursing and Serving\n\nWorker bees must also care for the developing larvae. They feed them a combination of honey, pollen and royal jelly. The worker bees check on each larva over 1 000 times per day.\n\nAnd because the queen and drones can't look after themselves, worker bees must care for them, too. They feed them, groom them and remove their body waste from the hive. They even encourage the queen to keep laying eggs.\n                                make wax\n                                carry wax\n                                build\nWax Making and Building\n\nAt a certain age, worker bees naturally produce wax flakes from wax glands on the underside of their bellies. With this wax, the bees build new combs and cap cells of developing bees. Bees need to eat 8 kg of honey to produce just 1 kg of beeswax.\n\n                                attack\n                                sentry\nGuarding\n\nOnce a worker bee's stinger has developed, she can take on the job of keeping the hive safe. Guard bees position themselves at the hive's entrance to detect intruders (including bees from other hives), often by smell.\n\nWorker bees can sting mammals such as skunks only once, but can sting other insects repeatedly without dying.\n\n\n                Foraging\n\nForaging\n\nAll bees, except the queen, depend on flower pollen as a protein source and nectar (a sweet liquid found in flowers) as an energy source. At midlife, it's the worker bee's job to fly away from the hive to find flowering plants and return with nectar and pollen to feed her hive mates, including the larvae. Bees use special dances to tell other foragers where to find good sources of nectar and pollen.\n\nThis is an important but dangerous task. Worker bees will continue this job until they eventually die, at about six weeks old.\n\n                    Bee Dance\nBee Dance\n\nSince honeybees can't talk, they perform special dances as a means of communication. They use dances to relay different messages, from the need to swarm, to the direction of and distance to a source of food.\n\nField bees use the \"waggle dance\" in particular. When they find a great source of nectar, they perform the dance back at the hive to tell other bees where to find the flowers. The dance shows the direction of the flowers relative to the sun, and the bees automatically adjust the dance according to the changing position of the sun in the sky. The speed of the dance indicates how far the nectar is from the hive.\n\n                                exhaust fan\n                                circulate air\n                                maintain temperature\n\nFanning\n\nAt some point, worker bees take on the task of maintaining the temperature in the hive. Some fan their wings to circulate the air inside the hive. Others place themselves outside the hive entrance to fan fresh air into the hive.\n\n\n\n\nrules\n    a drone has to be on screen for the queen to produce eggs\n    the queen can inhabit the body of or depart from any bee\n    if it is a baby, the queen can select its gender, type, and goals\n\n\n\n2018-11-27T08:03:03-05:00\nvideo 2, the sequel\n* reset  6 ticks ,  jmp(fd16)\n\nhttp://archive.6502.org/books/mcs6500_family_programming_manual.pdf\n\nWhat happens when we turn the PET on?\ntick\ntick\ntick\ntick\ntick\ntick\ntick on the sixth or seventh tick, I'm not to clear which one, but does it matter?  The CPU sets the voltage on the \"READ\" pin to 0\n* instruction\n*\n*\n*\n*\n*\n*\n*\n\n2018-11-26T00:32:10-05:00\n\nobjective: update editor help\n\ndiff --git a/core/src/options.def b/core/src/options.def\nindex 4149b36..b8d6bab 100644\n--- a/core/src/options.def\n+++ b/core/src/options.def\n@@ -3,13 +3,31 @@\n ; a standard BASIC 4.0 PET\n ;#define ROM_PET_4\n\n-; my PET 2001, because $E000 editor ROM (WRAPLO)\n-#define ROM_PET_CHITSELB\n-\n+; uncomment one of these to select the build target\n ;#define ROM_PET_UPGRADE\n ;#define ROM_PET_ORIGINAL       good luck on this one!\n ;#define ROM_VIC20\n ;#define ROM_C64\n+; my PET 2001-N serial #700251, (slightly different E000 editor ROM (WRAPLO))\n+#define ROM_PET_CHITSELB\n+\n+; uncomment this to work in a more powerful development environment with MICROMON\n+; eats up 6K of RAM $6B00-$7FFF\n+; prefixes \".: \" for automatic\n+; bringing keyboard repeat to #700251 since 1980! (or so)\n+;#define MICROMON\n+\n+                                ; <--- ~#resizetdict here, also lower down\n+hitop=VIDRAM-$1B00              ; BLKBUF 5200\n+                                ; no monitor, max RAM\n+                                ; lean and mean, maximum DEADBEEF\n+;hitop=VIDRAM-$3200             ; BLKBUF 3B00\n+                                ; to coexist with MICROMON 6B00\n+                                ; - large and in charge\n+;hitop=VIDRAM-$2300             ; BLKBUF 4A00\n+                                ; to coexist with SUPERMON 7A33\n+                                ; lightweight power user remix\n+\n\n -romoptions = 0\n\n\n\n2018-11-25T10:17:21-05:00\ndiff --git a/studio/src/pettil-editor.a65 b/studio/src/pettil-editor.a65\nindex fe4903d..78175d2 100644\n--- a/studio/src/pettil-editor.a65\n+++ b/studio/src/pettil-editor.a65\n@@ -810,8 +810,10 @@ __editinfo\n     .asc CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR\n editinfo01\n #include \"page.i65\"\n+__editpause\n     .word true\n #include \"page.i65\"\n+__editpause00\n     .word _pause\n #include \"page.i65\"\n     .word homescr\n@@ -848,13 +850,9 @@ __editindex\n     .word on\n #include \"page.i65\"\n     .word false\n-#include \"page.i65\"\n-    .word _pause\n-#include \"page.i65\"\n-    .word homescr\n #include \"pass.i65\"\n     .word branch\n-    .byt <(__editrestore-*+1)\n+    .byt <(__editpause00-*+1)\n\n ;--------------------------------------------------------------\n #if 0\n@@ -896,13 +894,9 @@ __editload\n     .word clrscr\n #include \"page.i65\"\n     .word _loadbuffers\n-#include \"page.i65\"\n-    .word scr\n-#include \"page.i65\"\n-    .word off\n #include \"pass.i65\"\n     .word branch\n-    .byt <(__editrestore-*+1)\n+    .byt <(__edittopscr-*+1)\n\n ;--------------------------------------------------------------\n #if 0\n@@ -914,10 +908,6 @@ List the specified screen and set `scr`; Invoke `editor` vocabulary\n #include \"align.i65\"\n _list\n     jsr enter\n-#include \"page.i65\"\n-    .word editing\n-#include \"page.i65\"\n-    .word on\n #include \"page.i65\"\n     .word _editchongo\n #include \"page.i65\"\n@@ -939,6 +929,10 @@ callable entry point to `:editrestore`\n #include \"align.i65\"\n _editchongo\n     jsr enter\n+#include \"page.i65\"\n+    .word editing\n+#include \"page.i65\"\n+    .word on\n #include \"page.i65\"\n     .word scr\n #include \"page.i65\"\n@@ -987,13 +981,9 @@ __editverify\n     .word clrscr\n #include \"page.i65\"\n     .word _verifybuffers\n-#include \"page.i65\"\n-    .word true\n-#include \"page.i65\"\n-    .word _pause\n #include \"pass.i65\"\n     .word branch\n-    .byt <(__editrestore-*+1)\n+    .byt <(__editpause-*+1)\n\n ;--------------------------------------------------------------\n #if 0\n@@ -1318,9 +1308,9 @@ tags=editor,nosymbol\n __edittogglecase\n     .word *+2\n pedittogglecase\n-    lda 59468\n+    lda $E84C\n     eor #2\n-    sta 59468\n+    sta $E84C\n     jmp exit\n\n ;--------------------------------------------------------------\n@@ -1451,26 +1441,6 @@ pedit04\n     ldx z                       ; restore Forth stack pointer\n     jmp next\n\n-;--------------------------------------------------------------\n-#if 0\n-name=EDITMODE\n-stack=( scr -- )\n-tags=editor,nosymbol\n-\n-#endif\n-#include \"align.i65\"\n-_editmode\n-    jsr enter\n-#include \"page.i65\"\n-editmode01\n-    .word editing\n-#include \"page.i65\"\n-    .word on\n-#include \"page.i65\"\n-    .word editor\n-#include \"pass.i65\"\n-    .word exit\n-\n ;--------------------------------------------------------------\n #if 0\n name=>EDIT\n@@ -1482,15 +1452,13 @@ tags=editor,nosymbol\n\n ```\n : >edit   ( scr -- )\n-    editmode  update  0 max block drop ;\n+     update  0 max block drop ;\n ```\n ~#packrat\n #endif\n #include \"align.i65\"\n _toedit\n     jsr enter\n-#include \"page.i65\"\n-    .word _editmode\n #include \"page.i65\"\n     .word _update\n #include \"page.i65\"\n@@ -1590,7 +1558,7 @@ The `STOP-INS` command inserts a new packet that comes just before the current s\n _edit\n     jsr enter\n #include \"page.i65\"\n-    .word _editmode\n+    .word editor\n #include \"page.i65\"\n     .word _editchongo\n #include \"page.i65\"\n@@ -1631,8 +1599,6 @@ underscore, it's the left-arrow character.\n #include \"align.i65\"\n _back\n     jsr enter\n-#include \"page.i65\"\n-    .word _editmode\n #include \"page.i65\"\n     .word scr\n #include \"page.i65\"\n@@ -1662,7 +1628,9 @@ appended to the end of the [[VMBUF]] area. Then the editor is invoked.\n _caret\n     jsr enter\n #include \"page.i65\"\n-    .word _editmode\n+    .word editing\n+#include \"page.i65\"\n+    .word on\n #include \"page.i65\"\n     .word numblk\n #include \"page.i65\"\n\n\n\n\n\n2018-11-25T03:26:43-05:00\n\n=   exchange\nDEL clean\nINS clone\n\n1   begin\n-1  while repeat until again\n2   do\n-2  loop\n4   if\n8   case#\n-12 else then\n\ndiff --git a/studio/src/pettil-compiler.a65 b/studio/src/pettil-compiler.a65\nindex f302f37..3324f23 100644\n--- a/studio/src/pettil-compiler.a65\n+++ b/studio/src/pettil-compiler.a65\n@@ -1937,12 +1937,33 @@ _if\n\n ;--------------------------------------------------------------\n #if 0\n-name=CASE#[\n+name=CASE#\n stack=( )\n tags=compiler,control,forth-83\n flags=immediate\n\n-\n+```\n+variable helicopter\n+: power  .\" powering up systems.\" ;\n+: takeoff  .\" vertical ascent.\" ;\n+: hover   .\" airwolf hovering.\" ;\n+: turbo   .\" turbos engaged!\" ;\n+: land   .\" landing airwolf.\" ;\n+: airwolf\n+    helicopter off\n+    true\n+    begin\n+        helicopter @\n+        case#\n+            ( 1     2       3     4     5 )\n+            power takeoff hover turbo land\n+        else\n+           ( 0  6 )\n+            not\n+        then\n+        1 helicopter +!\n+        dup\n+    until drop ;\n : alpha    13 + ;\n : bravo    57 + ;\n : charlie  97 + ;\n@@ -1953,6 +1974,8 @@ flags=immediate\n     case# alpha bravo charlie #else abort #end ;\n : foo ( n 1|2|3 -- n+? )\n     case# alpha bravo charlie then ;\n+\n+\n : foo ( n 1|2|3 -- n+? )\n     case# alpha bravo charlie else .\" default\" then ;\n\n@@ -1964,19 +1987,14 @@ flags=immediate\n 37 0 foo . default 37  ok\n 37 8 foo . default 37  ok\n\n-\n-\n-\n-\n-```\n-' ?branch 2 >control if ]\n+' ?branch 4 >control if ]\n     drop >mark ; immediate\n ```\n #endif\n-_casenumx\n+_casenum\n     jsr docontrol\n     .word qbranch\n-    .byt 2\n+    .byt 4\n #include \"page.i65\"\n     .word _tomark\n #include \"pass.i65\"\n@@ -1997,7 +2015,7 @@ flags=immediate\n _else\n     jsr docontrol\n     .word branch\n-    .byt <(-2)\n+    .byt <(-6)\n #include \"page.i65\"\n     .word plusminuspairs\n #include \"page.i65\"\n@@ -2024,7 +2042,7 @@ flags=immediate\n _then\n     jsr docontrol\n     .word 0\n-    .byt <(-2)\n+    .byt <(-6)\n #include \"page.i65\"\n     .word twodrop\n #include \"page.i65\"\n\n( value )\ncase#  word1 word2 word3 word4 wordn\n( else words that handle default situation )\nthen\n\ncase# thing1 thing2 thing3 thingn ( else defaulted ) then\n\nvariable helicopter\n: power  .\" powering up systems.\" ;\n: takeoff  .\" vertical ascent.\" ;\n: hover   .\" airwolf hovering.\" ;\n: turbo   .\" turbos engaged!\" ;\n: land   .\" landing airwolf.\" ;\n: airwolf\n    helicopter off\n    true\n    begin\n        helicopter @\n        case#\n            power takeoff hover turbo land\n        else\n            not\n        then\n        1 helicopter +!\n        dup\n    until ;\n\n: (case#) ( value -- )\n\n2018-11-23T15:09:26-05:00\n# have a pen in each hand (subl PET; graphics code;) two things going on at once, when you get stalled, switch to the other\n\noffset -- signed word, added to cursor location -999..999\ncursor -- address within vidram region 8000..83E7\n\n: .|\n    vidram 120 blank $e0 $8080 tuck !+ ! .hm .s ;\n0 @ 0< 0= 0> @+ 0<> pad pick prev\npaste pause pwrap @swap! petscii\"\npkt.this ! 1 !+ 1+ 1- !xy 1+! 1-! abs\nacc and quit abort again allot query\nanimal 1+under 1-under animirq quarters\nassembler \" 2 2! 2* 2+ 2- 2/ 2@ bl r>\nr@ 2+! 2>r 2r> 2r@ blk bye rnd rot rp!\nrp0 rvs 2dup 2nip 2off 2rot bang base\nbird blk@ roll 2drop 2over 2swap b/buf\nb/scr bdump begin blank block randu\nrdrop rswap bdline blkbuf random rehash\nrepeat rndmax rvsoff 2+under 2-under\nbdbreak restart benjamin between?\nrandmask rldecode rlencode 2constant\n2variable # 3 #> #s 3+  3- c! c, c@ cr\n3c! 3c@ c!+ c>s c@+ csp s>d sa# scr sgn\nsib sp! sp0 sp@ #blk #out #voc 3@>r\n3dup 3r>! code coff cold copy sign span\nswap #blk! #line 3coff 3drop cbit!\ncbit@ cjoin cmove count cswap space\nstate caller case#[ cmdoff cmove>\ncreate csplit cursor spaces symnew\nsymtab 3-under cas1buf cas2buf current\nstartup symtail constant currname\nsisyphus cconstant save-forth\nsave-buffers save-turnkey 4 $! $, $+ $. d+\nd- d. d< d= d> d0 dp 40* d.r d0= d2*\nd2/ dpl du< dup tdp ten tib dabs dmax\ndmin drop drv# dsub dump task then true\ntuck type $>pad 4drop delay depth does>\ndup>r tdict third $index 40/mod dpswap\ntoggle twonky decimal dnegate dliteral\ntimeouts definitions 5 u. u< u.r ud.\num* edit else emit ud.r user eoscr\nerase under until upper editor eighty\nexpect ud/mod um/mod update editing\nexecute exists? ext-until empty-buffers\n5 fail file fill virt false fence forth\nforty vdrop vmbuf forget found? vidram\nvmdump vocabs flipscr filename variable\nvocabulary verify-buffers ' 7 warm wave\nwork wdump while width words wrap!\nwrap@ wdline wumpus warning wdbreak\nword-list ( 8 hex hld xor hand here\nhold xyzzy height (case#) highlight 9 i\nif in id. info irq! index immediate\ninterpret * : j */ */mod jiffy@ jiffies\n+ ; [ \"! key ['] +loop +move +under\nkeyirq! , < \\ <# <> lin lsb list load\nloop l/scr leave limit lower <builds\nliteral load-buffers - = ] -1 -2 -3 -4\n-5 -@ m* m+ m/ --> m*/ max min mod mon\nmsb -rot move -nulls =cursor -trailing\n. > ^ .\" .( .b .h .r .s >r .4h .cl .dn\n.hm .lf .on .rt .up nip not .off >bit\n>pkt name >name name> .vline negate\nnewest nosymbol / ? _ ?: on or ?do off\n/mod ?dup ?key over ?exit ?leave ?pause\n?stack ?terminal\n\neditor\np l n\n\nassembler\n0< 0= pop put pha, php, pla, plp,\nplants poptwo pushya adc, and, asl,\nagain, bit, brk, rol, ror, rti, rts,\nbegin, repeat, # cs clc, cld, cli, clv,\ncmp, cpx, cpy, sbc, sec, sed, sei, sta,\nstx, sty, stackh stackl tos dec, dex,\ndey, tax, tay, tsx, txa, txs, tya,\nthen, up eor, else, until, end-code vs\nwhile, x) harvests ) )y ip if, inc,\ninx, iny, z jmp, jsr, ;code ,x ,y lda,\nldx, ldy, lsr, mem n .a >= not next\nnop, ora,\n\n\n\n: path1   ( n -- offset )\n    0 max  \\ no negatives\n    \\ maybe just return the value\n    dup 8 >\n    if\n        dup 9 - dup 40* + +\n    then\n    if\n    dup 0< ?exit\n    0 >r\n    if\n\n    else\n\n    then\n\n: path2   ( n -- offset )\n\n: path3   ( n -- offset )\n\n: path4   ( n -- offset )\n\n\n2018-11-22T00:48:43-05:00\na - good stuff\nb - more good stuff\nc - working\n\nbghija\n\n2018-11-20T10:03:04-05:00\n\n: CASE#  ( -- ADR CS.NUMBER )  COMPILE (CASE#) >MARK ; IMMEDIATE\n: CASE[  ( -- ADR )  COMPILE (CASE#)  HERE 0 , ; IMMEDIATE\n: ]END-CASE  ( ADR -- )  HERE SWAP ! ; IMMEDIATE\n\n... HELICOPTER @ CASE# WORD0 WORD1 WORD2 WORD3 WORD4 THEN DUP ...\n\n\n// TEST OF CASE[ ]END-CASE\nHEX\n: POWER  .\" POWERING UP SYSTEMS.\" ;\n: TAKEOFF  .\" VERTICAL ASCENT.\" ;\n: HOVER   .\" AIRWOLF HOVERING.\" ;\n: TURBO   .\" TURBOS ENGAGED!\" ;\n: LAND   .\" LANDING AIRWOLF.\" ;\nVARIABLE HELICOPTER\n: AIRWOLF  ( -- )\n   HELICOPTER @ CASE#[\n      POWER TAKEOFF HOVER TURBO\n      LAND  ]END\n   CR .S ;\n\nsdump   ( addr -- ) display PETTIL stack\n30|................|0000\n\nwdump   ( addr -- ) display column of address space, 16-bits wide\n0086|................|0000\n0088|................|0000\n\nbdump   ( addr -- ) display column of address space, 8-bits wide\n0000|........|00\n\npoint   ( addr panel# -- ) draw the hand with upper left corner at addr\n        ( 0 panel# -- ) draw hand using current location\nsnap    ( -- ) finger snapping animation\n\n.cpu\ncpu     ( line -- ) paint 8x20 CPU chip\n.addr   ( addr -- ) display address pins on the CPU, clearing other pins\n.data   ( char -- ) display data pins on the CPU\n.r/w    ( flag -- ) display the read/write pin on the CPU\n.reg    ( addr panel# -- ) display 4x3 register\n\nubar    ( addr height -- ) top-justified bar graph, height measured in pixels\ndbar    ( addr height -- ) bottom\nlbar    ( addr height -- ) left\nrbar    ( addr height -- ) right\nhline   ( addr pos -- ) horizontal line `pos` pixels below `addr`\nvline   ( addr pos -- ) vertical line `pos` pixels to right of `addr`\n\nwalk    ( addr -- ) current actor\n\nscroll  ( addr -- ) starts scrolling animation -- this is the producer's application, different keystrokes trigger different display effects\n0 1 2 3 4 5 6 7 8 9 a b c d e f         hold actor on this frame\n\n' ' leave this place\nh   highlight at pointer hand   \"snap\"\na   cycle \"A\" animations        \"A\"\nx   cycle \"X\" animations        \"X\"\ny   cycle \"Y\" animations        \"Y\"\np   cycle \"P\" animations        \"P\"\nc   cycle CPU animations        \"C\"    + - 0..4\n\n+   move pointer down\n-   move pointer up\n\n    0 dark background, light bar\n    1 dark background, light line\n    2 light background, dark bar\n    3 light background, dark line\n\ncursor  6 bytes of \"cursor stuff\" that winds up being sprinkled all over the place in zero page\n\n: point ( panel# line -- )\n    40* 16 + vidram + swap\n    dup 3 and 40* 2/ 2/ \\ 10*\n    swap 2/ 2/ 2* 2* 2* 40* +\n    8 0 do\n        2dup i 40* +\n        swap i 40* +\n        10 cmove\n    loop 2drop ;\n\ntypical animation disk layout\nscreen 0 comments, title screen\n description of what this presentation is\nscreen 1+  Forth words to define actors, actions\nscreen+    screens containing actor sketches\n\neditor enhancements\nstop-del\n    cut screen\n        1. update current screen to just below vmbuf\n        2. store its header in vmbuf\n        3. cmove everything up\n        4. did we delete the very last screen?\n            4a. yes: clear screen\n            4b. no: load screen that came after (still `scr`)\nstop-ins\n    insert screen\n        1. is `vmbuf` 0?\n            1a. yes: we will insert a blank screen\n            1b. no: we will insert the screen buffer screen\n\nstop-0 first action\n\nstop-<                          previous action\n\nstop->                          next action\n\nstop-[                          set the stage\n    editing off scr @ block ;\n\nstop-]                          clear the stage\n    exeunt ;\n\nstop-/                          toggle overlay/replace mode\n\nSCENE\n\nSTAGE\n    block\nthe default stage is a blank screen\n\n\nACTOR\n    class: width height screen\n\n10 8 2 actor hand\n\n\nhand\n   screen 2                     screen containing sketches\n    frame 0                     offset into screen\n   action 0                     0 = inactive\n    speed 0                     0 = stopped; jiffies until next action\n        x 0                     position column\n        y 0                     position row\n    width 10                    object width\n   height 8                     object height\n\ndefault actions, available to all actors\n    enter                       draw at x y\n    exeunt                      all actors erased\n    exit\n    blend                       add characters where blanks are\n    step                        advance to next action\n    overlay                     toggle overlay mode\n\neach actor gets its own screen\nfirst frame is 0, at the upper left corner.\neach successive frame is to the right\nframes wrap when fewer than `width` columns remain\n\n=MIRROR\n    exchange blkbuf with vidram\n\n_MIRROR\n    copy blkbuf to vidram\n\nFRAME\n    ?\n\n\nACTION\n    class: 3 6\n\n    e.g.\n    gomerpyle 5 6 action gomer-dance\nSCRIPT\n    animate\n    hold\n    exit\n    enter\n\nSPEED\n    0 frame does not change\n    else, number of jiffies between frames\n\n8 5 13 actor gomerpyle \\ create a new actor\ngomerpyle \\ invokes that actor\n2 !frame  \\ third 8x5 block\n16 !x 5 !y \\ centered, starting at row 5\nenter \\ display whatever is there\n5 !speed \\ frame will advance every 5/60ths of a second\n\n: walk\n' animate script walk\n\n\n!x\n!xy\n\nENTER\nEXEUNT\n\nX +X\n    column of action of current actor\nY +Y\n    row of action\n\n    ?\nlist of commands to an actor\n\n\nmove block overloaded\nblocking = directors directions to actors\nblock = 1024 byte unit of data storage\nmove = transfer bytes hither and yon\nmove = relocate on the stage\n\n2018-10-18T11:04:57-04:00\neoiq\n    ldy userlin\n    cpy #LPERSCR\n    lda userblk\n    bne eoiq01\n    ;fall through\n;--------------------------------------------------------------\n#if 0\nname=EOL?\nstack=( -- flag )\ntags=primitive,outer,extra,nosymbol\nReturn `true` when end of line input buffer is reached\n\n#endif\neolq\n    ldy userin\n    cpy userspan\neoiq01\n    jmp xpushc\n\n2018-10-14T15:40:28-04:00\n[x] flip STOP-?\n[ ] blank line bug in outer interpreter\n[ ] /mod / */mod * ud/mod\n[ ] (create) \"DUPLICATE DEFINITION\"\n[ ] STOP-DEL\n[ ] STOP-INS\n[ ] interpreter, empty lines\n[ ] test automation\n\n2018-10-08T11:53:42-04:00\n\n2018-10-03T09:01:51-04:00\n\n2018-09-30T17:36:24-04:00\nre-do `name`\n\n: name ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2!\n    refill?\n    if name.parse then ;\n\n    eol? ?: refill? name.parse ;\n\n\\ n6 = lib\n\\ n7 = char\n: refill?   ( -- nfa|0 )\n\n    eol?      ( in >= span )\n    if\n        begin\n            refill?\n        until\n    else\n        name.parse\n    then ;\n\n\n: refill?   ( -- flag )\n\n\n\n\n: lib   ( -- lib )\n    blk@ ?: sib tib ;\n: name   ( char -- nfa|0 )\n    lib n6 2!\n    refill?  ( -- 0 0 | true )\n    if name.parse then  ( flag ) ;\n\n: refill?   ( -- 0 0 | true )\n    eol? 0= ?dup ?exit\n    blk@ ?: refill query\n    false eoi? ?: dup 1- ;\n\n\\ TRUE: I have some characters\n\\ FALSE:  I have no characters\n~ick\n: refill?  ( -- flag )\n    eol?\n    if\n        blk@ ?: refill query\n        false eol? ?exit drop   \\ ~ick\n    then\n    eol? ;\n\n: interpret   ( -- )\n    begin\n        ?stack\n        bl name  ( nfa|0 )\n        ?dup\n    while\n        dup found?\n        ?dup ?: interpret.cfa number\n    repeat ;\n\n: interpret   ( -- )\n    begin\n        ?stack\n        bl name  ( nfa|0 )\n        ?dup\n        if\n            dup found?\n            ?dup ?: interpret.cfa number\n        then\n        eoi?\n    until ;\n\n`interpret` interprets each token in a stream.  When loading, the stream is a screen of code, broken into lines, processed in `sib` $0130-017F.  For interactive sessions, the stream is a line from the keyboard, processed in `tib` $0200-024F.\n\nload   ( u -- )\n    interpret\n\nquit   ( -- )\n    interpret\n\ninterpret ( -- )\n    begin\n        bl name\n    while\n        process nfa\n    repeat\n\n\\ 0 means the stream is exhausted\n\\   loading: all lines\n\\   interactive:  this line\n: name ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2!\n    eol? ?: refill? name.parse ;\n\n: refill?   ( -- flag )\n    blk@ ?: refill query\n    \\ span is set\n    \\ in is 0\n    eoi? ;\n\n\n\nloading\n    for each line\ninteractive session\n    interpret\n        \\ for each token in this stream\n        bl name\n        if\n\n        else\n            exit when `name` returned a 0\n        then\n\n    get a line\n    for each line\n    parse each token\n    say \"ok\" cr\n\n: name   ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2!\n    refill? ?: name.parse false ;\n\n: refill? ( -- flag ; true=data available (len != 0), false = no data (len=0) )\n\n\n: refill   ( -- )\n    sib line.size\n    0 =cursor  expect  0 =cursor ;\n\n: query   ( -- )\n    tib 80 expect ;\n\n\n\n2018-09-27T14:32:47-04:00\n\nwrite sweet16 assembler\nstop-del\nstop-ins\nindex\nend-code\n( comment lines )\nsave-buffers / load-buffers / verify-buffers\n\n\n2018-09-25T09:29:01-04:00\n\npadjust\n    sec                         ; A = offset to be added to IP\n    adc ip\n    sta ip\n    bcs padjust01\n    sbc #$FC\n    sec\n    sbc #$03\npadjust01\n    inc ip+1\npadjust02\n    rts\npadjust03\n    cmp #$FD\n    bne padjust04\n    inc ip+1\n    adc #0\npadjust04\n    bcc padjust02\n    bcs padjust01\n\n\nSubroutine to adjust `ip` from a caller with inline arguments\n\n```\n; pass\n; A = offset to be added to IP\n;\n; return\n; IP = IP+A+1\npadjust\n    sec                         ; A+1 = offset to be added to IP\npadjust00\n    php\n    adc ip\n    sta ip\n    bcs padjust02               ; crossed a page boundary?\n    ;clc\n    adc #$03                    ; xxFD xxFE xxFF will set carry flag\n    bne padjust01               ; was it $FD?  avoid `jmp ($xxFF)`\n    inc ip                      ; bump `ip` to xxFE when it is xxFD\npadjust01\n    pla\n    bcc padjust03               ; about to cross a page boundary?\n    lsr\n    bcc padjust03               ; about to cross a page boundary?\n    pha\npadjust02\n    pla\n    inc ip+1                    ; move `ip` to next page\npadjust03\n    rts\n\n\n\npadjust\n    sec\n    ;\n    adc ip\n    bcc c\na\n    inc ip+1\nb\n    sta ip\n    rts\nc\n    cmp #fd\n    bne d\n    inc ip+1\n    adc #0\nd\n    bcc b\n    bcs a\n\n\n\n\nchrget\n0070  E6 77       INC $77\n0072  D0 02       BNE $0076\n0074  E6 78       INC $78\n0076  AD 00 04    LDA $0400\n0079  C9 3A       CMP #$3A\n007b  B0 0A       BCS $0087  ; exit\n007d  C9 20       CMP #$20\n007f  F0 EF       BEQ $0070  ; retry\n0081  38          SEC\n0082  E9 30       SBC #$30\n0084  38          SEC\n0085  E9 D0       SBC #$D0\n0087  60          RTS\n\n\n\n\npadjust\n    sec                         ; A = offset to be added to IP\n    adc ip\n    bcc c\na\n    inc ip+1\nb\n    sta ip\n    rts\nc\n    cmp #fd\n    bne d\n    inc ip+1\n    adc #0\nd\n    bcc b\n    bcs a\n\nadd 1 plus value passed in A to IP\n*\n\n\npadjust\n    sec                         ; A = offset to be added to IP\n    adc ip                      ;\n    bcc c                       ;\na\n    inc ip+1                    ; bump the page counter\nb\n    sta ip                      ;\n    rts                         ;\nc\n    cmp #fd\n    bne d\n    inc ip+1\n    adc #0\nd\n    bcc b\n    bcs a\n\n\nfb 1111 1011\nfc 1111 1100\nfd 1111 1101    +1 (fe)   page\nfe 1111 1110              page\nff 1111 1111              page\n\n\n\n\nbcs b\ncmp #$FD\nbne b\nclc\ninc ip+1\nadc #0\nsta ip\n\nbcc c\nclc\nb   inc ip+1                    ; next page\nadc #0\nc sta ip\nrts\n\n\npadjust\nsec                         ; A = offset to be added to IP\nadc ip\nbcs b\ncmp #$FD\nbeq b\nbcc c\nclc\nb   inc ip+1                    ; next page\nadc #0\nc sta ip\nrts\n\npadjust\n    sec                         ; A = offset to be added to IP\n    adc ip\n    bcs b\n    cmp #$FD\n    beq b\n    clc\nb   inc ip+1                    ; next page\n    adc #0\n    sta ip\n    rts\n\n                                ; fb -> fb\n                                ; fc -> fc\n                                ; ---\nlda #fd\ncmp #fe\n    c = c\n\nlda #fe\ncmp #fe\n    c = s\n\nlda #fe\ncmp #fd\n    c = s\n\ncmp #\ncmp #\n                                ; fd -> fe +page\n                                ; fe -> fe +page\n                                ; ---\n                                ; ff -> ff  +page\n                                ; 00 -> 00  +page\n    cmp #$FD                    ; IP $xxFE $xxFF will not blend\n    bne padjust01\n    lda #$FE\npadjust01\n    bcc padjust06               ; same page?\n\n\npadjust05\n    inc ip+1\npadjust06\n    sta ip\n    rts\n\n\n\n2018-09-25T01:51:08-04:00\n\n\nover +\n\ncode -trailing\n    jsr harvests4\n\n\n\n\n2018-09-23T19:38:00-04:00\n\nepisode structure should include these elements:\n\n5:00 minutes minimum, 6:59 maximum episode length\n\nnarrative structure\nan inspirational bon mot about thought or two, like this:\n\"when we are doing something new, the biggest problem is usually what we already know.\"\na personal story of that era in under 40 seconds:\n\n\n2018-09-23T18:30:21-04:00\n\nlin>25? is evaluated twice,\n    when setting up the load cursor in `(line.size)`\n    in `name` (will return a 0 at `eoi?` event)\n\n\n\nfirmwarecursor\n    ;    $AF   $C6  $D5  ($C4)     $D8\n    .byt DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX\n    ;    3     0    lin  lin*40    span\n    ;                    +blkbuf\n\n\\ returns true when end of line in interpret mode, or lin>25\ncode eoi?\n    userlin     lda,\n    25 #        cmp,\n    cs if,\n    userspan 1+ lsr,\n    then,\n    xpushc      jmp,\n\n\n\n2018-09-18T04:07:07-04:00\n\nfirmwarecursor\n    ;    $AF   $D5  $C6  ($C4)     $D8\n    .byt DFLTN,TBLX,PNTR,PNT,PNT+1,LNMX\n    ;    3     0    lin  lin*40    span\n    ;                    +blkbuf\n\n\nin/lin              column on current line / current physical line on screen\nprev                number of the block that is currently expanded in blkbuf\nscr                 current or most recently visited screen\nblk                 number of the block being loaded\nspan/.h             width of line buffer / EOL & EOS semaphore\nn6(sib|tib)         line buffer address $0200 or $0130\nn7(delim.char)      a space character\nn8(token.len)       length of current word\n\n: load   ( u -- )\n    0 #blk @ third between? 0= 8 ?error\n    blk tuck 3@>r !+ 2off prev on\n    interpret  blk 3r>store ;\n\n: quit   ( -- )\n    rp! blk 12 erase\n    begin interpret\n        compiling? blk@ or 0=\n    until .\" ok\" cr\n    again ( ; )\n\n: interpret   ( -- )\n    begin ?stack\n        bl name\n        eoi? and\n        ?dup\n    while found? ?dup ?: interpret.cfa number\n    repeat ;\n\n: name   ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2!\n    refill? ?: name.parse false ;\n\n: refill?   ( -- span )\n    span@ dup eol? or ?exit\n    blk@ ?: refill.loading query ;\n\n: refill.loading   ( -- )\n    begin 0 =cursor\n        sib line.size expect\n        0 =cursor\n        span@ blk@ 0= or\n    until ;\n\n: line.size   ( -- size )\n    blk@ block lin dup 40* +under\n    lin buf.wrap >bit cbit@\n    in forty (line.size) 1+\n    over ?: 1+! 2+! ?: forty eighty -trailing ;\n\nplinesize\n    jsr plugh\n    jmp next\n\n: name.parse   ( -- nfa|0 )\n    skip dup 1- <n6 + scan rot - dup ?: !nfa nip ;\n\n: !nfa   ( nfa len -- nfa )\n    >n8 over c! in 1+! ;\n\nskip\n    lda #$F0                    ; BEQ opcode\n    .byt $2C                    ; BIT abs\n    ;fall through\nscan\n    lda #$D0                    ; BNE opcode\n    sta skipscan03              ; #selfmodifying\n    ldy userin                  ; `in`\n    dey\nskipscan01\n    iny\n    cpy userspan                ; Carry true at end of line\n    bcc skipscan02\n    jsr plugh\n    inc userspan+1              ; set end of input semaphore\n    bcs skipscan04              ; bra\nskipscan02\n    lda (ACC+2*N6),y            ; get char from buffer\n    eor ACC+2*N7                ; compare to character we seek\nskipscan03\n    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)\nskipscan04\n    sty userin                  ; found char !, move `in`\n    tya\n    jmp push0a                  ;( offset )\n\ncode eoi?\n    lda userblk\n    bne +\n    lsr userspan+1\n    jmp xpushc\n+   lda userlin\n    cmp\n\ncode spanfetch   ( -- span )\n    lda userspan\n    jmp push0a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n: quit   ( -- )\n    rp! blk 12 erase \\ outer interpreter infinite loop\n    begin interpret  compiling? blk@ or 0=  if  .\"  ok\" cr  then again ( ; )\n\n: interpret   ( -- )\n    begin\n        ?stack  bl name ?dup\n    while\n        found? ?dup ?: interpret.cfa number\n    repeat  span off ;\n\n: name ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2! n5 off\n    refill? ?: name.parse false ;\n\n: refill? ( -- nfa|0 )\n    span@ dup ?exit\n    \\ test EOL semaphore here\n    \\ eol? if span off  0 exit then\n    blk@ ?: refill.loading query ;\n\n: refill.loading   ( 0 -- nfa|0 )\n    begin\n        0 =cursor\n        sib line.size expect\n        0 =cursor\n        \\ is something in line buffer? or is screen exhausted?\n        span@ blk@ 0= or\n    until ;\n\n\n_nameparse\n    jsr enter\n    .word skip                  ; start of name\n    .word dup\n    .word oneminus\n    .word zpfrom\n    .byt ACC+2*N6               ; line buffer\n    .word plus\n    .word scan                  ; end of name (and/or buffer)\n    .word rot\n    .word minus                 ; length\n    .word dup\n    .word pquerycolon\n    .word _setnfa\n    .word nip\n    .word exit\n\nskip\n    lda #$F0                    ; BEQ opcode\n    .byt $2C                    ; BIT abs\n    ;fall through\nscan\n    lda #$D0                    ; BNE opcode\n    sta skipscan03              ; #selfmodifying\n    ldy userin                  ; `in`\n    dey\nskipscan01\n    iny\n    cpy userspan                ; Carry true at end of line\n    bcc skipscan02\n\n    inc ACC+2*N5\n    bne skipscan04\n\n    lda #0                      ; oh, we done. EOL event here\n    sta userspan                ; `span off`\n;    sta userin\n    beq skipscan04\nskipscan02\n    lda (ACC+2*N6),y            ; get char from buffer\n    eor ACC+2*N7                ; compare to character we seek\nskipscan03\n    bvc skipscan01              ; dummy opcode becomes BEQ(skip) or BNE(scan)\nskipscan04\n    sty userin                  ; found char !, move `in`\n    tya\n    jmp push0a                  ;( offset )\n\n\n\n\n: load   ( u -- )\n    0 #blk @ third between? 0= 8 ?error \\ \"BLOCK OUT OF RANGE\"\n    blk tuck 3@>r !+ 2off prev on  interpret  blk 3r>! ;\n\n: interpret   ( -- )\n    begin\n        ?stack  bl name  ?dup\n    while\n        dup found?\n        ?dup ?: interpret.cfa number\n    repeat ;\n\n: name   ( char -- nfa|0 )\n    blk@ ?: sib tib n6 2!\n    refill? ?: name.parse false ;\n\n: refill?   ( -- span|0 )\n    span @ ?dup ?exit\n    blk@\n    if\n        refill.loading\n    else\n        query\n    then  span @ ;\n\n: refill.loading   ( -- )\n    begin\n        0 =cursor\n        sib\n        line.size\n         \\ then navigate to line within `blkbuf`\n        \\ set up `cursor`\n        expect\n        0 =cursor\n        span@ blk@ 0= or\n    until ;\n\n: line.size   ( sib blkbuf -- sib size )\n    blk@ block                  \\ lazy-load (if prev<>blk)\n    lin 40* +                   \\ $C4\n\n    lin buf.wrap >bit cbit@\n    in 1+ over ?: 1+! 2+!\n    ?: forty eighty  -trailing ;\n\nfirmwarecursor\n    ;    $D5  ($C4)     $C6  $D8  $AF\n    .byt LNMX,PNT,PNT+1,PNTR,TBLX,DFLTN\n\n\n: line.size   ( sib blk -- sib size|0 )\n    blkbuf lin dup cursor c! 40* +            \\ (C4)\n    lin buf.wrap >bit cbit@\n    in 1+ over  ?: 1+! 2+!\n    ?: forty eighty  -trailing ; \\ D5\n\n\n\n: QUERY   ( -- )\n    tib eighty expect ;\n\n\n    got any lines left?  ( blk@ 0<> )\n    build `cursor` as we go\n        lin -> cursor@\n    increment lin\n\n\n: refill?   ( -- size|0 )\n    span @ ?dup ?exit\n    blk@\n    if\n        begin\n            \\ get a line to sib\n            sib line.size\n            \\ line.size has set up `cursor`\n            0 =cursor expect 0 =cursor\n\n            out of lines?  got a line?\n            span@ blk@ 0= or\n        until\n    else\n        tib eighty expect\n    then  span @ ;\n\nrefill?   ( -- size|0 )\n    span @ ?exit\n    blk@ ?dup ?: line.size eighty\n    ?loading !loading expect ?loading ;\n\n\n\n\n\n\n\n\n/usr/bin/xfce4-terminal --hide-menubar --hide-borders --geometry=152x53+290+28\n\n`load` sets blk to nonzero value, kicking things off (BOS)\n`interpret` begats `name` ( nfa|0 )\n`name` begats `refill?` ( size|0 )\n\n\n\n\\ refill the line input buffer, if empty\n\\\n: refill?   ( -- size|0 )\n    span @ ?dup ?exit\n    blk@\n    if\n        begin\n            sib line.size\n            0 =cursor  !loading expect  0 =cursor\n            \\ EOS event may have occurred ( 0blk )\n            span @ blk@ 0= or\n        until\n    else\n        tib eighty expect\n    then  span @ ;\n\n\n\n\n`prev` reset by `#blk!` set and tested by `block`\n`blk` set by `load` reset by `!loading`\n`in` reset by `expect` set by `skip` `scan`, final value at eol = `??`\n`lin` reset by `expect` set by `line.size` tested/cleared by `??`\n`span` set by `expect` tested/cleared by `??`\n\nBOS\n    BOL\n    EOL\n    BOL\n            3\n    EOL\n    BOL\n            1\n    EOL\n    BOL\n            =\n    EOL\n    BOL\n            .\n    EOL\nEOS\n\nload   ( blk -- ) ->\n    interpret   ( -- ) ->\n         name   ( char -- nfa|0 ) ->\n             ?refill   ( ?? ) ->\n                 line.size   ( -- size ) ->\n                     block   ( blk -- blkbuf )\n\n\nQUERY\n .word DOCOL\n .word TIB\n .word FETCH\n .word CLIT\n .byt 80\n .word EXPECT\n .word ZERO\n .word IN\n .word STORE\n .word SEMIS\n\n\n\n\n_linesize\n    jsr enter\n    .word zpfrom\n    .byt ACC+2*N6\n    .word swap\n    .word _block\n    .word lin\n    .word fortytimes\n    .word plus                  ;( addr )\n    .word lin\n    .word _bufwrap\n    .word tobit\n    .word cbitfetch             ;( addr wrapbit )\n    .word in\n    .word oneplus\n    .word over\n    .word pquerycolon\n    .word oneplusstore\n    .word twoplusstore\n    .word pquerycolon\n    .word forty\n    .word eighty\n    .word dashtrailing\n    .word exit\n\n: line.size   ( -- size )\n    blk@ block\n    lin 40* +\n    lin buf.wrap >bit cbit@\n    in 1+ over ?: 1+! 2+!\n    ?: forty eighty  -trailing ;\n\n\n\n: query\n    tib 80 expect ;\n\n: ?refill\n    span @ ?exit\n    blk@\n    if\n        sib\n        line.size\n        0 =cursor\n        !loading\n        expect\n        0 =cursor\n    else\n        query\n    then ;\n\n: ?refill\n    blk@\n    if\n\n\n\nload\n                                BOS\n    interpret\nWhat do you do when you get stuck?\n1. You can imagine the completed project in your head, working perfectly.  You can practically envision dozens of people lining up to put a quarter in your arcade game.  Or they're frantically clicking replay every time your new video ends.  But the code isn't there and the video isn't up yet and you're stuck.  These are some things I've tried recently.\n\n# pomodoro technique\n# listen to Merlin\n# describe precisely what you are doing. Might as well write the documentation while you're at it.\n# talking at a brick wall\n# structured english\n# spreadsheet to keep track of registers/stack during execution\n\n\n`prev` reset by `#blk!` set and tested by `block`\n`blk` set by `load` reset by `!loading`\n`in` reset by `expect` set by `skip` `scan`, final value at eol = `??`\n`lin` reset by `expect` set by `line.size` tested/cleared by `??`\n`span` set by `expect` tested/cleared by `??`\n\n\n|BOL|beginning of line|||\n|EOL|end of line|||\n|BOS|beginning of screen|||\n|EOS|end of screen|||\n\n\n\n\n\n\n`1 load`\n\n* : LOAD   ( screen# -- )\n** does a few things\n** set `blk` (zeroed again at EOS)\n** and stuff\n** more things probly\n* : INTERPRET\n** does a few things\n** set `blk` (zeroed again at EOS)\n** and stuff\n** more things probly\n** BL NAME\n\n\n\n\n\n: NAME   ( CHAR -- NFA|0 )\nset a pointer to the line input buffer `blk@ ?: sib tib n6 !`\nsave delimiter `char` to `n7`\n\n\nif there may be more characters `span @ if`\nthen get the next token `skip/scan`\n\nif we run out of characters `in c@ span @ > if`\nthen mark the end of line `span off`\n\nif there may be lines `blk@ if`\nthen get one of the lines `expect`\n\nif we have run out of lines `lin 24 > if`\nthen mark the end of screen `blk off`\n\n\n\n\n\n\n    LOAD   ( u -- blkbuf )\n    sets `blk`\n\n    QUIT\n        INTERPRET               ( -- )\n        exit when `name` returns 0 (no more screen/line)\n            NAME                ( NFA|0 )\n            set `n6` either `sib $0130` or `tib $0200`. set `n7` delimiter (' ' `$20`)\n                REFILL?         ( -- SIZE|0 )\n                leave if there is something in line buffer (`span` is non-0). returns: 0 = loading, no more lines for `sib`; 80 = interactive session `tib`; +n = loading `sib`, width of line `lin -trailing`\n                    LINE.SIZE   ( U -- SIZE|0 )\n                    ensure screen `blk` is in `blkbuf`. set line pointer `(c4)` to logical line addr in `blkbuf`. add +1 or +2 to `lin`\n                        BLOCK   ( U -- BLKBUF )\n                        test `blk = prev`? for early exit\n                        set `prev = blk`\n                    returns: 0 = loading, no more lines for `sib`. 80|40 = size of logical line\n                    ?LOADING\n                    preserve hardware cursor `af (c4) c6 d5 d8`\n                    !LOADING\n                    set up hardware cursor to point into `blkbuf`. ~ rewrite this to preload/stage in `cursor`, for a more symmetric `[ stuff on stack ] !loading ?loading expect ?loading ; tail on `refill?` `lin` is used here, and advanced to the next logical line.  see if `lin >= 25` when end of screen reached? if so, clear `blk`\n                    EXPECT   ( buf size -- )\n                    finally gets to some i/o and actually calls `chrin` to refill `tib` or `sib` from the keyboard or from the fake screen in `blkbuf`\n                    ?LOADING\n                    restore hardware cursor `af (c4) c6 d5 d8`\n                NAME.PARSE   ( -- NFA|0 )\n                `skip` and `scan` past the next token in the line input buffer at $130 or $200, and subtracts the two locations.  if both pointers are to the same location, the length of 0 is returned indicating no token was found.  `in` is incremented one byte past the ending delimiter. `span` will be reset to 0 when `skip` or `scan` move `in` to the end of the current line buffer. when a token is found, `scan`'s address is greater than `skip`'s address and an `nfa` to the token between the two is returned.\n\n: name   ( char -- nfa|0 )\n    blk@ ?: sib tib  n6 2!         \\ set line buffer (`tib` or `sib`)\n    refill? if name.parse then ;   \\ and word delimiter (`bl`)\n\n: refill?   ( -- size|0 )\n    span @ ?exit\n    blk@ ?dup ?: line.size eighty\n    ?loading !loading expect ?loading ;\n\n: name.parse   ( -- )\n    skip dup 1- <n6 +\n    scan rot -\n    dup ?: !nfa nip ;\n\n: line.size   ( u -- size|0 )\n    <n6 swap block  lin 40* +\n    lin buf.wrap >bit cbit@\n    in 1+ over  ?: 1+! 2+!\n    ?: forty eighty  -trailing ;\n\n: ?loading   ( -- )\n    blk@\n    if\n        0 =cursor\n    then ;\n\ncode !loading\n    lda userblk\n    beq setloading02            ; exit unless `loading?`\n    lda #3\n    sta DFLTN                   ; $AF Default Input Device\n    lda userlin\n    cmp #LPERSCR\n    bcc setloading01\n    lda #0\n    sta userblk                 ; end of screen reached\nsetloading01\n    sta TBLX                    ; $D8 cursor physical line number\n    lda tos\n    sta LNMX                    ; $D5 logical line length (39 or 79)\n    lda userin\n    sta PNTR                    ; $C6 cursor column on current line\n    lda stackl,x\n    sta PNT                     ; ($C4) pointer start of current screen line\n    lda stackh,x\n    sta PNT+1\nsetloading02\n    jmp next\n\n\n2018-09-11T01:34:30-04:00\n`load` `load` `load` `koi pond`\n\n2018-09-10T13:19:03-04:00\ntoday going for `load`\n\nbk .exchgcursor\n\n: name   ( char -- nfa|0 )\n    blk@ ?: sib tib  n6 2!      \\ set line buffer (`tib` or `sib`)\n                                \\ and word delimiter (`bl`)\n    ?refill dup\n    if\n        name.parse\n    then ;\n\n\n`(found?)` false positves outside vocabulary scope\n`(?:)` ip crossing page boundaries\n\n2018-09-06T03:15:51-04:00\n\n2018-09-05T07:04:12-04:00\n\n\n\n#d9303b red\n#55c0da cyan\n#0c2a1e green\n#e0e13a yellow\n#db6a3e orange\n\n#f635ca magenta\n#00c4dc cyan1\n#ede200 yellow\n#00ad7d cyan2\n#ff6450 orange\n\n\n2018-09-05T03:59:55-04:00\n\nThis document aims to clarify and describe PETTIL's outer interpreter, which uses a lazy-loading scheme.\n\n: ?refill   ( -- )\n\n\ncode skip   ( delim -- offset )\n    lda #$F0                    ; BEQ opcode\n    .byt $2C                    ; BIT abs\ncode scan   ( delim -- offset )\n    lda #$D0                    ; BNE opcode\n    sta skipscan03              ; #selfmodifying\n    ldy userin                  ; `in`\n    dey\n  skipscan01\n    iny\n    cpy userspan                ; Carry true at end of line\n    bcc skipscan02\n    lda #0                      ; oh, we done\n    sta userspan                ; `span off`\n    beq skipscan04\n  skipscan02\n    lda (ACC+2*N6),y            ; get char from buffer\n    eor tos                     ; compare to character we seek\n  skipscan03\n    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)\n  skipscan04\n    sty userin                  ; found char !, move `in`\n    tya\n    jmp put0a                   ;( offset )\n\ncode !loading   ( sib size -- sib size  )\nsetloading\n    lda #3\n    sta DFLTN                   ; $AF Default Input Device\n    lda userlin\n    cmp userheight\n    bcc setloading01\n    lda #0\n    sta userblk                 ; end of screen reached\nsetloading01\n    sta TBLX                    ; $D8 cursor physical line number\n    lda tos\n    sta LNMX                    ; $D5 logical line length (39 or 79)\n    lda userin\n    sta PNTR                    ; $C6 cursor column on current line\n    lda ACC+2*N6\n    sta PNT                     ;\n    lda ACC+2*N6+1\n    sta PNT+1                   ; system input buffer\n    jmp next\n\n\n                                \\ line.size does cursor@ & !cursor\n    expect\n    ?loading ;\n                                \\ loading? does cursor!\n\n\n\n: ?loading   ( -- )\n    blk@ if cursor!  lin height @ <\n        dup blk@ and blk !\n        span @ and span ! then ;\n: line.size   ( sib blk -- sib size )\n    block lin 40* +\n    lin buf.wrap >bit cbit@\n    in 1+  over ?: 1+! 2+!\n    ?: forty eighty  -trailing\n    cursor@ !cursor ;\n: ?refill   ( c -- c )\n    span @ ?exit\n    blk@ ?: sib tib  >n6        ( _ib )\n    blk@ ?dup ?: line.size eighty    ( _ib size )\n    expect\n    ?loading ;\n: name   ( char -- nfa|0 )\n    ?refill ( c -- c ) dup\n    skip dup>r 1- <n6 + swap\n    scan r> - >n8\n    over c!  in 1+! ;  ( nfa|0 )\n: interpret.cfa   ( cfa flag -- ) compiling? <> ?: execute xt, ;\n: interpret   ( -- ) begin  ?stack  bl name ?dup\n    while  dup found? ?dup ?: interpret.cfa number  repeat ;\n: quit   ( -- ) rp! blk 12 erase \\ outer interpreter infinite loop\n    begin interpret  compiling? blk@ or 0=  if  .\"  ok\" cr  then again \\ ;\n: abort   ( -- ) sp!  forth definitions  quit \\ ;\n\n\n\n\n: ?loading   ( -- )\n    blk@ 0= ?exit\n    rdrop \\ the thing that called us\n    cursor!\n\n    in 1+ 1+!\n    lin  height @\n\n\n: ?loading   ( -- )\n    blk@ 0= ?exit\n    rdrop cursor! ;\n\n: (stream)   ( -- )\n    blk@ ?: sib tib  >n6        ( _ib )\n    span @ ?exit\n    blk@ ?: line.size eighty    ( _ib size )\n                                \\ line.size does cursor@ & !cursor\n    expect\n    ?loading ;\n                                \\ loading? does cursor!\n: !stream   ( -- )\n#endif\n_pstream\n    jsr enter\n    .word blkfetch\n    .word pquerycolon\n    .word sib\n    .word tib\n    .word tozp\n    .byt ACC+2*N6\n    .word span\n    .word fetch\n    .word _qexit\n    .word blkfetch\n    .word qdup\n    .word pquerycolon\n    .word _linesize\n    .word eighty\n    .word expect\n    .word _qloading\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=CURSOR@\nstack=( -- )\ntags=primitive,extra,nosymbol\nFetch hardware cursor (to return stack)\n\n#endif\ncursorfetch\n    lda PNT+1\n    pha\n    lda PNT\n    pha\n    lda PNTR\n    pha\n    lda LNMX\n    pha\n    lda TBLX\n    pha\n    lda DFLTN\n    pha\n    jmp next\n\n;--------------------------------------------------------------\n#if 0\nname=CURSOR!\nstack=( -- )\ntags=primitive,extra\nSet hardware cursor (from return stack)\n\nThis is a lighter version pending implementation of general cursor words: `:cursor` `<cursor` `=cursor` `>cursor`\n\n#endif\ncursorstore\n    pla\n    sta DFLTN\n    pla\n    sta TBLX\n    pla\n    sta LNMX\n    pla\n    sta PNTR\n    pla\n    sta PNT\n    pla\n    sta PNT+1\n    jmp next\n\n\n: refill   ( -- )\n    <n6 blk@ ?: linesize 80 expect ;\n\n    ?refill 'stream drop >n6 drop\n     dup skip dup>r 1- <n6 +\n     swap scan r> - >n8 dup\n     if\n        over c! in 1+!\n        dup                     \\ something for nip\n     then nip ;\n\n: refill   ( -- )\n    blk@  if cursor@ then       \\ possibly load stack with h/w cursor (5 cells)\n    <n6                         ( tib )          \\ keyboard mode\n                                ( cursor sib )   \\ ...or when loading\n    begin\n        line.size               ( buf siz )\n        ?dup\n    until\n    expect                      ( -- | -- cursor )\n    blk@  if cursor! then  ;\n\n: refill\n    blk@ if\n        cursor@ <n6 line.size\n        expect\n        cursor!\n    else\n        <n6 80\n        expect\n    then ;\n\n: line.setup\n    blk@ if\n        cursor@\n        sib\n        3\n          blk@ block lin 40* +\n          0 0 0 0 cursor!\n    else\n        tib eighty\n    then ;\n\n\n: refill   ( -- )\n    line.setup                  ( ?cursor buf size )\n    expect                      ( ?cursor )\n    blk@ if cursor! then ;      ( -- )\n\n\n```\n#endif\n_refill\n    jsr enter\n    .word zpfrom\n    .byt ACC+2*N6               ; tib or sib\n    .word blkfetch\n    .word pquerycolon\n    .word cursorfetch\n    .word next\nrefill02\n    .word blkfetch\n    .word qdup\n    .word pquerycolon\n    .word _linesize\n    .word eighty\n    .word qdup\n    .word qbranch\n    .byt <(refill02-*+1)\n    .word expect\n    .word blkfetch\n    .word pquerycolon\n    .word cursorstore\n    .word next\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=>LINE\nstack=( -- addr size )\ntags=outer,extra\nReturn `addr` and `size` of line# `lin`\n\n```\n: >line    ( -- addr size )\n    blk@ block lin 40* +\n    lin bufwrap >bit cbit@\n    ?: forty eighty\n    -trailing nip ;\n\nptickstream\n    lda #3\n    sta DFLTN                   ; $AF Default Input Device\n    lda tos\n    sta userspan\n    sta LNMX                    ; $D5 logical line length (39 or 79)\n    lda userin\n    sta PNTR                    ; $C6 cursor column on current line\n    lda userlin\n    sta TBLX                    ; $D8 cursor physical line number\n    cmp #LPERSCR\n    bit LNMX\n    inc userlin\n    bvc ptickstream01\n    inc userlin\nptickstream01\n    bcc ptickstream02\n    jsr plugh\n    inx\n    inx\n    jmp putnotc\nptickstream02\n    jmp next\n\n: line.size   ( u -- 40|80 )\n    block lin 40* +\n    lin buf.wrap >bit cbit@\n    in 1+ over ?: 1+! 2+!\n    ?: 40 80\n    -trailing ('stream) ;\n```\n#endif\n_toline\n    jsr enter\n    .word blkfetch\n    .word _block\n    .word lin\n    .word fortytimes\n    .word plus                  ;( line.addr )\n    .word lin\n    .word _bufwrap\n    .word tobit\n    .word cbitfetch             ;( addr wrapbit )\n    .word in\n    .word oneplus               ; 'lin is high byte of `in`\n    .word over\n    .word pquerycolon           ; `lin` points to next line\n    .word oneplusstore          ; 40 column\n    .word twoplusstore          ; 80 column\n    .word pquerycolon\n    .word forty\n    .word eighty\n    .word dashtrailing\n    .word nip                   ; ( addr size )\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=LINESIZE\nstack=( -- size )\ntags=outer,extra,nosymbol\nReturn `size` of either a line input from the keyboard\nor when loading, set hardware cursor to line# `lin` of `blk`\nadvances `lin`\n\n```\n: line.size   ( -- size )\n    cursor@ !loading\n    <n6\n    block lin 40* +\n    lin buf.wrap >bit cbit@\n    in 1+ over ?: 1+! 2+!\n    ?: 40 80\n    -trailing ;\n```\n#endif\n_linesize\n    jsr enter\n    .word cursorfetch\n    .word zpfrom\n    .byt ACC+2*N6\n    .word _block\n    .word lin\n    .word fortytimes\n    .word plus                  ;( addr )\n    .word lin\n    .word _bufwrap\n    .word tobit\n    .word cbitfetch             ;( addr wrapbit )\n    .word in\n    .word oneplus\n    .word over\n    .word pquerycolon\n    .word oneplusstore\n    .word twoplusstore\n    .word pquerycolon\n    .word forty\n    .word eighty\n    .word dashtrailing\n    .word setloading\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=?REFILL\nstack=( char -- char )\ntags=primitive,outer,extra,nosymbol\nLoad either `sib` or `tib` with a logical line of input.\n\ntib|sib (n6)\n\n!!blk\nblk?\n`block` tests `blk` = `prev` to skip unpacking part\n!blk\n`load` sets `blk` to index of an available packet (positive unsigned)\n0blk\n`quit` sets `blk` to 0 (interactive session)\n`?refill` sets block to 0 after interpreting last line\n\n!!in\nin?\n!in\n0in\n`quit` sets in to 0 (interactive session)\n\n!! lin\nlin?\n!lin\n0lin\n\n!!span\nspan?\n!span\n0span\n\n!!prev\nprev?\n!prev\n`#blk!` sets `prev` -1 to\n0prev\n\nscr\nprev\nblk\nin\n lin\nspan\n\n\n\nIs span off?\n\nDo we want to turn span off?\n\nReturn `size` of either a line input from the keyboard\nor when loading, set hardware cursor to line# `lin` of `blk`\nadvances `lin`\n\n#endif\n_qrefill\n    jsr enter\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname=!LOADING\nstack=( -- )\ntags=primitive,outer,extra,nosymbol\nReturn `size` of either a line input from the keyboard\nor when loading, set hardware cursor to line# `lin` of `blk`\nadvances `lin`\n\n#endif\nsetloading\n    lda #3\n    sta DFLTN                   ; $AF Default Input Device\n    lda stackl,x\n    sta PNT\n    lda stackh,x\n    sta PNT+1\n    lda tos\n    sta userspan\n    sta LNMX                    ; $D5 logical line length (39 or 79)\n    lda userin\n    sta PNTR                    ; $C6 cursor column on current line\n    lda userlin\n    sta TBLX                    ; $D8 cursor physical line number\n    jmp nip\n\n;--------------------------------------------------------------\n#if 0\nname=NAME\nstack=( char -- nfa|0 )\ntags=outer,extra\nParse the next `word` from the `input stream`.  Return `false` if the\n`input stream` is exhausted, or the `nfa` of the found word, built\ndirectly within the input stream.  Advance `in` past the parsed `word`.\n\nLeading delimiters are ignored.   If the delimiter is not found the value of\nIN is the size of the input stream.  If the delimiter is found IN is\n adjusted to indicate the offset to the character following\n the delimiter.  `span` is unmodified.\n\nIn PETTIL `name` replaces the function of Forth-83 //required// reserved\nword `word`, which is //omitted//.\n\nAs much of the `ugly` as I could for the `blk` conspiracy goes in here.\nIsolating conspiracy support in as few words as possible will hopefully\nreduce overall system complexity and present clear transitions between the\nphases of the outer interpreter.\n\n```\n: name   ( char -- nfa|0 )\n    !stream\n    dup skip dup>r 1- <n6 +\n    swap scan r> - >n8 dup\n    ?: nfa! nip ;\n\n: name   ( char -- nfa|0 )\n    'stream\n    dup skip\n    dup>r 1- <n6 +\n    swap scan\n    r> - >n8 ( len )\n    nfa! ;\nname=NFA!\nstack=( addr size -- nfa )\n\n: name   ( u -- nfa|0 )\n    ('stream) dup\n    skip dup>r 1- <n6 + swap\n    scan r> - >n8\n    over c!  in 1+! ;\n\n```\n#endif\n_name\n    jsr enter\n    .word _qrefill\n    .word dup\n    .word skip                  ; start of name\n    .word duptor\n    .word oneminus\n    .word zpfrom\n    .byt ACC+2*N6               ; buf\n    .word plus\n    .word swap\n    .word scan                  ; end of name (and/or buffer)\n    .word rfrom\n    .word minus\n    .word tozp\n    .byt ACC+2*N8               ; name.len\n    .word over\n    .word cstore\n    .word in\n    .word oneplusstore          ; move `in` past the name-ending whitespace\n    .word exit\n\n#print (*-skip)\n\n2018-09-05T02:54:08-04:00\n: name   ( char -- nfa|0 )\n    blk@ span @ or\n    if\n        ('stream)               \\\n                                \\\n                                \\ tib 80 expect\n                                \\\n                                \\ sib line.size -trailing expect\n                                \\ set up cursor\n                                \\ stash\n                                \\ restore cursor\n\n\n        dup skip\n        dup>r 1- <n6 +\n        swap scan\n        r> - >n8 dup                    \\ name stuff\n\n\n\n\n\n\n    else\n        0 nip\n    then ;\n\n: ('stream)\n\n\n\nbanana splits -- queen bee\n#f2778d pink\n#71a668 green\n#f2dd72 yellow\n#f2b6a0 pink\n#d95f43 red\n\n\n\n2018-09-04T20:10:00-04:00\nchecked out earliest 9/1 \"Thurgood Marshall\" commit as branch foo\ncompare working `interpret` vs. googlesheet rewrite\n\n`in` `span` `n6`=tib|sib `tos`=char\n\nReturns either an offset to where `char` is either skipped or scanned.  Returns 0 at end of line\n\ncode skip\n    lda #$F0                    ; BEQ opcode\n    .byt $2C                    ; fall through\nscan\n    lda #$D0                    ; BNE opcode\n    ;\n    sta skipscan03              ; #selfmodifying\n    ldy userin                  ; `in` pick up where we left off\n    dey                         ; undo in advance the thing we are about to do\nskipscan01\n    iny\n    cpy userspan                ; Carry true at end of line\n    bcc skipscan02\n    lda #0                      ; oh, we done\n    sta userspan                ; `span off`\n    beq skipscan04              ; bra\nskipscan02\n    lda (ACC+2*N6),y            ; get char from buffer\n    eor tos                     ; compare to character we seek\nskipscan03\n    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)\nskipscan04\n    sty userin                  ; found char !, move `in`\n    tya\n    jmp put0a                   ;( offset )\n\n\n\n: name   ( char -- nfa|0 )\n     ('stream)                  ( char )\n     dup skip dup>r 1- <n6 +\n     swap scan r> - >n8 dup\n     ?: nfa! nip ;\n\n\n: interpret   ( -- )\n    begin\n        ?stack  bl name ?dup\n    while\n        found?  ?dup\n        ?: interpret.cfa number\n    repeat ;\n\n    .word blkfetch\n    .word span\n    .word fetch\n    .word orx\n    .word zeq\n\n\n: interpret   ( -- )\n    begin\n        ?stack  ('stream)\n        blk@ span @ or\n    while\n    bl name  ?dup\n        \\ when blk=0, we get 0 here at end of line\n        \\ when blk>0, we get 0 here at end of screen\n        found?  ?dup\n        ?: interpret.cfa number\n    repeat ;\n\n: interpret   ( -- )\n    begin\n        ?stack\n        ('stream)\n        blk@ span @ or\n    while\n        bl name  ?dup\n        \\ when blk=0, we get 0 here at end of line\n        \\ when blk>0, we get 0 here at end of screen\n        found?  ?dup\n        ?: interpret.cfa number\n    repeat ;\n\n* populate `tib` or `sib`\n** `blk@ if`\n** populate `sib`\n** `else`\n** `tib 80 expect`\n** `then`\n* load `n6` with `tib` or `sib`\n: ('stream)   ( -- )\n\n\n2018-09-04T04:01:44-04:00\n\nin\n    low byte is horizontal position within line buffer (0..span)\n    high byte is physical line # `lin` (0..height)\n\n    `skip` `scan` increase the value of `in`\n    `name` increments `in` at end of token\n\nlin\n    `line.size`increments by 1 or 2 (before `expect`)\n    `?loading` checks for end of screen (after `expect`)\n\nblk\n    set by `load`\n    `(stream)` resets `blk` when `lin` reaches `height`\n    `name` exits with `false` when `blk @ span@ or` is false\n\nprev\n    `block` exits early without rldecode when `blk @ prev @ =` is true\n    set to `true` by `load`\n\n`n6` contains `sib` or `tib` line buffer\n\n\nname     ( char -- nfa|0 )\n    ( char )\n!stream   ( -- f )\n    ( char f )\n\nexit name     ( char -- nfa|0 )\n\n\n\n\\ probably not work\n: 'stream?   ( -- f )\n    blk@ ?: sib tib  n6 !    \\ set n6 to point to linebuf tib or sib\n    span @  ?exit\n\n    refill\n    ( buf size )    expect ;\n\n\\ probably not work\n: name   ( char -- nfa|0 )\n     !stream\n     dup skip dup>r 1- <n6 +\n     swap scan r> - >n8 dup\n     ?: nfa! nip ;\n\n\n\n. returns 0 at end of screen (loading mode)\n    !stream\n    . populate `n6` with\n        refill \\ is no longer query\n        . increment `lin`\n        . push hardware cursor to return stack\n        . set up a cursor\n            !cursor\n            expect\n            . call `CHRIN` to load `sib` buffer\n            . exit expect\n        . pop hardware cursor\n        . exit refill\n    exit 'stream\nexit name\n\n2018-09-04T02:24:06-04:00\n\n\n2018-09-03T08:21:58-04:00\n\n\n---> loading virtual memory --->\n\n. calculate start of line address `lin 40* blkbuf +`\n\n\nload\n. push current `blk` `in` `span`\n    interpret\n    . test `lin` = `height` (exit with `0`)\n        name\n        . returns 0 at end of screen (loading mode)\n            !stream\n            . populate `n6` with\n                refill \\ is no longer query\n                . increment `lin`\n                . when `lin` reaches `height`, turn `blk` off to signify we are done\n                . push hardware cursor to return stack\n                . set up a cursor\n                    !cursor\n                    expect\n                    . call `CHRIN` to load `sib` buffer\n                    . exit expect\n                . pop hardware cursor\n                . exit refill\n            exit 'stream\n        exit name\n    . find? (or try number) and either compile or execute\n    exit interpret\nexit load\n\n. pop `blk` `in` `span`\n. exit load\n\n---> interactive mode --->\nabort\n. reset data stack\n. clear `vocabs`\n    quit\n    . reset return stack\n    . `blk` `in` `span` `#out` `#line` `editing` off\n        interpret\n        begin\n        . . check stack over/underflow\n            name\n        . . is a name available?\n        while\n        . . is this name in the dictionary?\n            found?\n        . . handle it like a boss\n            ?: execute.or.compile number\n        . . interactive mode and end of line? (blk|span)=0 ?\n            blk@ span @ or 0=\n        until\n        exit interpret\n\n        . repeat\n            name\n            . returns 0 at end of line (interactive mode)\n                refill\n                - does not increment `lin`\n                - does not push hardware cursor to return stack\n                - does not set up a cursor\n                -   !cursor\n                    expect\n                    . call `CHRIN` to load `tib` buffer\n                    . exit expect\n                - does not pop hardware cursor\n                exit refill\n            exit name\n\n: interpret   ( -- )\n    begin\n        ?stack  bl name  ?dup\n        \\ when blk=0, we get 0 here at end of line\n        \\ when blk>0, we get 0 here at end of screen\n    while\n        found?  ?dup\n        ?: interpret.cfa number\n        blk@ span @ or 0=\n    until ;\n\n\n\n\n\n2018-09-03T06:42:28-04:00\n`load` is top priority\n\n: load\n    interpret\n        name\n            'stream             ( buf size )\n            refill\n                cursor@\n                cursor!\n\n\n2018-09-03T01:07:03-04:00\n`load`\n `quit`\nboth working/integrated\n`refill`\n`block`\n`update`\n`sib`\n`tib`\n`cursor!`\n`cursor@`\n`=cursor` -- try this\n`('stream)`\n`line.size`\n\nobject:\n\nA `cursor` is a 6-byte datatype of the machine cursor\nit can be fetched from firmware to stack:  `cursor@`\n    ( -- a b c d ef )\nit can be set in firmware:  `cursor!`\n    ( a b c d ef -- )\nit can be fetched from an address `@cursor`\n    ( addr -- a b c d ef )\nit can be stored to an address `!cursor`\n    ( a b c d ef addr -- )\n\n`a` af dfltn default device number\n`b` d8 tblx physical line\n`c` d5 lnmx 40|80 logical line length\n`d` c6 pntr column on current line\n`ef` c4 pnt screen line addr\n\n`cursor:`\n\nit can be fetched from firmware to stack:  `cursor@`\n    ( -- a b c d ef )\n\ncode cursor@\n    jsr slip\n    jsr wrapzap12               ; clear those high bytes\n    lda PNT\n    sta tos\n    lda PNT+1\n    sta tos+1\n    lda PNT\n    sta tos\n    lda PNT\n    sta tos\n    lda PNT\n    sta tos\n    lda PNT\n    sta tos\n    lda PNT\n    sta tos\n    jsr plants10  ( n3.dfltn n2.tblx n1.lnmx n0.pntr pnt )\n    jsr plants10  ( n3.dfltn n2.tblx n1.lnmx n0.pntr pnt )\n    jmp next\n\n```\ncursor: foo\n@foo            \\ fetch *full* cursor we want\n=cursor          \\ exchange with live cursor\nsib 80 expect\n=cursor\n!foo\n\naf              ; default input device (0 or 3)\n    ac\nc6              ;\n    a4\nd8\n    a3\nd5\n    a1\nc4              ; PNT 2-byte pointer to logical line\n    d9\nCD              ; quote flag\n\nFFCF  4C 15 F2    JMP $F215     ; CHRIN\n\n;input a byte\nF215  A5 AF       LDA $AF       ; input device (default = #0, keyboard)\nF217  D0 0B       BNE $F224\n                                ; it is keyboard #0.\nF219  A5 C6       LDA $C6       ; position of cursor along line\nF21B  85 A4       STA $A4       ; cursor column\nF21D  A5 D8       LDA $D8       ; screen line of cursor\nF21F  85 A3       STA $A3       ; cursor row\nF221  4C 16 E1    JMP $E116\n\nF224  C9 03       CMP #$03      ; is it the screen, perhaps?\nF226  D0 09       BNE $F231\n                                ; it is screen #3.\n;get from the screen\nF228  85 AC       STA $AC       ; copy of device #3\nF22A  A5 D5       LDA $D5       ; length of current line (39 or 79)\nF22C  85 A1       STA $A1       ; count of chars of line input from screen\nF22E  4C 16 E1    JMP $E116\n\nF231  B0 29       BCS $F25C     ; is device > #3?\n                                ; it is tape #1 or #2.\n;get from cassette #1 or cassette #2\nF233  86 AD       STX $AD       ; stash the X-register before tape i/o\nF235  20 49 F2    JSR $F249     ; advance tape buffer pointer\nF238  48          PHA           ; this is it! this is the input byte!\nF239  20 49 F2    JSR $F249     ; advance tape buffer pointer\nF23C  D0 05       BNE $F243\nF23E  A9 40       LDA #$40\nF240  20 C4 FB    JSR $FBC4     ; flag contents of A into ST byte\n\nF243  D6 BA       DEC $BA,X\nF245  A6 AD       LDX $AD       ; restore X register\nF247  68          PLA           ; pop the input byte\nF248  60          RTS\n\nF249  20 4B F8    JSR $F84B\nF24C  D0 0B       BNE $F259\nF24E  20 9A F8    JSR $F89A\nF251  A6 D4       LDX $D4\nF253  A9 00       LDA #$00\nF255  95 BA       STA $BA,X\nF257  F0 F0       BEQ $F249\nF259  B1 D6       LDA ($D6),Y\nF25B  60          RTS\n;get from an IEEE device\nF25C  A5 96       LDA $96 ...\n\n;chrin from screen device #3\nE116  98          TYA\nE117  48          PHA\nE118  8A          TXA\nE119  48          PHA\nE11A  A5 AC       LDA $AC       ; input from screen (#3) or from keyboard (#0) flag\nE11C  F0 A1       BEQ $E0BF     ; is it the keyboard?\n                                ; it is screen #3.\nE11E  A4 C6       LDY $C6       ; position of cursor along line\nE120  B1 C4       LDA ($C4),Y   ; pointer to screen RAM position of start of current line\nE122  85 D9       STA $D9       ; last key input\nE124  29 3F       AND #$3F\nE126  06 D9       ASL $D9       ; C = set if RVS char\nE128  24 D9       BIT $D9\nE12A  10 02       BPL $E12E     ; N = set if shifted char\nE12C  09 80       ORA #$80\n\nE12E  90 04       BCC $E134\nE130  A6 CD       LDX $CD       ; Quote flag: 0 = direct cursor, else control chars printed\nE132  D0 04       BNE $E138     ; quote mode\n\nE134  70 02       BVS $E138\nE136  09 40       ORA #$40\n\nE138  E6 C6       INC $C6       ; scoot the cursor along to the right\nE13A  20 67 E1    JSR $E167     ; check for quote toggle\nE13D  C4 A1       CPY $A1       ; count of chars of line input from screen\nE13F  D0 17       BNE $E158     ; we are done, unless 39th/79th char reached\n\nE141  A9 00       LDA #$00\nE143  85 AC       STA $AC       ; input from screen (#3) or from keyboard (#0) flag\nE145  A9 0D       LDA #$0D\nE147  A6 AF       LDX $AF       ; Input device (default = #0, keyboard)\nE149  E0 03       CPX #$03      ; is it the screen?\nE14B  F0 06       BEQ $E153\nE14D  A6 B0       LDX $B0       ; Output device (default = #3, screen)\nE14F  E0 03       CPX #$03\nE151  F0 03       BEQ $E156\n\nE153  20 02 E2    JSR $E202     ; output a character to the screen\n\nE156  A9 0D       LDA #$0D\n\nE158  85 D9       STA $D9       ; last key input\nE15A  68          PLA\nE15B  AA          TAX\nE15C  68          PLA\nE15D  A8          TAY\nE15E  A5 D9       LDA $D9       ; last key input\nE160  C9 DE       CMP #$DE      ; ~what? translate `pi` char to $FF diagonal quarterblock char\nE162  D0 02       BNE $E166\nE164  A9 FF       LDA #$FF\nE166  60          RTS\n\nE167  C9 22       CMP #$22      ; is it a quote?\nE169  D0 08       BNE $E173     ; nope? bye\nE16B  A5 CD       LDA $CD       ; quote flag: 0 = not in quotes\nE16D  49 01       EOR #$01      ; toggle quote flag\nE16F  85 CD       STA $CD\nE171  A9 22       LDA #$22\nE173  60          RTS\n\n\ncursorstore\n    lda PNT+1\n    pha\n    lda PNT\n    pha\n    lda PNTR\n    pha\n    lda LNMX\n    pha\n    lda TBLX\n    pha\n    lda DFLTN\n    pha\n    jmp next\n\n;--------------------------------------------------------------\n#if 0\nname=CURSOR:\nstack=( dfltn tblx lnmx pntr pnt \"name\" == @AF @D8 @D5 @C6 @C4 )\ntags=primitive,extra,nosymbol\nCreate cursor object \"name\" in the dictionary containing 5 stack elements:\n\n|AF|DFLTN|^default input device<br\n|D8|TBLX|\n|D5|LNMX|\n|C6|PNTR|\n|C4|PNT|\n\n```\n: cursor:   ( dfltn tblx lnmx pntr pnt \"name\" == ; -- @AF @D8 @D5 @C6 @C4 )\n    <builds 2>r 2>r c, r> c, r> c, r> c, r> ,\n    does> 4 0 do c@+ swap loop @ ;\n```\n#endif\n_createcursor\n    jsr enter\n    .word exit\n\n;--------------------------------------------------------------\n#if 0\nname==CURSOR\nstack=( dfltn tblx lnmx pntr pnt -- @AF @D8 @D5 @C6 @C4 )\ntags=primitive,extra,nosymbol\nexchange hardward cursor with one on the stack\n\n#endif\ncursorexch\n    pla\n    sta DFLTN\n    pla\n    sta TBLX\n    pla\n    sta LNMX\n    pla\n    sta PNTR\n    pla\n    sta PNT\n    pla\n    sta PNT+1\n\n    jmp next\n\n\n\n```\n\n\nrelated words\n\n2018-09-02T21:34:20-04:00\nNEXT:\n\ng\nz\nd;m 0 ff;m 130 17f;m 694 6a1;m 1e0 21f;z\n\ng\nz\nd;m 0 ff;m 130 17f;m 694 6a1;m 1e0 21f;z\n\nPDE:\ndis 1;dis 2;dis 3;dis 4;en 5;g\n<enter>\ndis 1;dis 2;dis 3;en 4;dis 5;g\n<enter>\nz\n<enter>\n\n\n\nsys64790\ndL\"pettil.prg\":\nalt-w\nshift-run\nalt-w\n_\nstop-dn\nstop-?\n\n\npb \"tmp/pettil.mon\"\ng\nbk .disp1  ;dis 1\nbk .disp2  ;dis 2\nbk .disp3  ;dis 3\nbk .nexto  ;dis 4\nbk .exit   ;dis 5\nbk .restart;dis 6\nbk .plugh\nbk .xyzzy\nkeybuf load\"pettil.prg0\",9\\x0drun\\x0d\nen 1;en 2;en 3;en 4;g\nz\nd;m 0 1f;m 40 4f;m 70 8f;m 1e0 1ff;m 660\npcd\nd;m 0 1f;m 40 4f;m 70 8f;m 120 18f;m 1e0 24f\nd;m 0 1f;m 40 4f;m 70 8f;m 120 18f;m 1e0 24f\ndis 1;dis 2;dis 3;dis 4;en 5;g\ndis 1;dis 2;dis 3;dis 4;en 5;g\ndis 1;dis 2;dis 3;dis 4;en 5;g\npf\npdfpdgpdgpdg\n\npb \"obj/perturb/perturb-v.mon0\"\ng\npb \"obj/perturb/perturb-v.mon0\"\ng\npb \"obj/perturb/perturb-v.mon0\"\ng\nn\nd;m 0 1f;m 40 4f;m 70 8f;m 120 18f;m 1e0 24f\ndpdppdppdppdgpdgpdg pb \"obj/perturb/perturb-v.mon0\"\ng\npb \"obj/perturb/perturb-v.mon0\"\ng\n pb \"obj/perturb/perturb-v.mon0\"\n g\n m 0 8f;m 1e0 1ff\n m 0 ff;m 1e0 1ffd;m 0 1f;m 40 4f;m 70 8f;m 120 18f;m 1e0 24f;z\n",
			"file": "/home/chitselb/commodore/moshpit.txt",
			"file_size": 571156,
			"file_write_time": 132567827434254365,
			"settings":
			{
				"buffer_size": 572003,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Program a PET like a boss!\n\nthe computer \nthe PET\n\nwill          \taction verbs\n\t\t\t\tmid-20th century inflection\n\n\nbe more useful \tokay to be a little Mickey Spillane here but not over the top\nhelp us more \tin fact, over the top might be over the top, as linguistic\ngreater value   constructs go\n\nbe of benefit\t\n\n\nHi {state_your_name}\n\n* how can a dumb old PET make things better in this day and age?\n\n\n\n\n* What's the best way a PET (or a team of PETs) can make  you in this day and age?\n\nRgw xin\n",
			"settings":
			{
				"buffer_size": 495,
				"line_ending": "Unix",
				"name": "Program a PET like a boss!"
			}
		},
		{
			"file": "/home/chitselb/Documents/PETTILmobile/toosalty.txt",
			"settings":
			{
				"buffer_size": 1909,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "here is what I envision -- I type a room descripti"
			}
		},
		{
			"file": "/mnt/data/home/chitselb/Documents/dev/tmp/tools/kosmon/kosmon.doc",
			"settings":
			{
				"buffer_size": 5926,
				"line_ending": "Unix"
			}
		},
		{
			"file": "t.1",
			"settings":
			{
				"buffer_size": 15803,
				"line_ending": "Unix"
			}
		},
		{
			"file": "t.2",
			"settings":
			{
				"buffer_size": 5372,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 39 files for \"bl name\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  618  ```\n  619  : lexer   ( \"name \" ; -- nfa )\n  620:     bl name ?dup ?exit 4 fail ;  \\ MISSING NAME\n  621      -2 allot \\ exit after fail was unnecessary\n  622  ```\n  ...\n  655  ```\n  656  : exists?   ( \"name\" ; -- cfa|0 )\n  657:   bl name ?dup  ?: found? false  and ;\n  658  ```\n  659  */\n  ...\n  664  ```\n  665  : exists?   ( \"name\" ; -- cfa|0 )\n  666:     bl name ?dup  ?: found? false ;\n  667  ```\n  668  #endif\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  107  ```\n  108  : interpret   ( -- )\n  109:     begin   ?stack  bl name ?dup\n  110      while   found? ?dup\n  111              ?: grok number\n\n4 matches across 2 files\n\n\nSearching 39 files for \"_foundq\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  562  */\n  563  #include \"align.i65\"\n  564: _foundq\n  565      jsr enter\n  566  #include \"parm.i65\"\n  ...\n  673      .word _lexer\n  674  #include \"page.i65\"\n  675:     .word _foundq\n  676  #include \"past.i65\"\n  677      .word exit\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  129      .byt <(interpret05-*+1)\n  130  #include \"pad.i65\"\n  131:     .word _foundq               ; ( nfa -- xfa flag )\n  132  #include \"page.i65\"\n  133      .word qdup\n\n3 matches across 2 files\n\n\nSearching 39 files for \"_foundq\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  562  */\n  563  #include \"align.i65\"\n  564: _foundq\n  565      jsr enter\n  566  #include \"parm.i65\"\n  ...\n  673      .word _lexer\n  674  #include \"page.i65\"\n  675:     .word _foundq\n  676  #include \"past.i65\"\n  677      .word exit\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  129      .byt <(interpret05-*+1)\n  130  #include \"pad.i65\"\n  131:     .word _foundq               ; ( nfa -- xfa flag )\n  132  #include \"page.i65\"\n  133      .word qdup\n\n3 matches across 2 files\n\n\nSearching 39 files for \"^_name$\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n  551  #endif\n  552  #include \"align.i65\"\n  553: _name\n  554      jsr enter\n  555  #include \"page.i65\"\n\n1 match in 1 file\n\n\nSearching 39 files for \"^enter$\" (regex)\n\n/home/chitselb/pettil/src/core/core-inner.a65:\n  763  Performs 'secondary' words defined by `:`, pushes IP+2 to the return stack and nests into a secondary.\n  764  \n  765: enter\n  766      txa             ;[2]\n  767      pha             ;[3]\n  ...\n  796  \n  797  \n  798: enter\n  799      ldy pip\n  800      cpy #$FE\n  ...\n  824  \n  825  #endif\n  826: enter\n  827      ldy pip\n  828      lda pip+1\n\n3 matches in 1 file\n\n\nSearching 39 files for \"blkfetch\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  319      .word rtom                  ; pop `blk` `in` `lin` `span`\n  320  #include \"page.i65\"\n  321:     .word blkfetch\n  322  #include \"page.i65\"\n  323      .word zeq\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n  262      .word sib\n  263  #include \"page.i65\"\n  264:     .word blkfetch\n  265  #include \"page.i65\"\n  266      .word _block\n  ...\n  457      jsr enter\n  458  #include \"page.i65\"\n  459:     .word blkfetch\n  460  #include \"parm.i65\"\n  461      .word pquerycolon\n  ...\n  488      .word _qexit\n  489  #include \"page.i65\"\n  490:     .word blkfetch\n  491  #include \"parm.i65\"\n  492      .word pquerycolon\n  ...\n  514      jsr enter\n  515  #include \"page.i65\"\n  516:     .word blkfetch\n  517  #include \"parm.i65\"\n  518      .word pquerycolon\n\n/home/chitselb/pettil/src/core/core-nucleus.a65:\n  900  ~ implementation limits `blk` to the range 0..255 (tape only)\n  901  #endif\n  902: blkfetch\n  903      lda userblk\n  904      .byt $2c                    ; BIT abs opcode\n\n6 matches across 3 files\n\n\nSearching 39 files for \"userspan\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n   81  backslash\n   82      lda #0\n   83:     sta userspan\n   84      jmp next\n   85  \n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   57  skipscan01                                                                      BEGIN\n   58      iny\n   59:     cpy userspan\n   60      bcs skipscan05\n   61      lda (R0L+2*N6),y            ; get char from buffer\n   ..\n  375  eolq\n  376      lda userin\n  377:     cmp userspan\n  378      jmp xpushc\n  379  ;[9]\n\n/home/chitselb/pettil/src/core/core-io.a65:\n  126      sty R0L+2*N7+1              ; mailbox.\n  127      iny\n  128:     sty userspan                ; set `span`\n  129      jmp drop\n  130  \n\n/home/chitselb/pettil/src/core/core-user.a65:\n  399  span\n  400      jsr uservar\n  401:     .byt userspan-uarea\n  402  \n  403  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/core/pettil-core.a65:\n  312  userin          = ustart+10     ;2                                        8-bit\n  313  userlin          = userin+1     ; upper byte is physical line counter\n  314: userspan        = ustart+12     ;3                                        8-bit\n  315  usernumline     = ustart+14     ;4\n  316  usernumout      = ustart+16     ;5\n\n6 matches across 5 files\n\n\nSearching 39 files for \"_parse$\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   92  #endif\n   93  #include \"align.i65\"\n   94: _parse\n   95      jsr enter\n   96  #include \"page.i65\"\n   ..\n  582      .word pquerycolon\n  583      .word false\n  584:     .word _parse\n  585  #include \"past.i65\"\n  586      .word exit\n\n2 matches in 1 file\n\n\nSearching 39 files for \"_parser$\" (regex)\n\n0 matches\n\nSearching 39 files for \"parser$\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n    1  ; pettil-name.a65\n    2: ;#echo .       pettil-name.a65           Text parser\n    3  \n    4  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/studio/pettil-number.a65:\n    6  */\n    7  \n    8: ;#echo .       pettil-number.a65         Number parser\n    9  \n   10  ;--------------------------------------------------------------\n   ..\n  133  stack=( addr base -- 0. )\n  134  tags=numword,nosymbol\n  135: Setup for number parser\n  136  \n  137  * n7 = addr\n\n3 matches across 2 files\n\n\nSearching 39 files for \"push0y\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   65  skipscan05\n   66      sty userin                  ; found char !, move `in`\n   67: push0y\n   68      tya\n   69      jmp push0a                  ;( offset )\n\n/home/chitselb/pettil/src/studio/pettil-number.a65:\n  243      ldy userdpl\n  244      iny\n  245:     jmp push0y\n  246  \n  247  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  591  pvoc\n  592      jsr symlens\n  593:     bcc push0y                          ; false\n  594      tay\n  595      iny\n  596      lda (R0L+2*N3),y\n  597      .byt $24\n  598: push0y\n  599      tya\n  600      jmp push0a\n\n4 matches across 3 files\n\n\nSearching 39 files for \"pvoc\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-compiler.a65:\n 1291  ```\n 1292  : >vocab   ( -- )\n 1293:     caller vocabs dup 1+ 8 cmove> c@ vocabs c! dedupvocab ;\n 1294  \n 1295  : >vocab   ( -- )\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  589  \n  590  #endif\n  591: pvoc\n  592      jsr symlens\n  593      bcc push0y                          ; false\n  ...\n  639  #include \"page.i65\"\n  640  wordlist01\n  641:     .word pvoc\n  642  #include \"page.i65\"\n  643      .word over\n\n3 matches across 2 files\n\n\nSearching 39 files for \"push0y\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   65  skipscan05\n   66      sty userin                  ; found char !, move `in`\n   67: push0y\n   68      tya\n   69      jmp push0a                  ;( offset )\n\n/home/chitselb/pettil/src/studio/pettil-number.a65:\n  243      ldy userdpl\n  244      iny\n  245:     jmp push0y\n  246  \n  247  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  591  pvoc\n  592      jsr symlens\n  593:     bcc push0y                          ; false\n  594      tay\n  595      iny\n  596      lda (R0L+2*N3),y\n  597      .byt $24\n  598: push0y\n  599      tya\n  600      jmp push0a\n\n4 matches across 3 files\n\n\nSearching 39 files for \"01-17\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-studio.a65:\n  372  msg00\n  373      .byt msg01-*-1\n  374:     .asc CR,\"PETTIL 2021-01-17:20:50 \"\n  375  #ifdef IS_PET4\n  376  #ifdef IS_PET80\n\n1 match in 1 file\n\n\nSearching 39 files for \"sym0\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n    5  \n    6  ```\n    7: SYMTAB!     SYM0        SYM.LEN     SYM.STRANDS\n    8  SYM.COPY    (!SYMTAB)   !SYMTAB     STRAND\n    9  IMMEDORNOT  (FOUND?)    FOUND?      STRAND+\n   ..\n   53  ;------------------------------------------------------------------------------\n   54  /*\n   55: title: SYM0\n   56  tags: nosymbol\n   57  \n   58  ```\n   59: code sym0   ( -- )\n   60    symtab 1+ lda,  n3 1+ sta,\n   61    #34  # lda,  n3 sta,\n   ..\n   63  ```\n   64  */\n   65: sym0\n   66      lda usersymtab+1\n   67      sta R0L+2*N3+1\n   ..\n  166  ```\n  167  : !symtab   ( start end -- size addr )\n  168:     bloom 8 erase sym0 symtab @ bl\n  169      begin\n  170          sym.len >  if  <n3 !+ then\n  ...\n  184      .word erase                 ; reset the Bloom filter\n  185  #include \"page.i65\"\n  186:     .word sym0\n  187  #include \"page.i65\"\n  188      .word symtab\n  ...\n  357  ```\n  358  : >name   ( cfa -- nfa|0 )\n  359:     sym0\n  360      begin\n  361          name> over <>\n  ...\n  376      jsr enter\n  377  #include \"page.i65\"\n  378:     .word sym0\n  379  #include \"page.i65\"\n  380      .word ptoname\n  ...\n  586      and #$0F                            ; low 4-bits only\n  587      asl                                 ; *2\n  588:     sta R0L+2*N7                        ; sym0 (sorted)\n  589      lda usersymtab+1\n  590      sta R0L+2*N7+1\n  ...\n 1045  code fnorditude   ( cfa pad 'studio -- pad size )\n 1046      brk, tos ldd, n2 st,  pull, n5 st,\n 1047:     pull, n6 st,  acc sub, n4 st,       \\ n2=studio n3=sym0 n4=0 n5=pad n6=cfa\n 1048      symnew tos set,  tos ldd,  tos st,  \\ unsorted symbols\n 1049  ```\n ....\n 1148  ```\n 1149  : fnord   ( cfa -- )\n 1150:     sym0  pad studio                    ( cfa pad 'studio )\n 1151      fnorditude !symtab ;\n 1152  ```\n ....\n 1156      jsr enter\n 1157  #include \"page.i65\"\n 1158:     .word sym0\n 1159  #include \"page.i65\"\n 1160      .word _pad\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  623  ```\n  624  : word-list   ( voc -- )\n  625:     sym0\n  626      begin\n  627          (voc) over =\n  ...\n  636      jsr enter\n  637  #include \"page.i65\"\n  638:     .word sym0\n  639  #include \"page.i65\"\n  640  wordlist01\n\n14 matches across 2 files\n\n\nSearching 39 files for \"bloom\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  166  ```\n  167  : !symtab   ( start end -- size addr )\n  168:     bloom 8 erase sym0 symtab @ bl\n  169      begin\n  170          sym.len >  if  <n3 !+ then\n  171:         bloomfilter cbit!\n  172          sym.len  call sym+  sym.len 0=\n  173      until (!symtab) 3drop ;\n  ...\n  178      jsr enter\n  179  #include \"page.i65\"\n  180:     .word bloom\n  181  #include \"page.i65\"\n  182      .word eight\n  183  #include \"page.i65\"\n  184:     .word erase                 ; reset the Bloom filter\n  185  #include \"page.i65\"\n  186      .word sym0\n  ...\n  206  #include \"page.i65\"\n  207  samtab02\n  208:     .word _bloomfilter\n  209  #include \"page.i65\"\n  210      .word cbitstore\n  ...\n  230      .word exit\n  231  ;------------------------------------------------------------------------------\n  232: /* BLOOM#\n  233  tags: nosymbol\n  234  \n  235  stack=( -- n )\n  236  \n  237: The Bloom filter tries to answer the question, 'is this word a number?'\n  238  \n  239  The string under consideration is pointed to by (N3) with a length of N8.\n  240  \n  241  Generate a hash of a string, in the range 0..63, used as an index into the\n  242: sparsely populated `bloom` 8-byte bitfield.\n  243  \n  244: A `true` bloom filter bit means, this word might be in the dictionary\n  245  A `false` bit means, this word is not present\n  246  \n  247: `create` turns on the `bloom` bit for each new name\n  248: `forget` completely rebuilds the `bloom` filter\n  249  \n  250  |reg |entry |exit |h\n  251: |^stack |^( nfa -- bloom# )|<|\n  252  |^N3 |^ |^nfa |\n  253  |^N8l |^ |^length |\n  254  |^N8h |^ |^0 |\n  255  \n  256: code bloom#   ( nfa -- bloom# )\n  257  \n  258  */\n  259: bloomhash\n  260      ldy R0L+2*N8                        ; length\n  261      lda #0\n  262      sta z\n  263: bloomhash01\n  264      lda (R0L+2*N3),y\n  265      eor #$30\n  266      cmp #9\n  267:     bcs bloomhash02\n  268      adc z\n  269      sta z\n  270: bloomhash02\n  271      dey\n  272:     bne bloomhash01\n  273      lda z\n  274      and #$3F                            ; width of the filter is 64 bits\n  275      jmp pushya\n  276  ;------------------------------------------------------------------------------\n  277: /* BLOOMFILTER\n  278  tags: nosymbol\n  279  \n  ...\n  281  */\n  282  #include \"align.i65\"\n  283: _bloomfilter\n  284      jsr enter\n  285  #include \"page.i65\"\n  286:     .word bloomhash\n  287  #include \"page.i65\"\n  288:     .word bloom\n  289  #include \"page.i65\"\n  290      .word tobit\n  ...\n  557  : found?   ( nfa -- xfa flag )\n  558    >n3 found00                           ( nfa ; n3=nfa n4=n8=seek.length )\n  559:   bloomfilter cbit@                     ( nfa flag )\n  560    ?: (found?) false ;\n  561  ```\n  ...\n  570      .word found00\n  571  #include \"page.i65\"\n  572:     .word _bloomfilter          ; in sought name, sum of digits ['0-9'+1] modulo 64\n  573  #include \"page.i65\"             ; e.g. `dup` = 0, and `3.1459` = 27\n  574      .word cbitfetch\n  ...\n  610  Sweet16 register changes that will subtly alter how `(seek)` behaves.\n  611  \n  612: |client    |bloom filter        |\n  613: |lexer     |set the bloom filter|\n  614: |interpret |check bloom filter  |\n  615: |'label    |ignore bloom filter |\n  616: |found?    |check bloom filter  |\n  617  \n  618  ```\n  ...\n  718  * enclose JSR CFA\n  719  * Advance `here` three bytes to PFA, the address after JSR CFA.\n  720: * Set bloom filter bit true before trying to `(seek)` it\n  721  * Set up `(seek)` context as `current`\n  722  * Call `(seek)`\n  ...\n  749  ** \"[RVS] \" nfa $. \"[OFF] EXISTS\"\n  750  ** enclose cfa jsr,\n  751: ** set bloom filter bit true\n  752  ** store created word's CFA at symtail++\n  753  ** set newest where symtail is now\n  ...\n  763  ** (`from` = n3; `to`=symtail, `howmany`=length+vocab bit)\n  764  ** jsr plants8\n  765: * bloom  symtail+2 current  rot\n  766  * ?align cfa,  here 3-  newest\n  767  ** enclose nop byte, if needed\n  ...\n  811  tos         here 3-\n  812  n0          newest\n  813: n1          bloom\n  814  n2\n  815  n3\n  ...\n  840          .\" [OFF] EXISTS\"\n  841      then\n  842:     cfa, bloomfilter cbit!\n  843:     bloom newest here 3-\n  844      create00  cmove ;\n  845  \n  ...\n  898      .word _cfacomma\n  899  #include \"page.i65\"\n  900:     .word _bloomfilter\n  901  #include \"page.i65\"\n  902      .word cbitstore\n  903  #include \"page.i65\"\n  904:     .word bloom                 ; `symtail 2+`\n  905  #include \"page.i65\"\n  906      .word newest\n\n/home/chitselb/pettil/src/studio/pettil-studio.a65:\n  358  usersymnew      = uendcore+32   ;1\n  359  usersymtail     = uendcore+34   ;2\n  360: userbloom       = uendcore+36   ;3                                       64-bit\n  361  utend = uendcore+44\n  362  \n\n/home/chitselb/pettil/src/studio/pettil-tdd.a65:\n  344          <n7 .rvs $.\n  345          .\" [OFF] EXISTS\"           then\n  346:     cfa,  bloomfilter cbit!\n  347:     bloom ( symtail 2+ ) newest  here 3-\n  348      create00  cmove ;\n  349  \n\n/home/chitselb/pettil/src/studio/pettil-user.a65:\n  235      .byt usersymtail-uarea\n  236  \n  237: /* BLOOM\n  238  tags uservar nosymbol\n  239  \n  240: The 64-bit Bloom filter used by the core dictionary.  The hash\n  241  is designed to exclude most names containing digits (numbers)\n  242  \n  243  ```\n  244: uservar bloom  ( -- addr )\n  245:   bloom 8 + dp !\n  246  ```\n  247  */\n  248: bloom\n  249      jsr uservar\n  250:     .byt userbloom-uarea\n  251  \n\n47 matches across 4 files\n\n\nSearching 39 files for \"vocab\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-assembler.a65:\n   22  name=ASSEMBLER\n   23  stack=( -- )\n   24: tags=assembler,vocabulary,extension\n   25  /* ASSEMBLER\n   26: tags: assembler vocab ext\n   27  \n   28: Enable `assembler` vocabulary\n   29  \n   30  ```\n   31: #voc off                                \\ this vocabid is 1, `editor` is 2\n   32: vocabulary assembler\n   33  ```\n   34  */\n   35  #endif\n   36  assembler\n   37:     jsr dovocab\n   38:     .byt 1                      ; vocabulary identifier\n   39  \n   40  ;--------------------------------------------------------------\n   ..\n   42  name=Z\n   43  stack=( -- n )\n   44: tags=assembler,vocabulary,extension\n   45: vocab=1\n   46  !!!Assembler constant\n   47  zero page scratch location\n   ..\n   59  name=UP\n   60  stack=( -- n )\n   61: tags=assembler,vocabulary,extension\n   62: vocab=1\n   63  !!!Assembler constant\n   64  User pointer, points to the user variable area\n   ..\n   76  name=IP\n   77  stack=( -- n )\n   78: tags=assembler,vocabulary,extension\n   79: vocab=1\n   80  !!!Assembler constant\n   81  Forth instruction pointer\n   ..\n   93  name=N\n   94  stack=( -- n )\n   95: tags=assembler,vocabulary,extension\n   96: vocab=1\n   97  !!!Assembler constant\n   98  N area, a scratch space for primitives\n   ..\n  110  name=TOS\n  111  stack=( -- n )\n  112: tags=assembler,vocabulary,extension\n  113: vocab=1\n  114  !!!Assembler constant\n  115  Top of stack\n  ...\n  127  name=STACKL\n  128  stack=( -- n )\n  129: tags=assembler,vocabulary,extension\n  130: vocab=1\n  131  !!!Assembler constant\n  132  Stack low order side\n  ...\n  140  name=STACKH\n  141  stack=( -- n )\n  142: tags=assembler,vocabulary,extension\n  143: vocab=1\n  144  !!!Assembler constant\n  145  Stack high order side\n  ...\n  153  name=NEXT\n  154  stack=( -- n )\n  155: tags=assembler,vocabulary,extension\n  156: vocab=1\n  157  !!!Assembler constant\n  158  Address of NEXT routine\n  ...\n  170  name=POP\n  171  stack=( -- n )\n  172: tags=assembler,vocabulary,extension\n  173: vocab=1\n  174  !!!Assembler constant\n  175  Address of POP routine\n  ...\n  183  name=POPTWO\n  184  stack=( -- n )\n  185: tags=assembler,vocabulary,extension\n  186: vocab=1\n  187  !!!Assembler constant\n  188  Address of POPTWO routine\n  ...\n  196  name=PUT\n  197  stack=( -- n )\n  198: tags=assembler,vocabulary,extension\n  199: vocab=1\n  200  !!!Assembler constant\n  201  Address of NEXT routine\n  ...\n  213  name=PUSHYA\n  214  stack=( -- n )\n  215: tags=assembler,vocabulary,extension\n  216: vocab=1\n  217  !!!Assembler constant\n  218  Address of PUSHYA routine\n  ...\n  226  name=HARVESTS\n  227  stack=( -- n )\n  228: tags=assembler,vocabulary,extension\n  229: vocab=1\n  230  !!!Assembler constant\n  231  Address of HARVESTS subroutine\n  ...\n  240  stack=( -- n )\n  241  tags=assembler,ext,nosymbol\n  242: vocab=1\n  243  !!!Assembler constant\n  244  Table of addressing modes\n  ...\n  254  name=MODE\n  255  stack=( -- n )\n  256: tags=assembler,vocabulary,ext,nosymbol\n  257: vocab=1\n  258  Addressing mode, one of `.a # mem ,x ,y x) )y )`\n  259  \n  ...\n  271  name=>ASMMODE\n  272  stack=( -- )\n  273: tags=assembler,vocabulary,ext,nosymbol\n  274: vocab=1\n  275  set the addressing mode\n  276  \n  ...\n  294  stack=( [ operand ... ] opcode 0|1|2|3 -- )\n  295  tags=assembler,nosymbol\n  296: vocab=1\n  297  encloses the instruction and 0, 1 or 2 bytes of operand\n  298  \n  ...\n  329  name=DOCPU\n  330  stack=( -- )\n  331: tags=assembler,vocabulary,ext,nosymbol\n  332: vocab=1\n  333  !!!Assembler mode\n  334  Indirect addressing mode\n  ...\n  351  stack=( addr-1 --  [ [arghi] arglo] opcode n )\n  352  tags=assembler,assembler,nosymbol\n  353: vocab=1\n  354  Adjusts the addressing mode\n  355  determines the instruction\n  ...\n  421  stack=( -- )\n  422  tags=assembler,nosymbol\n  423: vocab=1\n  424  Adjusts the addressing mode\n  425  determines the instruction\n  ...\n  469  name=IF,\n  470  stack=( -- )\n  471: tags=assembler,vocabulary,extension\n  472: vocab=1\n  473  \n  474  ```\n  ...\n  501  name=ELSE,\n  502  stack=( -- )\n  503: tags=assembler,vocabulary,extension\n  504: vocab=1\n  505  ```\n  506  : else,   ( dp flag -- dp flag )\n  ...\n  552  name=THEN,\n  553  stack=( -- )\n  554: tags=assembler,vocabulary,extension\n  555: vocab=1\n  556  ```\n  557  : then,   ( -- )\n  ...\n  598  name=BEGIN,\n  599  stack=( -- )\n  600: tags=assembler,vocabulary,extension\n  601: vocab=1\n  602  \n  603  ```\n  ...\n  625  name=WHILE,\n  626  stack=( -- )\n  627: tags=assembler,vocabulary,extension\n  628: vocab=1\n  629  \n  630  \n  ...\n  679  name=UNTIL,\n  680  stack=( -- )\n  681: tags=assembler,vocabulary,extension\n  682: vocab=1\n  683  ```\n  684  : until,   ( dp opcode -- )\n  ...\n  713  name=AGAIN,\n  714  stack=( addr -- )\n  715: tags=assembler,vocabulary,extension\n  716  flags=immediate\n  717: vocab=1\n  718  ```\n  719  : again,   ( dp -- )\n  ...\n  740  name=REPEAT,\n  741  stack=( addr1 addr2 -- )\n  742: tags=assembler,vocabulary,extension\n  743  flags=immediate\n  744: vocab=1\n  745  ```\n  746  : repeat,   ( addr1 addr2 -- )\n  ...\n  771  name=NOT\n  772  stack=( opcode -- opcode^20 )\n  773: tags=assembler,vocabulary,extension\n  774: vocab=1\n  775  \n  776  ```\n  ...\n  792  name=CS\n  793  stack=( \"name\" -- )\n  794: tags=assembler,vocabulary,extension\n  795: vocab=1\n  796  \n  797  ~wut? shouldn't this be `cc`?\n  ...\n  811  name=0=\n  812  stack=( -- )\n  813: tags=assembler,vocabulary,extension\n  814: vocab=1\n  815  \n  816  ```\n  ...\n  826  name=0<\n  827  stack=( -- )\n  828: tags=assembler,vocabulary,extension\n  829: vocab=1\n  830  ```\n  831  10 cconstant 0< ( assembler test for less than or equal zero )\n  ...\n  840  name=>=\n  841  stack=( -- )\n  842: tags=assembler,vocabulary,extension\n  843: vocab=1\n  844  ```\n  845  90 cconstant >= ( assembler test for greater or equal zero )\n  ...\n  855  name=VS\n  856  stack=( -- )\n  857: tags=assembler,vocabulary,extension\n  858: vocab=1\n  859  ```\n  860  50 cconstant vs ( assembler test for overflow set )\n  ...\n  869  name=CODE-SETUP\n  870  stack=( \"name\" -- )\n  871: tags=assembler,vocabulary,ext,nosymbol\n  872: vocab=1\n  873  Creates a symbol table header for a new assembler definition\n  874  \n  ...\n  914  name=CODE-FIXUP\n  915  stack=( -- )\n  916: tags=assembler,vocabulary,ext,nosymbol\n  917: vocab=1\n  918  Adjusts `LATEST` symbol to behave as a new assembler definition\n  919  #endif\n  ...\n  936  name=CODE\n  937  stack=( \"name\" -- )\n  938: tags=assembler,vocabulary,extension\n  939: Create a new (smudged) name and invoke the assembler vocabulary\n  940  #endif\n  941  #include \"align.i65\"\n  ...\n  954  stack=( -- )\n  955  tags=assembler,compiler,nosymbol\n  956: vocab=1\n  957  #endif\n  958  #include \"align.i65\"\n  ...\n  980  tags=assembler,compiler,unimplemented\n  981  flags=immediate\n  982: vocab=1\n  983  Transition from high-level Forth to 6502 assembly\n  984  #endif\n  ...\n 1007  name=END-CODE\n 1008  stack=( \"name\" -- )\n 1009: vocab=1\n 1010: tags=assembler,vocabulary,extension\n 1011: Remove [[ASSEMBLER]] vocabulary from VOCABS.  Does this by\n 1012: (re)invoking the [[ASSEMBLER]] vocabulary to make it the\n 1013: first one in [[VOCABS]], then sliding the rest of [[VOCABS]]\n 1014  backward to overwrite it.\n 1015  \n ....\n 1035  name=.A\n 1036  stack=( -- )\n 1037: tags=assembler,vocabulary,extension\n 1038: vocab=1\n 1039  !!!Assembler mode\n 1040  Accumulator addressing mode\n ....\n 1048  name=#\n 1049  stack=( -- )\n 1050: tags=assembler,vocabulary,extension\n 1051: vocab=1\n 1052  !!!Assembler mode\n 1053  Immediate addressing mode\n ....\n 1061  name=MEM\n 1062  stack=( -- )\n 1063: tags=assembler,vocabulary,extension\n 1064: vocab=1\n 1065  !!!Assembler mode\n 1066  Memory addressing mode (abs or zp)\n ....\n 1074  name=,X\n 1075  stack=( -- )\n 1076: tags=assembler,vocabulary,extension\n 1077: vocab=1\n 1078  !!!Assembler mode\n 1079  Indexed X addressing mode\n ....\n 1087  name=,Y\n 1088  stack=( -- )\n 1089: tags=assembler,vocabulary,extension\n 1090: vocab=1\n 1091  !!!Assembler mode\n 1092  Indexed Y addressing mode\n ....\n 1100  name=X)\n 1101  stack=( -- )\n 1102: tags=assembler,vocabulary,extension\n 1103: vocab=1\n 1104  !!!Assembler mode\n 1105  Indirect X addressing mode\n ....\n 1113  name=)Y\n 1114  stack=( -- )\n 1115: tags=assembler,vocabulary,extension\n 1116: vocab=1\n 1117  !!!Assembler mode\n 1118  Indirect-Y addressing mode\n ....\n 1126  name=)\n 1127  stack=( -- )\n 1128: tags=assembler,vocabulary,extension\n 1129: vocab=1\n 1130  !!!Assembler mode\n 1131  Indirect addressing mode\n ....\n 1140  stack=( -- )\n 1141  tags=assembler\n 1142: vocab=1\n 1143  !!!Assembler instruction\n 1144  compiles a BRK opcode\n ....\n 1153  stack=( -- )\n 1154  tags=assembler\n 1155: vocab=1\n 1156  !!!Assembler instruction\n 1157  compiles a CLC opcode\n ....\n 1166  stack=( -- )\n 1167  tags=assembler\n 1168: vocab=1\n 1169  !!!Assembler instruction\n 1170  compiles a CLD opcode\n ....\n 1179  stack=( -- )\n 1180  tags=assembler\n 1181: vocab=1\n 1182  !!!Assembler instruction\n 1183  compiles a CLI opcode\n ....\n 1192  stack=( -- )\n 1193  tags=assembler\n 1194: vocab=1\n 1195  !!!Assembler instruction\n 1196  compiles a CLV opcode\n ....\n 1205  stack=( -- )\n 1206  tags=assembler\n 1207: vocab=1\n 1208  !!!Assembler instruction\n 1209  compiles a DEX opcode\n ....\n 1218  stack=( -- )\n 1219  tags=assembler\n 1220: vocab=1\n 1221  !!!Assembler instruction\n 1222  compiles a DEY opcode\n ....\n 1231  stack=( -- )\n 1232  tags=assembler\n 1233: vocab=1\n 1234  !!!Assembler instruction\n 1235  compiles a INX opcode\n ....\n 1244  stack=( -- )\n 1245  tags=assembler\n 1246: vocab=1\n 1247  !!!Assembler instruction\n 1248  compiles a INY opcode\n ....\n 1257  stack=( -- )\n 1258  tags=assembler\n 1259: vocab=1\n 1260  !!!Assembler instruction\n 1261  compiles a NOP opcode\n ....\n 1270  stack=( -- )\n 1271  tags=assembler\n 1272: vocab=1\n 1273  !!!Assembler instruction\n 1274  compiles a PHA opcode\n ....\n 1283  stack=( -- )\n 1284  tags=assembler\n 1285: vocab=1\n 1286  !!!Assembler instruction\n 1287  compiles a PHP opcode\n ....\n 1296  stack=( -- )\n 1297  tags=assembler\n 1298: vocab=1\n 1299  !!!Assembler instruction\n 1300  compiles a PLA opcode\n ....\n 1309  stack=( -- )\n 1310  tags=assembler\n 1311: vocab=1\n 1312  !!!Assembler instruction\n 1313  compiles a PLP opcode\n ....\n 1322  stack=( -- )\n 1323  tags=assembler\n 1324: vocab=1\n 1325  !!!Assembler instruction\n 1326  compiles a RTI opcode\n ....\n 1335  stack=( -- )\n 1336  tags=assembler\n 1337: vocab=1\n 1338  !!!Assembler instruction\n 1339  compiles a RTS opcode\n ....\n 1348  stack=( -- )\n 1349  tags=assembler\n 1350: vocab=1\n 1351  !!!Assembler instruction\n 1352  compiles a SEC opcode\n ....\n 1361  stack=( -- )\n 1362  tags=assembler\n 1363: vocab=1\n 1364  !!!Assembler instruction\n 1365  compiles a SED opcode\n ....\n 1374  stack=( -- )\n 1375  tags=assembler\n 1376: vocab=1\n 1377  !!!Assembler instruction\n 1378  compiles a SEI opcode\n ....\n 1387  stack=( -- )\n 1388  tags=assembler\n 1389: vocab=1\n 1390  !!!Assembler instruction\n 1391  compiles a TAX opcode\n ....\n 1400  stack=( -- )\n 1401  tags=assembler\n 1402: vocab=1\n 1403  !!!Assembler instruction\n 1404  compiles a TAY opcode\n ....\n 1413  stack=( -- )\n 1414  tags=assembler\n 1415: vocab=1\n 1416  !!!Assembler instruction\n 1417  compiles a TSX opcode\n ....\n 1426  stack=( -- )\n 1427  tags=assembler\n 1428: vocab=1\n 1429  !!!Assembler instruction\n 1430  compiles a TXA opcode\n ....\n 1439  stack=( -- )\n 1440  tags=assembler\n 1441: vocab=1\n 1442  !!!Assembler instruction\n 1443  compiles a TXS opcode\n ....\n 1452  stack=( -- )\n 1453  tags=assembler\n 1454: vocab=1\n 1455  !!!Assembler instruction\n 1456  compiles a TYA opcode\n ....\n 1465  stack=( -- )\n 1466  tags=assembler\n 1467: vocab=1\n 1468  !!!Assembler instruction\n 1469  compiles a ADC opcode\n ....\n 1479  stack=( -- )\n 1480  tags=assembler\n 1481: vocab=1\n 1482  !!!Assembler instruction\n 1483  compiles a AND opcode\n ....\n 1493  stack=( -- )\n 1494  tags=assembler\n 1495: vocab=1\n 1496  !!!Assembler instruction\n 1497  compiles a CMP opcode\n ....\n 1507  stack=( -- )\n 1508  tags=assembler\n 1509: vocab=1\n 1510  !!!Assembler instruction\n 1511  compiles a EOR opcode\n ....\n 1521  stack=( -- )\n 1522  tags=assembler\n 1523: vocab=1\n 1524  !!!Assembler instruction\n 1525  compiles a LDA opcode\n ....\n 1535  stack=( -- )\n 1536  tags=assembler\n 1537: vocab=1\n 1538  !!!Assembler instruction\n 1539  compiles a ORA opcode\n ....\n 1549  stack=( -- )\n 1550  tags=assembler\n 1551: vocab=1\n 1552  !!!Assembler instruction\n 1553  compiles a SBC opcode\n ....\n 1563  stack=( -- )\n 1564  tags=assembler\n 1565: vocab=1\n 1566  !!!Assembler instruction\n 1567  compiles a STA opcode\n ....\n 1577  stack=( -- )\n 1578  tags=assembler\n 1579: vocab=1\n 1580  !!!Assembler instruction\n 1581  compiles a ASL opcode\n ....\n 1591  stack=( -- )\n 1592  tags=assembler\n 1593: vocab=1\n 1594  !!!Assembler instruction\n 1595  compiles a DEC opcode\n ....\n 1605  stack=( -- )\n 1606  tags=assembler\n 1607: vocab=1\n 1608  !!!Assembler instruction\n 1609  compiles a INC opcode\n ....\n 1619  stack=( -- )\n 1620  tags=assembler\n 1621: vocab=1\n 1622  !!!Assembler instruction\n 1623  compiles a LSR opcode\n ....\n 1633  stack=( -- )\n 1634  tags=assembler\n 1635: vocab=1\n 1636  !!!Assembler instruction\n 1637  compiles a ROL opcode\n ....\n 1647  stack=( -- )\n 1648  tags=assembler\n 1649: vocab=1\n 1650  !!!Assembler instruction\n 1651  compiles a ROR opcode\n ....\n 1661  stack=( -- )\n 1662  tags=assembler\n 1663: vocab=1\n 1664  !!!Assembler instruction\n 1665  compiles a STX opcode\n ....\n 1675  stack=( -- )\n 1676  tags=assembler\n 1677: vocab=1\n 1678  !!!Assembler instruction\n 1679  compiles a CPX opcode\n ....\n 1689  stack=( -- )\n 1690  tags=assembler\n 1691: vocab=1\n 1692  !!!Assembler instruction\n 1693  compiles a CPY opcode\n ....\n 1703  stack=( -- )\n 1704  tags=assembler\n 1705: vocab=1\n 1706  !!!Assembler instruction\n 1707  compiles a LDX opcode\n ....\n 1717  stack=( -- )\n 1718  tags=assembler\n 1719: vocab=1\n 1720  !!!Assembler instruction\n 1721  compiles a LDY opcode\n ....\n 1731  stack=( -- )\n 1732  tags=assembler\n 1733: vocab=1\n 1734  !!!Assembler instruction\n 1735  compiles a STY opcode\n ....\n 1745  stack=( -- )\n 1746  tags=assembler\n 1747: vocab=1\n 1748  !!!Assembler instruction\n 1749  compiles a JSR opcode\n ....\n 1759  stack=( -- )\n 1760  tags=assembler\n 1761: vocab=1\n 1762  !!!Assembler instruction\n 1763  compiles a JMP opcode\n ....\n 1773  stack=( -- )\n 1774  tags=assembler\n 1775: vocab=1\n 1776  !!!Assembler instruction\n 1777  compiles a BIT opcode\n\n/home/chitselb/pettil/src/studio/pettil-compiler.a65:\n  480  \n  481   Creates a word definition for `<name>` in the compilation\n  482:  vocabulary and sets compilation state true. Text from the\n  483   input stream is subsequently compiled.  `<name>` is called\n  484   a \"colon definition\".  The newly created word definition\n  ...\n 1279  ;--------------------------------------------------------------\n 1280  #if 0\n 1281: name=>VOCAB\n 1282  stack=( -- )\n 1283  tags=compiler,nosymbol\n 1284: The business end of a word defined by `vocabulary`.  Gets the\n 1285: vocid from the vocabulary and prepends it to `vocabs`\n 1286  \n 1287: New vocabularies compile a call to `>vocab` followed by an inline\n 1288: byte parameter (the vocabulary id).  This routine puts the vocab id\n 1289: at the front of the `vocabs` list (max 10).  Duplicates are removed.\n 1290  \n 1291  ```\n 1292: : >vocab   ( -- )\n 1293:     caller vocabs dup 1+ 8 cmove> c@ vocabs c! dedupvocab ;\n 1294  \n 1295: : >vocab   ( -- )\n 1296: \\ : vocabulary <builds  #voc dup 1+! @ c,\n 1297      does> c@ dup>r\n 1298                                  ( voc ) ( r; voc )\n 1299:     vocabs dup r@ $index\n 1300:     vocabs dup count under 1+under r@ $index\n 1301:                                 ( voc vocabs\n 1302:                                 ( voc vocabs index ) ( r; voc )\n 1303      ?dup ?: next nine\n 1304:                                 ( voc vocabs index ) ( r; voc )\n 1305  \n 1306  \n 1307: : >vocab\n 1308      does> c@ dup>r\n 1309:     vocabs count\n 1310      under under 1+under\n 1311:     vocabs r> $index ?dup\n 1312      if\n 1313          nip 1-\n ....\n 1317  #endif\n 1318  #include \"align.i65\"\n 1319: dovocab\n 1320      jsr dodoes\n 1321  #include \"page.i65\"\n ....\n 1324      .word duptor\n 1325  #include \"page.i65\"\n 1326:     .word vocabs\n 1327  #include \"page.i65\"\n 1328      .word count\n ....\n 1336      .word oneplusunder\n 1337  #include \"page.i65\"\n 1338:     .word vocabs\n 1339  #include \"page.i65\"\n 1340      .word rfrom\n ....\n 1345  #include \"parm.i65\"\n 1346      .word qbranch\n 1347:     .byt <(dovocab01-*+1)\n 1348  #include \"pad.i65\"\n 1349      .word nip\n ....\n 1351      .word oneminus\n 1352  #include \"page.i65\"\n 1353: dovocab01\n 1354      .word cmovegt\n 1355  #include \"page.i65\"\n ....\n 1362  name=VDROP\n 1363  stack=( -- )\n 1364: tags=vocabulary,ext\n 1365: Remove the first vocabulary from `vocabs`.  Invoking a vocabulary moves it to\n 1366: the first position.  e.g. `assembler vdrop` removes the assembler vocabulary\n 1367  from the search order.\n 1368  \n 1369  ```\n 1370  : vdrop   ( -- )\n 1371:     vocabs 2+ vocabs count cmove ;\n 1372  ```\n 1373  #endif\n ....\n 1376      jsr enter\n 1377  #include \"page.i65\"\n 1378:     .word vocabs\n 1379  #include \"page.i65\"\n 1380      .word twoplus\n 1381  #include \"page.i65\"\n 1382:     .word vocabs\n 1383  #include \"page.i65\"\n 1384      .word count\n ....\n 1390  ;--------------------------------------------------------------\n 1391  #if 0\n 1392: name=VOCABULARY\n 1393  stack=( \"name\" -- )\n 1394  tags=compiler,forth-83\n 1395: PETTIL vocabularies are flat\n 1396  \n 1397  see [[FD-V05N3 p. 5|http://www.forth.org/fd/FD-V05N3.pdf]]\n 1398  \n 1399  ```\n 1400: : vocabulary   ( \"name\" -- )\n 1401      current dup @ over 2>r off\n 1402:     ['] dovocab  (create)  #voc dup 1+! @ c,\n 1403      latest c@ $1f and swap c!\n 1404      2r> ! ;\n ....\n 1406  #endif\n 1407  #include \"align.i65\"\n 1408: _vocabulary\n 1409      jsr enter\n 1410  #include \"page.i65\"\n ....\n 1422  #include \"parm.i65\"\n 1423      .word plit\n 1424:     .word dovocab\n 1425  #include \"pad.i65\"\n 1426      .word _pcreate\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n    8  SYM.COPY    (!SYMTAB)   !SYMTAB     STRAND\n    9  IMMEDORNOT  (FOUND?)    FOUND?      STRAND+\n   10: (FNORD)     >STRAND     NEXTVOCAB?  :WILLITBLEND?\n   11  FNORDITUDE  :SOSORTED   :SOSCRAMBLED\n   12  \n   ..\n   20  |   CFA[high]   |              (2 bytes)\n   21  +-+-+-+-+-+-+-+-+\n   22: [V]       %vocab|              Name Field Address\n   23  | [S]    %smudge|\n   24  |   [I]   %immed|              (1 byte)\n   ..\n   30  |   \"E\"         |\n   31  ?---?---?---?---?\n   32: ?   vocabid     ?     NFA+length+1\n   33: ?---?---?---?---?         01 = assembler; 02 = editor; 03 = user's first vocab\n   34:                                (1 byte, present iff %vocab is true)\n   35                            00 = labels.  Labels are temporary, may be loaded in\n   36                                 from tape.  They exist only in `symnew`..`symtail`\n   ..\n   45      cfa     points to 6502 code\n   46   %smudge    is smudged\n   47:  %vocab     has vocabid\n   48   %immed     is immediate\n   49   length     1..31, 0 = end of list\n   50: vocabid     present if %vocab is true, 0 = is label\n   51  ```\n   52  */\n   ..\n   77  Calculate length of a name\n   78  \n   79: %vocab              $80\n   80  %smudge             $40\n   81  %immed              $20\n   ..\n   89  |N8L |     |length |     |\n   90  |Y   |     |00     |     |\n   91: |N   |     |%vocab |also in C |\n   92  |V   |     |%smudge|     |\n   93  |Z   |     |%done  |(N8 & N2) |\n   94: |C   |     |%vocab |also in N |\n   95  \n   96  ```\n   ..\n   98    'pushya 1- csplit\n   99    # lda, pha,  # lda, pha,\n  100: \\ %vocab %smudge %immed length(0..31)\n  101  :sym.lens\n  102    0 # ldy,  n3 )y lda,  n2 sta,  clc,\n  ...\n  111      pha\n  112  symlens\n  113:     ldy #0                              ; %vocab %smudge %immed\n  114      lda (R0L+2*N3),y\n  115      sta R0L+2*N2\n  ...\n  117      and #$1F                            ; Z %done;\n  118      sta R0L+2*N8\n  119:     bit R0L+2*N2                        ; N %vocab; V %smudge;\n  120      rts                                 ;[26]\n  121  ;------------------------------------------------------------------------------\n  ...\n  407  \n  408      bne pseek100                ; diff length ?\n  409:     lda R0L+2*N5                ; vocabid\n  410:     bcs pseek150                ; %vocab ?\n  411      bne pseek100\n  412  pseek200\n  ...\n  437  \n  438  \n  439:     beq pseek100                ; vocabid must be nonzero\n  440      iny\n  441      .byt $2C\n  ...\n  457  \n  458  calculate n7=strand\n  459: for each vocabulary\n  460      n3=symnew+2\n  461      check unsorted (symnew...)\n  ...\n  465  ```\n  466  code (found?)   ( nfa -- xfa flag )\n  467:     brk,  vocabs 1+ n6 set,             \\ first vocab\n  468  :found1\n  469:     n6 ldd@,  n5 st,                    \\ get vocabid\n  470  :found2\n  471      symnew n3 set,  n3 ldd@,\n  ...\n  492  \n  493  code (found?)   ( nfa -- xfa flag )\n  494:     brk,  vocabs 1+ n6 set,             \\ first vocab\n  495  :pfoundq01\n  496:     n6 ldd@, n5 st,                     \\ get vocabid\n  497      symnew tos set,\n  498      (seek) ext,                         \\ check unsorted\n  ...\n  513      brk\n  514      .byt set | N6\n  515:     .word uservocabs+1                  ; first vocab\n  516  pfoundq01\n  517      .byt ldd | N6\n  518:     .byt st  | N5                       ; get vocabid\n  519      .byt set | N3\n  520      .word usersymnew\n  ...\n  529      .word pseeque                       ; search sorted until 0= or len>seeklen(n4)\n  530      .byt bc  , <(pfound99-*-2)\n  531:     .byt ld  | N5                       ; get vocabid\n  532:     .byt bnz  , <(pfoundq01-*-2)        ; until last vocab\n  533      .byt rtn\n  534      jmp false\n  ...\n  624  #if 0\n  625  name=LEXER\n  626: tags=vocabulary\n  627  \n  628  #endif\n  ...\n  646  /*\n  647  title: EXISTS?\n  648: tags: secondary vocabulary\n  649  \n  650  : exists?   ( \"name\" ; -- cfa|0 )\n  ...\n  660  #if 0\n  661  name=EXISTS?\n  662: tags=vocabulary\n  663  \n  664  ```\n  ...\n  721  * Set up `(seek)` context as `current`\n  722  * Call `(seek)`\n  723: * if `name` exists in `current` vocabulary, then...\n  724  ** Set `redefined` to nfa\n  725  ** if verbose error messages, then display .rvs , output `name`,  .\" EXISTS \" warning message\n  ...\n  734  |^redefined |^ |^here ~+/-3 |\n  735  |^dp        |^ |^enclose `JSR cfa`<br/>page crossing<br/>dp += 2 |\n  736: |^symtail   |^points to `0` |^enclose `dp` +3 ~ -3<br/>set `flags/length` byte<br/>append `vocabid` if needed<br/>`cmove`  symbol name |\n  737  |^newest |^ |^ |\n  738  |^symbol.flags.length |^ |^ |\n  739  |^symbol.txt |^ |^ |\n  740: |^symbol.vocabid |^ |^ |\n  741  |^%smudge |^ |^ |\n  742  |^current |^ |^ |\n  ...\n  753  ** set newest where symtail is now\n  754  \n  755: ** store length/vocab at symtail+\n  756  ** sym+s calculatesss new symtail?\n  757  ** turn off byte at new symtail\n  ...\n  761  ** immediate bit? always 0 here.\n  762  ** if current != 0 then ORA $20 that length(N8)\n  763: ** (`from` = n3; `to`=symtail, `howmany`=length+vocab bit)\n  764  ** jsr plants8\n  765  * bloom  symtail+2 current  rot\n  ...\n  788  |^N2 |^                 |^flags,len,og  |\n  789  |^N4 |^seek.length      |^ .            |\n  790: |^N5 |^                 |^vocabid       |\n  791: |^N6 |^                 |^vocabs        |\n  792  |^N7 |^nfa.strand[0]    |^ .            |\n  793  |^N8L|^                 |^result.length |\n  ...\n 1207  tags: forth-83\n 1208  \n 1209: Set `current` vocabulary for `create`\n 1210  \n 1211  ```\n 1212  code definitions   ( -- )\n 1213:   vocabs 1+ lda,  current sta,\n 1214    next jmp,\n 1215  ```\n ....\n 1220  #endif\n 1221  definitions\n 1222:     lda uservocabs+1\n 1223      sta usercurrent\n 1224      jmp next\n ....\n 1251  /*\n 1252  title: FORTH\n 1253: tags: vocabulary forth-83\n 1254  \n 1255: Search only the main forth vocabulary\n 1256  \n 1257  ```\n 1258: \\ must be first vocabulary defined\n 1259: #voc on  vocabulary forth\n 1260  ```\n 1261  ~~~code golf~~~\n ....\n 1269  #include \"align.i65\"\n 1270  forth\n 1271:     jsr dovocab\n 1272:     .byt 0                              ; vocabulary identifier\n 1273  \n\n/home/chitselb/pettil/src/studio/pettil-editor.a65:\n    6  name=EDITOR\n    7  stack=( -- )\n    8: tags=assembler,vocabulary,extension\n    9: Include `editor` vocabulary in search `vocabs` (context)\n   10  \n   11  #endif\n   12  editor\n   13:     jsr dovocab\n   14:     .byt 2                      ; vocabulary identifier\n   15  \n   16  ;--------------------------------------------------------------\n   ..\n  910  stack=( scr -- )\n  911  tags=editor\n  912: List the specified screen and set `scr`; Invoke `editor` vocabulary\n  913  #endif\n  914  #include \"align.i65\"\n  ...\n 1705  stack=( -- )\n 1706  tags=editor\n 1707: vocab=2\n 1708  List the current screen and set `scr`\n 1709  #endif\n ....\n 1767  stack=( -- )\n 1768  tags=editor\n 1769: vocab=2\n 1770  List the specified screen and set [[SCR]]\n 1771  #endif\n ....\n 1785  stack=( -- )\n 1786  tags=editor\n 1787: vocab=2\n 1788  List the specified screen and set [[SCR]]\n 1789  #endif\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  220  tags=secondary,fig,forth-79,forth-83,interpreter,startup\n  221  * Clear data stack\n  222: * Reset `current` and `vocabs` vocabulary to `forth`\n  223  * perform `quit`\n  224  \n  ...\n  232      .word spstore               ; reset data stack\n  233  #include \"page.i65\"\n  234:     .word forth                 ; resset `vocabs` to core-only\n  235  #include \"page.i65\"\n  236      .word definitions           ; set `core` as `current`\n\n/home/chitselb/pettil/src/studio/pettil-studio.a65:\n  339  user0tdp        .word studioend\n  340  user0numvoc     .word 2         ; `editor` & `assembler`\n  341: user0vocabs     .byt 9\n  342  ustudio\n  343  \n  ...\n  346  usertdp         = uendcore+2    ;2\n  347  usernumvoc      = uendcore+4    ;3\n  348: uservocabs      = uendcore+6    ;                                       10-byte\n  349  \n  350  ; ---- WARM will set to 0\n  ...\n  442  stack=( -- )\n  443  tags=system,startup\n  444: \\ reset vocabularies and dictionary\n  445  \n  446  #endif\n  ...\n  496  #include \"parm.i65\"\n  497      .word dlit\n  498:     .word uservocabs+1          ; erase\n  499:     .word usersymnew-uservocabs-1\n  500  #include \"page.i65\"\n  501      .word erase                 ; reset\n\n/home/chitselb/pettil/src/studio/pettil-tdd.a65:\n  291  \n  292  mode\n  293: | label | current | vocabs |\n  294  \n  295  unsorted\n  ...\n  299             only\n  300                     +each\n  301:                     vocabid\n  302                      until 0\n  303                      (core)\n  ...\n  425      brk\n  426      .byt set | N6\n  427:     .word uservocabs+1                  ; first vocab\n  428  pseequewrap01\n  429      .byt ldd | N6\n  430:     .byt st  | N5                       ; get vocabid\n  431      .byt set | N3\n  432      .word usersymnew\n\n/home/chitselb/pettil/src/studio/pettil-user.a65:\n   59  tags=uservar,ext\n   60  !!!User variable\n   61: User variable containing the total number of vocabularies\n   62: defined on the system.  Defining a new vocabulary increases\n   63  this by 1\n   64  \n   ..\n   86  name=CURRENT\n   87  stack=( -- addr )\n   88: tags=vocabulary,uservar\n   89  !!!User variable\n   90: The vocabulary id of the compilation vocabulary, where new definitions\n   91: are added.  [[DEFINITIONS]] sets this to the first entry in [[VOCABS]]\n   92  \n   93  #endif\n   ..\n  173  ;--------------------------------------------------------------\n  174  #if 0\n  175: name=VOCABS\n  176  stack=( -- addr )\n  177: tags=uservar,vocabulary,interpreter\n  178: Vocabulary stack establishes search order.  [[FORTH]] (vocid = 0) is\n  179: the last vocabulary searched, and is always present.  Executing a\n  180: vocabulary pushes it to the head of this stack.\n  181  \n  182: This is a 10-byte area that determines vocabulary search order.\n  183: Vocabularies are searched from left to right, ending with CORE  ( =0 )\n  184  \n  185  |0|Forth|\n  186  |1|Assembler|\n  187  |2|Editor|\n  188: |3...|user defined vocabularies|\n  189  \n  190  ```\n  191: vocabulary editor\n  192: forth assembler editor cr vocabs 10 dump\n  193  02 01 00 00 00 00 00 00\n  194  00 00  OK\n  ...\n  197  First `editor`(2) will be searched, then `assembler`(1), lastly `core`(0)\n  198  \n  199: When `vocabs[0]` is nonzero, WORDS will only display all non-CORE\n  200  words in the search order\n  201  \n  202  #endif\n  203  #include \"align.i65\"\n  204: vocabs\n  205      jsr uservar\n  206:     .byt uservocabs-uarea\n  207  \n  208  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  584  #if 0\n  585  name=(VOC)\n  586: stack=( -- vocabid|0 )\n  587  tags=ext,nosymbol\n  588  return the `voc` of the current `nfa` in `n3`\n  ...\n  605  stack=( voc -- )\n  606  tags=interpreter,dictionary,forth-83\n  607: Displays all words in vocabulary `n`\n  608  \n  609  user symcurr  ( -- addr )\n  ...\n  614  \n  615  for each symbol\n  616:     is it in the right vocab?\n  617          dup id.\n  618  next\n  ...\n  670  stack=( -- )\n  671  tags=interpreter,dictionary,forth-83\n  672: When `vocabs` is empty, display the `forth` vocabulary\n  673: otherwise, show search (context) vocabularies\n  674  \n  675  ```\n  676  : words   ( -- )\n  677:     cr vocabs 1+ dup\n  678      begin\n  679          c@+ ?dup\n  ...\n  691      .word cr\n  692  #include \"page.i65\"\n  693:     .word vocabs\n  694  #include \"page.i65\"\n  695      .word oneplus               ; skip the count\n  ...\n  774          @ .4h\n  775      loop\n  776:     cr ['] vocabs >name id. 3 spaces\n  777:     vocabs 10 0\n  778      do\n  779          c@+ space .h\n  ...\n  795          drop execute @ .4h  13 ?margin\n  796      repeat\n  797:     vocabs >name drop id.l\n  798:     vocabs count 0\n  799      do\n  800          c@+ .h space\n  ...\n  886  #include \"parm.i65\"\n  887      .word plit\n  888:     .word vocabs\n  889  #include \"pad.i65\"\n  890      .word nip\n  ...\n  896      .word _iddotl\n  897  #include \"page.i65\"\n  898:     .word vocabs\n  899  #include \"page.i65\"\n  900      .word count\n\n/home/chitselb/pettil/src/core/core-nucleus.a65:\n  837  stack=( -- addr )\n  838  tags=nucleus,const,forth-83\n  839: The address of the screen input buffer.  This buffer is used to hold each logical line of screen codes from a packet that has been unpacked to `blkbuf` while interpreting it. As a working area, both `interpret` and `create` will replace space characters before and after a token with length bytes and vocabulary id's.  This buffer may not be pristine!\n  840  \n  841  !!!pronounced: \"screen-input-buffer\"\n  ...\n 1062  name=ACC\n 1063  stack=( -- 00|02 )\n 1064: tags=assembler,vocabulary,extension\n 1065: vocab=1\n 1066  \n 1067  !!!Assembler constant\n\n/home/chitselb/pettil/src/core/core-user.a65:\n  277  ** currently visible screen\n  278  ** associates with contents of `vidram`\n  279: ** used by `editor` vocabulary's `l` `p` and `n`\n  280  ** used by `STOP-HOME` `STOP-UP` and `STOP-DOWN` editor commands\n  281  * `prev` used by ''virtual memory''\n\n302 matches across 11 files\n\n\nSearching 39 files for \"voc\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-assembler.a65:\n   22  name=ASSEMBLER\n   23  stack=( -- )\n   24: tags=assembler,vocabulary,extension\n   25  /* ASSEMBLER\n   26: tags: assembler vocab ext\n   27  \n   28: Enable `assembler` vocabulary\n   29  \n   30  ```\n   31: #voc off                                \\ this vocabid is 1, `editor` is 2\n   32: vocabulary assembler\n   33  ```\n   34  */\n   35  #endif\n   36  assembler\n   37:     jsr dovocab\n   38:     .byt 1                      ; vocabulary identifier\n   39  \n   40  ;--------------------------------------------------------------\n   ..\n   42  name=Z\n   43  stack=( -- n )\n   44: tags=assembler,vocabulary,extension\n   45: vocab=1\n   46  !!!Assembler constant\n   47  zero page scratch location\n   ..\n   59  name=UP\n   60  stack=( -- n )\n   61: tags=assembler,vocabulary,extension\n   62: vocab=1\n   63  !!!Assembler constant\n   64  User pointer, points to the user variable area\n   ..\n   76  name=IP\n   77  stack=( -- n )\n   78: tags=assembler,vocabulary,extension\n   79: vocab=1\n   80  !!!Assembler constant\n   81  Forth instruction pointer\n   ..\n   93  name=N\n   94  stack=( -- n )\n   95: tags=assembler,vocabulary,extension\n   96: vocab=1\n   97  !!!Assembler constant\n   98  N area, a scratch space for primitives\n   ..\n  110  name=TOS\n  111  stack=( -- n )\n  112: tags=assembler,vocabulary,extension\n  113: vocab=1\n  114  !!!Assembler constant\n  115  Top of stack\n  ...\n  127  name=STACKL\n  128  stack=( -- n )\n  129: tags=assembler,vocabulary,extension\n  130: vocab=1\n  131  !!!Assembler constant\n  132  Stack low order side\n  ...\n  140  name=STACKH\n  141  stack=( -- n )\n  142: tags=assembler,vocabulary,extension\n  143: vocab=1\n  144  !!!Assembler constant\n  145  Stack high order side\n  ...\n  153  name=NEXT\n  154  stack=( -- n )\n  155: tags=assembler,vocabulary,extension\n  156: vocab=1\n  157  !!!Assembler constant\n  158  Address of NEXT routine\n  ...\n  170  name=POP\n  171  stack=( -- n )\n  172: tags=assembler,vocabulary,extension\n  173: vocab=1\n  174  !!!Assembler constant\n  175  Address of POP routine\n  ...\n  183  name=POPTWO\n  184  stack=( -- n )\n  185: tags=assembler,vocabulary,extension\n  186: vocab=1\n  187  !!!Assembler constant\n  188  Address of POPTWO routine\n  ...\n  196  name=PUT\n  197  stack=( -- n )\n  198: tags=assembler,vocabulary,extension\n  199: vocab=1\n  200  !!!Assembler constant\n  201  Address of NEXT routine\n  ...\n  213  name=PUSHYA\n  214  stack=( -- n )\n  215: tags=assembler,vocabulary,extension\n  216: vocab=1\n  217  !!!Assembler constant\n  218  Address of PUSHYA routine\n  ...\n  226  name=HARVESTS\n  227  stack=( -- n )\n  228: tags=assembler,vocabulary,extension\n  229: vocab=1\n  230  !!!Assembler constant\n  231  Address of HARVESTS subroutine\n  ...\n  240  stack=( -- n )\n  241  tags=assembler,ext,nosymbol\n  242: vocab=1\n  243  !!!Assembler constant\n  244  Table of addressing modes\n  ...\n  254  name=MODE\n  255  stack=( -- n )\n  256: tags=assembler,vocabulary,ext,nosymbol\n  257: vocab=1\n  258  Addressing mode, one of `.a # mem ,x ,y x) )y )`\n  259  \n  ...\n  271  name=>ASMMODE\n  272  stack=( -- )\n  273: tags=assembler,vocabulary,ext,nosymbol\n  274: vocab=1\n  275  set the addressing mode\n  276  \n  ...\n  294  stack=( [ operand ... ] opcode 0|1|2|3 -- )\n  295  tags=assembler,nosymbol\n  296: vocab=1\n  297  encloses the instruction and 0, 1 or 2 bytes of operand\n  298  \n  ...\n  329  name=DOCPU\n  330  stack=( -- )\n  331: tags=assembler,vocabulary,ext,nosymbol\n  332: vocab=1\n  333  !!!Assembler mode\n  334  Indirect addressing mode\n  ...\n  351  stack=( addr-1 --  [ [arghi] arglo] opcode n )\n  352  tags=assembler,assembler,nosymbol\n  353: vocab=1\n  354  Adjusts the addressing mode\n  355  determines the instruction\n  ...\n  421  stack=( -- )\n  422  tags=assembler,nosymbol\n  423: vocab=1\n  424  Adjusts the addressing mode\n  425  determines the instruction\n  ...\n  469  name=IF,\n  470  stack=( -- )\n  471: tags=assembler,vocabulary,extension\n  472: vocab=1\n  473  \n  474  ```\n  ...\n  501  name=ELSE,\n  502  stack=( -- )\n  503: tags=assembler,vocabulary,extension\n  504: vocab=1\n  505  ```\n  506  : else,   ( dp flag -- dp flag )\n  ...\n  552  name=THEN,\n  553  stack=( -- )\n  554: tags=assembler,vocabulary,extension\n  555: vocab=1\n  556  ```\n  557  : then,   ( -- )\n  ...\n  598  name=BEGIN,\n  599  stack=( -- )\n  600: tags=assembler,vocabulary,extension\n  601: vocab=1\n  602  \n  603  ```\n  ...\n  625  name=WHILE,\n  626  stack=( -- )\n  627: tags=assembler,vocabulary,extension\n  628: vocab=1\n  629  \n  630  \n  ...\n  679  name=UNTIL,\n  680  stack=( -- )\n  681: tags=assembler,vocabulary,extension\n  682: vocab=1\n  683  ```\n  684  : until,   ( dp opcode -- )\n  ...\n  713  name=AGAIN,\n  714  stack=( addr -- )\n  715: tags=assembler,vocabulary,extension\n  716  flags=immediate\n  717: vocab=1\n  718  ```\n  719  : again,   ( dp -- )\n  ...\n  740  name=REPEAT,\n  741  stack=( addr1 addr2 -- )\n  742: tags=assembler,vocabulary,extension\n  743  flags=immediate\n  744: vocab=1\n  745  ```\n  746  : repeat,   ( addr1 addr2 -- )\n  ...\n  771  name=NOT\n  772  stack=( opcode -- opcode^20 )\n  773: tags=assembler,vocabulary,extension\n  774: vocab=1\n  775  \n  776  ```\n  ...\n  792  name=CS\n  793  stack=( \"name\" -- )\n  794: tags=assembler,vocabulary,extension\n  795: vocab=1\n  796  \n  797  ~wut? shouldn't this be `cc`?\n  ...\n  811  name=0=\n  812  stack=( -- )\n  813: tags=assembler,vocabulary,extension\n  814: vocab=1\n  815  \n  816  ```\n  ...\n  826  name=0<\n  827  stack=( -- )\n  828: tags=assembler,vocabulary,extension\n  829: vocab=1\n  830  ```\n  831  10 cconstant 0< ( assembler test for less than or equal zero )\n  ...\n  840  name=>=\n  841  stack=( -- )\n  842: tags=assembler,vocabulary,extension\n  843: vocab=1\n  844  ```\n  845  90 cconstant >= ( assembler test for greater or equal zero )\n  ...\n  855  name=VS\n  856  stack=( -- )\n  857: tags=assembler,vocabulary,extension\n  858: vocab=1\n  859  ```\n  860  50 cconstant vs ( assembler test for overflow set )\n  ...\n  869  name=CODE-SETUP\n  870  stack=( \"name\" -- )\n  871: tags=assembler,vocabulary,ext,nosymbol\n  872: vocab=1\n  873  Creates a symbol table header for a new assembler definition\n  874  \n  ...\n  914  name=CODE-FIXUP\n  915  stack=( -- )\n  916: tags=assembler,vocabulary,ext,nosymbol\n  917: vocab=1\n  918  Adjusts `LATEST` symbol to behave as a new assembler definition\n  919  #endif\n  ...\n  936  name=CODE\n  937  stack=( \"name\" -- )\n  938: tags=assembler,vocabulary,extension\n  939: Create a new (smudged) name and invoke the assembler vocabulary\n  940  #endif\n  941  #include \"align.i65\"\n  ...\n  954  stack=( -- )\n  955  tags=assembler,compiler,nosymbol\n  956: vocab=1\n  957  #endif\n  958  #include \"align.i65\"\n  ...\n  980  tags=assembler,compiler,unimplemented\n  981  flags=immediate\n  982: vocab=1\n  983  Transition from high-level Forth to 6502 assembly\n  984  #endif\n  ...\n 1007  name=END-CODE\n 1008  stack=( \"name\" -- )\n 1009: vocab=1\n 1010: tags=assembler,vocabulary,extension\n 1011: Remove [[ASSEMBLER]] vocabulary from VOCABS.  Does this by\n 1012: (re)invoking the [[ASSEMBLER]] vocabulary to make it the\n 1013: first one in [[VOCABS]], then sliding the rest of [[VOCABS]]\n 1014  backward to overwrite it.\n 1015  \n ....\n 1035  name=.A\n 1036  stack=( -- )\n 1037: tags=assembler,vocabulary,extension\n 1038: vocab=1\n 1039  !!!Assembler mode\n 1040  Accumulator addressing mode\n ....\n 1048  name=#\n 1049  stack=( -- )\n 1050: tags=assembler,vocabulary,extension\n 1051: vocab=1\n 1052  !!!Assembler mode\n 1053  Immediate addressing mode\n ....\n 1061  name=MEM\n 1062  stack=( -- )\n 1063: tags=assembler,vocabulary,extension\n 1064: vocab=1\n 1065  !!!Assembler mode\n 1066  Memory addressing mode (abs or zp)\n ....\n 1074  name=,X\n 1075  stack=( -- )\n 1076: tags=assembler,vocabulary,extension\n 1077: vocab=1\n 1078  !!!Assembler mode\n 1079  Indexed X addressing mode\n ....\n 1087  name=,Y\n 1088  stack=( -- )\n 1089: tags=assembler,vocabulary,extension\n 1090: vocab=1\n 1091  !!!Assembler mode\n 1092  Indexed Y addressing mode\n ....\n 1100  name=X)\n 1101  stack=( -- )\n 1102: tags=assembler,vocabulary,extension\n 1103: vocab=1\n 1104  !!!Assembler mode\n 1105  Indirect X addressing mode\n ....\n 1113  name=)Y\n 1114  stack=( -- )\n 1115: tags=assembler,vocabulary,extension\n 1116: vocab=1\n 1117  !!!Assembler mode\n 1118  Indirect-Y addressing mode\n ....\n 1126  name=)\n 1127  stack=( -- )\n 1128: tags=assembler,vocabulary,extension\n 1129: vocab=1\n 1130  !!!Assembler mode\n 1131  Indirect addressing mode\n ....\n 1140  stack=( -- )\n 1141  tags=assembler\n 1142: vocab=1\n 1143  !!!Assembler instruction\n 1144  compiles a BRK opcode\n ....\n 1153  stack=( -- )\n 1154  tags=assembler\n 1155: vocab=1\n 1156  !!!Assembler instruction\n 1157  compiles a CLC opcode\n ....\n 1166  stack=( -- )\n 1167  tags=assembler\n 1168: vocab=1\n 1169  !!!Assembler instruction\n 1170  compiles a CLD opcode\n ....\n 1179  stack=( -- )\n 1180  tags=assembler\n 1181: vocab=1\n 1182  !!!Assembler instruction\n 1183  compiles a CLI opcode\n ....\n 1192  stack=( -- )\n 1193  tags=assembler\n 1194: vocab=1\n 1195  !!!Assembler instruction\n 1196  compiles a CLV opcode\n ....\n 1205  stack=( -- )\n 1206  tags=assembler\n 1207: vocab=1\n 1208  !!!Assembler instruction\n 1209  compiles a DEX opcode\n ....\n 1218  stack=( -- )\n 1219  tags=assembler\n 1220: vocab=1\n 1221  !!!Assembler instruction\n 1222  compiles a DEY opcode\n ....\n 1231  stack=( -- )\n 1232  tags=assembler\n 1233: vocab=1\n 1234  !!!Assembler instruction\n 1235  compiles a INX opcode\n ....\n 1244  stack=( -- )\n 1245  tags=assembler\n 1246: vocab=1\n 1247  !!!Assembler instruction\n 1248  compiles a INY opcode\n ....\n 1257  stack=( -- )\n 1258  tags=assembler\n 1259: vocab=1\n 1260  !!!Assembler instruction\n 1261  compiles a NOP opcode\n ....\n 1270  stack=( -- )\n 1271  tags=assembler\n 1272: vocab=1\n 1273  !!!Assembler instruction\n 1274  compiles a PHA opcode\n ....\n 1283  stack=( -- )\n 1284  tags=assembler\n 1285: vocab=1\n 1286  !!!Assembler instruction\n 1287  compiles a PHP opcode\n ....\n 1296  stack=( -- )\n 1297  tags=assembler\n 1298: vocab=1\n 1299  !!!Assembler instruction\n 1300  compiles a PLA opcode\n ....\n 1309  stack=( -- )\n 1310  tags=assembler\n 1311: vocab=1\n 1312  !!!Assembler instruction\n 1313  compiles a PLP opcode\n ....\n 1322  stack=( -- )\n 1323  tags=assembler\n 1324: vocab=1\n 1325  !!!Assembler instruction\n 1326  compiles a RTI opcode\n ....\n 1335  stack=( -- )\n 1336  tags=assembler\n 1337: vocab=1\n 1338  !!!Assembler instruction\n 1339  compiles a RTS opcode\n ....\n 1348  stack=( -- )\n 1349  tags=assembler\n 1350: vocab=1\n 1351  !!!Assembler instruction\n 1352  compiles a SEC opcode\n ....\n 1361  stack=( -- )\n 1362  tags=assembler\n 1363: vocab=1\n 1364  !!!Assembler instruction\n 1365  compiles a SED opcode\n ....\n 1374  stack=( -- )\n 1375  tags=assembler\n 1376: vocab=1\n 1377  !!!Assembler instruction\n 1378  compiles a SEI opcode\n ....\n 1387  stack=( -- )\n 1388  tags=assembler\n 1389: vocab=1\n 1390  !!!Assembler instruction\n 1391  compiles a TAX opcode\n ....\n 1400  stack=( -- )\n 1401  tags=assembler\n 1402: vocab=1\n 1403  !!!Assembler instruction\n 1404  compiles a TAY opcode\n ....\n 1413  stack=( -- )\n 1414  tags=assembler\n 1415: vocab=1\n 1416  !!!Assembler instruction\n 1417  compiles a TSX opcode\n ....\n 1426  stack=( -- )\n 1427  tags=assembler\n 1428: vocab=1\n 1429  !!!Assembler instruction\n 1430  compiles a TXA opcode\n ....\n 1439  stack=( -- )\n 1440  tags=assembler\n 1441: vocab=1\n 1442  !!!Assembler instruction\n 1443  compiles a TXS opcode\n ....\n 1452  stack=( -- )\n 1453  tags=assembler\n 1454: vocab=1\n 1455  !!!Assembler instruction\n 1456  compiles a TYA opcode\n ....\n 1465  stack=( -- )\n 1466  tags=assembler\n 1467: vocab=1\n 1468  !!!Assembler instruction\n 1469  compiles a ADC opcode\n ....\n 1479  stack=( -- )\n 1480  tags=assembler\n 1481: vocab=1\n 1482  !!!Assembler instruction\n 1483  compiles a AND opcode\n ....\n 1493  stack=( -- )\n 1494  tags=assembler\n 1495: vocab=1\n 1496  !!!Assembler instruction\n 1497  compiles a CMP opcode\n ....\n 1507  stack=( -- )\n 1508  tags=assembler\n 1509: vocab=1\n 1510  !!!Assembler instruction\n 1511  compiles a EOR opcode\n ....\n 1521  stack=( -- )\n 1522  tags=assembler\n 1523: vocab=1\n 1524  !!!Assembler instruction\n 1525  compiles a LDA opcode\n ....\n 1535  stack=( -- )\n 1536  tags=assembler\n 1537: vocab=1\n 1538  !!!Assembler instruction\n 1539  compiles a ORA opcode\n ....\n 1549  stack=( -- )\n 1550  tags=assembler\n 1551: vocab=1\n 1552  !!!Assembler instruction\n 1553  compiles a SBC opcode\n ....\n 1563  stack=( -- )\n 1564  tags=assembler\n 1565: vocab=1\n 1566  !!!Assembler instruction\n 1567  compiles a STA opcode\n ....\n 1577  stack=( -- )\n 1578  tags=assembler\n 1579: vocab=1\n 1580  !!!Assembler instruction\n 1581  compiles a ASL opcode\n ....\n 1591  stack=( -- )\n 1592  tags=assembler\n 1593: vocab=1\n 1594  !!!Assembler instruction\n 1595  compiles a DEC opcode\n ....\n 1605  stack=( -- )\n 1606  tags=assembler\n 1607: vocab=1\n 1608  !!!Assembler instruction\n 1609  compiles a INC opcode\n ....\n 1619  stack=( -- )\n 1620  tags=assembler\n 1621: vocab=1\n 1622  !!!Assembler instruction\n 1623  compiles a LSR opcode\n ....\n 1633  stack=( -- )\n 1634  tags=assembler\n 1635: vocab=1\n 1636  !!!Assembler instruction\n 1637  compiles a ROL opcode\n ....\n 1647  stack=( -- )\n 1648  tags=assembler\n 1649: vocab=1\n 1650  !!!Assembler instruction\n 1651  compiles a ROR opcode\n ....\n 1661  stack=( -- )\n 1662  tags=assembler\n 1663: vocab=1\n 1664  !!!Assembler instruction\n 1665  compiles a STX opcode\n ....\n 1675  stack=( -- )\n 1676  tags=assembler\n 1677: vocab=1\n 1678  !!!Assembler instruction\n 1679  compiles a CPX opcode\n ....\n 1689  stack=( -- )\n 1690  tags=assembler\n 1691: vocab=1\n 1692  !!!Assembler instruction\n 1693  compiles a CPY opcode\n ....\n 1703  stack=( -- )\n 1704  tags=assembler\n 1705: vocab=1\n 1706  !!!Assembler instruction\n 1707  compiles a LDX opcode\n ....\n 1717  stack=( -- )\n 1718  tags=assembler\n 1719: vocab=1\n 1720  !!!Assembler instruction\n 1721  compiles a LDY opcode\n ....\n 1731  stack=( -- )\n 1732  tags=assembler\n 1733: vocab=1\n 1734  !!!Assembler instruction\n 1735  compiles a STY opcode\n ....\n 1745  stack=( -- )\n 1746  tags=assembler\n 1747: vocab=1\n 1748  !!!Assembler instruction\n 1749  compiles a JSR opcode\n ....\n 1759  stack=( -- )\n 1760  tags=assembler\n 1761: vocab=1\n 1762  !!!Assembler instruction\n 1763  compiles a JMP opcode\n ....\n 1773  stack=( -- )\n 1774  tags=assembler\n 1775: vocab=1\n 1776  !!!Assembler instruction\n 1777  compiles a BIT opcode\n\n/home/chitselb/pettil/src/studio/pettil-compiler.a65:\n  480  \n  481   Creates a word definition for `<name>` in the compilation\n  482:  vocabulary and sets compilation state true. Text from the\n  483   input stream is subsequently compiled.  `<name>` is called\n  484   a \"colon definition\".  The newly created word definition\n  ...\n 1279  ;--------------------------------------------------------------\n 1280  #if 0\n 1281: name=>VOCAB\n 1282  stack=( -- )\n 1283  tags=compiler,nosymbol\n 1284: The business end of a word defined by `vocabulary`.  Gets the\n 1285: vocid from the vocabulary and prepends it to `vocabs`\n 1286  \n 1287: New vocabularies compile a call to `>vocab` followed by an inline\n 1288: byte parameter (the vocabulary id).  This routine puts the vocab id\n 1289: at the front of the `vocabs` list (max 10).  Duplicates are removed.\n 1290  \n 1291  ```\n 1292: : >vocab   ( -- )\n 1293:     caller vocabs dup 1+ 8 cmove> c@ vocabs c! dedupvocab ;\n 1294  \n 1295: : >vocab   ( -- )\n 1296: \\ : vocabulary <builds  #voc dup 1+! @ c,\n 1297      does> c@ dup>r\n 1298:                                 ( voc ) ( r; voc )\n 1299:     vocabs dup r@ $index\n 1300:     vocabs dup count under 1+under r@ $index\n 1301:                                 ( voc vocabs\n 1302:                                 ( voc vocabs index ) ( r; voc )\n 1303      ?dup ?: next nine\n 1304:                                 ( voc vocabs index ) ( r; voc )\n 1305  \n 1306  \n 1307: : >vocab\n 1308      does> c@ dup>r\n 1309:     vocabs count\n 1310      under under 1+under\n 1311:     vocabs r> $index ?dup\n 1312      if\n 1313          nip 1-\n ....\n 1317  #endif\n 1318  #include \"align.i65\"\n 1319: dovocab\n 1320      jsr dodoes\n 1321  #include \"page.i65\"\n ....\n 1324      .word duptor\n 1325  #include \"page.i65\"\n 1326:     .word vocabs\n 1327  #include \"page.i65\"\n 1328      .word count\n ....\n 1336      .word oneplusunder\n 1337  #include \"page.i65\"\n 1338:     .word vocabs\n 1339  #include \"page.i65\"\n 1340      .word rfrom\n ....\n 1345  #include \"parm.i65\"\n 1346      .word qbranch\n 1347:     .byt <(dovocab01-*+1)\n 1348  #include \"pad.i65\"\n 1349      .word nip\n ....\n 1351      .word oneminus\n 1352  #include \"page.i65\"\n 1353: dovocab01\n 1354      .word cmovegt\n 1355  #include \"page.i65\"\n ....\n 1362  name=VDROP\n 1363  stack=( -- )\n 1364: tags=vocabulary,ext\n 1365: Remove the first vocabulary from `vocabs`.  Invoking a vocabulary moves it to\n 1366: the first position.  e.g. `assembler vdrop` removes the assembler vocabulary\n 1367  from the search order.\n 1368  \n 1369  ```\n 1370  : vdrop   ( -- )\n 1371:     vocabs 2+ vocabs count cmove ;\n 1372  ```\n 1373  #endif\n ....\n 1376      jsr enter\n 1377  #include \"page.i65\"\n 1378:     .word vocabs\n 1379  #include \"page.i65\"\n 1380      .word twoplus\n 1381  #include \"page.i65\"\n 1382:     .word vocabs\n 1383  #include \"page.i65\"\n 1384      .word count\n ....\n 1390  ;--------------------------------------------------------------\n 1391  #if 0\n 1392: name=VOCABULARY\n 1393  stack=( \"name\" -- )\n 1394  tags=compiler,forth-83\n 1395: PETTIL vocabularies are flat\n 1396  \n 1397  see [[FD-V05N3 p. 5|http://www.forth.org/fd/FD-V05N3.pdf]]\n 1398  \n 1399  ```\n 1400: : vocabulary   ( \"name\" -- )\n 1401      current dup @ over 2>r off\n 1402:     ['] dovocab  (create)  #voc dup 1+! @ c,\n 1403      latest c@ $1f and swap c!\n 1404      2r> ! ;\n ....\n 1406  #endif\n 1407  #include \"align.i65\"\n 1408: _vocabulary\n 1409      jsr enter\n 1410  #include \"page.i65\"\n ....\n 1422  #include \"parm.i65\"\n 1423      .word plit\n 1424:     .word dovocab\n 1425  #include \"pad.i65\"\n 1426      .word _pcreate\n 1427  #include \"page.i65\"\n 1428:     .word numvoc\n 1429  #include \"page.i65\"\n 1430      .word dup\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n    8  SYM.COPY    (!SYMTAB)   !SYMTAB     STRAND\n    9  IMMEDORNOT  (FOUND?)    FOUND?      STRAND+\n   10: (FNORD)     >STRAND     NEXTVOCAB?  :WILLITBLEND?\n   11  FNORDITUDE  :SOSORTED   :SOSCRAMBLED\n   12  \n   ..\n   20  |   CFA[high]   |              (2 bytes)\n   21  +-+-+-+-+-+-+-+-+\n   22: [V]       %vocab|              Name Field Address\n   23  | [S]    %smudge|\n   24  |   [I]   %immed|              (1 byte)\n   ..\n   30  |   \"E\"         |\n   31  ?---?---?---?---?\n   32: ?   vocabid     ?     NFA+length+1\n   33: ?---?---?---?---?         01 = assembler; 02 = editor; 03 = user's first vocab\n   34:                                (1 byte, present iff %vocab is true)\n   35                            00 = labels.  Labels are temporary, may be loaded in\n   36                                 from tape.  They exist only in `symnew`..`symtail`\n   ..\n   45      cfa     points to 6502 code\n   46   %smudge    is smudged\n   47:  %vocab     has vocabid\n   48   %immed     is immediate\n   49   length     1..31, 0 = end of list\n   50: vocabid     present if %vocab is true, 0 = is label\n   51  ```\n   52  */\n   ..\n   77  Calculate length of a name\n   78  \n   79: %vocab              $80\n   80  %smudge             $40\n   81  %immed              $20\n   ..\n   89  |N8L |     |length |     |\n   90  |Y   |     |00     |     |\n   91: |N   |     |%vocab |also in C |\n   92  |V   |     |%smudge|     |\n   93  |Z   |     |%done  |(N8 & N2) |\n   94: |C   |     |%vocab |also in N |\n   95  \n   96  ```\n   ..\n   98    'pushya 1- csplit\n   99    # lda, pha,  # lda, pha,\n  100: \\ %vocab %smudge %immed length(0..31)\n  101  :sym.lens\n  102    0 # ldy,  n3 )y lda,  n2 sta,  clc,\n  ...\n  111      pha\n  112  symlens\n  113:     ldy #0                              ; %vocab %smudge %immed\n  114      lda (R0L+2*N3),y\n  115      sta R0L+2*N2\n  ...\n  117      and #$1F                            ; Z %done;\n  118      sta R0L+2*N8\n  119:     bit R0L+2*N2                        ; N %vocab; V %smudge;\n  120      rts                                 ;[26]\n  121  ;------------------------------------------------------------------------------\n  ...\n  407  \n  408      bne pseek100                ; diff length ?\n  409:     lda R0L+2*N5                ; vocabid\n  410:     bcs pseek150                ; %vocab ?\n  411      bne pseek100\n  412  pseek200\n  ...\n  437  \n  438  \n  439:     beq pseek100                ; vocabid must be nonzero\n  440      iny\n  441      .byt $2C\n  ...\n  457  \n  458  calculate n7=strand\n  459: for each vocabulary\n  460      n3=symnew+2\n  461      check unsorted (symnew...)\n  ...\n  465  ```\n  466  code (found?)   ( nfa -- xfa flag )\n  467:     brk,  vocabs 1+ n6 set,             \\ first vocab\n  468  :found1\n  469:     n6 ldd@,  n5 st,                    \\ get vocabid\n  470  :found2\n  471      symnew n3 set,  n3 ldd@,\n  ...\n  492  \n  493  code (found?)   ( nfa -- xfa flag )\n  494:     brk,  vocabs 1+ n6 set,             \\ first vocab\n  495  :pfoundq01\n  496:     n6 ldd@, n5 st,                     \\ get vocabid\n  497      symnew tos set,\n  498      (seek) ext,                         \\ check unsorted\n  ...\n  513      brk\n  514      .byt set | N6\n  515:     .word uservocabs+1                  ; first vocab\n  516  pfoundq01\n  517      .byt ldd | N6\n  518:     .byt st  | N5                       ; get vocabid\n  519      .byt set | N3\n  520      .word usersymnew\n  ...\n  529      .word pseeque                       ; search sorted until 0= or len>seeklen(n4)\n  530      .byt bc  , <(pfound99-*-2)\n  531:     .byt ld  | N5                       ; get vocabid\n  532:     .byt bnz  , <(pfoundq01-*-2)        ; until last vocab\n  533      .byt rtn\n  534      jmp false\n  ...\n  624  #if 0\n  625  name=LEXER\n  626: tags=vocabulary\n  627  \n  628  #endif\n  ...\n  646  /*\n  647  title: EXISTS?\n  648: tags: secondary vocabulary\n  649  \n  650  : exists?   ( \"name\" ; -- cfa|0 )\n  ...\n  660  #if 0\n  661  name=EXISTS?\n  662: tags=vocabulary\n  663  \n  664  ```\n  ...\n  721  * Set up `(seek)` context as `current`\n  722  * Call `(seek)`\n  723: * if `name` exists in `current` vocabulary, then...\n  724  ** Set `redefined` to nfa\n  725  ** if verbose error messages, then display .rvs , output `name`,  .\" EXISTS \" warning message\n  ...\n  734  |^redefined |^ |^here ~+/-3 |\n  735  |^dp        |^ |^enclose `JSR cfa`<br/>page crossing<br/>dp += 2 |\n  736: |^symtail   |^points to `0` |^enclose `dp` +3 ~ -3<br/>set `flags/length` byte<br/>append `vocabid` if needed<br/>`cmove`  symbol name |\n  737  |^newest |^ |^ |\n  738  |^symbol.flags.length |^ |^ |\n  739  |^symbol.txt |^ |^ |\n  740: |^symbol.vocabid |^ |^ |\n  741  |^%smudge |^ |^ |\n  742  |^current |^ |^ |\n  ...\n  753  ** set newest where symtail is now\n  754  \n  755: ** store length/vocab at symtail+\n  756  ** sym+s calculatesss new symtail?\n  757  ** turn off byte at new symtail\n  ...\n  761  ** immediate bit? always 0 here.\n  762  ** if current != 0 then ORA $20 that length(N8)\n  763: ** (`from` = n3; `to`=symtail, `howmany`=length+vocab bit)\n  764  ** jsr plants8\n  765  * bloom  symtail+2 current  rot\n  ...\n  788  |^N2 |^                 |^flags,len,og  |\n  789  |^N4 |^seek.length      |^ .            |\n  790: |^N5 |^                 |^vocabid       |\n  791: |^N6 |^                 |^vocabs        |\n  792  |^N7 |^nfa.strand[0]    |^ .            |\n  793  |^N8L|^                 |^result.length |\n  ...\n 1207  tags: forth-83\n 1208  \n 1209: Set `current` vocabulary for `create`\n 1210  \n 1211  ```\n 1212  code definitions   ( -- )\n 1213:   vocabs 1+ lda,  current sta,\n 1214    next jmp,\n 1215  ```\n ....\n 1220  #endif\n 1221  definitions\n 1222:     lda uservocabs+1\n 1223      sta usercurrent\n 1224      jmp next\n ....\n 1251  /*\n 1252  title: FORTH\n 1253: tags: vocabulary forth-83\n 1254  \n 1255: Search only the main forth vocabulary\n 1256  \n 1257  ```\n 1258: \\ must be first vocabulary defined\n 1259: #voc on  vocabulary forth\n 1260  ```\n 1261  ~~~code golf~~~\n ....\n 1269  #include \"align.i65\"\n 1270  forth\n 1271:     jsr dovocab\n 1272:     .byt 0                              ; vocabulary identifier\n 1273  \n\n/home/chitselb/pettil/src/studio/pettil-editor.a65:\n    6  name=EDITOR\n    7  stack=( -- )\n    8: tags=assembler,vocabulary,extension\n    9: Include `editor` vocabulary in search `vocabs` (context)\n   10  \n   11  #endif\n   12  editor\n   13:     jsr dovocab\n   14:     .byt 2                      ; vocabulary identifier\n   15  \n   16  ;--------------------------------------------------------------\n   ..\n  910  stack=( scr -- )\n  911  tags=editor\n  912: List the specified screen and set `scr`; Invoke `editor` vocabulary\n  913  #endif\n  914  #include \"align.i65\"\n  ...\n 1705  stack=( -- )\n 1706  tags=editor\n 1707: vocab=2\n 1708  List the current screen and set `scr`\n 1709  #endif\n ....\n 1767  stack=( -- )\n 1768  tags=editor\n 1769: vocab=2\n 1770  List the specified screen and set [[SCR]]\n 1771  #endif\n ....\n 1785  stack=( -- )\n 1786  tags=editor\n 1787: vocab=2\n 1788  List the specified screen and set [[SCR]]\n 1789  #endif\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  220  tags=secondary,fig,forth-79,forth-83,interpreter,startup\n  221  * Clear data stack\n  222: * Reset `current` and `vocabs` vocabulary to `forth`\n  223  * perform `quit`\n  224  \n  ...\n  232      .word spstore               ; reset data stack\n  233  #include \"page.i65\"\n  234:     .word forth                 ; resset `vocabs` to core-only\n  235  #include \"page.i65\"\n  236      .word definitions           ; set `core` as `current`\n\n/home/chitselb/pettil/src/studio/pettil-studio.a65:\n  338                  .word user0studio\n  339  user0tdp        .word studioend\n  340: user0numvoc     .word 2         ; `editor` & `assembler`\n  341: user0vocabs     .byt 9\n  342  ustudio\n  343  \n  ...\n  345  userstudio      = uendcore+0    ;1\n  346  usertdp         = uendcore+2    ;2\n  347: usernumvoc      = uendcore+4    ;3\n  348: uservocabs      = uendcore+6    ;                                       10-byte\n  349  \n  350  ; ---- WARM will set to 0\n  ...\n  442  stack=( -- )\n  443  tags=system,startup\n  444: \\ reset vocabularies and dictionary\n  445  \n  446  #endif\n  ...\n  464      .word erase\n  465  #include \"page.i65\"\n  466:     .word cmove                 ; reset `studio` `tdp` `#voc`\n  467  #include \"parm.i65\"\n  468      .word plits\n  ...\n  496  #include \"parm.i65\"\n  497      .word dlit\n  498:     .word uservocabs+1          ; erase\n  499:     .word usersymnew-uservocabs-1\n  500  #include \"page.i65\"\n  501      .word erase                 ; reset\n\n/home/chitselb/pettil/src/studio/pettil-tdd.a65:\n  291  \n  292  mode\n  293: | label | current | vocabs |\n  294  \n  295  unsorted\n  ...\n  299             only\n  300                     +each\n  301:                     vocabid\n  302                      until 0\n  303                      (core)\n  ...\n  425      brk\n  426      .byt set | N6\n  427:     .word uservocabs+1                  ; first vocab\n  428  pseequewrap01\n  429      .byt ldd | N6\n  430:     .byt st  | N5                       ; get vocabid\n  431      .byt set | N3\n  432      .word usersymnew\n\n/home/chitselb/pettil/src/studio/pettil-user.a65:\n   55  ;--------------------------------------------------------------\n   56  #if 0\n   57: name=#VOC\n   58  stack=( -- addr )\n   59  tags=uservar,ext\n   60  !!!User variable\n   61: User variable containing the total number of vocabularies\n   62: defined on the system.  Defining a new vocabulary increases\n   63  this by 1\n   64  \n   65  #endif\n   66: numvoc\n   67      jsr uservar\n   68:     .byt usernumvoc-uarea\n   69  \n   70  ;--------------------------------------------------------------\n   ..\n   86  name=CURRENT\n   87  stack=( -- addr )\n   88: tags=vocabulary,uservar\n   89  !!!User variable\n   90: The vocabulary id of the compilation vocabulary, where new definitions\n   91: are added.  [[DEFINITIONS]] sets this to the first entry in [[VOCABS]]\n   92  \n   93  #endif\n   ..\n  173  ;--------------------------------------------------------------\n  174  #if 0\n  175: name=VOCABS\n  176  stack=( -- addr )\n  177: tags=uservar,vocabulary,interpreter\n  178: Vocabulary stack establishes search order.  [[FORTH]] (vocid = 0) is\n  179: the last vocabulary searched, and is always present.  Executing a\n  180: vocabulary pushes it to the head of this stack.\n  181  \n  182: This is a 10-byte area that determines vocabulary search order.\n  183: Vocabularies are searched from left to right, ending with CORE  ( =0 )\n  184  \n  185  |0|Forth|\n  186  |1|Assembler|\n  187  |2|Editor|\n  188: |3...|user defined vocabularies|\n  189  \n  190  ```\n  191: vocabulary editor\n  192: forth assembler editor cr vocabs 10 dump\n  193  02 01 00 00 00 00 00 00\n  194  00 00  OK\n  ...\n  197  First `editor`(2) will be searched, then `assembler`(1), lastly `core`(0)\n  198  \n  199: When `vocabs[0]` is nonzero, WORDS will only display all non-CORE\n  200  words in the search order\n  201  \n  202  #endif\n  203  #include \"align.i65\"\n  204: vocabs\n  205      jsr uservar\n  206:     .byt uservocabs-uarea\n  207  \n  208  ;--------------------------------------------------------------\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  583  ;--------------------------------------------------------------\n  584  #if 0\n  585: name=(VOC)\n  586: stack=( -- vocabid|0 )\n  587  tags=ext,nosymbol\n  588: return the `voc` of the current `nfa` in `n3`\n  589  \n  590  #endif\n  591: pvoc\n  592      jsr symlens\n  593      bcc push0y                          ; false\n  ...\n  603  #if 0\n  604  name=WORD-LIST\n  605: stack=( voc -- )\n  606  tags=interpreter,dictionary,forth-83\n  607: Displays all words in vocabulary `n`\n  608  \n  609  user symcurr  ( -- addr )\n  ...\n  614  \n  615  for each symbol\n  616:     is it in the right vocab?\n  617          dup id.\n  618  next\n  ...\n  622  \n  623  ```\n  624: : word-list   ( voc -- )\n  625      sym0\n  626      begin\n  627:         (voc) over =\n  628          if id.wl then\n  629          3 sym+\n  ...\n  639  #include \"page.i65\"\n  640  wordlist01\n  641:     .word pvoc\n  642  #include \"page.i65\"\n  643      .word over\n  ...\n  670  stack=( -- )\n  671  tags=interpreter,dictionary,forth-83\n  672: When `vocabs` is empty, display the `forth` vocabulary\n  673: otherwise, show search (context) vocabularies\n  674  \n  675  ```\n  676  : words   ( -- )\n  677:     cr vocabs 1+ dup\n  678      begin\n  679          c@+ ?dup\n  ...\n  691      .word cr\n  692  #include \"page.i65\"\n  693:     .word vocabs\n  694  #include \"page.i65\"\n  695      .word oneplus               ; skip the count\n  ...\n  774          @ .4h\n  775      loop\n  776:     cr ['] vocabs >name id. 3 spaces\n  777:     vocabs 10 0\n  778      do\n  779          c@+ space .h\n  ...\n  795          drop execute @ .4h  13 ?margin\n  796      repeat\n  797:     vocabs >name drop id.l\n  798:     vocabs count 0\n  799      do\n  800          c@+ .h space\n  ...\n  886  #include \"parm.i65\"\n  887      .word plit\n  888:     .word vocabs\n  889  #include \"pad.i65\"\n  890      .word nip\n  ...\n  896      .word _iddotl\n  897  #include \"page.i65\"\n  898:     .word vocabs\n  899  #include \"page.i65\"\n  900      .word count\n  ...\n  935      .word  limit,  editing, symtail\n  936  \n  937: ;            DRV#     #VOC    ++\n  938:     .word  drvnum,  numvoc,   studio\n  939  \n  940  ;             SA#  CURRENT      TDP\n\n/home/chitselb/pettil/src/core/core-nucleus.a65:\n  837  stack=( -- addr )\n  838  tags=nucleus,const,forth-83\n  839: The address of the screen input buffer.  This buffer is used to hold each logical line of screen codes from a packet that has been unpacked to `blkbuf` while interpreting it. As a working area, both `interpret` and `create` will replace space characters before and after a token with length bytes and vocabulary id's.  This buffer may not be pristine!\n  840  \n  841  !!!pronounced: \"screen-input-buffer\"\n  ...\n 1062  name=ACC\n 1063  stack=( -- 00|02 )\n 1064: tags=assembler,vocabulary,extension\n 1065: vocab=1\n 1066  \n 1067  !!!Assembler constant\n\n/home/chitselb/pettil/src/core/core-user.a65:\n  277  ** currently visible screen\n  278  ** associates with contents of `vidram`\n  279: ** used by `editor` vocabulary's `l` `p` and `n`\n  280  ** used by `STOP-HOME` `STOP-UP` and `STOP-DOWN` editor commands\n  281  * `prev` used by ''virtual memory''\n\n331 matches across 11 files\n\n\nSearching 39 files for \"symtab\\!\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-cold.a65:\n  182  ;------------------------------------------------------------------------------\n  183  /*\n  184: title: SYMTAB!\n  185  tags: nosymbol\n  186  \n  187: code symtab!   ( -- )\n  188  */\n  189  symtabset\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n    5  \n    6  ```\n    7: SYMTAB!     SYM0        SYM.LEN     SYM.STRANDS\n    8  SYM.COPY    (!SYMTAB)   !SYMTAB     STRAND\n    9  IMMEDORNOT  (FOUND?)    FOUND?      STRAND+\n   ..\n 1161  #include \"page.i65\"\n 1162      .word studio\n 1163: #include \"page.i65\"                     ; ~goto symtab! to end (fnord)\n 1164      .word pfnord\n 1165  #include \"page.i65\"\n\n4 matches across 2 files\n\n\nSearching 39 files for \"_lexer\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  628  #endif\n  629  #include \"align.i65\"\n  630: _lexer\n  631      jsr enter\n  632  #include \"page.i65\"\n  ...\n  671      jsr enter\n  672  #include \"page.i65\"\n  673:     .word _lexer\n  674  #include \"page.i65\"\n  675      .word _foundq\n\n2 matches in 1 file\n\n\nSearching 39 files for \"_name\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-compiler.a65:\n 1007      .asc ')'\n 1008  #include \"pad.i65\"\n 1009:     .word _name\n 1010  #include \"page.i65\"\n 1011      .word zeq\n ....\n 1056      .byt '\"'\n 1057  #include \"pad.i65\"\n 1058:     .word _name\n 1059  #include \"page.i65\"\n 1060      .word swap\n ....\n 1203      .asc ')'\n 1204  #include \"pad.i65\"\n 1205:     .word _name\n 1206  #include \"page.i65\"\n 1207      .word count\n\n/home/chitselb/pettil/src/studio/pettil-dictionary.a65:\n  633      .word bl\n  634  #include \"page.i65\"\n  635:     .word _name\n  636  #include \"page.i65\"\n  637      .word qdup\n\n/home/chitselb/pettil/src/studio/pettil-interpreter.a65:\n  122      .word bl\n  123  #include \"page.i65\"\n  124:     .word _name                 ;( nfa|0 )\n  125  #include \"page.i65\"\n  126      .word qdup\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n  553  #endif\n  554  #include \"align.i65\"\n  555: _name\n  556      jsr enter\n  557  #include \"page.i65\"\n\n/home/chitselb/pettil/src/studio/pettil-utils.a65:\n  239      .byt QUOTE\n  240  #include \"pad.i65\"\n  241:     .word _name\n  242  #include \"page.i65\"\n  243      .word oneplus\n\n7 matches across 5 files\n\n\nSearching 39 files for \"_parse\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   93  #endif\n   94  #include \"align.i65\"\n   95: _parse\n   96      jsr enter\n   97  #include \"page.i65\"\n   ..\n  583      .word pquerycolon\n  584      .word false\n  585:     .word _parse\n  586  #include \"past.i65\"\n  587      .word exit\n\n2 matches in 1 file\n\n\nSearching 39 files for \"_parse\" (regex)\n\n/home/chitselb/pettil/src/studio/pettil-name.a65:\n   93  #endif\n   94  #include \"align.i65\"\n   95: _parse\n   96      jsr enter\n   97  #include \"page.i65\"\n   ..\n  583      .word pquerycolon\n  584      .word false\n  585:     .word _parse\n  586  #include \"past.i65\"\n  587      .word exit\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 82800,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/chitselb/pettil/src/studio/pettil-cold.a65",
			"settings":
			{
				"buffer_size": 22481,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/chitselb/pettil/src/studio/pettil-studio.a65",
			"settings":
			{
				"buffer_size": 11042,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/chitselb/pettil/src/studio/pettil-utils.a65",
			"settings":
			{
				"buffer_size": 17799,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "rm -rf ./tmp/* && mkdir -p ./tmp/perturb\nc1541 -format pettil,09 d81 pettil.d64\nformatting in unit 8 ...\nfor t in 0 1 2 3 4 5 6 7;do  \\\n\techo ${t}; \\\n\tc1541 -format pettil${t},09 d64 pettil${t}.d64; \\\ndone\n0\nformatting in unit 8 ...\n1\nformatting in unit 8 ...\n2\nformatting in unit 8 ...\n3\nformatting in unit 8 ...\n4\nformatting in unit 8 ...\n5\nformatting in unit 8 ...\n6\nformatting in unit 8 ...\n7\nformatting in unit 8 ...\n./tools/mkpettil 0\n5\nSweet16 is sweeeeeeetly located @ \"$04A6\"!\n*=*=4351\npage FD\n*=*=4352\npage FF\n*=*=5887\npage FD\n*=*=5888\npage FF\n*=*=6656\npage FE\nmissing +pettil-studio.lab\n5\n*=*=6816\n*=*=6911\npage FD\n*=*=6912\npage FF\n*=*=26368\npage FE\n*=*=26879\npage FD\n*=*=26880\npage FF\n*=*=27135\npage FD\n*=*=27136\npage FF\n*=*=27647\npage FD\n*=*=27648\npage FF\n*=*=27904\npage FE\n*=*=28928\npage FE\n*=*=29183\npage FD\n*=*=29184\npage FF\n    bcc push0y                          ; false\npettil-utils.a65:line 593: 725d:Branch out of range error\npush0y\npettil-utils.a65:line 598: 7262:Label already defined error\n*=*=29439\npage FD\n*=*=29440\npage FF\n*=*=29695\npage FD\n*=*=29696\npage FF\n*=*=30720\npage FE\n*=*=31231\npage FD\n*=*=31232\npage FF\n*=*=31488\npage FE\n*=*=31743\nparm FD\n*=*=31743\nparm?\nBreak after 2 errors\n./tools/xap.rb:467:in `sort_by': comparison of Integer with nil failed (ArgumentError)\n\tfrom ./tools/xap.rb:467:in `set_sizes'\n\tfrom ./tools/xap.rb:640:in `<main>'\ncat: ./tmp/pettil-studio.obj: No such file or directory\n# first program is PETTIL.PRG for reference machine\n# and also include PETTILPACKETS\nc1541 pettil0.d64                                                    \t\t\\\n\t-write obj/pettil.prg0 pettil.prg \t\t\t\t\t\t\t\t\t\t\\\n\t-write obj/pettil.prg0 pettil.prg0\nwriting file `PETTIL.PRG0' as `PETTIL.PRG' to unit 8\nwriting file `PETTIL.PRG0' as `PETTIL.PRG0' to unit 8\n./tools/mkpet 9\nTDD\n\n[Finished in 1.3s]",
			"settings":
			{
				"buffer_size": 1820,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/chitselb/pettil/src/studio/pettil-dictionary.a65",
			"settings":
			{
				"buffer_size": 29390,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "bloom hash  \t \t\tsum of all digit(+1) characters\n\n\n\n\n\n\nN?\t\t\tsymtab @  \nN0\nN1\nN2 \t\t\tthis.og\nN3 \t\t\tthis\nN4 \nN5\nN6\nN7\nN8 \t\t\tlen\nEXT\n\n\tldy #1\n\tlda (n3),y \t\t\t; 1st char\n\n\n\nsym0\n    lda usersymtab+1\n    sta R0L+2*N3+1\n    lda #34\n    sta R0L+2*N3\n    jmp next\n    ;bne symtabset99                     ; bra next\n",
			"settings":
			{
				"buffer_size": 305,
				"line_ending": "Unix",
				"name": "bloom hash  \t \t\tsum of all digit(+1) characters"
			}
		},
		{
			"contents": "/*\ntitle: SYM.LEN\ntags: primitive nosymbol\n\nCalculate length of a name\n\n%vocab              $80\n%smudge             $40\n%immed              $20\nlength              [4..0]\n\nThis gets called often and should run fast.\n\n|register |before |after |notes |h\n|N2L |     |length |     |\n|N3  |nfa  | -     |     |\n|N8L |     |length |     |\n|Y   |     |00     |     |\n|N   |     |%vocab |also in C |\n|V   |     |%smudge|     |\n|Z   |     |%done  |(N8 & N2) |\n|C   |     |%vocab |also in N |\n\n```\ncode sym.len   ( -- len )\n  'pushya 1- csplit  \n  # lda,  pha,   # lda,  pha,\n\n&symlens\n  0 # ldy,  n3 )y lda,  n2 sta, \n\n              n2 1+ sty,\n\n   clc,\n  $80 # adc,  $1f # and,  n8 sta,\n  n2 bit,  rts,  end-code\n\n```\n*/\nsymlen\n    lda #>(pushya-1)\n    pha\n    lda #<(pushya-1)\n    pha\nsymlens\n    ldy #0                              ; %vocab %smudge %immed\n    lda (R0L+2*N3),y\n    sta R0L+2*N2\n    cmp #$80                            ; copy N flag to C flag\n    and #$1F                            ; Z %done;\n    sta R0L+2*N8\n    bit R0L+2*N2                        ; N %vocab; V %smudge;\n    rts                                 ;[26]\n;------------------------------------------------------------------------------\n/* SYM+\ntags: nosymbol subroutine\n\nThis gets called often and should run fast.\n\n|N2 |      |orig- |     |\n|N3 |nfa   |nfa+  |     |\n|N8 |      |len-  |     |\n|A  |      |nfa.l |     |\n|Y  |      |00    |     |\n|C  |      |?     |pagewrapped? might be a good cue for entertainment |\n|Z  |      |false |     |\n\n*/\nsymplus\n    jsr symlens\n    adc #3\n    adc R0L+2*N3\n    sta R0L+2*N3\n    bcc symplus01\n    inc R0L+2*N3+1\nsymplus01\n    rts                                 ; Z flag is always nonzero",
			"settings":
			{
				"buffer_size": 1702,
				"line_ending": "Unix",
				"name": "/*"
			}
		},
		{
			"file": "/home/chitselb/pettil/src/studio/pettil-name.a65",
			"settings":
			{
				"buffer_size": 12684,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa in",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"trail",
				"Whitespace: Remove Trailing Whitespace"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Install Package Control"
			],
			[
				"insert",
				"InsertDate: Show Panel"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"ui",
				"UI: Select Color Scheme"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 497.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/obj",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/obj/perturb",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/studio",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/tmp",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/tmp/perturb"
	],
	"file_history":
	[
		"/home/chitselb/pettil/src/studio/pettil-interpreter.a65",
		"/home/chitselb/pettil/src/core/core-nucleus.a65",
		"/home/chitselb/pettil/src/core/core-inner.a65",
		"/home/chitselb/dev/tmp/data/chitselb.vpl",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/core/sweet16.a65",
		"/home/chitselb/pettil/src/core/core-vm.a65",
		"/home/chitselb/pettil/src/core/core-io.a65",
		"/home/chitselb/pettil/src/studio/pettil-tdd.a65",
		"/home/chitselb/pettil/src/studio/pettil-studio.a65",
		"/home/chitselb/pettil/src/studio/pettil-name.a65",
		"/home/chitselb/pettil/src/studio/pettil-assembler.a65",
		"/home/chitselb/pettil/src/core/core-user.a65",
		"/home/chitselb/pettil/src/core/core-extra.a65",
		"/home/chitselb/pettil/src/core/pettil-core.a65",
		"/home/chitselb/dev/untrunc/README.md",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-cold.a65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/tools/mkpet",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/Makefile",
		"/home/chitselb/pettil/src/studio/pettil-dictionary.a65",
		"/home/chitselb/pettil/src/core/core-double.a65",
		"/home/chitselb/pettil/src/studio/pettil-compiler.a65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/data/dootdd.mon",
		"/home/chitselb/pettil/src/studio/pettil-editor.a65",
		"/home/chitselb/pettil/src/common/cbm_all.i65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-tdd.a65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/linapple/INSTALL.md",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/data/perturb/pettdd.mon",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/tools/vice/pettil.dbg0",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/data/sdl2_samosa.vice",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/data/sdl2_samosa.vkm",
		"/home/chitselb/pettil/src/studio/pettil-cold.a65",
		"/home/chitselb/dev/web/index.html",
		"/home/chitselb/Documents/PETTILmobile/0=.tid",
		"/home/chitselb/.npmrc",
		"/home/chitselb/pettil/src/studio/pettil-number.a65",
		"/home/chitselb/pettil/pseek.t",
		"/home/chitselb/commodore/ffmpeg4x4.sh",
		"/home/chitselb/t.t",
		"/home/chitselb/pettil/tools/xap.rb",
		"/mnt/data/home/chitselb/Documents/dev/commodore/VolksForth/README.ORG",
		"/home/chitselb/pettil/src/core/core-locals.a65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/t.2",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-dictionary.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-name.a65",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/core/core-io.a65",
		"/home/chitselb/commodore/moshpit.txt",
		"/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-dictionary.a65",
		"/home/chitselb/dev/web/foo.js",
		"/home/chitselb/Documents/dev/commodore/pettil/doc/bigdif002.txt",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/src/studio/pettil-compiler.a65",
		"/home/chitselb/inventory.txt",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/data/sdl2_chitselb.vicerc",
		"/mnt/data/home/chitselb/Documents/dev/commodore/pettil/0",
		"/home/chitselb/.ssh/config",
		"/home/chitselb/.profile",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/moshpit.txt",
		"/home/chitselb/.config/vice/vice.log",
		"/home/chitselb/.config/vice/vicerc",
		"/home/chitselb/.config/vice/sdl-vicerc",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/data/sdl2_chitselb.vkm",
		"/home/chitselb/Documents/dev/commodore/pettil/tools/mkpet",
		"/home/chitselb/pettil/Makefile",
		"/home/chitselb/pettil/interimkeymap.vkm",
		"/home/chitselb/pettil/data/sdl2_samosa.vice",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/data/sdl2_chitselb_vice34_userpos.vkm",
		"/home/chitselb/pettil/tools/mkpet",
		"/home/chitselb/bin/mkpet",
		"/home/chitselb/Desktop/chrome-lbhboogefenjpeimcfcgkeijmkfboojo-Default.desktop",
		"/home/chitselb/.bashrc",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/tools/mkpettil",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/bashrc",
		"/home/chitselb/pettil/data/x11_chitselb.vicerc",
		"/home/chitselb/.config/xfce4/terminal/terminalrc",
		"/home/chitselb/pettil/.gitignore",
		"/home/chitselb/.config/xfce4/terminal/.gitignore",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/.gitignore",
		"/home/chitselb/.screenrc",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/tools/mkpet",
		"/mnt/sdb1/chitselb/Documents/dev/commodore/pettil/34keys.vkm",
		"/home/chitselb/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/pettil/core/src/core-io.a65",
		"/home/chitselb/pettil/studio/src/pettil-name.a65",
		"/home/chitselb/pettil/docs/figforth/forth32k.4.a65",
		"/home/chitselb/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/pettil.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-utils.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-editor.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-io.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-name.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-interpreter.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/data/sdl2_vic20.vicerc",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-vm.a65",
		"/home/chitselb/Documents/dev/commodore/moshpit.txt",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-extra.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/pettil-core.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-user.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/data/x11_4032.vicerc",
		"/home/chitselb/Documents/dev/commodore/pettil/Makefile",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-studio.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/inc/cbm.def",
		"/home/chitselb/Documents/dev/commodore/pettil/moshpit.txt",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-compiler.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-inner.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/pettil.dbg",
		"/home/chitselb/Documents/dev/commodore/pettil/data/chitselb.vpl",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-nucleus.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-double.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-number.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/FFCFCHRIN.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-assembler.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/data/VIC20/real-vic-ntsc.vpl",
		"/home/chitselb/Downloads/$__palettes_Vorth.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/$palettesVorth.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/studio/src/pettil-dictionary.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/$palettesMMM.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/$palettesQueenBee.tid",
		"/mnt/data/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/$palettesVorth.tid",
		"/home/chitselb/Documents/dev/commodore/pettil/t.t",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/core-locals.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/foo.bar",
		"/home/chitselb/Documents/dev/commodore/pettil/pettil.mon",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/test-general.a65",
		"/home/chitselb/pettil/data/sdl2_chitselb.vicerc",
		"/home/chitselb/Documents/dev/commodore/pettil/tools/xap.rb",
		"/home/chitselb/Documents/dev/commodore/pettil/core/src/sweet16.a65",
		"/home/chitselb/Documents/dev/commodore/pettil/tmp/pettil.csv",
		"/home/chitselb/Documents/dev/commodore/pettil/docs/statictiddlers/Register diagrams.tid"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 241.0,
		"where_history":
		[
			"/home/chitselb/pettil/src/studio,/home/chitselb/pettil/src/core,/home/chitselb/pettil/src/common",
			"/home/chitselb/pettil/src/studio,/home/chitselb/pettil/src/core",
			"/home/chitselb/pettil/src/studio,/home/chitselb/pettil/src/core,/home/chitselb/pettil/",
			"/home/chitselb/pettil/src/studio,/home/chitselb/pettil/src/core",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/vice-3.2/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/.config/sublime-text-3/Packages/DA UI",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src,/home/chitselb/Documents/dev/commodore/pettil/src",
			"/home/chitselb/Documents/dev/commodore/pettil/core/src,/home/chitselb/Documents/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src,/home/chitselb/dev/commodore/pettil/docs/statictiddlers",
			"/home/chitselb/dev/commodore/pettil/core/src,/home/chitselb/dev/commodore/pettil/studio/src",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_parse",
			"_name",
			"_lexer",
			"symtab\\!",
			"voc",
			"vocab",
			"bloom",
			"sym0",
			"01-17",
			"push0y",
			"pvoc",
			"push0y",
			"parser$",
			"_parser$",
			"symlen",
			"_parse$",
			"userspan",
			"blkfetch",
			"^enter$",
			"^_name$",
			"_foundq",
			"bl name",
			"gif",
			"pseeque",
			"^:",
			"^sib$",
			"^_parse$",
			"R14H",
			"r14h",
			"R14",
			"n\\+",
			"\\(n\\)",
			"(n)",
			"mailbox",
			"ROL",
			"mailbox",
			"^expect",
			"R0L+",
			"2\\*r3",
			"2\\*n3",
			"n3\\*2",
			"n3*2",
			"n3+1",
			"N7+1",
			"mailbox",
			"N7",
			"^_name$",
			"^skip",
			"^_parse$",
			"eoiq",
			"^enter$",
			"^exit$",
			"^enter$",
			"2021-01",
			"2020-12",
			"2020-01",
			"n5",
			"_name$",
			"mtor",
			"_lexer",
			"symtabset",
			"_existsq",
			"2020-12",
			"_quit",
			"_lexer",
			"_pcreate",
			"_qnomnom",
			"_name",
			"_lexer",
			"_name",
			"mailbox",
			"^_name$",
			"_lexer$",
			"_name",
			"qexit",
			"eolqy",
			"_foundq",
			"^_existsq$",
			"^_exists$",
			"^error$",
			"qerror",
			"_existsq",
			"existsq",
			"^_name$",
			"_existsq",
			"_pcreate",
			"_parse",
			"_name",
			"redefined",
			"^_pcreate$",
			"_pcreate",
			"pcreate",
			"pseeque",
			"n7",
			"_foundq",
			"^enter$",
			"b00b",
			"foundq",
			"pseeq",
			"pseek",
			"SAFER",
			"^enter$",
			"^enter",
			"enter",
			"^enter$",
			"tdd07",
			"simple addition",
			"benjamin",
			"sty tos+1",
			"sta tos+1",
			"sty tos+1",
			"benjamin",
			"^tuck$",
			"d2/",
			"_name",
			"_existsq",
			"create00",
			"usersymtail",
			"_pcreate",
			"docreate",
			"existsq",
			"_pcreate",
			"2020-12-",
			"2020-12",
			"emptyq",
			"mailbox",
			"n0",
			"^_name$"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			" ",
			"",
			"$1",
			"\\n\\n\\n\\n$1",
			"entre $1 .",
			"enter ",
			"enter $1 .",
			"$1",
			",$",
			" ,$",
			" ",
			"\\1",
			",locals,nosymbol",
			"",
			" ",
			"",
			"^$",
			"$",
			"",
			";",
			"bk .",
			"^bk .",
			"crap",
			"wget https://web.archive.org/web/20051201020459/http://freespace.virgin.net:80/ken.ross1/\\1",
			"\\2",
			" ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 14,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/chitselb/commodore/moshpit.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 572003,
						"regions":
						{
						},
						"selection":
						[
							[
								211,
								211
							]
						],
						"settings":
						{
							"remove_trailing_whitespace_on_save": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1406.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 495,
						"regions":
						{
						},
						"selection":
						[
							[
								334,
								334
							]
						],
						"settings":
						{
							"auto_name": "Program a PET like a boss!",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/chitselb/Documents/PETTILmobile/toosalty.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1909,
						"regions":
						{
						},
						"selection":
						[
							[
								500,
								500
							]
						],
						"settings":
						{
							"auto_name": "here is what I envision -- I type a room descripti",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/mnt/data/home/chitselb/Documents/dev/tmp/tools/kosmon/kosmon.doc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5926,
						"regions":
						{
						},
						"selection":
						[
							[
								4390,
								4390
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 575.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "t.1",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15803,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "t.2",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5372,
						"regions":
						{
						},
						"selection":
						[
							[
								168,
								168
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 82800,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										158,
										165
									],
									[
										334,
										341
									],
									[
										461,
										468
									],
									[
										642,
										649
									],
									[
										891,
										898
									],
									[
										1021,
										1028
									],
									[
										1214,
										1221
									],
									[
										1478,
										1485
									],
									[
										1608,
										1615
									],
									[
										1801,
										1808
									],
									[
										2063,
										2068
									],
									[
										2352,
										2357
									],
									[
										2451,
										2456
									],
									[
										2531,
										2536
									],
									[
										2813,
										2821
									],
									[
										2986,
										2994
									],
									[
										3117,
										3125
									],
									[
										3256,
										3264
									],
									[
										3392,
										3400
									],
									[
										3597,
										3605
									],
									[
										3863,
										3871
									],
									[
										4074,
										4082
									],
									[
										4226,
										4234
									],
									[
										4394,
										4402
									],
									[
										4557,
										4565
									],
									[
										4871,
										4879
									],
									[
										5204,
										5210
									],
									[
										5334,
										5340
									],
									[
										5637,
										5643
									],
									[
										5849,
										5855
									],
									[
										6027,
										6033
									],
									[
										6270,
										6276
									],
									[
										6449,
										6455
									],
									[
										6637,
										6643
									],
									[
										6762,
										6768
									],
									[
										7021,
										7025
									],
									[
										7144,
										7148
									],
									[
										7295,
										7299
									],
									[
										7558,
										7564
									],
									[
										7737,
										7743
									],
									[
										7925,
										7931
									],
									[
										8050,
										8056
									],
									[
										8285,
										8290
									],
									[
										8498,
										8502
									],
									[
										8752,
										8756
									],
									[
										8810,
										8814
									],
									[
										8924,
										8928
									],
									[
										9071,
										9075
									],
									[
										9261,
										9265
									],
									[
										9379,
										9383
									],
									[
										9501,
										9505
									],
									[
										9730,
										9734
									],
									[
										9969,
										9973
									],
									[
										10126,
										10130
									],
									[
										10296,
										10300
									],
									[
										10456,
										10460
									],
									[
										10577,
										10581
									],
									[
										10820,
										10825
									],
									[
										10925,
										10930
									],
									[
										11095,
										11100
									],
									[
										11229,
										11234
									],
									[
										11358,
										11363
									],
									[
										11549,
										11554
									],
									[
										11627,
										11632
									],
									[
										11901,
										11906
									],
									[
										11949,
										11954
									],
									[
										12101,
										12106
									],
									[
										12171,
										12176
									],
									[
										12247,
										12252
									],
									[
										12351,
										12356
									],
									[
										12369,
										12374
									],
									[
										12403,
										12408
									],
									[
										12511,
										12516
									],
									[
										12604,
										12609
									],
									[
										12657,
										12662
									],
									[
										12699,
										12704
									],
									[
										12927,
										12932
									],
									[
										13021,
										13026
									],
									[
										13098,
										13103
									],
									[
										13152,
										13157
									],
									[
										13343,
										13348
									],
									[
										13510,
										13515
									],
									[
										13795,
										13800
									],
									[
										13844,
										13849
									],
									[
										13883,
										13888
									],
									[
										13925,
										13930
									],
									[
										13965,
										13970
									],
									[
										14115,
										14120
									],
									[
										14323,
										14328
									],
									[
										14538,
										14543
									],
									[
										14722,
										14727
									],
									[
										14818,
										14823
									],
									[
										14847,
										14852
									],
									[
										14983,
										14988
									],
									[
										15093,
										15098
									],
									[
										15329,
										15334
									],
									[
										15581,
										15586
									],
									[
										15610,
										15615
									],
									[
										15787,
										15792
									],
									[
										15848,
										15853
									],
									[
										16003,
										16008
									],
									[
										16031,
										16036
									],
									[
										16074,
										16079
									],
									[
										16123,
										16128
									],
									[
										16331,
										16336
									],
									[
										16395,
										16400
									],
									[
										16439,
										16444
									],
									[
										16523,
										16528
									],
									[
										16558,
										16563
									],
									[
										16648,
										16653
									],
									[
										16695,
										16700
									],
									[
										16860,
										16865
									],
									[
										16888,
										16893
									],
									[
										17024,
										17029
									],
									[
										17052,
										17057
									],
									[
										17208,
										17213
									],
									[
										17236,
										17241
									],
									[
										17370,
										17375
									],
									[
										17398,
										17403
									],
									[
										17547,
										17552
									],
									[
										17575,
										17580
									],
									[
										17701,
										17706
									],
									[
										17729,
										17734
									],
									[
										17863,
										17868
									],
									[
										17891,
										17896
									],
									[
										18024,
										18029
									],
									[
										18052,
										18057
									],
									[
										18186,
										18191
									],
									[
										18214,
										18219
									],
									[
										18350,
										18355
									],
									[
										18378,
										18383
									],
									[
										18514,
										18519
									],
									[
										18542,
										18547
									],
									[
										18679,
										18684
									],
									[
										18707,
										18712
									],
									[
										18848,
										18853
									],
									[
										18876,
										18881
									],
									[
										19021,
										19026
									],
									[
										19158,
										19163
									],
									[
										19189,
										19194
									],
									[
										19330,
										19335
									],
									[
										19361,
										19366
									],
									[
										19503,
										19508
									],
									[
										19648,
										19653
									],
									[
										19679,
										19684
									],
									[
										19852,
										19857
									],
									[
										19993,
										19998
									],
									[
										20134,
										20139
									],
									[
										20162,
										20167
									],
									[
										20255,
										20260
									],
									[
										20283,
										20288
									],
									[
										20408,
										20413
									],
									[
										20436,
										20441
									],
									[
										20546,
										20551
									],
									[
										20574,
										20579
									],
									[
										20668,
										20673
									],
									[
										20696,
										20701
									],
									[
										20787,
										20792
									],
									[
										20815,
										20820
									],
									[
										20941,
										20946
									],
									[
										20992,
										20997
									],
									[
										21119,
										21124
									],
									[
										21170,
										21175
									],
									[
										21308,
										21313
									],
									[
										21336,
										21341
									],
									[
										21433,
										21438
									],
									[
										21461,
										21466
									],
									[
										21577,
										21582
									],
									[
										21605,
										21610
									],
									[
										21695,
										21700
									],
									[
										21723,
										21728
									],
									[
										21875,
										21880
									],
									[
										21903,
										21908
									],
									[
										22053,
										22058
									],
									[
										22081,
										22086
									],
									[
										22237,
										22242
									],
									[
										22268,
										22273
									],
									[
										22423,
										22428
									],
									[
										22454,
										22459
									],
									[
										22619,
										22624
									],
									[
										22700,
										22705
									],
									[
										22826,
										22831
									],
									[
										22957,
										22962
									],
									[
										23097,
										23102
									],
									[
										23127,
										23132
									],
									[
										23176,
										23181
									],
									[
										23192,
										23197
									],
									[
										23252,
										23257
									],
									[
										23300,
										23305
									],
									[
										23337,
										23342
									],
									[
										23450,
										23455
									],
									[
										23478,
										23483
									],
									[
										23608,
										23613
									],
									[
										23636,
										23641
									],
									[
										23766,
										23771
									],
									[
										23794,
										23799
									],
									[
										23932,
										23937
									],
									[
										23960,
										23965
									],
									[
										24089,
										24094
									],
									[
										24117,
										24122
									],
									[
										24246,
										24251
									],
									[
										24274,
										24279
									],
									[
										24404,
										24409
									],
									[
										24432,
										24437
									],
									[
										24561,
										24566
									],
									[
										24589,
										24594
									],
									[
										24709,
										24714
									],
									[
										24833,
										24838
									],
									[
										24957,
										24962
									],
									[
										25081,
										25086
									],
									[
										25205,
										25210
									],
									[
										25329,
										25334
									],
									[
										25453,
										25458
									],
									[
										25577,
										25582
									],
									[
										25701,
										25706
									],
									[
										25825,
										25830
									],
									[
										25949,
										25954
									],
									[
										26073,
										26078
									],
									[
										26197,
										26202
									],
									[
										26321,
										26326
									],
									[
										26445,
										26450
									],
									[
										26569,
										26574
									],
									[
										26693,
										26698
									],
									[
										26817,
										26822
									],
									[
										26941,
										26946
									],
									[
										27065,
										27070
									],
									[
										27189,
										27194
									],
									[
										27313,
										27318
									],
									[
										27437,
										27442
									],
									[
										27561,
										27566
									],
									[
										27685,
										27690
									],
									[
										27809,
										27814
									],
									[
										27933,
										27938
									],
									[
										28057,
										28062
									],
									[
										28181,
										28186
									],
									[
										28305,
										28310
									],
									[
										28429,
										28434
									],
									[
										28553,
										28558
									],
									[
										28677,
										28682
									],
									[
										28801,
										28806
									],
									[
										28925,
										28930
									],
									[
										29049,
										29054
									],
									[
										29173,
										29178
									],
									[
										29297,
										29302
									],
									[
										29421,
										29426
									],
									[
										29545,
										29550
									],
									[
										29669,
										29674
									],
									[
										29793,
										29798
									],
									[
										29917,
										29922
									],
									[
										30041,
										30046
									],
									[
										30165,
										30170
									],
									[
										30289,
										30294
									],
									[
										30413,
										30418
									],
									[
										30537,
										30542
									],
									[
										30743,
										30748
									],
									[
										31036,
										31041
									],
									[
										31138,
										31143
									],
									[
										31183,
										31188
									],
									[
										31214,
										31219
									],
									[
										31241,
										31246
									],
									[
										31274,
										31279
									],
									[
										31330,
										31335
									],
									[
										31369,
										31374
									],
									[
										31406,
										31411
									],
									[
										31483,
										31488
									],
									[
										31516,
										31521
									],
									[
										31542,
										31547
									],
									[
										31557,
										31562
									],
									[
										31583,
										31588
									],
									[
										31609,
										31614
									],
									[
										31742,
										31747
									],
									[
										31774,
										31779
									],
									[
										31860,
										31865
									],
									[
										31912,
										31917
									],
									[
										32012,
										32017
									],
									[
										32064,
										32069
									],
									[
										32107,
										32112
									],
									[
										32162,
										32167
									],
									[
										32277,
										32282
									],
									[
										32406,
										32411
									],
									[
										32543,
										32548
									],
									[
										32678,
										32683
									],
									[
										32806,
										32811
									],
									[
										32922,
										32927
									],
									[
										32961,
										32966
									],
									[
										32978,
										32983
									],
									[
										32999,
										33004
									],
									[
										33095,
										33100
									],
									[
										33190,
										33195
									],
									[
										33200,
										33205
									],
									[
										33317,
										33322
									],
									[
										33420,
										33425
									],
									[
										33579,
										33584
									],
									[
										33661,
										33666
									],
									[
										33785,
										33790
									],
									[
										33867,
										33872
									],
									[
										34014,
										34019
									],
									[
										34147,
										34152
									],
									[
										34398,
										34403
									],
									[
										34569,
										34574
									],
									[
										34747,
										34752
									],
									[
										34858,
										34863
									],
									[
										34924,
										34929
									],
									[
										35198,
										35203
									],
									[
										35212,
										35217
									],
									[
										35301,
										35306
									],
									[
										35325,
										35330
									],
									[
										35430,
										35435
									],
									[
										35609,
										35614
									],
									[
										35721,
										35726
									],
									[
										35836,
										35841
									],
									[
										36019,
										36024
									],
									[
										36232,
										36237
									],
									[
										36500,
										36505
									],
									[
										36550,
										36555
									],
									[
										36661,
										36666
									],
									[
										36777,
										36782
									],
									[
										36926,
										36931
									],
									[
										36964,
										36969
									],
									[
										37038,
										37043
									],
									[
										37171,
										37176
									],
									[
										37209,
										37214
									],
									[
										37286,
										37291
									],
									[
										37452,
										37457
									],
									[
										37486,
										37491
									],
									[
										37587,
										37592
									],
									[
										37836,
										37841
									],
									[
										37904,
										37909
									],
									[
										38000,
										38005
									],
									[
										38094,
										38099
									],
									[
										38205,
										38210
									],
									[
										38349,
										38354
									],
									[
										38718,
										38723
									],
									[
										38869,
										38874
									],
									[
										39014,
										39019
									],
									[
										39269,
										39274
									],
									[
										39478,
										39483
									],
									[
										39527,
										39532
									],
									[
										39698,
										39703
									],
									[
										39783,
										39788
									],
									[
										39900,
										39905
									],
									[
										40005,
										40010
									],
									[
										40067,
										40072
									],
									[
										40120,
										40125
									],
									[
										40155,
										40160
									],
									[
										40270,
										40275
									],
									[
										40325,
										40330
									],
									[
										40469,
										40474
									],
									[
										40514,
										40519
									],
									[
										40536,
										40541
									],
									[
										40607,
										40612
									],
									[
										40654,
										40659
									],
									[
										40868,
										40873
									],
									[
										40973,
										40978
									],
									[
										41092,
										41097
									],
									[
										41215,
										41220
									],
									[
										41464,
										41469
									],
									[
										41472,
										41477
									],
									[
										41666,
										41671
									],
									[
										41947,
										41952
									],
									[
										42089,
										42094
									],
									[
										42274,
										42279
									],
									[
										42400,
										42405
									],
									[
										42458,
										42463
									],
									[
										42638,
										42643
									],
									[
										42759,
										42764
									],
									[
										42903,
										42908
									],
									[
										42937,
										42942
									],
									[
										43042,
										43047
									],
									[
										43254,
										43259
									],
									[
										43313,
										43318
									],
									[
										43422,
										43427
									],
									[
										43476,
										43481
									],
									[
										43509,
										43514
									],
									[
										43612,
										43617
									],
									[
										43745,
										43750
									],
									[
										43797,
										43802
									],
									[
										43827,
										43832
									],
									[
										43912,
										43917
									],
									[
										43976,
										43981
									],
									[
										44078,
										44083
									],
									[
										44110,
										44115
									],
									[
										44271,
										44276
									],
									[
										44311,
										44316
									],
									[
										44362,
										44367
									],
									[
										44533,
										44538
									],
									[
										44683,
										44688
									],
									[
										44733,
										44738
									],
									[
										44926,
										44931
									],
									[
										45119,
										45124
									],
									[
										45242,
										45247
									],
									[
										45367,
										45372
									],
									[
										45405,
										45410
									],
									[
										45456,
										45461
									],
									[
										45526,
										45531
									],
									[
										45651,
										45656
									],
									[
										45802,
										45807
									],
									[
										45839,
										45844
									],
									[
										45974,
										45979
									],
									[
										46008,
										46013
									],
									[
										46137,
										46142
									],
									[
										46266,
										46271
									],
									[
										46741,
										46746
									],
									[
										46914,
										46919
									],
									[
										46942,
										46947
									],
									[
										47143,
										47148
									],
									[
										47475,
										47478
									],
									[
										47539,
										47542
									],
									[
										47583,
										47586
									],
									[
										47621,
										47624
									],
									[
										47667,
										47670
									],
									[
										47702,
										47705
									],
									[
										47792,
										47795
									],
									[
										47839,
										47842
									],
									[
										48004,
										48007
									],
									[
										48032,
										48035
									],
									[
										48168,
										48171
									],
									[
										48196,
										48199
									],
									[
										48352,
										48355
									],
									[
										48380,
										48383
									],
									[
										48514,
										48517
									],
									[
										48542,
										48545
									],
									[
										48691,
										48694
									],
									[
										48719,
										48722
									],
									[
										48845,
										48848
									],
									[
										48873,
										48876
									],
									[
										49007,
										49010
									],
									[
										49035,
										49038
									],
									[
										49168,
										49171
									],
									[
										49196,
										49199
									],
									[
										49330,
										49333
									],
									[
										49358,
										49361
									],
									[
										49494,
										49497
									],
									[
										49522,
										49525
									],
									[
										49658,
										49661
									],
									[
										49686,
										49689
									],
									[
										49823,
										49826
									],
									[
										49851,
										49854
									],
									[
										49992,
										49995
									],
									[
										50020,
										50023
									],
									[
										50165,
										50168
									],
									[
										50302,
										50305
									],
									[
										50333,
										50336
									],
									[
										50474,
										50477
									],
									[
										50505,
										50508
									],
									[
										50647,
										50650
									],
									[
										50792,
										50795
									],
									[
										50823,
										50826
									],
									[
										50996,
										50999
									],
									[
										51137,
										51140
									],
									[
										51278,
										51281
									],
									[
										51306,
										51309
									],
									[
										51399,
										51402
									],
									[
										51427,
										51430
									],
									[
										51552,
										51555
									],
									[
										51580,
										51583
									],
									[
										51690,
										51693
									],
									[
										51718,
										51721
									],
									[
										51812,
										51815
									],
									[
										51840,
										51843
									],
									[
										51931,
										51934
									],
									[
										51959,
										51962
									],
									[
										52085,
										52088
									],
									[
										52136,
										52139
									],
									[
										52263,
										52266
									],
									[
										52314,
										52317
									],
									[
										52452,
										52455
									],
									[
										52480,
										52483
									],
									[
										52577,
										52580
									],
									[
										52605,
										52608
									],
									[
										52721,
										52724
									],
									[
										52749,
										52752
									],
									[
										52839,
										52842
									],
									[
										52867,
										52870
									],
									[
										53019,
										53022
									],
									[
										53047,
										53050
									],
									[
										53197,
										53200
									],
									[
										53225,
										53228
									],
									[
										53381,
										53384
									],
									[
										53412,
										53415
									],
									[
										53567,
										53570
									],
									[
										53598,
										53601
									],
									[
										53763,
										53766
									],
									[
										53844,
										53847
									],
									[
										53970,
										53973
									],
									[
										54101,
										54104
									],
									[
										54241,
										54244
									],
									[
										54271,
										54274
									],
									[
										54320,
										54323
									],
									[
										54336,
										54339
									],
									[
										54396,
										54399
									],
									[
										54444,
										54447
									],
									[
										54481,
										54484
									],
									[
										54594,
										54597
									],
									[
										54622,
										54625
									],
									[
										54752,
										54755
									],
									[
										54780,
										54783
									],
									[
										54910,
										54913
									],
									[
										54938,
										54941
									],
									[
										55076,
										55079
									],
									[
										55104,
										55107
									],
									[
										55233,
										55236
									],
									[
										55261,
										55264
									],
									[
										55390,
										55393
									],
									[
										55418,
										55421
									],
									[
										55548,
										55551
									],
									[
										55576,
										55579
									],
									[
										55705,
										55708
									],
									[
										55733,
										55736
									],
									[
										55853,
										55856
									],
									[
										55977,
										55980
									],
									[
										56101,
										56104
									],
									[
										56225,
										56228
									],
									[
										56349,
										56352
									],
									[
										56473,
										56476
									],
									[
										56597,
										56600
									],
									[
										56721,
										56724
									],
									[
										56845,
										56848
									],
									[
										56969,
										56972
									],
									[
										57093,
										57096
									],
									[
										57217,
										57220
									],
									[
										57341,
										57344
									],
									[
										57465,
										57468
									],
									[
										57589,
										57592
									],
									[
										57713,
										57716
									],
									[
										57837,
										57840
									],
									[
										57961,
										57964
									],
									[
										58085,
										58088
									],
									[
										58209,
										58212
									],
									[
										58333,
										58336
									],
									[
										58457,
										58460
									],
									[
										58581,
										58584
									],
									[
										58705,
										58708
									],
									[
										58829,
										58832
									],
									[
										58953,
										58956
									],
									[
										59077,
										59080
									],
									[
										59201,
										59204
									],
									[
										59325,
										59328
									],
									[
										59449,
										59452
									],
									[
										59573,
										59576
									],
									[
										59697,
										59700
									],
									[
										59821,
										59824
									],
									[
										59945,
										59948
									],
									[
										60069,
										60072
									],
									[
										60193,
										60196
									],
									[
										60317,
										60320
									],
									[
										60441,
										60444
									],
									[
										60565,
										60568
									],
									[
										60689,
										60692
									],
									[
										60813,
										60816
									],
									[
										60937,
										60940
									],
									[
										61061,
										61064
									],
									[
										61185,
										61188
									],
									[
										61309,
										61312
									],
									[
										61433,
										61436
									],
									[
										61557,
										61560
									],
									[
										61681,
										61684
									],
									[
										61887,
										61890
									],
									[
										62180,
										62183
									],
									[
										62282,
										62285
									],
									[
										62312,
										62315
									],
									[
										62327,
										62330
									],
									[
										62358,
										62361
									],
									[
										62385,
										62388
									],
									[
										62418,
										62421
									],
									[
										62474,
										62477
									],
									[
										62513,
										62516
									],
									[
										62550,
										62553
									],
									[
										62627,
										62630
									],
									[
										62660,
										62663
									],
									[
										62686,
										62689
									],
									[
										62701,
										62704
									],
									[
										62727,
										62730
									],
									[
										62753,
										62756
									],
									[
										62774,
										62777
									],
									[
										62858,
										62861
									],
									[
										62869,
										62872
									],
									[
										62886,
										62889
									],
									[
										62918,
										62921
									],
									[
										63000,
										63003
									],
									[
										63004,
										63007
									],
									[
										63052,
										63055
									],
									[
										63056,
										63059
									],
									[
										63076,
										63079
									],
									[
										63152,
										63155
									],
									[
										63156,
										63159
									],
									[
										63176,
										63179
									],
									[
										63208,
										63211
									],
									[
										63251,
										63254
									],
									[
										63306,
										63309
									],
									[
										63421,
										63424
									],
									[
										63550,
										63553
									],
									[
										63687,
										63690
									],
									[
										63822,
										63825
									],
									[
										63950,
										63953
									],
									[
										64066,
										64069
									],
									[
										64105,
										64108
									],
									[
										64122,
										64125
									],
									[
										64143,
										64146
									],
									[
										64239,
										64242
									],
									[
										64334,
										64337
									],
									[
										64344,
										64347
									],
									[
										64461,
										64464
									],
									[
										64564,
										64567
									],
									[
										64723,
										64726
									],
									[
										64805,
										64808
									],
									[
										64929,
										64932
									],
									[
										65011,
										65014
									],
									[
										65029,
										65032
									],
									[
										65158,
										65161
									],
									[
										65291,
										65294
									],
									[
										65396,
										65399
									],
									[
										65641,
										65644
									],
									[
										65812,
										65815
									],
									[
										65990,
										65993
									],
									[
										66101,
										66104
									],
									[
										66167,
										66170
									],
									[
										66441,
										66444
									],
									[
										66455,
										66458
									],
									[
										66544,
										66547
									],
									[
										66568,
										66571
									],
									[
										66673,
										66676
									],
									[
										66852,
										66855
									],
									[
										66964,
										66967
									],
									[
										67079,
										67082
									],
									[
										67262,
										67265
									],
									[
										67475,
										67478
									],
									[
										67743,
										67746
									],
									[
										67793,
										67796
									],
									[
										67904,
										67907
									],
									[
										68020,
										68023
									],
									[
										68169,
										68172
									],
									[
										68207,
										68210
									],
									[
										68281,
										68284
									],
									[
										68414,
										68417
									],
									[
										68452,
										68455
									],
									[
										68529,
										68532
									],
									[
										68695,
										68698
									],
									[
										68729,
										68732
									],
									[
										68830,
										68833
									],
									[
										69079,
										69082
									],
									[
										69147,
										69150
									],
									[
										69243,
										69246
									],
									[
										69337,
										69340
									],
									[
										69448,
										69451
									],
									[
										69592,
										69595
									],
									[
										69961,
										69964
									],
									[
										70112,
										70115
									],
									[
										70257,
										70260
									],
									[
										70512,
										70515
									],
									[
										70721,
										70724
									],
									[
										70770,
										70773
									],
									[
										70941,
										70944
									],
									[
										71026,
										71029
									],
									[
										71143,
										71146
									],
									[
										71248,
										71251
									],
									[
										71310,
										71313
									],
									[
										71363,
										71366
									],
									[
										71390,
										71393
									],
									[
										71398,
										71401
									],
									[
										71513,
										71516
									],
									[
										71568,
										71571
									],
									[
										71712,
										71715
									],
									[
										71757,
										71760
									],
									[
										71779,
										71782
									],
									[
										71850,
										71853
									],
									[
										71897,
										71900
									],
									[
										72111,
										72114
									],
									[
										72216,
										72219
									],
									[
										72335,
										72338
									],
									[
										72458,
										72461
									],
									[
										72707,
										72710
									],
									[
										72715,
										72718
									],
									[
										72909,
										72912
									],
									[
										73170,
										73173
									],
									[
										73231,
										73234
									],
									[
										73376,
										73379
									],
									[
										73415,
										73418
									],
									[
										73600,
										73603
									],
									[
										73770,
										73773
									],
									[
										73901,
										73904
									],
									[
										73959,
										73962
									],
									[
										74139,
										74142
									],
									[
										74260,
										74263
									],
									[
										74404,
										74407
									],
									[
										74438,
										74441
									],
									[
										74543,
										74546
									],
									[
										74752,
										74755
									],
									[
										74881,
										74884
									],
									[
										74940,
										74943
									],
									[
										75010,
										75013
									],
									[
										75060,
										75063
									],
									[
										75212,
										75215
									],
									[
										75266,
										75269
									],
									[
										75299,
										75302
									],
									[
										75402,
										75405
									],
									[
										75535,
										75538
									],
									[
										75587,
										75590
									],
									[
										75617,
										75620
									],
									[
										75672,
										75675
									],
									[
										75702,
										75705
									],
									[
										75766,
										75769
									],
									[
										75868,
										75871
									],
									[
										75900,
										75903
									],
									[
										76061,
										76064
									],
									[
										76101,
										76104
									],
									[
										76152,
										76155
									],
									[
										76323,
										76326
									],
									[
										76473,
										76476
									],
									[
										76523,
										76526
									],
									[
										76764,
										76767
									],
									[
										76787,
										76790
									],
									[
										76843,
										76846
									],
									[
										76907,
										76910
									],
									[
										77045,
										77048
									],
									[
										77127,
										77130
									],
									[
										77250,
										77253
									],
									[
										77340,
										77343
									],
									[
										77398,
										77401
									],
									[
										77530,
										77533
									],
									[
										77666,
										77669
									],
									[
										77704,
										77707
									],
									[
										77755,
										77758
									],
									[
										77825,
										77828
									],
									[
										77950,
										77953
									],
									[
										78101,
										78104
									],
									[
										78138,
										78141
									],
									[
										78273,
										78276
									],
									[
										78307,
										78310
									],
									[
										78436,
										78439
									],
									[
										78565,
										78568
									],
									[
										78709,
										78712
									],
									[
										78749,
										78752
									],
									[
										79232,
										79235
									],
									[
										79405,
										79408
									],
									[
										79433,
										79436
									],
									[
										79634,
										79637
									],
									[
										80013,
										80020
									],
									[
										80063,
										80070
									],
									[
										80190,
										80197
									],
									[
										80451,
										80458
									],
									[
										80699,
										80705
									],
									[
										80825,
										80831
									],
									[
										81064,
										81069
									],
									[
										81187,
										81192
									],
									[
										81311,
										81316
									],
									[
										81488,
										81493
									],
									[
										81665,
										81670
									],
									[
										81847,
										81852
									],
									[
										82018,
										82023
									],
									[
										82244,
										82250
									],
									[
										82374,
										82380
									],
									[
										82593,
										82599
									],
									[
										82723,
										82729
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								82729,
								82729
							]
						],
						"settings":
						{
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 23,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 80500.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/chitselb/pettil/src/studio/pettil-cold.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22481,
						"regions":
						{
						},
						"selection":
						[
							[
								5509,
								5509
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4356.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/chitselb/pettil/src/studio/pettil-studio.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11042,
						"regions":
						{
						},
						"selection":
						[
							[
								7955,
								7955
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8856.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/chitselb/pettil/src/studio/pettil-utils.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17799,
						"regions":
						{
						},
						"selection":
						[
							[
								10065,
								10065
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14285.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1820,
						"regions":
						{
						},
						"selection":
						[
							[
								1031,
								1031
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Make Output.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 923.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/chitselb/pettil/src/studio/pettil-dictionary.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29390,
						"regions":
						{
						},
						"selection":
						[
							[
								15012,
								15012
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15240.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 305,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								48
							]
						],
						"settings":
						{
							"auto_name": "bloom hash  \t \t\tsum of all digit(+1) characters",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1702,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"auto_name": "/*",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 123.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/home/chitselb/pettil/src/studio/pettil-name.a65",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12684,
						"regions":
						{
						},
						"selection":
						[
							[
								12035,
								12035
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13036.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 83.0
	},
	"input":
	{
		"height": 83.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 110.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "pettil.sublime-project",
	"replace":
	{
		"height": 80.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sweet16",
				"src/core/sweet16.a65"
			],
			[
				"pettil-cold",
				"src/studio/pettil-cold.a65"
			],
			[
				"Make",
				"Makefile"
			],
			[
				"dootdd",
				"data/dootdd.mon"
			],
			[
				"tdd",
				"data/perturb/pettdd.mon"
			],
			[
				"sdl2_sa",
				"data/sdl2_samosa.vice"
			],
			[
				"sdl2_sma",
				"data/sdl2_samosa.vkm"
			],
			[
				"mkpet",
				"tools/mkpet"
			],
			[
				"pettdd.mon",
				"data/perturb/pettdd.mon"
			],
			[
				"Makefile",
				"Makefile"
			],
			[
				"core-io",
				"src/core/core-io.a65"
			],
			[
				"pettil-comp",
				"src/studio/pettil-compiler.a65"
			],
			[
				"pettil-compile",
				"src/studio/pettil-compiler.a65"
			],
			[
				"data/sdl2_samo",
				"data/sdl2_samosa.vice"
			],
			[
				"make",
				"Makefile"
			],
			[
				"sdl2_samo",
				"data/sdl2_samosa.vice"
			],
			[
				"tiddly",
				"docs/statictiddlers/tiddlywiki.info"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
