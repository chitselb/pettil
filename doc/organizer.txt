d;m 0 8f;m 1e0 24f;m 650 6cf;m 1a80 1a9f;z




2017-04-15T01:55:30-04:00
first pomodoro: set up dual environment
step through _word in working/broken environments




."
"
/mod
/
*/mod
-->
\


[ ] find relevant places where strings are moved
[x]		locate where _pword and _word are referenced
[x] 	locate where cmove and _move are referenced
[ ] 	locate (),y addressing
[ ] isolate parsing logic


words to look at:
$>pad
(create)
symcopy16


compiling
" add it to dictionary (")
." add it to dictionary (.")
interpreting
" copy it to pad
." display it

<<<<<<< HEAD

2017-05-02
=======
<<<<<<< Updated upstream
<<<<<<< Updated upstream
2017-05-02
=======
2017-05-02
>>>>>>> Stashed changes
>>>>>>> f10e7bcb2a9257d3409ef820a85ee4e2d0069d50

0 load ( nope )

1 load ( ok )

( 1 test screen )
: foo   7 88 - . ;
3 load
2 load
foo baz
bletch

( 2 test screen )
: baz   7 88 + . ;

( 3 test screen )
: bletch   65 2 - . ;

1 load bletch baz baz foo  -81 95 63 63 95 95 -81  ok




BLK
>IN


: LOAD
\ check the block number to ensure 0 < `screen` < `#blk`+1
dup 0 #blk @ 1+ between?  if
?dup 0= ?exit blk# @ over < ?exit

\ push current i/o context to return stack
blk 2@ 2>r

\ retrieve the block and unpack it to BLKBUF
block

\ reset screen to top left corner
>in off

\ invoke INTERPRET
interpret

\ restore previous pointers to keyboard or other screen
2r> blk 2!

then ;


: STREAM!
* set 'STREAM vector based on BLK being 0 or non-zero


: 'STREAM
* a vector to point to 'STREAM.TIB or 'STREAM.SCR

: (WORD)

: WORD

: INTERPRET

*

: LOAD   ( screen -- )





in the midst of parsing a WORD , >in must be within the range 0..79
 (because it's a PET) but certainly within the range 0.255

Outside the boundaries of WORD, >IN contains #LIN in the high byte and >IN
in the low byte, so only four return stack bytes are required. This way,
2@ 2>r 2r> 2! may be used for economy.

Whenever block is nonzero
	if we're in WORD , >IN is the offset from 	CAS2BUF (position on the
	line) and #LIN tracks the physical line on the screen 0..24

	when leaving WORD , >IN 's high order byte becomes the line number
	0..24 in #LIN

When entering WORD , if

BLOCK is invoked to load blocks initially
BLOCK is invoked to reload blocks when returning from LOAD.  The 2r> blk 2! will also include #LIN information as the high byte of >IN


Whenever


initially, >IN is 0 (because LOAD)

'STREAM.SCR will see a 0 in #LIN and invoke BLOCK to reload BLKBUF
'STREAM.TIB will echo ' OK' when each line is exhausted, unless COMPILING?


<<<<<<< HEAD

=======
<<<<<<< Updated upstream
=======
>>>>>>> f10e7bcb2a9257d3409ef820a85ee4e2d0069d50
?REFILL
	\ block?  when BLK <> 0 and >IN == 0
	\ line?  when >IN == 0


SKIP

SCAN

: WORD   ( char -- $ )

: INTERPRET   ( -- )
;

: LOAD   ( blk -- )
;
<<<<<<< HEAD

=======
>>>>>>> Stashed changes
=======
: source.scr
begin
  refill?
while
  refill
repeat
cas2buf #lin @ ;

: source.tib
begin
  refill?
while
  refill
repeat
tib span @ ;


write these words as two regular forth, duplicate code, then refactor
shared
  blk
  >in


scr
  #lin
>in 0= if
blk @ block #lin off then

tib
  span
  tib
\ is the keyboard buffer empty?
>in @ 0= if
80 expect span ! then




load
interpret
word
	scr?




	tib?
		\ tib and other CHRIN-based input should also
		\ work with other devices, e.g. serial files


		buffer empty? ( >in @ 0= if )
		get a new line from keyboard ( 80 expect )
		( then )






Forth Definition

Forth is the combination of an extensible programming language and interactive operating system. It forms a consistent and complete programming environment which is then extended for each application situation.

Forth is structured to be interpreted from indirect, threaded code. This code consists of sequences of machine independent compiled parameters, each headed by a pointer to executable machine code. The user creates his own application procedures (called 'words'), from any of the existing words and/or machine assembly language. New classes of data structures or procedures may be created; these have associated interpretive aids defined in either machine code or high level form.

The user has access to a computation stack with reverse polish conventions. Another stack is available, usually for execution control. In an interactive environment, each word contains a symbolic identifier aiding text interpretationb. The user may execute or compile source text from the terminal keyboard or mass storage device. Resident words are provided for editing and accessing the data stored on mass storage devices (disk, tape).

In applications that are to run 'stand-alone', a compact cross-compiled form is used. It consists of compiled words, interpretive aids, and machine code procedures. It is non-extensible, as the symbolic identifiers are deleted from each word and little of the usual operating system need be included.

W.F.R. 8/26/78  www.forth.org/fd/FD-V01N2.pdf p.18




2017-04-15T01:55:30-04:00
first pomodoro: set up dual environment
step through _word in working/broken environments




."
"
/mod
/
*/mod
-->
\


[ ] find relevant places where strings are moved
[x]   locate where _pword and _word are referenced
[x]   locate where cmove and _move are referenced
[ ]   locate (),y addressing
[ ] isolate parsing logic


words to look at:
$>pad
(create)
symcopy16


compiling
" add it to dictionary (")
." add it to dictionary (.")
interpreting
" copy it to pad
." display it

2017-05-02

0 load ( nope )

1 load ( ok )

( 1 test screen )
: foo   7 88 - . ;
3 load
2 load
foo baz
bletch

( 2 test screen )
: baz   7 88 + . ;

( 3 test screen )
: bletch   65 2 - . ;

1 load bletch baz baz foo  -81 95 63 63 95 95 -81  ok





blk >in


load interpret word 'stream skip scan? refill expect

: LOAD
\ check the block number to ensure 0 < `screen` < `#blk`+1
dup 0 #blk @ 1+ between?  if
?dup 0= ?exit blk# @ over < ?exit

\ push current i/o context to return stack
blk 2@ 2>r

\ retrieve the block and unpack it to BLKBUF
block

\ reset screen to top left corner
>in off

\ invoke INTERPRET
interpret

\ restore previous pointers to keyboard or other screen
2r> blk 2!

then ;


: STREAM!
* set 'STREAM vector based on BLK being 0 or non-zero


: 'STREAM
* a vector to point to 'STREAM.TIB or 'STREAM.SCR

: (WORD)

: WORD

: INTERPRET

*

: LOAD   ( screen -- )





in the midst of parsing a WORD , >in must be within the range 0..79
 (because it's a PET) but certainly within the range 0.255

Outside the boundaries of WORD, >IN contains #LIN in the high byte and >IN
in the low byte, so only four return stack bytes are required. This way,
2@ 2>r 2r> 2! may be used for economy.

Whenever block is nonzero
  if we're in WORD , >IN is the offset from   CAS2BUF (position on the
  line) and #LIN tracks the physical line on the screen 0..24

  when leaving WORD , >IN 's high order byte becomes the line number
  0..24 in #LIN

When entering WORD , if

BLOCK is invoked to load blocks initially
BLOCK is invoked to reload blocks when returning from LOAD.  The 2r> blk 2! will also include #LIN information as the high byte of >IN


Whenever


initially, >IN is 0 (because LOAD)

'STREAM.SCR will see a 0 in #LIN and invoke BLOCK to reload BLKBUF
'STREAM.TIB will echo ' OK' when each line is exhausted, unless COMPILING?


: source.scr
begin
  refill?
while
  refill
repeat
cas2buf #lin @ ;

: source.tib
begin
  refill?
while
  refill
repeat
tib span @ ;


write these words as two regular forth, duplicate code, then refactor
shared
  blk
  >in


scr
  #lin

\ need a new line?
>in @ 0= if
  \ need a new screen?
  #lin 0= if
    blk @ block
  then
then

tib
  span
  tib
\ is the keyboard buffer empty?
>in @ 0= if
80 expect span ! then
: WORD   ( char -- )
  'stream
;

: interpret   ( -- )
\ process next line from the keyboard or a screen
\ exits when >in > span
  begin
    ?stack  bl word   ( addr )
    dup c@
  while
    \ figure out if it's a word or number, compile or execute it
    find ?dup
    if        ( cfa findflag )
        \               find -1    find +1
        \             ____________________
        \ state -1   | compile     execute
        \ state 0    | execute     execute
        compiling? <>  ?: execute ,xt
    else      ( here )
        number
        jumptable  dpl @ 0< 2*  compiling? + 2* -
        @ execute
    then
  repeat
;
jumptable
    .word next
    .word _dlit
    .word drop
    .word _droplit

: load   ( blk -- )
  \ checks block in range
  \ pushes >in and blk to return stack
  \ resets >in
  \ interpret
  \ restores blk and >in from return stack
  0 2dup  #blk @  between? 0=
  8 ?error
  blk 2@ ( >in @ )  2>r
  blk 2! ( >in off )
  interpret
  2r>  blk 2! ( >in ! ) ;

: quit   ( -- )
\ Outer Interpreter top level
\ * resets return stack
\ * resets input to keyboard
\ * invokes interpret
  [ rp!  blk off
  begin
    interpret
    compiling? 0=
    if
      ."  OK" cr
    then
  again ;

: abort
  \ resets data stack
  \ resets vocabulary
  ? should it set decimal base?
  quit
    \ resets return stack
    interpret


    >in
    off
;  ( query )
interpret ->
    ?stack
    bl
    word ->

 0123456789.123456789.123456789.123456789.123456789.123456789.123456789.12345678
 this is the story of a girl
x|                          |
 ^
SPAN is initially 0
SPAN is set to 27, which is intuitively enough, `?len("this is the story of a girl")` in PET BASIC.



check input stream.  if it is exhausted, drop 00 0 and RDROP to EXIT from INTERPRET

check SPAN.  if it is 0, we are at the beginning of an empty line.
REFILL the buffer


|order|state|condition|what to do?|
|1st|force fill|span is 0|refill exit|
|2nd|end of line|in >= span|!throw a 0 to parent caller|
|3rd|processing|in < span|exit|

```
refillq
	lda uarea+userspan-usercold
    beq			; 'force fill' span = 0?
    cmp uarea+userin-usercold
    bcs refillq09	; 'processing' IN < SPAN ( exit )
    ; ' end of line' IN >= SPAN ( throw '0' )
    dex            ; insert a 0 on the stack
    lda #0
    sta stackl,x
    sta stackh,x
    pla 			; disregard WORD
    pla
    jmp exit  		; exit to INTERPRET/LOAD (whatever called WORD) with a code '0' in 2OS indicating end of line (INTERPRET) or end of buffer (LOAD)

; C set - when IN >= SPAN
                ; C off - when IN < SPAN

tiei




        (word) ->
            >r
            'stream ->
                source (->)
                    tib
                    span
                    @
                ; ( source.tib )
                dup
                >in
                @
                min ->
                    2dup
                    >
                    ?: nip drop
                ; ( min )
                /string ->
                    dup>r
                    -
                    r>
                    +under
                ; ( /string )
            ; ( 'stream )
            under
            r@
            skip
            under
            r>
            scan
        ; ( (word) )
        drop
        2dup
        swap
        -
        >r
        rot
        -
        1+
        >in
        +!
        r>
        here
        $! ->
            over
            c!+
            swap
            move ->
                dup
                2over
                u<
                nip
                ?: cmove> cmove
            ; ( move )
        ; ( $! )
        here
    ; ( word )
    dup
    c@
    ?branch interpret04
    drop
; ( interpret )
compiling?
0=
?branch quit03
(.") " OK"
    r>
    2+
    count
    2dup
    type
    +
    next   wtf?
    2-
    >r
; ( (.") )
?branch quit01
cr
query ->
    tib
    clit 80
    expect








    >in
    off
;  ( query )
interpret ->
    ?stack
    bl
    word ->
        (word) ->
            >r
            'stream ->


                ?reload ->  ( addr size )
                    \ see if the buffer is empty
                    >in @  0=
                    if
                        blk @
                        ?:
                    then
                    blk @ dup>r ?: cas2buf tib



                source (->)
                    tib
                    span
                    @
                ; ( source.tib )
                dup
                >in
                @
                min ->
                    2dup
                    >
                    ?: nip drop
                ; ( min )
                /string ->
                    dup>r
                    -
                    r>
                    +under
                ; ( /string )
            ; ( 'stream )
            under
            r@
            skip
            under
            r>
            scan
        ; ( (word) )
        drop
        2dup
        swap
        -
        >r
        rot
        -
        1+
        >in
        +!
        r>
        here
        $! ->
            over
            c!+
            swap
            move ->
                dup
                2over
                u<
                nip
                ?: cmove> cmove
            ; ( move )
        ; ( $! )
        here
    ; ( word )
    dup
    c@
    ?branch interpret04
    drop
; ( interpret )
compiling?
0=
?branch quit03
(.") " OK"
    r>
    2+
    count
    2dup
    type
    +
    next   wtf?
    2-
    >r
; ( (.") )
?branch quit01
cr
query ->
    tib
    clit 80
    expect



Documentation conventions

|Stack effects||h
|Definition time||
|Execution time||
|Return stack||

( definition quoted text comes from "inputstream" == effects )
( execution time -- effects )
( return stack -- effects ;R n -- )
( quoted text comes from "inputstream" -- always on left side )
( leading tick  -- denotes 'parameter field address )


CONSTANT   ( n "name" == ; -- n )
>R   ( n -- ;R -- n )
R@   ( -- n ;R n -- n )
'   ( "existingword" -- addr )
CREATE   ( "newword" == ; 'newword )




quit
    interpret
;

load
    push context
    interpret
    pop context
;

todo: move TIB for LOAD from cas2buf to $0150-019F
todo: use uppercase for all hexadecimal in source

_donp
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rot
#include "page.i65"
    .word plus
#include "page.i65"
    .word tuck
#include "page.i65"
    .word zero
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _betweenq
#include "pass.i65"
    .word pquerycolon
    .word store
    .word twodrop
#include "pass.i65"
    .word exit



make it so words in vocabularies list in [[WORDS]] with reverse vocab# char (1-9a-z) prefacing each word
group searchable vocabularies together
show only vocabularies in current search order
enable editor and assembler by default? no
but [[;CODE]] and [[CODE]] will both add assembler to top of  vocabulary search list




qterminal
    ldy #0
    lda STKEY                   ; $9B
    cmp #$EF                    ; check STOP key
    beq true
zero
false
    clc
    .byt $29                    ; AND immediate opcode
minusone
true
    sec
pushcarryflag
    ldy #0
    bcc pushyy                  ; Carry flag signifies T or F
    dey
pushyy
    tya
    jmp pushya
zeq
    clc
    lda tos
    ora tos+1
    beq putcarryflag
    sec
putcarryflag
    lda #>(pushya-1)
    pha
    lda #<(pushya-1)
    pha

    ldy #0
    bcc putyy
    dey
putyy
    tya
    jmp put




qterminal
    ldy #0
    lda STKEY                   ; $9B
    cmp #$EF                    ; check STOP key
    beq true
zero
false
    clc
    .byt $29                    ; AND immediate opcode
minusone
true
    sec
    lda #>(pushya-1)            ; exit to 'pushya'
    pha
    lda #<(pushya-1)
    pha                         ; putcarryflag enters at ctoyarts-1, no label
ctoyarts                        ; C=0? YA=$0000; C=1? YA=$FFFF then RTS
    ldy #0
    bcc yyrts                   ; Carry flag signifies T or F
    dey
yyrts
    tya
    rts                         ; see ya



zeq
    clc
    lda tos
    ora tos+1
    beq putcarryflag
    sec
putcarryflag
    lda #>(put-1)               ; exit to 'put'
    pha
    lda #<(put-1)
    bne ctoyarts-1              ; bra -- but try never moving put to $xx00
    pha

    ldy #0
    bcc putyy
    dey
putyy
    lda #>(put-1)
    pha
    lda #<(put-1)
    pha
    tya
    rts                         ;jmp push/put





zeq
    clc
    lda tos
    ora tos+1
    beq putcarryflag
    sec
putcarryflag
    ldy #0
    bcc putyy
    dey
putyy
    tya
    jmp put

;--------------------------------------------------------------
#if 0
name=0<
stack=( n -- flag )
tags=forth-83,nucleus
#endif
zlt
    ldy #0
    bit tos+1
    bmi zeq01
    bpl putyy

;--------------------------------------------------------------
#if 0
name=0<>
stack=( n -- flag )
tags=nucleus
Leave `FALSE` if `n` is 0, `TRUE` otherwise
#endif
zne
    ldy #0
    lda tos
    ora tos+1
    bne zeq01
    beq putyy









    sec
    ldy #<(pushya-1)
    lda #>(pushya-1)            ; exit to 'pushya'
rightchere
                                ; C flag and any suitable return address in AY
    pha
    tya
    pha

    ldy #0
    ...



    sec
    lda #>(put-1)            ; exit to 'pushya'
    ldy #<(put-1)
    bne rightchere

    pha
    pha                         ; putcarryflag enters at ctoyarts-1, no label
ctoyarts                        ; C=0? YA=$0000; C=1? YA=$FFFF then RTS
    ldy #0





    sec
    lda #>(pushya-1)            ; exit to 'pushya'
    pha
    lda #<(pushya-1)
    pha                         ; putcarryflag enters at ctoyarts-1, no label
ctoyarts                        ; C=0? YA=$0000; C=1? YA=$FFFF then RTS
    ldy #0

    sec
    lda #>(pushya-1)            ; exit to 'pushya'
    pha
    lda #<(pushya-1)
    pha                         ; putcarryflag enters at ctoyarts-1, no label
ctoyarts                        ; C=0? YA=$0000; C=1? YA=$FFFF then RTS
    ldy #0


document how WITHIN works
' like a DO LOOP '



Document cmp16 and dcmp
make them do Z flag? 3-way?

||C||
||||
||||
||||


What if Sweet16's EXT would fix the X register on the way in and out?

e.g.


EXT
    ;LDX #R11*2
    STX R14L
    LDY #2          ; point to high byte of transfer address
    JSR SET
    ; A = R15L
    ; X = opcode*2
    ; Y = 1
    ; N = 0
    ; Z = 1
    ; C = ?
    tsx
    lda $107,x
    tax
    jsr doext
    tsx
    txa
    sta $107,x
    rts
doext
    JMP (r11)       ; implement your 6502 extension to Sweet16 here
                    ; reuse R11 as a return value.  The X register
                    ; may be used with impunity inside an extension, as

Coding convention: try to move high bytes first in hi/lo moves, to improve
probability of code matching in suchen.rb

coding convention:  Style - you see it, please copy it.  It's less jarring to
read code that looks like it was written by one person.  Teams should agree on
common style rules

lowercaselabels
    nop                         ; opcode in column 5
                                ; comment in column
    jsr $FFD2                   ; hex constants upcase

_secondary

http://retro.hansotten.nl/dos65/dos65-programming-languages/dos65-forth/
JSR ( a -- )
RVSON
CLS
RVSOFF


code conventions:
6502 is blue and lowercase
Sweet16 is PURPLE AND UPPERCASE
PETTIL is green and case-sensitive
                                typically shown as images of code screens
                                PETSCII is legal in name fields
                                including shifted-space



intertwingling (any addresses are for Upgrade/4.0 PET)

* Switching between languages - 6502 / Sweet16 / PETTIL

** `( addr -- ) JSR`            calls 6502 subroutine from Forth

e.g.   `$FFD2 JSR`              \ will output 2OS.lo
                                \ it works by pushing the address of NEXT-1 to
                                \ the return stack, then JMP to the address at
                                \ TOS.  The address at TOS is destroyed, and things
                                \ are set up such that A has TOS.lo in it for the JMP

** `brk`    from 6502 to Sweet16 via ($0092) BRK vector
                                ; this is
** `RTN`    to exit Sweet16 to 6502
** `NXT`    to exit Sweet16 to Forth

UNSTACK tos -> tos; 2os -> n0; 3os -> n1; 4os -> n2; ...
RESTACK tos -> tos; n0 -> 2os; n1 -> 3os; n2 -> 4os; ...
ldy / jsr unstack
ldy / jsr restack
SET R0,2 / EXT UNSTACK
SET R0,2 / EXT RESTACK

Working with the Forth data stack in 6502
    ldy #4
    jsr unstack                 ; 2os -> (n); 3os -> (n+2)
    lda n+3                     ; the byte formerly known as stackh+1,x aka 3os.hi
    ora tos ...                 ; TOS was unchanged

; pulling things off the Forth data stack in Sweet16
UNSTACK16
LD | TOS                        ; stash TOS somewhere for a moment
ST | R11                        ; otherwise used for EXT calls to 6502
PULL                            ; PETTIL Sweet16 extension, 2OS -> TOS,ACC
ST | N0                         ; put things in the same place as other xxSTACKers
PULL
ST | N1
PULL
ST | N2
...
LD | R11                        ; restore TOS
ST | TOS

; putting stuff back on the stack in Sweet16
RESTACK16
LD | TOS
ST | R11                        ; otherwise used for EXT calls to 6502
...
LD | N2
PUSH
LD | N1
PUSH
LD | N0
PUSH
LD | R11
PUSH
