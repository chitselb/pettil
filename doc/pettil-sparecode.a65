pettil-sparecode.a65


;--------------------------------------------------------------
#if 0
name=DELAY
stack=( y -- )
tags=test

#endif
delay
    jsr docreate
    .word 5

;--------------------------------------------------------------
#if 0
name=ANIMAL
stack=( y -- )
tags=test

#endif
animal
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=TASK
stack=( y -- )
tags=test

#endif
task
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=WORK
stack=( y -- )
tags=test

#endif
work
    jsr docreate
    .dsb 32,0

;--------------------------------------------------------------
#if 0
name=TIMEOUTS
stack=( y -- )
tags=test

#endif
timeouts
    jsr docreate
    .dsb 16,0

;--------------------------------------------------------------
#if 0
name=ANIMIRQ
stack=( y -- )
tags=test

#endif
animirq
    ldx #$0F
animirq01
    lda timeouts+3,x
    bne animirq03
    dex
    bpl animirq01
animirq02
    jmp MAINIRQ
animirq03
    lda #<bang
    sta work+3
    lda #>bang
    sta work+4
    bne animirq02               ; bra

;--------------------------------------------------------------
#if 0
name=HAND
stack=( y -- )
tags=test

#endif
#include "align.i65"
_hand
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(hand04-*+1)
#include "page.i65"
hand01
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word vidram
#include "page.i65"
    .word plus
#include "pass.i65"
    .word clit
    .byt 17
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(hand03-*+1)
#include "page.i65"
hand02
#include "page.i65"
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word clit
    .byt $80
#include "page.i65"
    .word xor
#include "page.i65"
    .word swap
#include "page.i65"
    .word cstore
#include "pass.i65"
    .word ploop
    .byt <(hand02-*+1)
#include "page.i65"
hand03
    .word drop
#include "pass.i65"
    .word ploop
    .byt <(hand01-*+1)
#include "page.i65"
hand04
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SISYPHUS
stack=( y -- )
tags=test

#endif
#include "align.i65"
_sisyphus
    jsr enter
#include "page.i65"
    .word task
#include "page.i65"
    .word off
#include "page.i65"
sisyphus01
    .word task
#include "page.i65"
    .word fetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word work
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(sisyphus02-*+1)
#include "page.i65"
    .word execute
#include "page.i65"
    .word dup
#include "page.i65"
    .word work
#include "page.i65"
    .word plus
#include "page.i65"
    .word off
#include "page.i65"
sisyphus02
    .word twoplus
#include "pass.i65"
    .word clit
    .byt 31
#include "page.i65"
    .word andx
#include "page.i65"
    .word task
#include "page.i65"
    .word store
#include "page.i65"
    .word qterminal
#include "pass.i65"
    .word qbranch
    .byt <(sisyphus01-*+1)
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=RVS
stack=( n -- n )
tags=test

#endif
#include "align.i65"
rvson
    jsr dodotc
    .asc RVSON

;--------------------------------------------------------------
#if 0
name=VIRT
stack=( -- )
tags=test

#endif
#include "align.i65"
virt
    jsr dodotc
    .asc VLINE5

;--------------------------------------------------------------
#if 0
name=RVSOFF
stack=( n -- n )
tags=test

#endif
#include "align.i65"
rvsoff
    jsr dodotc
    .asc RVSOFF

;--------------------------------------------------------------
#if 0
name=BANG
stack=( n -- n )
tags=test

#endif
#include "align.i65"
bang
    jsr dodotc
    .asc '!'

;--------------------------------------------------------------
#if 0
name=.ON
stack=( n -- n )
tags=test

#endif
#include "align.i65"
onbit
    jsr dodotc
    .byt BLOCK8

;--------------------------------------------------------------
#if 0
name=.OFF
stack=( n -- n )
tags=test

#endif
#include "align.i65"
offbit
    jsr dodotc
    .byt $F0                    ; ~todo - add to cbm.def

;--------------------------------------------------------------
#if 0
name=LEG
stack=( n size -- size|0 n )
tags=test

: leg 2dup > and swap ;
#endif
#include "align.i65"
_leg
    jsr enter
#include "page.i65"
    .word twodup
#include "page.i65"
    .word gt
#include "page.i65"
    .word andx
#include "page.i65"
    .word swap
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BITPATH
stack=( n size -- size|0 n )
tags=test

: leg 2dup > and swap ;
#endif
bitpath
    jsr docreate
    .byt 9,13,24,26,36,44,54,64,0

;--------------------------------------------------------------
#if 0
name=.B
stack=( n -- n )
tags=test

#endif
#include "align.i65"
_dotb
    jsr enter
#include "page.i65"
    .word benjamin
#include "page.i65"
    .word eight
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(dotb03-*+1)
#include "page.i65"
dotb01
    .word twoslash
#include "page.i65"
    .word twodup
#include "page.i65"
    .word andx
#include "pass.i65"
    .word pquerycolon
    .word onbit
    .word offbit
#include "pass.i65"
    .word ploop
    .byt <(dotb01-*+1)
#include "page.i65"
dotb03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=HIGHLIGHT
stack=( y -- )
tags=test

#endif
#include "align.i65"
_highlight
    jsr enter
#include "page.i65"
    .word three
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(highlight04-*+1)
#include "page.i65"
highlight01
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word vidram
#include "page.i65"
    .word plus
#include "pass.i65"
    .word clit
    .byt 17
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(highlight03-*+1)
#include "page.i65"
highlight02
#include "page.i65"
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word clit
    .byt $80
#include "page.i65"
    .word xor
#include "page.i65"
    .word swap
#include "page.i65"
    .word cstore
#include "pass.i65"
    .word ploop
    .byt <(highlight02-*+1)
#include "page.i65"
highlight03
    .word drop
#include "pass.i65"
    .word ploop
    .byt <(highlight01-*+1)
#include "page.i65"
highlight04
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDBREAK
stack=( addr -- )
tags=test,nosymbol

```
: bdbreak
```
#endif
#include "align.i65"
_bdbreak
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word _dotfourh
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word bang
#include "page.i65"
    .word _doth
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDLINE
stack=( addr -- )
tags=test,nosymbol

```
: bdline
```
#endif
#include "align.i65"
_bdline
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt <(bdline01-*-1)
    .asc "    ",$B3,"        ",$AB,"  ",CR
bdline01
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDUMP
stack=( addr -- )
tags=test

#endif
#include "align.i65"
_bdump
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word _bdline
#include "pass.i65"
    .word clit
    .byt 11
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(bdump03-*+1)
#include "page.i65"
bdump01
    .word _bdbreak
#include "page.i65"
    .word _bdline
#include "pass.i65"
    .word ploop
    .byt <(bdump01-*+1)
#include "page.i65"
bdump03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WDBREAK
stack=( addr -- )
tags=test,nosymbol

```
: wdbreak
```
#endif
#include "align.i65"
_wdbreak
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word dup
#include "page.i65"
    .word benjamin
#include "page.i65"
    .word ult
#include "pass.i65"
    .word pquerycolon
    .word _doth
    .word _dotfourh
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word dup
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word space
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word dup
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word cjoin
#include "page.i65"
    .word _dotfourh
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=!XY
stack=( addr|offset -- )
tags=test,nosymbol
Set hardware cursor from either a `vidram` address (or `offset`, ignores high bit)

$AF   $C6  $D5  ($C4)     $D8
DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX
       ^        ( ^ )      ^
set three things:
    LNMX = x position
    PNTR = y position
    (PNT) = line address

```
auf BASIC;  PRINT @X,Y
```
#endif
#include "align.i65"
_setxy
    jsr enter
#include "page.i65"
    .word minusone
#include "page.i65"
    .word twoslash
#include "page.i65"
    .word over
#include "page.i65"
    .word andx
#include "page.i65"
    .word slashmod40
#include "pass.i65"
    .word setxy01
setxy01
    lda tos
    sta PNTR
    lda stackl,x
    sta LNMX
    inx
    lda #0
    sta tos+1
    lda #PNTR
    sta tos
    jmp store

;--------------------------------------------------------------
#if 0
name=.VLINE
stack=( n -- )
tags=test,nosymbol
draw a vertical bar n pixels from left edge of cursor

#endif
vline
    jsr plugh
    lda LNMX                    ; cursor column
    lda tos
    lsr
    lsr
    lsr                         ; column / 8
    clc
    stx z
    adc z

    jsr plugh
    jmp drop

;--------------------------------------------------------------
#if 0
name=WDLINE
stack=( addr -- )
tags=test,nosymbol

```
: wdline
```
#endif
#include "align.i65"
_wdline
    jsr enter
#include "pass.i65"
    .word dlit
    .byt 92,20
#include "page.i65"
    .word vline
#include "page.i65"
    .word vline
#include "page.i65"
    .word bang
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WDUMP
stack=( addr -- )
tags=test

#endif
#include "align.i65"
_wdump
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word _wdline
#include "pass.i65"
    .word clit
    .byt 11
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(wdump03-*+1)
#include "page.i65"
wdump01
    .word _wdbreak
#include "page.i65"
    .word _wdline
#include "pass.i65"
    .word ploop
    .byt <(wdump01-*+1)
#include "page.i65"
wdump03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=INDEX
stack=( -- )
tags=secondary,extra

```
: index
    #blk @ 0 do i block 40 type loop ;
```
#endif
#include "align.i65"
_index
    jsr enter
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pqdo
    .byt <(index02-*+1)
#include "page.i65"
index01
    .word i
#include "page.i65"
    .word _block
#include "page.i65"
    .word vidram
#include "page.i65"
    .word i
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word plus
#include "page.i65"
    .word forty
#include "page.i65"
    .word cmove
#include "pass.i65"
    .word ploop
    .byt <(index01-*+1)
#include "pass.i65"
index02
    .word exit
