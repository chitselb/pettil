EDITOR

Forth blocks and the PET full screen editor are a natural symbiosis.
To accomplish this, all I had to do was hook the IRQ vector to escape
the STOP key.  The screen flashes, and the following keystroke is an
editor command.  Entire screens, including the linewrap table, are
compressed and then moved, where they build downward from  the top of
memory.  This region is preserved on mass storage in sequential files.
There are also editor commands to import/export screens in an unpacked,
CR-delimited format for non-native editing.

screens to/from CR-delimited only?
    no line wrap tables
    simplifies UI design to just STOP-S / STOP-L
    probably easier for INTERPRET loop
    uses CHRIN kernel routine to copy screen
what about reverse-field, just a screen full of graphics?  Should there
be an option to store screens as RLE-compressed screen codes and a copy
of the line-wrap table?  What about 1K blocks of binary data?

edit - invoke the editor on the most recent screen or whatever is displayed

Editor commands begin with STOP, which flashes the screen

general
STOP SPACE - cancel editor command
STOP Q - save current screen, exit the editor
STOP CLR - reset linewrap table to all 40-char lines

screen navigations
STOP HOME - first screen
STOP UP - previous screen
STOP DOWN - next screen
STOP INS - insert a blank screen before the current screen
STOP DEL - delete the current screen.  go to next then prev then blank
STOP I - index, displays top 40 characters of active buffers

mass storage
STOP S - save screens to file
STOP L - load a file of screens

line copy/paste buffer
STOP Z - zilch the paste buffer.  There is no undo, only do.
STOP X - cut the current line, append to paste buffer
STOP C - copy the current line, append to paste buffer
STOP V - paste the buffer (whole lines only) here


Screens are compressed/decompressed on the fly with some combination
of RLE/LZ/Rad50

7C00 - 7FFF   1024 byte work buffer (1000 chars + line wrap table)
7BFE - 7BFF   link address of "current" buffer
7BFC - 7BFD   1st buffer link (0 if no buffers)
7x   - 7BFB   compressed buffer 1 (home)
7x-2          address of next buffer link (chain ends with 0)
PAD           copy/paste buffer


Events / Multitasking

Have some sort of event queue, where high level words are triggered
by the jiffy clock IRQ.  See Garth's design

The IRQ counts down a timer, with events triggered at their expiration

oneshot   ( jiffies cfa -- ; add a one-time event to the queue )
repeat   ( jiffies cfa -- ; add a repeating event to the queue )

use the event queue to flash the screen in the editor for 5 jiffies


DICTIONARY
inner interpreter primitives
nucleus layer
device layer
interpreter layer
compiler layer


setirq pla
 sta n
 pla
 sta n+1
 sei           ; disable interrupts
 brk
 .byt inr | N0 ; bump the RTS address
 .byt ldd | N0 ; retrieve the word
 .byt set | N0 ; IRQ vector
 .word $0090
 .byt std | N0 ; set the new IRQ vector
 .byt rtn      ; done
 cli           ; enable interrupts
 rts

 jsr hookirq
irqhandler

hookirq
 sei
 pla
 tay
 pla
 sta $91
 iny
 sty $90
 bne +
 inc $91
+ cli
 jmp next

CREATE
need to align the code field to avoid jmp ($xxFF) bug

38 characters is the maximum idea size
because there are spaces before, after
ideas appear here when space is struck


EDIT ( -- ; invokes the full screen editor )

general
    STOP STOP
    - nothing happens. The editor continues to wait for the second keypress
    STOP any key (cancel)
    - cancel editor command, return to edit mode
    STOP Q       (quit)
    - buffer current screen, drop out of the editor to the Forth command line
    STOP CLR     (unwrap)
    - reset linewrap table to all 40-char lines

screen navigation
    STOP HOME    (pagetop)
    - buffer current screen, display first screen
    STOP UP      (pageup)
    - buffer current screen, display previous (or new) screen
    STOP DOWN    (pagedown)
    - buffer current screen, display next (or new) screen
    STOP INS     (insertscreen)
    - buffer current screen, display a new blank screen inserted before it
    STOP DEL     (deletescreen)
    - delete the current screen, display next, then previous, then blank screen
    STOP I       (index)
    - display an index screen of just the top lines (first 40 characters) of
      all active buffers (max 25). Moving the cursor to any index line and
      hitting return will display that screen.

mass storage
    STOP S       (save)
    - prompt for a filename and device, save all buffered screens on mass storage as PRG file
    STOP L       (load)
    - prompt for a filename and device, load a PRG file containing buffered screens, display first
    STOP V       (verify)
    - prompt for a filename and device, verify memory buffer vs. saved PRG file

line copy/paste buffer
    STOP Z       (zilch)
    - zilch the paste buffer at PAD. Do or do not. There is no undo.
    STOP R       (restore)
    - restore the current screen from the last time it was buffered e.g. by STOP UP or STOP Q
    STOP D       (deleteline)
    - delete the current logical line (40 or 80 characters), append to paste buffer. (like "dd" in vi)
    STOP C       (copy)
    - copy the current logical line, append to paste buffer
    STOP P       (paste)
    - insert the entire paste buffer (whole lines only) at the current cursor line (like "P" in vi)

copy only needs to know whether the current line is 80 or 40

for cut and paste, everything depends on knowing that PLUS the size of each line below the current logical line

the $e0 table can be checked


for cut, cmove one line at a time up either 80 or 40, then fill the bottom of the screen with 80 or 40

for paste, append everything from the current line to the end of the screen to the paste buffer
you can stop appending when paste buffer size > 1024 bytes
then, copy everything from the paste buffer up to line 25 back to the screen, setting line lengths as we go

Q: what happens if someone attempts a STOP-Restore when no block exists?
A: the editor always has a block

distinguish screens from blocks
first 3 bytes are linewrap high bits for lines 1..24 ($e1-f8)
there can't be two consecutive 0 bits in that 3 bytes

packet address = the address of the packet header
last 2 bytes are the packet header
packet header = editor flag ($8000) and uncompressed flag ($4000), packet size
packet size = (packet header & $7ff) the total length of the packet including header
packet length = (packet header & $7ff) - 2, the length of the packet data
packet data is from (packet address - packet length) to (packet address - 1)
screen packet - first three bytes are linewrap

new data packet
packet data     00 00 00    four null*256 RLE packets
                00 00 00
                00 00 00
                00 00 00
packet address  0e 00       packet header

new screen packet
packet data     FF FF FF    three bytes of linewrap for lines 1..24
packet address  05 80       packet header with editable ($8000) bit set

REHASH
move everything down to pad in sorted threaded order
block move the whole thing back

search order

context @
begin

while
    (findvocab)
    chain to parent vocabulary
repeat
(findcore)


(findcore)
search new words
dhash
search core by hash


create

context @
current !
find


defining words in a vocabulary
    add 2 to the length
    suffix with the vocabulary link




forget




words
context @
collect all the CFAs at pad, with addresses of their symbols





core definition symbol
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         $1467                 | +0 code field
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
[0]             | immediate bit   +2 name field length/flags byte
| [0]           | smudge bit
|   [0]_________| vocabulary bit
|     [    5    ] name length 0..31
+-+-+-+-+-+-+-+-+
|      A        |                 +3 name field first letter
+-+-+-+-+-+-+-+-+
|      L        |
+-+-+-+-+-+-+-+-+
|      L        |
+-+-+-+-+-+-+-+-+
|      O        |
+-+-+-+-+-+-+-+-+
|      T        |                 +n name field last letter
+-+-+-+-+-+-+-+-+

vocabulary definition symbol
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         $22F3                 | +0 code field
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
[0]             | immediate bit   +2 name field length/flags byte
| [0]           | smudge bit
|   [1]_________| vocabulary bit
|     [    4    ] name length (0..31)
+-+-+-+-+-+-+-+-+
|      E        |                 +3 name field first letter
+-+-+-+-+-+-+-+-+
|      D        |
+-+-+-+-+-+-+-+-+
|      I        |
+-+-+-+-+-+-+-+-+
|      T        |                 +n name field last letter
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         $7536                 | +n+1 vocabulary link (0 for last)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

vocabulary entry
+-+-+-+-+-+-+-+-+
|    jsr        |                 +0 code
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    dovocab                    | +0 code field
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    first word in vocabulary   | +3 first word
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    parent vocab (0 = core)    | +5 parent vocabulary
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+



+---------------+
| video         | $8000-$83ff video memory
+===============+
| heads         | $7400-$7fff symbol table
+---------------+
|temp dictionary| $6800-$73ff interpreter/compiler
+---------------+
| block buffer  | $6400-$67ff 1K block buffer
+---------------+
| ramdisk       | $63ff
| packets       |
|   |           |
|   |           |
|   v           |
|               |
   ...
|               |
|   ^           | PAD
|   |           | HERE
|   |           |
| dictionary    |
| bodies        | $0400
+---------------+
| tape buffers  |
| and stuff     | $0200-$03ff
+---------------+
| stack page    | $0100-$01ff
+---------------+
| zero page     | $0000-$00ff
+---------------+
+-+-+-+-+-+-+-+-+
|      D        |
+-+-+-+-+-+-+-+-+
|      I        |
+-+-+-+-+-+-+-+-+
|      T        |                 +n name field last letter


-----symtab---
32 bytes corehash
===

 8 bytes pearson table
 8 bytes bloom filter
move pearson/bloom to the end of the core dictionary, so they can be
directly accessed.  Let FORGET-called-by-COLD add 16 to DP to enclose
this data.


REHASH - high level
called by COLD to move the symbol table up from PAD to the top of memory
erase bloom filter
erase corehash table (formerly lfalist)
cmove the whole symbol table to pad

target = symtab+8+32+2      ; start returning things here
if called by COLD
    scan forward for a 0 length.  This delimits the temp dictionary
    the next word is a himem load address where the temporary dictionary
    would load
    copy everything from that point to $7FFF
else
    target
    pad
    over newstuff @ swap -      ; newstuff-target
    cmove
endif

corehash[0] = target
for ihash = 0 to 15
    corehash[ihash] = target
    for ilength = 1 to 31
        for each symbol
            set the bloom filter bit.  It does not matter if we do this multiple times.
            if (ilength = symbol.length) and (ihash = symbol.hash)
                copy symbol back to symtab
                target += symbol.length+2
                if symbol.isvocab
                    target += 2
                endif
            endif
        next
    next
next
startup ['] abort  over !  @ execute

LOCALS
alwwys on zero page
implied fetch
separate word for store

4 locals
n4!
0  dup local r0acc  local! r0acc!
2  dup local r1up   local! r1up!
4  dup local r2i    local! r2i!
6  dup local r3lim  local! r3lim!
8  dup local r4tos  local! r4tos!
10 dup local n0     local! n0!
12 dup local n1     local! n1!
14 dup local n2     local! n2!
16 dup local n3     local! n3!
18 dup local n4     local! n4!
20 dup local n5     local! n5!
22 dup local r11ext local! r11ext!
24 dup local r12sp  local! r12sp!
26 dup local r13cpr local! r13cpr!
28 dup local r14st  local! r14st!
30 dup local r15pc  local! r15pc!

: local
   create c,
   ;code
   jsr slip
   ldy #0
   lda (tos),y
   sty tos+1
   sta tos
   lda (tos),y
   sta tos
   jmp next

: local!
   create c,
   ;code
   ldy #0
   lda (tos),y
   tay
   lda stackl,x
   sta 0,y
   lda stackh,y
   sta 1,y
   jmp poptwo

code nfa+
    ldy #0
    lda (tos),y
    and #$1f
    clc
    adc #3
    adc tos
    sta tos
    bcc +
    inc tos
+   jmp next

[20]
: nfa+
    dup c@ $1f and 3 + + ;

code nfa+       ( nfa -- nfa+ )
    brk


: foo 4002 4000 ! 4002 jiffy@ third 2000 0 do >cfa loop drop jiffy@ 2swap d- du. ;
: >cfa   ( nfa -- cfa )
    2- @ ;
code >cfa   ( nfa -- cfa )
    brk
    .byt   popd | TOS
    .byt   st | TOS
    .byt   nxt




FAIL is vectored like EMIT and KEY
In the core-only, it just says "ERROR#" and the number, then MON (via WARM?)
in pettil development environment, it prints a canned message, then ABORT


http://pfe.sourceforge.net/pfe-wordsets/forth_usual.html
VOCS( -- )  => "FORTH"

    list all vocabularies in the system

      simulate:
        : VOCS VOC-LINK @ BEGIN DUP WHILE
                                DUP ->WORDLIST.NAME @ ID.
                                ->WORDLIST.LINK @
                          REPEAT DROP ;

Also incorporate the dpans concept of wordsets (like vocabularies, but loaded from Forth?)

At the beginning of FORGET
find the next word in the input stream.  It's CFA will become the new DP
iterate the entire symbol table (outer loop)   BEGIN   0= UNTIL
    Is this word active?
    And its CFA is between new DP and old DP?
    It is being forgotten.  Does it have any ancestors?
    iterate the entire symbol table   BEGIN   0= UNTIL inner loop
        set ancestor CFA = 0
        Is this word inactive?
        And it's CFA is between ancestor CFA and new DP?
        it's a candidate for most-recent ancestor.  Update Ancestor CFA / Ancestor NFA
        ancestor CFA = 0?  There were no ancestors
        toggle smudge bit (activate) most recent ancestor
    next symbol in inner loop
next symbol in outer loop


: ?error   ( flag err# -- )
   ... ;

: +branch   ( n -- )
add "n" to the instruction pointer but do not continue execution there just yet

: ?:   ( == ) ( flag -- )
scans ahead in the input stream, finds two words, and
encloses their CFA into the dictionary.  At runtime, the first word is
executed if flag is true, otherwise the second word executes

<builds here 0 c, ['] , ['] , here over - swap c!   ( [offset] [trueword] [falseword] )

does> c@+ >r  0= 2* + @ r> +branch execute ;


: "   ( text" == ) ( -- addr )
    [ ascii " ] literal  word >in 1+!
    pad dup>r over c@ 1+ cmove> r> ;

: $>pad
  pad dup>r over c@ 1+ cmove> r> ;

: $enclose
   dup c@ allot ;

: (")   ( -- addr )


: "   ( text" == ) ( -- addr )
    state @
    dup if compile (") then
    [ ascii " ] literal  word >in 1+!
    rot ?: $enclose $>pad ;

L0d40 .byt 8 | bit7
 .asc "?LOADIN","G"|bit7
 .word L0d28
QLOADING
 .word DOCOL
 .word BLK
 .word FETCH
 .word ZEQ
 .word CLIT
 .byt 22
 .word QERROR
 .word SEMIS

: -->
    ?loading
    >in off
    b/scr
    blk @
    over mod
    negate
    blk +! ;
; Initialized in RAM:
DOPRIM
   JMP (COLDD)          ; [5]


NEXT
   INY                  ; [2]
   BMI PGFIX            ; [2]*
NEXT1
   LDA (IP),Y           ; [5]
   BMI ENTER            ; [2]
   STA DOPRIM+1         ; [3]  assume DOPRIM is in z.p.?
   JMP DOPRIM           ; [3]
                        ; ---
                        ;[22]

ENTER
   STA W+1 ; lead with high byte of target      ; [3]
   INY                                          ; [2]
   LDA (IP),Y ; then low byte                   ; [5]
   STA W                ; [3]
   DEC RX               ; [5]
   LDX RX               ; [3]
   TYA                  ; [2]
   SEC                  ; [2]
   ADC IP               ; [3]
   STA RL,X             ; [5]
   LDA IP+1             ; [3]
   STA RH,X             ; [5]
   LDA W                ; [3]
   STA IP               ; [3]
   LDA W+1              ; [3]
   STA IP+1             ; [3]
   LDY #0               ; [2]
   BEQ NEXT1            ; [3]

EXIT
   LDX RX
   INC RX
   LDA RL,X
   STA IP
   LDA RH,X
   STA IP+1
   LDY #0
   BEQ NEXT1

PGFIX       ; add half page to IP & subtract from Y
   TYA      ; rare occurrence, but rather guard against
   AND #$80 ; it here than in compiler process
   TAY
   LDA IP
   BPL +
   AND #$80
   STA IP
   INC IP+1
   BNE NEXT1
   BRK
+  ORA #$80
   STA IP
   BPL NEXT1



Four input sources
console
block
screen
seqfile

info screen  maybe a bar graph between pad...vmbuf
symtab symnew symtail tdict memsiz  dp vmbuf #vmblks scr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    UNSIGNED DIVIDE BY 10 (16 BIT)
;    By Omegamatrix
;    126 cycles (max), 79 bytes
;
;    Start with 16 bit value in counterHigh, counterLow
;    End with 16 bit result in highTen, lowTen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TensRemaining:
    .byte 0,25,51,76,102,128,153,179,204,230
ModRemaing:
    .byte 0,6,2,8,4,0,6,2,8,4

.startDivideBy10:
    ldy    #-2                   ;2  @2   skips a branch the first time through
    lda    counterHigh           ;3  @5
.do8bitDiv:
    sta    temp                  ;3  @8
    lsr                          ;2  @10
    adc    #13                   ;2  @12
    adc    temp                  ;3  @15
    ror                          ;2  @17
    lsr                          ;2  @19
    lsr                          ;2  @21
    adc    temp                  ;3  @24
    ror                          ;2  @26
    adc    temp                  ;3  @29
    ror                          ;2  @31
    lsr                          ;2  @33
    and    #$7C                  ;2  @35   AND'ing here...
    sta    temp                  ;3  @38   and saving result as highTen (times 4)
    lsr                          ;2  @40
    lsr                          ;2  @42
    iny                          ;2  @44
    bpl    .finishLowTen         ;2³ @46/47...120

    sta    highTen               ;3  @49
    adc    temp                  ;3  @52   highTen (times 5)
    asl                          ;2  @54   highTen (times 10)
    sbc    counterHigh           ;3  @57
    eor    #$FF                  ;2  @59
    tay                          ;2  @61   mod 10 result!

    lda    TensRemaining,Y       ;4  @65   Fill the low byte with the tens it should
    sta    lowTen                ;3  @68   have at this point from the high byte divide.
    lda    counterLow            ;3  @71
    adc    ModRemaing,Y          ;4  @75
    bcc    .do8bitDiv            ;2³ @77/78

.overflowFound:
    cmp    #4                    ;2  @79   We have overflowed, but we can apply a shortcut.
    lda    #25                   ;2  @81   Divide by 10 will be at least 25, and the
                                 ;         carry is set when higher for the next addition.
.finishLowTen:
    adc    lowTen                ;3  @123
    sta    lowTen                ;3  @126  routine ends at either 87 or 126 cycles


assumptions
there are no duplicates in either dictionary below FENCE (at cold start)
the ancestor to reawaken will be 
* living (present in pad)
* inactive (has the smudge bit set)
* has the highest CFA
* last ancestor to reawaken will be the one in TDICT
for each size 1..32
    for all words of that size
        if the word is in tdict it always gets copied to pad
        if the CFA is < NEWDP it gets copied to pad
        if it wasn't copied to pad, it gets stacked under vmbuf
        cfa > symtab | cfa < newdp?
        if
            copy to pad
        else
            active?
            if
                stack the nfa under vmbuf
            then
        then
    loop

now we have a stack of the forgotten words, and all words of that size are in
one place.  how convenient
assumptions
forgotten words may not be unique.  
Both active and inactive copies of a word could wind up in the scrapheap

    for each forgotten word
        set tdict-maybe and highest-so-far to zero
        for each word of that size in pad
            is it in tdict?             
                replace tdict-maybe
            does it have a higher CFA than highest-so-far?
                replace highest-so-far
        loop
        highest-so-far nonzero?
        if
            activate it
        else
            no?  Well how about tdict-maybe nonzero?
            if
                activate it
            then
        then
    loop
loop

copy to pad
copy all words of that size to pad

search pad
none found? how about TDICT?


(rehash1) will 
* copy each size from symtab to pad 1..31
* as it copies, the spaceship comparator will stack addresses of forgotten
words below VMBUF
* once the entire "size" of unforgottens has been moved to pad, reawaken will
walk through the stack of forgotten words
* for each forgotten word, it will walk through that "size" at pad

(CREATE)
parse the next word in the input stream to HERE
search for it only in CURRVOC
present?  echo [rvs] name [off] "EXISTS"

zap
pad paste !

copy
determine logical line origin/size
append logical line to paste buffer
concatenate bits to pwrap

cut
perform "copy"
move next line to end of screen up
fix display linewrap
blank last line

paste
save paste buffer position
    paste @
save paste buffer wrap
    pwrap 2@
determine current position logical line origin
    logline
append current position to end of screen to paste
update paste linewrap
start with wrap above
concatenate paste wrap bits
copy paste to end of paste (max end of screen) to current position
set display linewrap
restore paste buffer wrap
restore paste buffer position
