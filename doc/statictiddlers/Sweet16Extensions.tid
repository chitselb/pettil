tags: static concepts
title: Sweet-16 Extensions

This is how to utilize the
[[native 6502 extensions|http://pettil.tumblr.com/post/81057827224/flexible-native-6502-extensions-for-sweet16]]
available in PETTIL.  EXT is a new Sweet-16 instruction, and the subroutine
it hooks to should probably have a register contract between the caller and the
extension.  R11 is used for transferring control to the extension, and R11 is 
also a good candidate for a return argument.

Here's how adding an extension might look in the Forth assembler...

```
CODE DIGITFLIP
    .N0  STA,
    .A   LSR,  .A   LSR,
    .A   LSR,  .A   LSR,
    .N0  ASL,  .N0  ASL,      
    .N0  ASL,  .N0  ASL,      
    .N0  ORA,  ( REVERSE HEXDIGITS )
         RTS,
END-CODE

CODE BACKWARD
    .R11 LDA,
         PHA,
    .R11 1+ LDA,
    DIGITFLIP JSR,
    .R11 STA,
         PLA,
    DIGITFLIP JSR,
    .R11 1+ STA,
         RTS,
END-CODE

CODE TRIVIAL
         BRK,
         PULL,
    .ACC SET,
    6502 ,
    .TOS ADD,
    BACKWARD EXT,
    .R11 LD,
         PUSH,
         NXT,
END-CODE
```
The new Sweet-16 instructions PUSH, PULL, EXT, and NXT, are all in this
example.  Native code extensions typically end with an RTS instruction, to
return control to the Sweet-16 opcode dispatcher.
