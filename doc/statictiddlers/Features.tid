tags: static
title: Features

This is where I brag on the cool features.

* SWEET16 This is Woz's original Apple II sweetness, with some adaptations to let the PETTIL programmer work the Forth data stack and go in and out of Forth or Assembler
* Intertwingled Forth / 6502 / SWEET16 code

||Forth|6502|SWEET16||
|Forth|Forth|6502|SWEET16||
|6502|Forth|6502|SWEET16||
|SWEET16|Forth|6502|SWEET16||

||Forth|6502|SWEET16||
||Forth|6502|SWEET16||
||Forth|6502|SWEET16||

* Fast Interpreter
** Bloom filter https://en.wikipedia.org/wiki/Bloom_filter
** Pearson hash https://en.wikipedia.org/wiki/Pearson_hashing
** Size-ordered threads


PETTIL uses the stack differently from most Forth systems. I went with a split
data stack on the zero page, with TOS in two consecutive bytes.  This works
pretty well, until it's time to do pointers.  For that, there is a routine
called `locals` which primitives can call to make the next few things on the
stack a little more convenient to access.  There is a 32-byte range of zero page
memory ($00..$1F) where PETTIL and Sweet-16 overlap, and `locals` may fill up
$0A..$15 without causing any trouble.  Keep in mind that locals updates the
data stack pointer, effectively [[NIP]]ping the items it copies.

```
    ldy #6
    jsr locals
```
This will put 2OS, 3OS, and 4OS into N0, N1, and N2, respectively, while
leaving TOS untouched.

<<<
It might be easy to switch FIG-FORTH over to a split stack that stores low-byte/high-byte on the zero page as separate ranges (my approach #2). This would create lots of efficiency improvements: pushing and popping are shorter operations (1 operation instead of two, every time). Also, although this would make it slightly nonstandard for Forth, logical calculations and checks could use a 1-byte value and ignore the "high" byte, speeding/simplifying things further. You could have many other 8-bit operations too, which would speed things up. ANS Forth specifies a minimum of 32 cells of Parameter Stack {64 bytes, easily fitting in zpage} and 24 cells of Return Stack {usually this is the page 1 return stack} (Brad Rodriguez prefers 64 cells of each). (By having the TOS be 2 bytes in zpage, you can still use the TOS easily as a pointer.) (Sadly, pointer accesses are harder this way.)
<<< [[David Wheeler|http://www.dwheeler.com/6502/]]  [[also|http://www.dwheeler.com/6502/a-lang.txt]]
