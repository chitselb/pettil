tags: static default
title: Tutorial

!!PETTIL Tutorial

|,''Tutorial 0''<p/>Power on your PET or load your emulator.  Your screen should look something like this:<br/>[img width=90% [68.png]]<br/>//just kidding!//<p/>|
|,''Tutorial 1''<p/>The entire PETTIL development system fits in a single file, PETTIL.OBJ, which includes the core dictionary, symbol table, and the transient dictionary.  When an application written in PETTIL runs standalone, it only needs the core dictionary (under 6K).  The symbol table and transient dictionary  are overwritten (basically, every Forth word that has anything to do with the symbol table)to reuse the memory<br/>[img width=90% [loadrun.png]]<br/>//Load PETTIL and run it//<p/>|
|,''Tutorial 2''<p/>PETTIL takes several seconds to start, with most of this time spent re-indexing the symbol table.  [[FORGET]] and [[REHASH]] will also rebuild the symbol table.<p/>The message of the day is of the "in this day in history" variety, and it helps me to quickly distinguish different builds.<br/>[img width=90% [pettilstartup.png]]<br/>//After a few seconds, you should see this startup screen//<p/>|
|,''Tutorial 3''<p/>Let's try out a couple of commands.  The [[INFO]] command displays the hex values of several PETTIL user variables, and the [[DUMP]] command displays a range of memory, in this case the Sweet-16 register area.<br/>[img width=90% [pettiltest1.png]]<br/>//making sure things are working okay//<p/>|
|,''Tutorial 4''<p/>Wait! What was that up arrow thing?  The screen repainted but nothing seemed to happen, and PETTIL is ignoring my commands! Relax, we're in the PETTIL screen editor, which looks almost exactly like the native PET screen editor, because that's what it is.  Except for one thing.<br/>[img width=90% [editor.png]]<br/>//making sure things are working okay//<p/>|
|,''Tutorial 5''<p/>Hit ''STOP'' on the keyboard.The entire screen reversed, which lets you know when the editor is waiting for a command.<br/>[img width=90% [editor1.png]]<p/>Type the [[editor command|Editor Commands]] ''R'' //(reload)// and watch what happens. The editor reloads the screen from the last time [[UPDATE]] wrote it to the virtual memory buffer, in this case when we invoked the editor with screen-copy via the capture ([[^]]) command.  ''STOP R''eload offers some amount of 'undo' in the editor.
<br/>[img width=90% [editor2.png]]<br/>|


!!![[Personal Electronics Transactor Threaded Interpreted Language|http://pettil.tumblr.com]]
!!![[(A Forth-like language for my venerable Commodore PET 2001N)|http://github.com/chitselb/pettil]]
<<<
!!!ven-er-a-ble (adj.)
 3a : calling forth respect through age, character and attainments &lt;a venerable jazz musician&gt;; broadly : conveying an impression of aged goodness and benevolence &lt;encouraged by the venerable doctor's head-nodding&gt;
<<< Merriam Webster Dictionary
!!Origins
Back in 1977, my high school had a few tiny (4K & 8K; cassette tape storage
and BASIC) Wang 2200 computers.  I was instantly hooked.  Two years later, my
senior year, I changed high schools.  There was a TRS-80 Model I (with Level 2
BASIC!).  The staff at Delta College in Saginaw permitted me to use the DEC
PDP-11, and I had a TI-59 programmable calculator.  I was on that like ducks on bugs.

Also that year, I bought a PET 2001-16N.  Originally it came from Newman Computer
Exchange in Ann Arbor, MI.  I bought it second-hand from a friend for $1250.  I
later upgraded it to BASIC4 and 32K.  The photo on the
[[project tumblr blog|http://pettil.tumblr.com]]
is that very same PET, serial number 700251.

In 1981 I worked at ~ComputerLand Tysons Corner for several months, just
prior to and after the introduction of the original IBM PC model 5150. While
working at ~ComputerLand I picked up a copy of R.G. Loeliger's book, "Threaded
Interpretive Languages." Along with how to bootstrap Forth on a Z-80, that book
taught me two other things:

# That I could probably write my own Forth.
# Forth doesn't need to conform exactly to specific standards, as long as it is understandable by other Forth programmers.

I was very interested in the idea of Forth being a self-compiled language,
in other words, "Forth is written in Forth."  Also intriguing was the promise
of far greater speed than BASIC could hope to attain.  I had an idea for a
videogame, and I needed something better.

For a time (1984-1985) I worked as a Forth programmer on MMSForth for the
TRS-80&nbsp;Model&nbsp;4.  During the late '80s I explored and coded quite a bit in Blazin'
Forth on the Commodore 64.

I have spared no effort to bring you this Forth for the Commodore PET.  The
Forth-83 standard forms the basis of PETTIL, with some slight deviations along
the way.  In it, I have tried to embrace the Commodore PET hardware and
ROM environment in as many ways as I could think of.  The [[PETTIL screen editor|Editor Commands]]
will feel very much like the PET BASIC editor, because that's exactly what it
is.  You get a typical Forth development environment with interpreter,
compiler, editor and assembler.  These are some of the things that make PETTIL
unique:

!! Features
* Split data stack on zero page
* Direct threaded model
* 15 clock cycles [[NEXT|Inner Interpreter]] routine
* [[Split data stack|Split Data Stack]] on zero page
* Virtual memory on cassette tape
* Most nucleus words hand-coded as primitives
* Built-in 6502 assembler features Woz's SWEET-16
* Source code editor leverages the PET's screen editor
* PETSCII graphic characters may be used as word names
* Tweaks and optimizations everywhere to save clocks and bytes
* Small core dictionary, designed for target application development
* Symbol table and development environment not required at runtime
* Bloom filter and Pearson hash to speed dictionary searches and compilation
