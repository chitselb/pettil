tags: default
title: 37. Better NUMBERs Through Chemistry

This is called episode 37 because that's my guess where it would fall when the video series on designing the language is complete, but actually it's the first episode I recorded, to work out the basics of editing 5-7 minute video pieces.  This is about the Forth word NUMBER because I'm in the middle of coding NUMBER, and making a video about that, and moving my stuff around, and a million other things.  Here we go.

Once upon a time, numbers in PETTIL just worked.  A valid number is a string of digits, all of which are lower than the current number base. It may contain a decimal point, which makes it a 32-bit value, or not, which makes it a 16-bit value.   It can start with a `-` sign, which negates the value. Then one day I thought about adding a few things.  So I broke it and played around with a new design until I did this.

There should be a way to temporarily set the number base for just this one number.  I chose `#$%` for this, in part because those three characters are right next to each other in the alphabet.

```
# decimal
$ hexadecimal
% binary
```

Since the Sweet16 register area is fair game for Forth or assembler code too, let's put in a syntax (?!?!? syntax in Forth?) to move things around between the top of stack and the registers.  I chose `<=>` for this

```
< from
= exchange
> to
```

Then the 16-bit registers themselves, `R0` to `R15` and `N0` to `N8`

```
R Sweet16 registers
N N-area registers
```

Prefix rules:


||7|6|5|4|3|2|1|0|h
|`-`||||||||||
|`#`||||||||||
|`$`||||||||||
|`%`||||||||||
|`<`||||||||||
|`=`||||||||||


* register operators `nr`
* pushes the address of the register
* `n` N area registers N0..N8
* `r` Sweet16 registers R0..R15
* coloring outside the lines is okay e.g. R71 is TIME.mid TIME.low
* sets base to decimal
* returns ACC+2*r or R2+2*n
* works with `<=>` spaceship operators
* doesn't work with `#$%` base operators
* doesn't work with `-` negation operator
* ignores `.`

R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 N0 N1 N2 N3 N4 N5 N6 N7 N8
<R0 <R1 <R2 <R3 <R4 <R5 <R6 <R7 <R8 <R9 <R10 <R11 <R12 <R13 <R14 <R15 <N0 <N1 <N2 <N3 <N4 <N5 <N6 <N7 <N8
=R0 =R1 =R2 =R3 =R4 =R5 =R6 =R7 =R8 =R9 =R10 =R11 =R12 =R13 =R14 =R15 =N0 =N1 =N2 =N3 =N4 =N5 =N6 =N7 =N8
>R0 >R1 >R2 >R3 >R4 >R5 >R6 >R7 >R8 >R9 >R10 >R11 >R12 >R13 >R14 >R15 >N0 >N1 >N2 >N3 >N4 >N5 >N6 >N7 >N8

* using a base prefix

<$0 <$FFFF <#0 <#65535 <%0 <%1111111111111111
=$0 =$FFFF =#0 =#65535 =%0 =%1111111111111111
>$0 >$FFFF >#0 >#65535 >%0 >%1111111111111111


* spaceship operators `<=>`
* `<` from
* `=` exchange
* `>` to
* works with `nr` register operators
* works with `#$%` base operators
* doesn't work with `-` negation operator
* ignores `.`

* using `base` user variable
<0 <65535 <FFFF <1111111111111111
=0 =65535 =FFFF =1111111111111111
>0 >65535 >FFFF >1111111111111111


* base operators `#$%`
* temporarily set `base` for this number
* `#` decimal
* `$` hex
* `%` binary
* accumulate digits `base * digit +`
* doesn't work with `nr`
* works with `<=>`
* works with `-`

#0 #65535 -#32768 -#65535
$0 $A $00 $FF $FFFF $8000
%0 %1010 %0000000000000000 %1111111111111111

#0. -#10.000.000 #3.1415926 #2.71828
$.0 $.A $00 $FF. $.FFFF $8000.
%0.00 %.1010 %00000000.00000000 -%111111111111.1111

error `not found`
compile docconstant byte
compile docconstant word
compile zpfrom byte
compile zpexch byte
compile tozp byte
compile addrfrom word
compile addrexch word
compile toaddr word
compile clit byte
compile lit word
compile dlit double
leave a double $0. $FFFFFFFF. #3.1415926
leave a word  N0..N8 R0..R15 #0..#65535 -#32768..#32767 $0..$FFFF -$8000..$7FFF

-nr<=>#$%
jump table
