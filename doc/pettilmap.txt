PETTIL dictionary entry

head
+---------------+
|    CFA[low]   |  +0      Code field address
|    CFA[high]  |
+-+-+-+-+-+-+-+-+
|     [   len   ]  +2      Length field   1..31
[I]             |          Immediate bit  $80
| [V]           |          Vocabulary bit $40
|   [S]         |          Smudge bit     $20
+-+-+-+-+-+-+-+-+
|   name[1]     |  +3      Name field
|           ... |
|   name[len]   |
+~~~~~~~~~~~~~~~+
?   ident       ?  +len+3  Vocabulary identifier
+~~~~~~~~~~~~~~~+          (appended to members)


body
+---------------+
| code[1]       |  +0      Code field
|           ... |          (always executable code)
| code[n]       |
+---------------+
| data[1]       |          Parameter field
|           ... |
| data[n]       |
+---------------+


PETTIL zero page memory map
+-------------------------------+
|  Sweet16         PETTIL       |
+---------------+---------------+
|   R0 ACC      |               | $00-$01
+---------------+---------------+
|   R1          | User pointer  | $02-$03  up
+---------------+---------------+
|   R2          | DO-loop index | $04-$05  zi
+---------------+---------------+
|   R3          | DO-loop limit | $06-$07  zlim
+---------------+---------------+
|   R4          | Top of stack  | $08-$09  tos
+---------------+---------------+
|   R5          | N0  scratch   | $0a-$0b  n
+---------------+----  area,  --+
|   R6          | N1   local    | $0c-$0d  n+2
+---------------+----variables--+
|   R7          | N2            | $0e-$0f  n+4
+---------------+----         --+
|   R8          | N3            | $10-$11  n+6
+---------------+----         --+
|   R9          |               | $12-$13
+---------------+----         --+
|   R10         |               | $14-$15
+---------------+----         --+
|   R11 EXT reg |               | $16-$17
+---------------+----         --+
|   R12 SP      |               | $18-$19
+---------------+----         --+
|   R13 CPR reg |               | $1a-$1b
+---------------+----         --+
|   R14 STATUS  |               | $1c-$1d
+---------------+----         --+
|   R15 PC      |               | $1e-$1f  n+20
+---------------+---------------+
|   Data stack  |                 $20-$4f  stackl
|   (low)       |
|           ... |
+---------------+
|   Data stack  |                 $50-$7f  stackh
|   (high)      |
|           ... |
+---------------+---------------+
|   rnd         |   rnd+1       | $80-85   randu
+---------------+---------------+ used for 8-bit
|   rnd+2       |   rnd+3       | random numbers
+---------------+---------------+ by RANDU
|   rnd+4       |   rnd+5       | (First Book of KIM)
+---------------+---------------+
|   INC           IP            | $86-$8c  NEXT
+---------------+---------------+
|   INC           IP            |
|---------------+---------------+
|   JMP(ind)    |                          NEXTO
+---------------+---------------+
| Instruction     Pointer       |          IP
+---------------+---------------+

Kernel zero page
+---------------+---------------+---------------+
|   Jiffy clock (high to low)                   | $8d-$8f  TIME
+---------------+---------------+---------------+
|   IRQ vector                  | $90-$91  CINV
+-------------------------------+
|   BRK vector                  | $92-$93  CBINV
+-------------------------------+
|   NMI vector                  | $94-$95  NMINV
+-------------------------------+
| Standard PET  |                 $96-$fe
| kernel map    |
|           ... |
+---------------+
|   scratch     |                 $ff      STOREX
+---------------+

Editor packets build downward in RAM from the top, indicated by MEMSIZ
|                               |
|                               |
| video memory                  | <--- MEMSIZ         (e.g. $8000 on 32K PET)
+===============================+
| static 1K block buffer        | MEMSIZ-1024...MEMSIZ-1   ($7C00 on 32K)
| used by compression words ... |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         [     block 1 size    ] MEMSIZ-1024-2            ($7BFE on 32K)
[E]       [ (11 bits) 5..1026   ] bit 15   Editable bit, 1=source  0=data
| [C]     [                     ] bit 14   Compression bit, 1=raw  0=RLE
+-+-+-----+-+-+-+-+-+-+-+-+-+-+-+
| screen image RLE encoded      |   FF FF FF 05 80  <-- blank source screen
| stored as screen codes        |   00 00 00 00 00 00 00 00
+               +-+-+-+-+-+-+-+-+   00 00 00 00 00 0E  <-- empty data block
| BLOCK 1   ... |n m l k j i h g| linewrap table of 24 high bits $E1-$F8
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ bit 0 = line24, bit n = line1,
|f e d c b a 9 8|7 6 5 4 3 2 1 0| line0 $E0 is always "1"  ($7BF9)
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|C|             block 2 size  | total size of block 2
.              .                .
.              .                .
.              .                .
| BLOCK N                 ...   |
+-------------------------------+
| 0                             | zero marks the bottom of the block buffer
+-------------------------------+
| free memory                   |
|                               |
|                               |




PETTIL memory map
+===============================+
| Zero page / Data stack        | $0000-$00ff
+-------------------------------+
| 6502 stack / Return stack     | $0100-$01ff  RP
+-------------------------------+
| Terminal Input Buffer         | $0200-$0250  TIB
+-------------------------------+
| Standard PET kernel usage     | $0251-$03ff
=================================
| BASIC bootstrap program       | $0400-$040c basic
+-------------------------------+
| JMP ICE cold start vector     | $040d-$040f
+-------------------------------+
| Various - used to align SW16  | $0410-$045f
+-------------------------------+
| Sweet16 interpreter           | $0460-$0634 SW16
| Sweet16 extensions            | $0635       wordlen
+-------------------------------+
| Lower zero page image         | 141         zpbuf
+-------------------------------+
| warm start init values        |             userarea
| cold start init values        |
+-------------------------------+
| User variables                |             uarea
+-------------------------------+
| Error message table           |             errptr
+-------------------------------+
| W register (for EXECUTE)      | 4           w1
+-------------------------------+
| 6502 subroutines              |             setup
+-------------------------------+
| Dictionary                 |  |             rootlfa
|                            v  |
|                           ... |             endofile
+===============================+
| Free memory                   |             HERE
|                               |
|                           ... | +80         PAD
+-------------------------------+
| Editor buffers,            ^  | 1024
| including screen           |  |
| line wrap table           ... | $7fff       top of RAM (32K)
+===============================+
| PET Screen memory (25x40)     | $8000-$83ff VIDRAM
|                           ... |
+-------------------------------+
| unused ROM area               | $9000-$9fff
+-------------------------------+
| unused ROM area               | $a000-$afff
+-------------------------------+
| BASIC ROM                     | $b000-$dfff
|                           ... |
+-------------------------------+
| Screen Editor ROM             | $e000
|                           ... | $e7ff
+-------------------------------+
| I/O chips                     | $e800-$efff
| PIA1                          | $e810
| PIA2                          | $e820
| VIA                           | $e840
|                           ... |
+-------------------------------+
| Kernel ROM                    | $f000-$ffff
|                           ... |
+===============================+

NOTES:

Programs should be careful not to overwrite Sweet16 R1 / UP

$ff may be used by primitives for stashing the X register
(data stack pointer)

Labels from http://zimmers.net/cbmpics/cbm/PETx/petmem.txt


original PETTIL dictionary word structure
+---------------+
|   link[low]   |  +0      Link field
|   link[high]  |
+-+-+-+-+-+-+-+-+
[1]   [   len   ]  +2      Length field
| [I]           |          Immediate bit
|   [S]         |          Smudge bit
+-+-+-+-+-+-+-+-+
|0| name[1]     |  +3      Name field
|0|         ... |
|1| name[len]   |
+-+-------------+
| code[1]       |  +4+len  Code field
|           ... |          (always executable code)
| code[n]       |
+---------------+
| data[1]       |          Parameter field
|           ... |
| data[n]       |
+---------------+

