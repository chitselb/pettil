word
<<<<<<< Updated upstream
    (create) exists? ?char interpret petscii
=======
(create) exists? ?char petscii interpret
?char
>>>>>>> Stashed changes
skip
scan
move
$,
$!
"
."
(
.(


doqchar
    jsr slide
    ldy #2
    lda (ip),y
    sta tos
    jsr dodoes
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word _word
#include "page.i65"
    .word toin
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word exit

name=$,
e.g. `" FOO" $,`

|addr|before|<|after|<|h
|2000|here|-||3|
|2001||-||'F'|
|2002||-||'O'|
|2003||-||'O'|
|2004||-|here|-|
|2005||-||-|
|2006||-||-|
||||||
|2050|pad|3||3|
|2051||'F'||'F'|
|2052||'O'||'O'|
|2053||'O'||'O'|
|2054||-|pad|-|
|2055||-||-|

;--------------------------------------------------------------
#if 0
name=>"
stack=( text" == ) ( -- addr )
tags=string
flags=immediate
State-smart common code used by [["]] and [[."]]. Either encloses a
string in the dictionary preceded by its execution token, or performs
a runtime operation depending on [[STATE]]


d;m 0 8f;m 1f0 1ff;m 1ae0 1aff;z


```
: >"   ( text" == ) ( -- addr )
    @+ swap @ state @ ?: nip drop  ?: xt, execute ;
```
!!!pronounced: "do-quote"
#endif
#include "align.i65"
doquote
    jsr enter
#include "page.i65"
    .word _caller
#include "page.i65"
    .word cfetchplus
#include "page.i65"
    .word state
#include "page.i65"
    .word fetch
#include "pass.i65"
    .word duptor
#include "page.i65"
    .word rot
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rfetch
#include "pass.i65"
    .word pquerycolon
    .word _xtcomma
    .word drop
#include "page.i65"
    .word rot
#include "page.i65"
    .word rot

    .word plus
#include "page.i65"
    .word twostar
#include "pass.i65"
    .word plit
    .word doquote01
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit
doquote01
    .word

;--------------------------------------------------------------
#if 0
name="
stack=( text" == ) ( -- addr )
tags=string
flags=immediate

+    jsr doquote
+    .word _pquote               ; (")       compile
+    .word _stringtopad          ; $>PAD     runtime

State-smart string literal.  In compile mode, encloses a string
in the dictionary.  In interpret mode, returns the address of a
string ([[PAD]])

```
: "   ( text" == ) ( -- addr )
    [ ' (") ] literal   (."")  $>pad ;
```
!!!pronounced: "quote"
#endif
quote
    jsr doquote
    .byt 1

;--------------------------------------------------------------
#if 0
name=." ".&quot;"
stack=( text" == ) ( -- addr )
tags=string
flags=immediate

+    jsr doquote
+    .word _pquote               ; (")       compile
+    .word _stringtopad          ; $>PAD     runtime

State-smart string literal.  In compile mode, encloses a string
in the dictionary.  In interpret mode, returns the address of a
string ([[PAD]])

```
: "   ( text" == ) ( -- addr )
    [ ' (") ] literal   (."")  $>pad ;
```
!!!pronounced: "quote"
#endif
dotq
    jsr doquote
    .byt 3


<<<<<<< Updated upstream
skip
    clc
    .byt $29                        ; AND #
scan
    sec
    jsr locals2                     ; TOS = char; N0 = size1; N1 = addr1
    ;ldy #0
    dey
skipscan01
    iny
    lda (n+2),y
    dec n
    bmi +
    eor tos
    bcc skip01
    bne skipscan01
    adc #0
    ; scan found match

skip01
    beq skipscan01
foundmatch
    ;clc

    ; skip found non-match

skip
    brk
    .byt bs, <(skipscan01-*-2)      ; setup
skip01
    .byt bs, <(skipscan02-*-2)      ; next char
    .byt bz, <(skip01-*-2)
    .byt br, <(skipscan04-*-2)      ; exit

scan
    brk
    .byt bs, <(skipscan01-*-2)      ; setup
scan01
    .byt bs, <(skipscan02-*-2)      ; next char
    .byt bnz, <(scan01-*-2)
    .byt br, <(skipscan04-*-2)

skipscan01
    .byt ld | TOS   ; char
    .byt st | N1
    .byt pull       ; size1
    .byt st | N0
    .byt pull       ; addr1
    .byt rs
skipscan02
    .byt ldi | TOS
    .byt dcr | N0
    .byt bm1 , <(skipscan03-*-2)    ; leave if count < 0
    .byt sub | N1
    .byt rs
skipscan03
    .byt popd | R12 ; drop the BS return
skipscan04
    .byt dcr | TOS
    .byt inr | N0
    .byt ld | N0
    .byt push
    .byt nxt

skip
    brk
    .byt bs, <(skipscan01-*-2)      ; setup
skip01
    .byt bs, <(skipscan02-*-2)      ; next char
    .byt bz, <(skip01-*-2)
    .byt br, <(skipscan04-*-2)      ; exit

scan
    brk
    .byt bs, <(skipscan01-*-2)      ; setup
scan01
    .byt bs, <(skipscan02-*-2)      ; next char
    .byt bnz, <(scan01-*-2)
    .byt br, <(skipscan04-*-2)

skipscan01
    .byt ld | TOS   ; char
    .byt st | N1
    .byt pull
    .byt st | N0
    .byt pull       ; addr
    .byt rs
skipscan02
    .byt ldi | TOS
    .byt dcr | N0
    .byt bm1 , <(skipscan03-*-2)    ; leave if count < 0
    .byt sub | N1
    .byt rs
skipscan03
    .byt popd | R12 ; drop the BS return
skipscan04
    .byt dcr | TOS
    .byt inr | N0
    .byt ld | N0
    .byt push
    .byt nxt

>C:0000  09 00 09 00  09 00 20 00  0e 00 05 50  06 60 07 70   ...... ....P.`.p
>C:0010  0e 0e f0 1a  00 69 af 69  00 01 3f fd  04 0f 86 00   .....i.i..?.....
>C:0020  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................
>C:0030  aa aa aa aa  aa aa aa aa  aa aa aa aa  aa aa aa aa   ................
>C:0040  aa aa aa aa  aa aa aa aa  aa 69 0b 00  0b 02 00 01   .........i......
>C:0050  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................
>C:0060  bb bb bb bb  bb bb bb bb  bb bb bb bb  bb bb bb bb   ................
>C:0070  bb bb bb bb  bb bb bb bb  bb 3f 00 00  00 02 02 10   .........?......
>C:0080  00 00 00 00  70 06 e6 8b  e6 8b 6c 8d  70 00 0f 41   ....p.....l.p..A
>C:01f0  06 00 2d 20  b0 86 00 20  00 b0 70 ce  70 40 71 fd   ..- ... ..p.p@q.
>C:0200  20 20 43 52  20 20 20 49  4e 46 4f 00  00 00 00 00     CR   INFO.....
.C:0088  E6 8B       INC .ip        - A:20 X:2D Y:00 SP:f6 N.-B....   58979011

200 202 9
=======





name="


;--------------------------------------------------------------
#if 0
name="
stack=( text" == ) ( -- addr )
tags=string
flags=immediate
State-smart string literal.  In compile mode, encloses a string
in the dictionary.  In interpret mode, returns the address of a
string ([[PAD]])

```
: "   ( text" == ) ( -- addr )
    [ ' (") ] literal   (."")  $>pad ;
```
!!!pronounced: "quote"
#endif
#include "align.i65"
_quote
    jsr enter
#include "page.i65"
    .word plit
    .word pquote
#include "pad.i65"
    .word _pdqq
#include "page.i65"
    .word _stringtopad
    .word exit

;--------------------------------------------------------------
#if 0
name=(")
stack=( -- addr )
tags=inner,nosymbol
Returns the address of a string literal in the dictionary

~ this is pretty ugly
#endif
pquote
    clc
    bcc pdq01
pquote01
    ldy #2
    lda #3
    adc (ip),y
    jmp pad

;--------------------------------------------------------------
#if 0
name=(."")
stack=( cfa text" -- )
tags=compiler,i/o,nosymbol
common code for ." and "

```
: (."")  ( cfa -- )
    compiling?  dup>r  ?: xt, drop
    [char] " ?char swap  r>
    if
        $, rdrop
    then
    drop ;
```
~ gross.  doesn't handle paging properly
#endif
#include "align.i65"
_pdqq
    jsr enter
#include "page.i65"
    .word state
#include "page.i65"
    .word fetch
#include "page.i65"
    .word duptor
#include "page.i65"
    .word pquerycolon
    .word _xtcomma
    .word drop
#include "pad.i65"
    .word clit
    .byt '"'
#include "pad.i65"
    .word _qchar
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word qbranch
    .byt <(pdqq01-*+1)
#include "pad.i65"
    .word _stringcomma
#include "page.i65"
    .word rdrop
pdqq01
    .word exit

;--------------------------------------------------------------
#if 0
name=$>PAD $.>PAD $>PAD $>PAD
stack=( addr -- )
tags=string
Move a string at `addr` to the [[PAD]]
#endif
#include "align.i65"
_stringtopad
    jsr enter
#include "page.i65"
    .word _pad
#include "page.i65"
    .word duptor
#include "page.i65"
    .word over
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word _move
#include "page.i65"
    .word rfrom
    .word exit

>>>>>>> Stashed changes
