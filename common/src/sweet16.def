; sweet16.def
#echo .       sweet16.def               Defines for SWEET-16
#define R0    $0
#define R1    $1
#define R2    $2
#define R3    $3
#define R4    $4
#define R5    $5
#define R6    $6
#define R7    $7
#define R8    $8
#define R9    $9
#define R10   $a
#define R11   $b
#define R12   $c
#define R13   $d
#define R14   $e
#define R15   $f

#define ACC    $0
#define TOS    $1
#define N0     $2
#define N1     $3
#define N2     $4
#define N3     $5
#define N4     $6
#define N5     $7
#define N6     $8
#define N7     $9
#define N8     $a
#define R0L    $0
#define R0H    R0L+$1
#define R14L   R0L+$1c
#define R14H   R0L+$1d
#define R15L   R0L+$1e
#define R15H   R0L+$1f

; return                    leave Sweet16 (to 6502 mode)
#define rtn   $00

; branch if plus            R15 <-- R15 +/- offset if prior result is positive
#define bp    $01

; branch if minus           R15 <-- R15 +/- offset if prior result is negative
#define bm    $02

; branch if zero            R15 <-- R15 +/- offset if prior result is 0
#define bz    $03

; branch if not zero        R15 <-- R15 +/- offset if prior result is not 0
#define bnz   $04

; branch if -1              R15 <-- R15 +/- offset if prior result is -1
#define bm1   $05

; branch if not -1          R15 <-- R15 +/- offset if prior result is not -1
#define bnm1  $06

; next                      leave Sweet16 and jmp next
#define nxt   $07

; push to data stack        R0 --> TOS
#define push  $08

; pull from data stack      R0 <-- 2OS
#define pull  $09

; branch always             R15 <-- R15 +/- offset
#define br    $0a

; extension, address        runs native 6502 code, ended by RTS
#define ext   $0b

; branch to subroutine      (R12++) <-- R15; R12++ ; R15 <-- R15 +/- offset
#define bs    $0c

; return from subroutine    R15 <-- (R12--)
#define rs    $0d

; branch if carry           R15 <-- R15 +/- offset if R14H bit 1 is set
#define bc    $0e

; branch if no carry        R15 <-- R15 +/- offset if R14H bit 1 is clear
#define bnc   $0f

; set Rn, constant          Rn <-- constant
#define set $10

; load Rn                   R0 <-- Rn
#define ld $20

; store Rn                  Rn <-- R0
#define st $30

; load indirect Rn          R0L <-- (Rn++); R0H <-- 0
#define ldi $40

; store indirect Rn         (Rn++) <-- R0L
#define sti $50

; load double indirect Rn   R0L <-- (Rn++); R0H <-- (Rn++)
#define ldd $60

; store double indirect Rn  (Rn++) <-- R0L; (Rn++) <-- R0H
#define std $70

; pop indirect Rn           R0L <-- (--Rn); R0H <-- 0
#define pop $80

; store pop indirect Rn     (--Rn) <-- R0L
#define stpx $90

; add Rn                    R0 <-- R0 + Rn
#define add $A0

; sub Rn                    R0 <-- R0 - Rn
#define sub $B0

; pop double indirect Rn    R0H <-- (--Rn); R0L <-- (--Rn)
#define popd $C0

; compare Rn                R13 <-- R0 - Rn
#define cpr $D0

; increment Rn              Rn++
#define inr $E0

; decrement Rn              Rn--
#define dcr $F0

