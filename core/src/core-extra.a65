; core-extra.a65
#echo .       core-extra.a65            Extra stuff

;--------------------------------------------------------------
#if 0
name=VIDRAM
stack=( -- $8000 )
tags=primitive,i/o,const
Constant, address of PET video memory $8000
#endif
vidram
    jsr doconst
    .word VIDRAM

;--------------------------------------------------------------
#if 0
name=EOSCR
stack=( -- $83E8 )
tags=primitive,i/o,const
Constant, address of PET `vidram b/scr +`
#endif
eoscr
    jsr doconst
    .word VIDRAM+BPERSCR

;--------------------------------------------------------------
#if 0
name=BENJAMIN
stack=( -- $100 )
tags=primitive,i/o,const
Constant, 256

#endif
benjamin
    jsr doconst
    .word $100

;--------------------------------------------------------------
#if 0
name=BYE
stack=( -- )
tags=primitive,system,ext
Restores BASIC zero page and exits to READY. prompt

#endif
bye
    jsr aufwiedersehen          ; restore BASIC zpage
    jmp ($FFFA)

;--------------------------------------------------------------
#if 0
name=MON
stack=( -- )
tags=primitive,system,ext
Restores BASIC zero page and exits to the TIM monitor

#endif
mon
    jsr aufwiedersehen          ; restore BASIC zpage
    brk
    jsr aloha                   ; restore PETTIL zpage

;--------------------------------------------------------------
#if 0
name=XYZZY
stack=( -- )
tags=primitive,ext
This word doesn't do much (executes a `next`.  This magic word has no effect on a real hardware PET, but in my build setup it invokes the VICE debugger.

See `plugh` for low-level variant of this.

see also:  `pettil.dbg` configuration file

#endif
xyzzy
    jmp next                    ; used as a VICE monitor breakpoint

;--------------------------------------------------------------
#if 0
name=@SWAP!
stack=( addr1 addr2 -- )
tags=secondary,ext
Exchanges the 16-bit values at `addr1` and `addr2`

```
: @swap!   ( a b -- )
    dup>r @
    over @ r> !
    swap ! ;
```
#endif
#include "align.i65"
_fetchswapstore
    jsr enter
#include "page.i65"
    .word duptor
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word store
#include "page.i65"
    .word swap
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=PAUSE
stack=( flag -- )
tags=secondary,nucleus,ext
Waits for a keypress from the user before exiting

```
: pause   ( flag -- )
    if
        ." \nPRESS ANY KEY\n"
    then
    key drop ;
```
#endif
#include "align.i65"
_pause
    jsr enter
#include "pass.i65"
    .word qbranch
    .byt <(pause02-*+1)
#include "pass.i65"
    .word _pdq
    .byt <(pause01-*-1)
    .asc CR,"PRESS ANY KEY",CR
pause01
#include "page.i65"
pause02
    .word key
#include "page.i65"
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?PAUSE
stack=( -- )
tags=secondary,nucleus,ext
Scans keyboard and if 'space' was pressed, pauses until any key
is pressed.

```
: ?pause   ( -- )
    ?key bl =
    if false pause then ;
```
#endif
#include "align.i65"
_qpause
    jsr enter
#include "page.i65"
    .word qkey
#include "page.i65"
    .word bl
#include "page.i65"
    .word eq
#include "pass.i65"
    .word qbranch
    .byt <(qpause01-*+1)
#include "page.i65"
    .word false
#include "page.i65"
    .word _pause
#include "pass.i65"
qpause01
    .word exit

;--------------------------------------------------------------
#if 0
name=JIFFY@
stack=( -- d )
tags=primitive,system,ext
The number of jiffies since powerup or midnight as a double

```
: jiffy@   ( -- TIME.hi TIME.lo )
    !irq [ TIME ] cliteral 3c@ !irq ;
```
#endif
#include "align.i65"
jiffyfetch
    sei
    lda TIME+1
    pha
    lda TIME+2
    pha
    lda #0
    pha
    lda TIME
    pha
    cli
    jmp tworfrom

;--------------------------------------------------------------
#if 0
name=JIFFIES
stack=( u -- )
tags=secondary,ext

```
: jiffies   ( n -- )
    s->d jiffy@ d+
    begin
        jiffy@ 2over d>
    until 2drop ;
```
#endif
#include "align.i65"
_jiffies
    jsr enter
#include "page.i65"
    .word stod
#include "page.i65"
    .word jiffyfetch
#include "page.i65"
    .word dplus
#include "page.i65"
jiffies01
    .word jiffyfetch
#include "page.i65"
    .word twoover
#include "page.i65"
    .word _dgt
#include "pass.i65"
    .word qbranch
    .byt <(jiffies01-*+1)
#include "page.i65"
    .word twodrop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=RANDMASK
stack=( n -- mask )
tags=secondary,ext
returns the next power of 2 mask >= n

```
: randmask   ( n -- mask )
    1
    begin
        2* 2dup u<
    until nip ;
```
#endif
#include "align.i65"
_randmask
    jsr enter
#include "page.i65"
    .word one
#include "page.i65"
randmask01
    .word twostar
#include "page.i65"
    .word twodup
#include "page.i65"
    .word ult
#include "pass.i65"
    .word qbranch
    .byt <(randmask01-*+1)
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word nip
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=RNDMAX
stack=( max -- rnd )
tags=secondary,ext
generate a random unsigned byte less than `max`

```
: rndmax   ( max -- )
    dup 0= ?exit
    1- dup randmask
    begin
        randuc
        3dup and >
    while
        drop
    repeat
    and nip ;
```
#endif
#include "align.i65"
_rndmax
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word zeq
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word dup
#include "page.i65"
    .word _randmask
#include "page.i65"
rndmax01
    .word randuc
#include "page.i65"
    .word _threedup
#include "page.i65"
    .word andx
#include "page.i65"
    .word lt
#include "pass.i65"
    .word qbranch
    .byt <(rndmax02-*+1)
#include "page.i65"
    .word drop
#include "pass.i65"
    .word branch
    .byt <(rndmax01-*+1)
#include "page.i65"
rndmax02
    .word andx
#include "page.i65"
    .word nip
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=40/MOD
stack=( u -- u%40 u/40 )
tags=primitive,math,ext
[[Routine courtesy of Mike B.|http://forum.6502.org/viewtopic.php?f=2&t=3051#p34802]]
Thank you sir!

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
slashmod40
    jsr slip
    lda #0
    ldy #16
slmod40b
    cmp #20
    bcc slmod40c
    sbc #20
slmod40c
    rol tos
    rol tos+1
    rol
    dey
    bne slmod40b
slmod40d                        ; also an exit for
    sta stackl,x
    sty stackh,x
    jmp next

;--------------------------------------------------------------
#if 0
name=2NIP
stack=( d2 d1 -- d1 )
tags=primitive,double,ext
discards the 2nd double on the stack

#endif
twonip
    lda stackl,x
    ldy stackh,x
    inx
    inx
    bne slmod40d                ; bra

;--------------------------------------------------------------
#if 0
name=40*
stack=( u -- u*40 )
tags=primitive,math

Fast integer unsigned TOS multiply by 40, no overflow checking

#endif
fortytimes
    lda tos+1
    pha
    lda tos
    asl
    rol tos+1
    asl
    rol tos+1
    adc tos
    sta tos
    pla
    adc tos+1
    asl tos
    rol
    asl tos
    rol
    asl tos
    rol
    sta tos+1
    jmp next

;--------------------------------------------------------------
#if 0
name=(LITS)
stack=( a b c d e f n == ; -- a b c d e f )
tags=primitive,system,startup,ext,nosymbol
Works like `(LIT)` but for a group, will pile several inline literal
constants onto the stack.  Think if `(lits)` as `list` (of literals),
spelled sideways

```
: (lits)   ( 0 [args...] "name" == ; -- [args...] )
    caller c@+ 0 do @+ swap loop drop ; [23]

usage:
    : foo  [ 64 41 17 12  4 ] literals ;
    foo .s
```
The `setip` exit is used by `(.")` to move `ip` past the inline string.  See `padjust` and `pad` for variations on this
#endif
plits
    jsr slip
    ldy #2
    lda (ip),y
    sta n
plits01
    dex
    iny
    lda (ip),y
    sta stackl,x
    iny
    lda (ip),y
    sta stackh,x
    dec n
    bne plits01
setip                           ; useful entry point, pass in Y=offset
    jsr slide
    tya
    jmp pad

;--------------------------------------------------------------
#if 0
name=CSPLIT
stack=( ab -- b a )
tags=primitive,ext
Split the word on `tos` into two bytes
input: word `ab`
output: tos = high byte `a`; 2os = low byte `b`

: csplit ( ab -- 0b 0a )
    dup lsb swap msb ; [13]

~golf branch to msb to set tos?
#endif
csplit
    jsr slip
    ldy #0
    lda stackh,x
    sty stackh,x
    jmp put

;--------------------------------------------------------------
#if 0
name=CJOIN
stack=( ab cd -- db )
tags=primitive,ext
Join low byte of `2os` with high byte of `tos`
Combines tos.low/2os.low bytes into a word

e.g. `hex 12 34 cjoin . 3412  ok`

#endif
cjoin
    ldy tos
    lda stackl,x
    inx
    jmp put

;--------------------------------------------------------------
#if 0
name=CSWAP
stack=( ab -- ba )
tags=primitive,ext
Swaps high and low byte of TOS

cswap
    clc
    .byt $24                    ; BIT zp opcode
lsb
    sec
    lda tos
    bcs put0a
    tay
    .byt $24                    ; BIT zp opcode

#endif
cswap
    ldy tos
    lda tos+1
    jmp put

;--------------------------------------------------------------
#if 0
name=LSB
stack=( u -- c )
tags=primitive,ext
Returns the low byte of a cell

#endif
lsb
    lda tos
    .byt $2C                    ; BIT abs opcode
    ;fall through
;--------------------------------------------------------------
#if 0
name=MSB
stack=( u -- c )
tags=primitive,ext
Returns the most significant byte of a cell
#endif
msb
    lda tos+1
put0a
    ldy #0
    beq put                     ; bra

;--------------------------------------------------------------
#if 0
name=(CASE#)
stack=( addr idx -- )
tags=secondary,ext
`execute` the cfa at the `idx`-th word above `addr`, an ON-GOSUB-like capability

```
: (case#)   ( addr idx -- )
    2* + @ execute ;
```
#endif
#include "align.i65"
_casenum
    jsr enter
#include "page.i65"
    .word twostar
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
;#if 0
;name=/STRING
;stack=( addr1 u1 n -- addr2 u2 )
;tags=string
;Adjust the character string at c-addr1 by n characters. The resulting
;character string, specified by c-addr2 u2, begins at c-addr1 plus n
;characters and is u1 minus n characters long.
;
;!!!pronounced "slash-string"
;#endif
;#include "align.i65"
;_slashstring
;    jsr enter
;#include "page.i65"
;    .word duptor
;#include "page.i65"
;    .word minus
;#include "page.i65"
;    .word rfrom
;#include "page.i65"
;    .word plusunder
;#include "pass.i65"
;    .word exit

;--------------------------------------------------------------
#if 0
name=$INDEX
stack=( addr char -- +index|0 )
tags=primitive,string,ext
returns the (1-based) index of char within the counted string at `addr`.
otherwise returns `0`

#endif
dolindex
    jsr harvests2
    ;ldy #0                     ; thanks, `harvests2`
    lda (n),y
    tay                         ; Y = length of string
dolindex01
    lda (n),y
    eor tos
    beq dolindex02
    dey
    bne dolindex01
dolindex02
    tya
    jmp put0a

;--------------------------------------------------------------
#if 0
name=LOWER
stack=( -- )
tags=primitive,ext
Switch to upper/lowercase alphabet

#endif
lower
    lda #$0E
    .byt $2C    ; BIT abs opcode
    ;fall through
;--------------------------------------------------------------
#if 0
name=UPPER
stack=( -- )
tags=primitive,ext
Switch to uppercase/graphics alphabet

#endif
upper
    lda #$0C
    ;
    sta VIAPCR                  ; $E84C
    bne cmdoff02

;--------------------------------------------------------------
#if 0
name=CMDOFF
tags=primitive,i/o,kernel
stack=( -- )
Restore default I/O channels
#endif
cmdoff
    stx z
    jsr CLRCHN
    ldx z
cmdoff02
    jmp next

;--------------------------------------------------------------
#if 0
name==CURSOR
stack=( addr|0 -- )
tags=primitive,ext
Exchange six bytes in `cursor` user variable with six bytes at `addr` . When arg is 0, swap `cursor` with zeropage firmware cursor instead of six consecutive bytes elsewhere

#endif
exchgcursor
    stx z
    ldx #<(-6)
    ldy #0
excur01
    lda tos+1
    bne excur02
    ldy firmwarecursor-250,x
excur02
    lda (tos),y
    pha
    lda usercursor-250,x
    sta (tos),y
    iny
    pla
    sta usercursor-250,x
    inx
    bmi excur01
    ldx z
    jmp drop

firmwarecursor
    ;    $AF   $C6  $D5  ($C4)     $D8
    .byt DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX
    ;    3     in   lin  lin*40    span
    ;                    +blkbuf

#print (*-vidram)
