; pettil-core.a65
#echo .       pettil-core.a65
#echo .       PETTIL - Personal Electronics Transactor
#echo .                Threaded Interpretive Language
#echo .
; PETTIL core dictionary

#include "options.def"
#include "inc/cbm.def"
#include "inc/pettil.def"

#ifdef ARG1
#echo ARG1
#echo (ROM_PET_CHITSELB & ARG1)
#echo ROM_PET_CHITSELB
;#print ROM_PET_CHITSELB
#echo ROM_PET_4
;#print ROM_PET_4
#echo ROM_PET_UPGRADE
;#print ROM_PET_UPGRADE
#echo ROM_VIC20
;#print ROM_VIC20
#echo ROM_PET_80
;#print ROM_PET_80
#echo ROM_C64
;#print ROM_C64
#endif
#ifdef ARG2
#echo ARG2
#endif




;==============================================================
;====                     BASIC bootstrap                  ====
#define basic $0401
*=basic-2
#print basic
;--------------------------------------------------------------
#if 0
name=BASIC2PETTIL
tags=system,nosymbol
! BASIC bootstrap `$0401`

PETTIL loads as a BASIC program consisting of the line,

`10 SYS1037`

PETTIL is designed with the idea of having a clear separation between
`pettil-core` (which is this file) and any application code running
on top of core.

The bonus of doing this is to release about 10K of RAM when `pettil-studio`
and the symbol table are not resident.  PETTIL Studio behaves like any other
applications coded to run on top of `pettil-core`.
#endif
basic2pettil
    .word basic                 ; PRG file load address `$0401`
    .word basend
    .word 10
    .byt $9E                    ; SYS token
    .asc "1037",0               ; restart #1 (of 3) `liftoff`
basend
    .word 0

;--------------------------------------------------------------
#if 0
name=RESTART
stack=( -- )
tags=system,startup,default
Performs the `startup` action.  Usually results in a `warm` boot,
when reentering PETTIL from BASIC.

During startup, `restart` executes four times
1. when called from BASIC to `liftoff`
2. to start the upper dictionary
3. at the end of `cold`
4. finally, at the end of `mackinac` to get to the first `warm` boot



```
: restart   ( -- )
    startup @  execute ;
```
#endif
restart
    jmp (userstartup)

; check for build at proper point in memory
#if (* <> $0410)
#echo PETTIL Build Error - Program counter is not at $0410!
#echo You moved something, didn't you?  PETTIL expected BASIC
#echo to transfer control here to kick things off.  This is a problem.
#endif (pettil address check)
#print *
;====                     BASIC bootstrap                  ====
;==============================================================

;--------------------------------------------------------------
#if 0
name=ZPBUF
tags=system,nosymbol,startup,self-modifying
!Zero page buffer and NEXT routine `$0410`

|ROM_PET_4|$00-$8C|
|ROM_PET_UPGRADE|$00-$8C|
|ROM_PET_ORIGINAL||
|ROM_VIC20||
|ROM_C64|$02-$8C|

zero page swap region, first 141 bytes

`aloha` swaps this region with a little over half of zero page when
coming from or going back to BASIC

* Sweet16 stack pointer initialized to `$0100` here
* copy of NEXT routine is here
#endif
zpbuf
;$0000
    .word $0000,$1001,$2002,$3003   ; overlapping
    .word $4004,$5005,$6006,$7007   ; PETTIL registers
    .word $8008,$9009,$A00A,$B00B   ; and
    .word $0100,$D00D,$E00E,$F00F   ; Sweet16 registers ()
;$0020
    .dsb bos,$aa                ; low stack
;$0050
    .dsb bos,$bb                ; high stack
;$0080
    .word 0, 0, uarea           ; zi, zlim, up
;
;       NEXT
;               +IP
;               [IP] -> PC
;
; PETTIL's minimalist NEXT.
;
; PETTIL's NEXT routine puts responsibility for page alignment on the compiler,
; greatly improving execution speed vs. a more conventional indirect-threaded
; design.
;
;$0086
zpnext
    inc ip              ;[5]    ; (next)
    inc ip              ;[5]    ; (next1)
;ip = *+1
    jmp ($cafe)         ;[5]    ; (nexto)

                        ;[15]   ; clock cycles total!!!
;$008D TIME                     ; end of zero page buffer, Jiffy clock is here

;==============================================================
; powers of 2 in a lookup table
power2
    .byt $80,$40,$20,$10,$08,$04,$02,$01

;--------------------------------------------------------------
#if 0
name=PLUGH
tags=nosymbol
An isolated RTS instruction, used only as a VICE xpet debugger breakpoint, set in the `pettil.dbg` config file. [[XYZZY]] is the high-level Forth variant of this.

```
PETTIL naming conventions

Word    Explanation
0foo    Clear foo, reset foo
foo0    Initial state of foo
+foo    Add to foo
-foo    Remove from foo, or disable foo
foo!    Store a foo at an address
foo@    Fetch a foo from an address
!foo    Set foo, or enable foo
@foo    Get foo (sorry GitHub user @foo)
<foo    From foo
=foo    exchange with foo
>foo    Convert to foo, or push onto foo
foo>    Pop from foo
?foo    Optionally do foo
foo?    Return a boolean value
foo'    Accept an address or xt as input
'foo    Address or xt of foo
foo"    Parse a string and do foo
"foo    Accept a string as input
foo,    Compile a foo, or assemble foo instruction
#foo    Number of foos
foo#    Foo index
/foo    Size of foo
foo:    Define a foo
.foo    Print a foo
[foo]   Do foo at compile time
(foo)   Internal implementation of foo, runtime action of foo



Some examples of how this might look in your assembly code:

    .byt ld | N0
    .byt std | N2
    .byt ext                    ; invoking VICE debugger from Sweet16
    .word plugh
    .byt ld | N3
    .byt nxt

    jsr something
    jsr somethingelse
    sta anyplace
    jsr plugh                   ; invoking VICE debugger from 6502
    ldx anyplace
```
#endif
plugh
    rts
;   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
; .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .


;==============================================================
;==== ALL SWEET16 OPERATION HANDLERS MUST BE ON SAME PAGE! ====
;
; Before this point there should be exactly 156($9C) bytes of code
; and data, beginning at $0401 (BASIC), with the last byte at $04A5.
; This is where `pettil-core` page-aligns Sweet-16.
; <$0401> | BASIC | $9C bytes of padding |
; <$04A6> | Sweet16 prequel |
; <$0500> | Sweet16 opcode handler page |
; <$0600> | Sweet16 sequel |
; <$0660> | User variables init/storage |
; check for build at proper point in memory
#if (* <> $04A6)
#echo PETTIL Build Error - Program counter is not at $04A6!
#echo You moved something, didn't you?  Sweet16 expected to
#echo load at $04A6 (1190).  This is a problem.
#echo .       program counter is now:
#print *
#endif
;
;==== ALL SWEET16 OPERATION HANDLERS MUST BE ON SAME PAGE! ====
;==============================================================
#include "inc/sweet16.def"
#include "sweet16.a65"

;--------------------------------------------------------------
#if 0
name=USERAREA
stack=( -- )
tags=system,uservar,nosymbol
!User Area
Initialization values & storage for User Variables

#endif
userarea
; ---- initialization values per each `cold`
user0base       .word 10
user0filename   .word currname+3 ;1 counted string, default "PETTILPACKETS"
user0sanum      .word 0         ;2 default secondary address is 0, (PRG file)
user0drvnum     .word 1         ;3 default drive (datasette #1),

; ---- UP points to here, all live user variables
uarea
; ---- not re-initialized or initialized another way
userlimit       .word 0         ; 0 here means use BASIC MEMTOP($34)
usersp0         .word bos+1     ; `abort` does `sp!`
userrp0         .word $01FE     ; `quit` does `rp!`
userirqtoggle   .word 0
userbrktoggle   .word SW16^TIMBRK
userstartup     .word liftoff       ;`studio` needs these two in ~#userorder
userwarning     .word _doterr       ;1/ `studio` replaces this with `error.msg`
userdp          .word there
userfence       .word fencepost
userheight      .word 25
userwidth       .word 40
usersymtab      .word 0

ucore
    .dsb uarea-userarea+80,$cc  ; storage for user variables

; ---- re-initialized by `cold`
userbase        = ucore+0
userfilename    = ucore+2
usersanum       = ucore+4
userdrvnum      = ucore+6

ustart = ucore+8
uservmbuf       = ustart+0      ;1 There is code that relies on adjacency of
usernumblk      = ustart+2      ;2 1 these sets of uservariables, so that bytes
userscr         = ustart+4      ;3 2 and clocks may be saved
userprev        = ustart+6      ;  3 most recently referenced block
userblk         = ustart+8      ;1 4
userin          = ustart+10     ;2                                        8-bit
userlin          = userin+1     ; upper byte is physical line counter
userspan        = ustart+12     ;3                                        8-bit
usereoi          = userspan+1   ; upper byte is end of input flag
usernumline     = ustart+14     ;4
usernumout      = ustart+16     ;5
userediting     = ustart+18     ;
userdpl         = ustart+20     ;                                         8-bit
userhld         = ustart+22     ;
usercursor      = ustart+24     ;                                       6 bytes

uendcore = ustart+30            ; mark our place for TDICT uservar base

;--------------------------------------------------------------
#if 0
name=ZPMODE
stack=( -- )
tags=system,uservar,nosymbol,data
!User Area

This one's like a meta-User variable, in that it has to function properly
even when PETTIL is switched out (reasons: BASIC; TIM monitor; cassette I/O)

It's only one byte, which makes it a convenient thing to move around to
word-align something like `userarea`

A byte used as a semaphore by `aloha` to test/indicate whether BASIC (0)
or PETTIL (1) occupies (a bit more than half of) zero page

#endif
zpmode
    .byt 0

;==============================================================
#if 0
name=COREBASE
tags=nosymbol
When changing these files, also modify `xap.rb`

#endif
corebase
#print *
#include "core-locals.a65"
#print *
#include "core-user.a65"
#print *
#include "core-nucleus.a65"
#print *
#include "core-extra.a65"
#print *
#include "core-inner.a65"
#print *
#include "core-double.a65"
#print *
#include "core-vm.a65"
#print *
#include "core-io.a65"
#print *
#include "test-general.a65"
#print *
;source modules can be added to `core`
;#include "../../studio/src/pettil-name.a65"
;#print *
;#include "../../studio/src/pettil-number.a65"
;#print *

;lower location for `fencepost` for turnkey apps (without `cold`)
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;==============================================================
; If your app will never `restart` again, it would be okay to
; move FENCE to ` ' restart ` before invoking `restart`
; * No in and out of BASIC/TIM
; * tape I/O will still work
; * no restart with COLD
; * no editor (needs IRQ switching)
;==============================================================

;--------------------------------------------------------------
#if 0
name=COLD
stack=( -- )
tags=system,startup
COLD starts up the system and when invoked as a command will attempt
to restore the system to as pristine a condition as possible.
#endif
#include "align.i65"
_cold
    jsr alohard
    ldx usersp0
    dex
#include "align.i65"
    jsr toforth                 ; transition from 6502 Assembly to Forth
#include "pass.i65"
    .word plits
    .byt 5
    .word ustart                ; erase
    .word uendcore-ustart
    .word userarea              ; cmove
    .word ucore
    .word uarea-userarea
#include "page.i65"
    .word cmove
#include "page.i65"
    .word erase
#include "page.i65"
coldpatch
    .word next                  ; later transformed into `rehash`
; ~ '#include page' can't be used here, but this may not break page alignment
    .word next                  ; later transformed into `emptybuffers`
#include "pass.i65"
    .word restart               ; restart #2 (of 3) `studio`

;--------------------------------------------------------------
#if 0
name=AUFWIEDERSEHEN
tags=startup,nosymbol
Exit Forth, restoring BASIC z.p.
#endif
aufwiedersehen
    lsr zpmode                  ; lights off!
    beq aloha2                  ; bra

;--------------------------------------------------------------
#if 0
name=ALOHARD
tags=startup,nosymbol
`aloha` invoked by `cold` and `liftoff` also closes files
#endif
alohard
    cld                         ; clear decimal mode
    jsr CLRCHN                  ; restore default I/O channels
    jsr CLALL                   ; close all open files

;--------------------------------------------------------------
#if 0
name=ALOHA
tags=startup,nosymbol
Flips back and forth between BASIC and PETTIL modes.

* Swap part of zero page with zpbuf
* required by tape I/O

* used to access TIM monitor
* toggle Sweet16 BRK vector at ($0090)
* `pettil-studio` does not use the IRQ vector except in the Editor
* performs swapzp, toggleirq and togglesw16
#endif
aloha
    lsr zpmode                  ; check lights
    inc zpmode                  ; lights on!
    bcs aloha4                  ; were the lights already on?
aloha2                          ; entry point for tape I/O
    jsr toggleirqbrk
    stx z                       ; preserve Forth data stack pointer
    ldx #TIME                   ; loop from ACC $00 up to the jiffy clock $8D
aloha3
    lda <(ACC-1),x
    ldy zpbuf-1,x
    sty <(ACC-1),x
    sta zpbuf-1,x
    dex
    bne aloha3
    ldx z                       ; restore Forth data stack pointer
aloha4
    rts

;upper location for `fencepost` for development (includes `cold`)
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;==============================================================
; move the `fencepost` label to either lower or upper location
;==============================================================
;--------------------------------------------------------------
#if 0
name=FENCEPOST
tags=system,startup,nosymbol
This is where [[FENCE]] points, and also [[DP]] after initial
build of the symbol table.  First-run startup code beyond
this point (`fencepost` to `there`) may not have symbol table
entries pointing to it.
#endif
fencepost
; beyond lies the Abyss...
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;==============================================================
;==============================================================
;===-===-===-===-===-===-===-===-===-===-===-===-===-===-===-==
;==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
;=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=--=-
;---=---=---=---=---=---=---=---=---=---=---=---=---=---=---=--
;--------------------------------------------------------------
;---.---.---.---.---.---.---.---.---.---.---.---.---.---.---.--
;--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--.--
;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
;..............................................................
;... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ..
;.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
;. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
; .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
;   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
;.     .     .     .     .     .     .     .     .     .     .
;   .        .        .        .        .        .        .
;   .     .        .             .              .     .
;                        .             .                   .
;         .     .              .            .
;
;
;
;
;
;

;--------------------------------------------------------------
#if 0
name=LIFTOFF
tags=system,startup,throwaway,nosymbol
A primitive relocator to move already-linked code to upper memory
Gets us from `pettil-core` to module LAUNCH

* CMOVE transient dictionary to upper memory
* EXECUTE first word in transient dictionary

Setting the `size` of the transient dictionary to 0 will prevent
moving anything; control still transfers to `loadaddr+2`.

```
: liftoff   ( -- )
    ['] there @+ tuck over @ 2+ cmove 2+ execute
```
#endif
#include "align.i65"
liftoff
    lda userlimit
    ldy userlimit+1
    bne fs01                    ; something there already? leave it alone
    lda MEMSIZ                  ; nothing there?  get it from BASIC MEMSIZ($34)
    ldy MEMSIZ+1
fs01
    sta userlimit
    sty userlimit+1
    jsr alohard
    ldx usersp0
    dex
#include "align.i65"
    jsr toforth                 ; transition from 6502 Assembly to Forth
#include "pass.i65"
    .word plit
    .word there
#include "page.i65"
    .word fetchplus             ; link to upper dictionary
#include "page.i65"
    .word tuck
#include "page.i65"
    .word over
#include "page.i65"
    .word fetch
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word cmove                 ; but first, make an upper dictionary
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word startup
#include "page.i65"
    .word store                 ; `studio` -> `startup` for 2nd `restart`
#include "page.i65"
    .word _cold

;--------------------------------------------------------------
#if 0
name=SPLASHIRQ
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
#include "align.i65"
splashirq
    dec sploosh
    bne splashirq03
    lda #60
    sta sploosh                 ; jiffies between letters
    lda #1
    sta splotch+3               ; set the mainline `doletter` flag

splashirq03
    lda splushh+3
    sta splush
splashirq01
    jsr randu
    tax
    lda VIDRAM,x
    jsr splish
    sta VIDRAM,x
    lda VIDRAM+$100,x
    jsr splish
    sta VIDRAM+$100,x
    dec splush
    bne splashirq01
;    inc $83E7
    jmp MAINIRQ

splish
    tay
    eor #$4C                    ; swap \ <--> / else leave it alone
    and #$7C
    bne splish01
    tya
    eor #3
    tay
splish01
    tya
    rts

splush
    .byt 1
splushh
    jsr docreate
    .byt 15
sploosh
    .byt 120
splotch                         ; flag for mainline routine
    jsr docreate
    .byt 0
splash
    .byt 0
currletter
    jsr docreate
    .word pettillogo

;--------------------------------------------------------------
#if 0
name=?TRIGGER
stack=( -- )
tags=system,startup,nosymbol

```
: qtrigger   ( -- )
    splotch c@
    if
        splotch coff
    then
;
```
#endif
#include "align.i65"
_qtrigger
    jsr enter
#include "page.i65"
    .word splotch
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word qbranch
    .byt <(qtrigger01-*+1)
#include "page.i65"
    .word splotch
#include "page.i65"
    .word coff
#include "page.i65"
    .word _doletter
#include "pass.i65"
qtrigger01
    .word exit

;--------------------------------------------------------------
#if 0
name=BARF
stack=( -- false )
tags=system,startup,nosymbol
primitive to fill the screen with a rapidly changing diagonal
maze effect

#endif
barf
    stx z
    lda #$93
    jsr $FFD2
    ldx #0
    lda #$4d
barf01
    sta $8000,x
    sta $8100,x
    sta $8200,x
    sta $8300,x
    dex
    bne barf01
barf02
    jsr randu
    tax
    lda VIDRAM,x
    jsr splish
    sta VIDRAM,x
    lda VIDRAM+$100,x
    jsr splish
    sta VIDRAM+$100,x
    lda VIDRAM+$200,x
    jsr splish
    sta VIDRAM+$200,x
    lda VIDRAM+$300,x
    jsr splish
    sta VIDRAM+$300,x
    dec barfctr
    bne barf02
    dec barfctr+1
    bne barf02
    ldx z
    jmp next

;--------------------------------------------------------------
#if 0
name=BARF.CTR
stack=( -- false )
tags=system,startup,nosymbol
counter used by `barf`, number of times to twiddle the maze
#endif
barfctr
    .word 5000

;--------------------------------------------------------------
#if 0
name=FLIPPER
stack=( -- false )
tags=system,startup,nosymbol

```
: flipper  2-
    9 40* vidram dup +under
    do
        i c@ c>s 0<
        if $66 i c! then
    loop ;
```
#endif
#include "align.i65"
_flipper
    jsr enter
#include "page.i65"
    .word vidram
#include "page.i65"
    .word nine
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word plus
#include "page.i65"
    .word vidram
#include "pass.i65"
    .word pdo
    .byt <(flipper03-*+1)
#include "page.i65"
flipper01
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word duptor
#include "pass.i65"
    .word clit
    .byt $E9
#include "page.i65"
    .word eq
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word ctos
#include "page.i65"
    .word zlt
#include "page.i65"
    .word xor
#include "pass.i65"
    .word qbranch
    .byt <(flipper02-*+1)
#include "pass.i65"
    .word clit
;    .byt $66  ; shift-&
;    .byt $BA  ; rvs-:
    .byt $A0
#include "page.i65"
    .word i
#include "page.i65"
    .word cstore
#include "page.i65"
flipper02
    .word ploop
    .byt <(flipper01-*+1)
#include "pass.i65"
flipper03
    .word exit

;--------------------------------------------------------------
#if 0
name=DOLETTER
stack=( -- false )
tags=system,startup,nosymbol
installed by `splashirq` to get in there and display something during FORGET

Replaces either (forget).pass1 or (forget).pass2 for one call
returns "false" to iterate t
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

```
: doletter
    'origr11 @ >r11 drop
    'currletter dup @ @+ dup
    ?: $. drop
    swap ! ;

: doletter
    'currletter dup @ @+ ?dup
    if
        $. over !
    then  drop ;
```
#endif
#include "align.i65"
_doletter
    jsr enter
;#include "pass.i65"
;    .word plit
;    .word $83E7
;#include "page.i65"
;    .word oneplusstore
#include "page.i65"
    .word currletter
#include "page.i65"
    .word fetch
#include "page.i65"
    .word fetchplus
#include "page.i65"
    .word swap
#include "page.i65"
    .word currletter
#include "page.i65"
    .word store
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit

pettillogo
    .word pl0,pl1,pl2,pl3,pl4,pl5,pl6,pl7,pl8,pl9,pl10

#include "align.i65"
pl0
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl0x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,"SORTING SYMBOLS... 30 SECONDS"
pl0x
#include "pass.i65"
    .word exit

#include "align.i65"
pl1
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl1x-*-1)
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,RVSON,$CE,RVSOFF,$E9,RVSON
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$E9,$F2,$CE,$CE,$CE,$DF
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,RVSOFF,$E9
pl1x
#include "page.i65"
    .word one
#include "page.i65"
    .word splushh
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit


#include "align.i65"
pl2
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl2x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$F1,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $EB,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON
pl2x
#include "pass.i65"
    .word exit

#include "align.i65"
pl3
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl3x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,RVSON,$E9,$F2,$CE,$CE,$CE,$CE,CRSRLEFT
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
pl3x
#include "pass.i65"
    .word exit

#include "align.i65"
pl4
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl4x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,RVSOFF,$D6,RVSON,CR,CR,CR,CR,CR,CR,CR
    .asc "     PERSONAL ELECTRONIC TRANSACTOR",CR
pl4x
#include "page.i65"
    .word nine
#include "page.i65"
    .word splushh
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

#include "align.i65"
pl5
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl5x-*-1)
    .asc "     THREADED INTERPRETIVE LANGUAGE",CR
pl5x
#include "page.i65"
    .word _flipper
#include "pass.i65"
    .word exit

#include "align.i65"
pl6
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl6x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
pl6x
#include "page.i65"
    .word one
#include "page.i65"
    .word splushh
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

#include "align.i65"
pl7
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl7x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,RVSOFF,$E9,RVSON
pl7x
#include "pass.i65"
    .word exit


#include "align.i65"
pl8
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl8x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $EB,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$CE,RVSOFF,$E9
pl8x
#include "pass.i65"
    .word exit

#include "align.i65"
pl9
    jsr enter
#include "page.i65"
    .word _flipper
#include "page.i65"
    .word exit

#include "align.i65"
pl10
    jsr enter
#include "pass.i65"
    .word plit
    .word pettillogo+2*10
#include "page.i65"
    .word currletter
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SPLASH
stack=( -- )
tags=system,startup,nosymbol
Set up the loader splash screen entertainment
#endif
#include "align.i65"
_splash
    jsr enter
#include "page.i65"
    .word barf
#include "pass.i65"
    .word plits
    .byt 3
    .word splashirq
    .word VIDRAM+11*40
    .word 14*40
#include "page.i65"
    .word blank
#include "page.i65"
    .word _banner
#include "page.i65"
    .word irqstore
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BANNER
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
#include "align.i65"
_banner
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (setupmsg01-*-1)
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    "    ",RVSON,"FORTH FOR THE COMMODORE PET 2001",CR,CR,CR
    .asc    "       ",RVSON,"GITHUB.COM/CHITSELB/PETTIL",CR,CR
setupmsg01
#include "pass.i65"
    .word _pdq
    .byt (bannermsg01-*-1)      ; length of bannermsg
    .asc    "VERSION: 2018-11-23",CR
    .asc    "1889 THE FIRST JUKEBOX BEGINS OPERATION",CR
    .asc    "     AT THE PALAIS ROYALE SALOON IN SAN",CR
    .asc    "     FRANCISCO",CR
            ;123456789.123456789.123456789.123456789.
bannermsg01
#include "pass.i65"
    .word exit

there
#print *
#echo . you are there

; concatenate pettil-studio (or some other) object module here
; first word is starting address for indirect `jmp (there)`
;==============================================================
;   .word load address          ; e.g. `$68FE`
;$<68FE>
;   .word size                  ; there+2 contains (there+4)
;<$6900>
;                               ; <-- cfa of module initialization
