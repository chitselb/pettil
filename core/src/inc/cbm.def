; cbm.def
#echo .       cbm.def                   Symbols only -- Commodore PET ROM, I/O, Zero page and character set

; Upgrade ROM / 4.0 ROM / my PET
#if romoptions & 1

;"mostly from http://zimmers.net/cbmpics/cbm/PETx/petmem.txt
;zero page
;"Pointer: Highest Address Used by  BASIC
; Pointer to highest address used by BASIC (top of RAM)
#define MEMSIZ      $34
; Temporary storage for FLPT value.
#define TEMPF1      $54
; part of CHRGET, whether to inhibit or display system messages
#define             $78
; Real-Time Jiffy Clock (approx) 1/60 Sec, lowest zeropage used by kernel
#define TIME        $8D
;"Vector: Hardware Interrupt [3: E62E, 4: E455]
#define CINV        $90
;"Vector: BRK Instr. Interrupt [3: FD17, 4: D478]
#define CBINV       $92
;"Vector: Non-Maskable Interrupt [3:C389,4: B3FF]
#define NMINV       $94
; Kernel I/O Status byte (ST)
#define STATUS      $96
; Current Key Pressed 255 = No Key
#define LSTX        $97
; flag - print shifted chars.
#define SDFX        $98
;"Flag: STOP key / RVS key
#define STKEY       $9B
; Flag 0 = Load, 1 = Verify (Kernel & BASIC)
#define VERCK       $9D
; No. of Chars. in keyboard Buffer (Queue)
#define NDX         $9E
; Pointer End of Logical Line for INPUT
#define INDX        $A1
; Key Image
#define KEYIMG      $A6
; Cursor blink enable 0=flash cursor
#define BLNSW       $A7
; Timer countdown to toggle cursor
#define BLNCT       $A8
; True character under cursor
#define GDBLN       $A9
; Flag - last cursor blink on/off
#define BLNON       $AA
; Flag INPUT or GET from Keyboard
#define CRSW        $AC
; No. of Open Files / Index to File Table
#define LDTND       $AE
; Default Input Device (0)
#define DFLTN       $AF
; Default Output Device (3)
#define DFLTO       $B0
; Tape buffer leading character (eg 1=PRG 2=DATA 3= 4=SEQ 5=EOT)
#define TAPEID      $B4
; Cassette Write/Sync Countdown (64=00A5)
#define CNTDN       $BA
; "Pointer: Tape I/O Buffer #1 (00-C0)
#define BUFPNT      $BB
; $bc  "Pointer: Tape I/O Buffer #2 (00-C0)
; "Cassette Short Cnt (64=00AB): counter of seconds before tape write / checksum
#define RIPRTY      $C3
; pointer current screen line address
#define PNT         $C4
; Cursor Column on Current Line
#define PNTR        $C6
; pointer - tape buffer/screen scrolling
#define SAL         $C7
; Tape End Addresses/End of Program
#define EAL         $C9
; Quote flag, 0=direct cursor, else printable ctrl chars
#define QTSW        $CD
; Length of Current File Name
#define FNLEN       $D1
; Current Logical File Number
#define LA          $D2
; Current Secondary Address
#define SA          $D3
; First Address (current device number)
#define FA          $D4
; Length of current line (39 or 79)
#define LNMX        $D5
; ..d7 pointer - start of tape buffer (027A or 033A)
#define TAPE1       $D6
; Current Cursor Physical Line Number
#define TBLX        $D8
; Current Character to Print
#define DATAX       $D9
; file name address
#define FNADR       $DA
; number of keyboard inserts outstanding
#define KBINS       $DC
; 25-byte screen wrap table
#define LDTB1       $E0
; counter to speed ti by 6/5
#define TI65SPEED   $F8
; cassette tape motor interlock #1
#define CAS1        $F9
; cassette tape motor interlock #2
#define CAS2        $FA
; I/O Start Address
#define STAL        $FB
; System input buffer 0200-0250
; line buffer for TIB
#define BUF         $0200
; Keyboard Buffer Queue (FIFO)
#define KEYD        $026F
; Cassette 1 tape buffer (192 bytes)
#define CAS1BUF     $027A
; Cassette 2 tape buffer (192 bytes)
#define CAS2BUF     $033A

#define VIDRAM $8000
#define BPERSCR 1000
#define EOSCR $83E8

; low-level tape i/o entry points
; (load/verify) rest of program
#define READDATA    $F3F8
; (load/verify) named header - search for a named tape header block
#define READHEAD    $F4D3
; (save)
; save progran to disk or tape
#define SAVEPRG     $F6E3
; write file header
#define SAVEHEAD    $F619
; copy tape buffer start/end to SAL(c7) / EAL(c9) / STAL(fb)
#define SETEALSTAL  $F66E
; copy tape buffer start/end to SAL(c7) / EAL(c9) / STAL(fb)
#define TAPEPTR     $F67B
; copy tape buffer start SAL (c7) to STAL(fb)
#define SETSTAL     $F68C
; set TAPE1 to cassette buffer address for tape device in FA
; copy cassette buffer addresses to STAL/EAL
#define SETCASBUF   $F6AB
; write arbitrary data to tape
#define SAVEDATA    $F8CE
; see "Programming The PET/CBM" p. 384
#define PIA1        $E810
#define PIA1PORTA   PIA1+$00
#define PIA1CRA     PIA1+$01
#define PIA1PORTB   PIA1+$02
#define PIA1CRB     PIA1+$03

#define PIA2        $E820
#define PIA2PORTA   PIA2+$00
#define PIA2CRA     PIA2+$01
#define PIA2PORTB   PIA2+$02
#define PIA2CRB     PIA2+$03

#define VIA         $E840
#define VIAORB      VIA+$00           ; internal to PET
#define VIAORA      VIA+$01           ; data with handshake
#define VIAPDRB     VIA+$02
#define VIADDRA     VIA+$03           ; data direction
#define VIAT1LW     VIA+$04
#define VIAT1CH     VIA+$05
#define VIAT1LL     VIA+$06
#define VIAT1LH     VIA+$07
#define VIAT2LW     VIA+$08
#define VIAT2CH     VIA+$09
#define VIASR       VIA+$0A           ; shift register
#define VIAACR      VIA+$0B           ; auxilliary control
#define VIAPCR      VIA+$0C           ; peripheral control
#define VIAIFR      VIA+$0D           ; interrupt flags
#define VIAIER      VIA+$0E           ; interrupt enable
#define VIAORAN     VIA+$0F           ; data no handshake

#define NMI         $FFFA
#define RES         $FFFC
#define IRQ         $FFFE

#define LPERSCR     25

;graphic and control character set
#define INSERT      $94
#define DELETE      $14
#define SPACE       $20
#define CR          $0D
#define CLR         $93
#define HOME        $13
#define CRSRDOWN    $11
#define CRSRUP      $91
#define CRSRRIGHT   $1D
#define CRSRLEFT    $9D
#define RVSON       $12
#define RVSOFF      $92
#define STOPKEY     $03
#define RUNKEY      $83
#define QUOTE       $22
#define VBAR2       $B4
#define VBAR3       $B5
#define VBAR6       $B6
#define VBAR7       $AA
#define HBAR2       $B7
#define HBAR3       $B8
#define HBAR5       $B9
#define HBAR6       $AF
#define VLINE1      $A5
#define VLINE2      $D4
#define VLINE3      $C7
#define VLINE4      $C2
#define VLINE5      $DD
#define VLINE6      $C8
#define VLINE7      $D9
#define VLINE8      $A7
#define HLINE1      $A3
#define HLINE2      $C5
#define HLINE3      $C4
#define HLINE4      $C3
#define HLINE5      $C0
#define HLINE6      $C6
#define HLINE7      $D2
#define HLINE8      $A4
#define SHADE       $A6
#define HSHADE      $A8
#define VSHADE      $DC
#define TRIUL       $A9
#define TRIUR       $DF
#define CORNERUL    $B0
#define CORNERUR    $AE
#define CORNERLL    $AD
#define CORNERLR    $BD
#define ROUNDUL     $D5
#define ROUNDUR     $C9
#define ROUNDLL     $CA
#define ROUNDLR     $CB
#define BOXUL       $CF
#define BOXUR       $D0
#define BOXLL       $CC
#define BOXLR       $BA
#define BLOCK0      $A0
#define BLOCK1      $BE
#define BLOCK2      $BC
#define BLOCK4      $BB
#define BLOCK8      $AC
#define BLOCK9      $BF
#define TEEUP       $B1
#define TEEDN       $B2
#define TEELF       $B3
#define TEERT       $AB
#define CROSS       $DB
#define DIAG        $CE
#define BACKDIAG    $CD
#define DOUBLEDIAG  $D6
#define SPADE       $C1
#define HEART       $D3
#define DIAMOND     $DA
#define CLUB        $D8
#define CIRCLEFILL  $D1
#define CIRCLEEMPTY $D7
#define PI          $DE


; Open Space in Memory
;#define BLTU        $B350
; call entry to monitor
#define TIMCALL     $D472
; BRK call to monitor
#define TIMBRK      $D478
; output a CARRIAGE return
#define CROUT       $D534
; factory IRQ vector for ($0090)
#define MAINIRQ     $E455
#endif

; $E798 or E65B for the EROM on my PET, table of low bytes for wrap
#ifdef ROM_PET_4
#define WRAPLO      $E798
#endif

#ifdef ROM_PET_CHITSELB

#define WRAPLO      $E65B
#define DORTI       $E600
;"http://wiki.nesdev.com/w/index.php/6502_assembly_optimisations#Test_bits_without_destroying_the_accumulator
#define RTI_INSTR   $E605   ; opcode $40, bit $e605 will test smudge (bit4)
#define FIX_CHR     $E606   ; set character at cursor position

#define KBDECODE    $E60B   ; keyboard decode table (80 characters)
                            ; Table of 25 low bytes marking the end of each line
#define SCRLINLO    $E65B
#define DLSTRUN     $E673   ; dL"*<cr>run<cr>

#endif

#ifdef ROM_PET_UPGRADE
; output a carriage return
#define CROUT       $FDD0
;#define BLTU        $C2D8
#define TIMBRK      $FD17
#define TIMCALL     $FD11
#define CLRSCR      $E229
#define DORTI       $E6E4
#define MAINIRQ     $E62E
#endif

#ifdef ROM_PET_4
; keyboard DECODE table
#define CLRSCR      $E04B
; keyboard DECODE table
#define KEYDECODE   $E60B

#define CONCAT      $FF93
#define DOPEN       $FF96
#define DCLOSE      $FF99
#define RECORD      $FF9C
#define HEADER      $FF9F
#define COLLECT     $FFA2
#define BACKUP      $FFA5
#define COPY        $FFA8
#define APPEND      $FFAB
#define DSAVE       $FFAE
#define DLOAD       $FFB1
#define DIRECTORY   $FFB4
#define RENAME      $FFB7
#define SCRATCH     $FFBA
#define UNKNOWN     $FFBD
; ($ffc0)+3 skips over the BASIC param setup
#define OPEN        $F563
; ($ffc3)+3 skips over param setup
#define CLOSE       $F2E0
; print out a system message
#define MSGOUT      $F185





#endif

; all ROMs
; Set input device
#define CHKIN       $FFC6
; Set output device
#define CHKOUT      $FFC9
; Restore default I/0 devices
#define CLRCHN      $FFCC
; Input character
#define CHRIN       $FFCF
; Output character
#define CHROUT      $FFD2
#define LOAD        $FFD5
#define SAVE        $FFD8
; SETTIM was VERIFY in original ROM
#define SETTIM      $FFDB
; RDTIM was SYS in original ROM
#define RDTIM       $FFDE
; STOP was GETSTOP in original ROM
#define STOP        $FFE1
; Get character
#define GETIN       $FFE4
#define CLALL       $FFE7
#define UDTIM       $FFEA
