; pettil-interpreter.a65
;#echo .       pettil-interpreter.a65    Outer Interpreter

;--------------------------------------------------------------
#if 0
name=ERROR.MSG
stack=( -- )
tags=interpreter,ext,nosymbol
Instead of RESTART performing an ABORT at the end to start the
QUIT-INTERPRET loop, it does a FENCE @ (FORGET) and sends us here.

If `warning` is non-zero, FAIL executes it, which also points here.
When `warning` is 0, `fail` performs `.err` which outputs the error number.

```
: error.msg   ( -- )
    2* 'messages + @ space $. cr abort ; -2 allot
```
#endif
#include "align.i65"
_errormsg
    jsr enter
#include "page.i65"
    .word twostar
#include "parm.i65"
    .word plit
    .word messages
#include "pad.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word space
#include "page.i65"
    .word _stringdot
#include "page.i65"
    .word cr
#include "past.i65"
    .word _abort

;--------------------------------------------------------------
#if 0
name=GROK
stack=( cfa -1|+1 -- )
tags=secondary,interpreter,nosymbol
'to understand' -- process `cfa` in the context of compilation or execution

```
: grok   ( cfa flag -- )
    compiling? <>
    ?: execute xt, ;
```
#endif
#include "align.i65"
_grok
    jsr enter
#include "page.i65"
    .word compilingq
#include "page.i65"
    .word ne
#include "page.i65"
    .word pquerycolon
    .word execute
    .word _xtcomma
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=\
stack=( "text$ -- )
tags=primitive,extra
flags=immediate
After `\`,  `interpret` will ignore all text to the end of the current line, useful as a comment delimiter.

```
: \   ( -- )
   span coff ; immediate
```
#endif
backslash
    lda #0
    sta userspan
    jmp next

;--------------------------------------------------------------
#if 0
name=INTERPRET
stack=( -- )
tags=secondary,fig,forth-79,forth-83,interpreter
    process a unit of source code in the input stream, which is either:
        an entire line (interactive)
        an entire screen (loading)
    each space-delimited token is parsed, then searched for `symtab`, then
    possibly executed, turned into a number, or added to the dictionary as
    per the rules of the interpreter and compiler.
    ---
    interactive sessions will exit `interpret` after a blank line of input,
    or after processing the entire line.
    loading will exit `interpret` at the end of the entire screen.
    ---
    PETTIL's outer interpreter uses a lazy-loading design, taken from an idea
    by Albert van der Hoerst on comp.lang.forth.  Traditional approaches
    first load the buffer before calling `interpret` but in our design,
    retrieving source text is postponed until the last possible moment.

```
: interpret   ( -- )
    begin   ?stack  bl name ?dup
    while   found? ?dup
            ?: grok number
    repeat ;
```
#endif
#include "align.i65"
_interpret
    jsr enter
#include "page.i65"
interpret01
    .word qstack
#include "page.i65"
    .word bl
#include "page.i65"
    .word _name                 ;( nfa|0 )
#include "page.i65"
    .word qdup
#include "parm.i65"
    .word qbranch
    .byt <(interpret05-*+1)
#include "pad.i65"
    .word _foundq               ; ( nfa -- xfa flag )
#include "page.i65"
    .word qdup
#include "page.i65"
    .word pquerycolon
    .word _grok                 ; ( cfa -- )
    .word _number               ; ( nfa -- )
#include "parm.i65"
    .word branch
    .byt <(interpret01-*+1)
#include "past.i65"
interpret05
    .word exit

;--------------------------------------------------------------
#if 0
name=.OK
stack=( -- )
tags=secondary,interpreter,nosymbol
Print the OK message at the end of each line in an interactive session

```
: .ok
    ." ok" cr ;
```
#endif
#include "align.i65"
_dotok
    jsr enter
#include "parm.i65"
    .word _pdq
    .byt (dotok01-*-1)
    .asc    " OK"
dotok01
#include "pad.i65"
    .word cr
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=QUIT
stack=( -- )
tags=secondary,forth-79,forth-83,interpreter
`quit` will accept and `interpret` an infinite number of lines typed in from the keyboard in interactive mode.

This is the infinite outer interpreter loop.  PETTIL uses a lazy loading scheme such that when `interpret` finds it has nothing in the buffer (`span` is 0) it will reload the buffer.

```
: quit
    rp! blk 6 erase            \ erases line editing uservars
    begin                       \ `interpret` will get new line from keyboard
        interpret
        compiling? ?: cr .ok
    again ( ; )
```
#endif
#include "align.i65"
_quit
    jsr enter
#include "page.i65"
    .word rpstore               ; reset return stack pointer
#include "page.i65"
    .word blk
#include "page.i65"
    .word twooff
#include "page.i65"
quit01                          ; BEGIN
    .word span
#include "page.i65"
    .word off
#include "page.i65"
    .word _interpret            ; outer interpreter main loop
#include "page.i65"
    .word compilingq
#include "parm.i65"
    .word pquerycolon
    .word cr
    .word _dotok
#include "past.i65"             ; AGAIN
    .word branch
    .byt <(quit01-*+1)
;#include "past.i65"            ; you can check out any time you like
;    .word exit                 ; but you can never leave

;--------------------------------------------------------------
#if 0
name=ABORT
stack=( -- )
tags=secondary,fig,forth-79,forth-83,interpreter,startup
* Clear data stack
* Reset `current` and `vocabs` vocabulary to `forth`
* perform `quit`

`abort` sets up and starts `quit` to bgin an interactive session.

#endif
#include "align.i65"
_abort
    jsr enter
#include "page.i65"
    .word spstore               ; reset data stack
#include "page.i65"
    .word forth                 ; resset `vocabs` to core-only
#include "page.i65"
    .word definitions           ; set `core` as `current`
#include "past.i65"
    .word _quit

;--------------------------------------------------------------
#if 0
name=CHKBLK
stack=( u -- u flag )
tags=primitive,double,stack,nosymbol
validate block number
true: fail, block out of range
false: okay, block is resident

#endif
chkblk
    lda tos
    sec
    beq chkblk09                ; 0? fail!
    cmp usernumblm              ; u >= #blm? fail
chkblk09
    jmp xpushc
;[11]

;--------------------------------------------------------------
#if 0
name=LOAD
stack=( u -- )
tags=interpreter,forth-83
Load source non-interactively by redirecting the input stream from block `u`

* if `u` is outside the range `0 < u < #blk`, BLOCK OUT OF RANGE error
* `blk = 0` means terminal input (interactive)
* source code packet must be available in `vmbuf`

* check `u` within range: 0 < u < #blk
* push `blk` `in` `lin` `span` to return stack
* set `blk` = `u`
* set `in` `lin` = true
* set `span` = 0
* `interpret`
* pop `blk` `in` `lin` `span` from  return stack

```
: load   ( u -- )
    chkblk 8 ?error
    6 blk m>r
    blk ! in on [compile] \
    interpret
    6 blk r>m
    in c@ refill in c! ;
```
#endif
#include "align.i65"
_load
    jsr enter
#include "page.i65"
    .word chkblk
#include "parm.i65"
    .word qerror
    .byt 8                      ; "BLOCK OUT OF RANGE"
#include "pad.i65"
    .word six
#include "page.i65"
    .word blk                   ;( u 6 blk )
#include "page.i65"
    .word mtor                  ; push `blk` `in` `lin` `span` to return stack
#include "page.i65"
    .word blk
#include "page.i65"
    .word store
#include "page.i65"
    .word in
#include "page.i65"
    .word on
#include "page.i65"
    .word backslash             ; `span off`
#include "page.i65"
    .word _interpret            ; interpret has two clients, `load` and `quit`
#include "page.i65"
    .word six
#include "page.i65"
    .word blk                   ;( 6 blk )
#include "page.i65"
    .word rtom                  ; pop `blk` `in` `lin` `span`
#include "page.i65"
    .word blkfetch
#include "page.i65"
    .word zeq
#include "page.i65"
    .word _qexit                ; exit if interactive session
#include "page.i65"
    .word in
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word _refill               ; restore earlier `sib` buffer,
#include "page.i65"
    .word in
#include "page.i65"
    .word cstore                ; without zeroing `in`
#include "past.i65"
    .word exit
