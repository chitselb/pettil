; pettil-editor.a65
;#echo .       pettil-editor.a65         PET screen editor for Forth

;--------------------------------------------------------------
#if 0
name=EDITOR
stack=( -- )
tags=assembler,vocabulary,extension
Include `editor` vocabulary in search `vocabs` (context)

#endif
editor
    jsr dovocab
    .byt 2                      ; vocabulary identifier

;--------------------------------------------------------------
#if 0
name=.DN
stack=( -- )
tags=editor
Emit DOWN character (cursor down)

#endif
#include "align.i65"
dotdn
    jsr dodotc
    .byt DOWN

;--------------------------------------------------------------
#if 0
name=.UP
stack=( -- )
tags=editor
Emit UP character (cursor up)

#endif
#include "align.i65"
dotup
    jsr dodotc
    .byt UP

;--------------------------------------------------------------
#if 0
name=.RT
stack=( -- )
tags=editor
Emit RIGHT character (cursor right)

#endif
#include "align.i65"
dotrt
    jsr dodotc
    .byt RIGHT

;--------------------------------------------------------------
#if 0
name=.LF
stack=( -- )
tags=editor
Emit LEFT character (cursor left)

#endif
#include "align.i65"
dotlf
    jsr dodotc
    .byt LEFT

;--------------------------------------------------------------
#if 0
name=.RVS
stack=( -- )
tags=editor
Emit RVSON character (reverse on)

#endif
#include "align.i65"
dotrvs
    jsr dodotc
    .byt RVSON

;--------------------------------------------------------------
#if 0
name=.OFF
stack=( -- )
tags=editor
Emit RVSOFF character (reverse off)

#endif
#include "align.i65"
dotoff
    jsr dodotc
    .byt RVSOFF

;--------------------------------------------------------------
#if 0
name=.QT
stack=( -- )
tags=editor
Emit quote (") character

#endif
#include "align.i65"
dotqt
    jsr dodotc
    .byt QUOTE

;--------------------------------------------------------------
#if 0
name=FLIPSCR
stack=( -- )
tags=editor
Invert the entire screen

#endif
flipscr
    ldy #0
flipscr01
    lda VIDRAM,y        ; [4]
    eor #$80            ; [2]
    sta VIDRAM,y        ; [5]
    lda VIDRAM+$100,y
    eor #$80
    sta VIDRAM+$100,y
    lda VIDRAM+$200,y
    eor #$80
    sta VIDRAM+$200,y
    lda VIDRAM+$300,y
    eor #$80
    sta VIDRAM+$300,y
    iny                 ; [2]
    bne flipscr01       ; [3]   ; 49 * 256 = 12544 clocks
    jmp next

;--------------------------------------------------------------
#if 0
name=LINESA
stack=( -- size addr )
tags=editor,primitive,nosymbol
Return the `size` (40|80) and `addr` of the current physical cursor's logical line

#endif
linesa
/*
; pointer current screen line address
#define PNT         $C4
; Cursor Column on Current Line
#define PNTR        $C6
; Quote flag, 0=direct cursor, else printable ctrl chars
#define QTSW        $CD
; Length of current line (39 or 79)
#define LNMX        $D5
; Current Cursor Physical Line Number
#define TBLX        $D8
; number of keyboard inserts outstanding
#define KBINS       $DC

PETs
C6 (horizontal) & D8 (vertical) -- set cursor position

E07F 0
E25D Upgrade
E071 4.0 & 80
E067 80-column

VIC  D3 horiz  D6 vertical
FFF0 PLOT (CLC to write) JMP E50A
E50A  B0 07       BCS $E513
E50C  86 D6       STX $D6
E50E  84 D3       STY $D3
E510  20 87 E5    JSR $E587
E513  A6 D6       LDX $D6
E515  A4 D3       LDY $D3
E517  60          RTS

E587  A6 D6       LDX $D6
E589  A5 D3       LDA $D3
E58B  B4 D9     - LDY $D9,X
E58D  30 08       BMI $E597 +
E58F  18          CLC
E590  69 16       ADC #$16
E592  85 D3       STA $D3       ;
E594  CA          DEX
E595  10 F4       BPL $E58B -
E597  B5 D9   +   LDA $D9,X
E599  29 03       AND #$03
E59B  0D 88 02    ORA $0288
E59E  85 D2       STA $D2
E5A0  BD FD ED    LDA $EDFD,X
E5A3  85 D1       STA $D1       ; set PNT (D2)
E5A5  A9 15       LDA #$15
E5A7  E8          INX
E5A8  B4 D9       LDY $D9,X
E5AA  30 06       BMI $E5B2
E5AC  18          CLC
E5AD  69 16       ADC #$16
E5AF  E8          INX
E5B0  10 F6       BPL $E5A8
E5B2  85 D5       STA $D5       ; set line width
E5B4  60          RTS


E07F  A6 D8       LDX $D8
E081  B5 E0       LDA $E0,X
E083  09 80       ORA #$80
E085  85 C5       STA $C5
E087  BD 5B E6    LDA $E65B,X
E08A  85 C4       STA $C4
E08C  A9 27       LDA #$27
E08E  85 D5       STA $D5
E090  E0 18       CPX #$18
E092  F0 08       BEQ $E09C
E094  B5 E1       LDA $E1,X
E096  30 04       BMI $E09C
E098  A9 4F       LDA #$4F
E09A  85 D5       STA $D5
E09C  A5 C6       LDA $C6
E09E  C9 28       CMP #$28
E0A0  90 04       BCC $E0A6
E0A2  E9 28       SBC #$28
E0A4  85 C6       STA $C6
E0A6  60          RTS

    stx z
    ldx TBLX
    inx
linesa01
    dex
    ldy LDTB1,x
    bpl linesa01
    stx R0L+2*N7                ; logical line
    lda #0
    pha
    lda #40
    cpx #LPERSCR-1
    bcs linesa02                ; bottom line is never 80-chars
    ldy LDTB1+1,x
    bmi linesa02
    asl
linesa02
    pha
    sta R0L+2*N7+1              ; 40|80
    lda LDTB1,x
    pha
    lda WRAPLO,x
    pha
    ldx z
    jmp tworfrom



    jsr slip
    dex
    lda #0
    sta stackl,x
    lda LNMX
*/
;    stx z
;    jsr PUTCURSOR
    lda #0
    pha
    ldy LNMX
    iny
    tya
    pha
    sta R0L+2*N7+1              ; 40|80
    lda TBLX
    sta R0L+2*N7                ; 40|80

    lda PNT+1
    pha
    lda PNT
    pha
;    ldx z
    jmp tworfrom

;--------------------------------------------------------------
#if 0
name=EOSS
stack=( addr -- size )
tags=editor,primitive,nosymbol
Return the `size` in bytes from `addr` to the end of the screen

```
: eoss   ( addr -- size )
    eoscr swap - ;
```
#endif
#include "align.i65"
_eoss
    jsr enter
#include "page.i65"
    .word eoscr
#include "page.i65"
    .word swap
#include "page.i65"
    .word minus
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WRAPPASTE
stack=( -- )
tags=editor,nosymbol
Combine three linewrap tables into one during a paste

|`wrap@`|above current line|
|`pwrap`|paste buffer|
|`wrap@`|current line to `eos`|

#endif
#include "align.i65"
_wrappaste
    jsr enter
#include "page.i65"
    .word wrapfetch
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word twofetch
#include "page.i65"
    .word paste
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _pad
#include "page.i65"
    .word minus
#include "page.i65"
    .word slashmod40
#include "page.i65"
    .word nip                   ; ( wrap@d pwrapd pastelines -- )
#include "page.i65"
    .word pwrappaste
#include "past.i65"
    .word exit

pwrappaste
    jsr wrapzap12
    jsr harvests10              ; wrap -> N0 N1
    stx z

    ldx #R0L+2*N0               ; point to `wrap@`
    jsr wrapumax                ; left-align `wrap@` bits in `n0..n1`
    ldy #$00
    jsr pwrapbitsalt            ; lower entry point, doesn't test line `0`

    ldx #R0L+2*N2               ; let's look at `pwrap`
    jsr wrapumax                ; left-align `pwrap` bits in `n2..n3`
    ;clc
    tya
    adc R0L+2*N4                ; # of 40-char lines in paste buffer
    sta R0L+2*N7
    jsr pwrapbits
    ldx #R0L+2*N0               ; back to `wrap@`
    lda #LPERSCR
    sta R0L+2*N7
    jsr pwrapbits
    ldx z
    jmp drop

pwrapbits
    iny
    cpy R0L+2*N7
    bcs pwrapbits09
pwrapbitsalt
    jsr pwrapbit
    bcc pwrapbits               ; bra
pwrapbits09
    dey
    rts

pwrapbit
    lda LDTB1,y
    asl
    jsr wraprolls
    ror
    sta LDTB1,y
    rts

;--------------------------------------------------------------
#if 0
name=WRAPDEL
stack=( logline 40|80 -- )
tags=editor,nosymbol
Rolls the screen linewrap table up one or two lines when deleting a logical
line in the `editor`

#endif
wrapdel
    stx z
    bit R0L+2*N7+1              ; 40 or 80?
    .byt $29                    ; AND # opcode
wrapdel01
    clv
    ldx R0L+2*N7
    asl LDTB1,x
wrapdel02
    cpx #LPERSCR-1
    bcs wrapdel03
    asl LDTB1+1,x
    ror LDTB1,x
    inx
    bne wrapdel02
wrapdel03
    ;sec
    ror LDTB1,x
    bvs wrapdel01
    jmp spnext
    ;ldx z
    ;jmp next

;--------------------------------------------------------------
#if 0
name=WRAPCOPY?
stack=( -- f )
tags=editor,secondary,nosymbol
Attempts to append the current logical linewrap to `pwrap`.  Uses 40|80 flag in `n7`

Returns a flag,
`false` if the paste buffer is full,
`true` if 1 or 2 bits were appended.

|`pwrap`||
|`pwraph`|`1` means 25 lines are in the buffer|
|`n7l`||
|`n7h`||

```
: wrapcopy?
    pwrap 2@ (wrapcopy?) ;
```
#endif
#include "align.i65"
wrapcopyq
    brk
    .byt set | N0
    .word userpwrap+4
    .byt popd | N0
    .byt st | N3
    .byt popd | N0
    .byt st | N2
    .byt sub | ACC
    .byt push
    .byt rtn
    stx z
    ldx #R0L+2*N2
    sec
    bit R0L+2*N7+1              ; copy 40|80 bit to `V` flag
    .byt $29                    ; AND # opcode
pwrapcopyq01
    clv
    ;
    lda R0L+2*N3+1
    bne pwrapcopyq02
    dec tos+1
    jsr wraprolls
    ;clc
    bvs pwrapcopyq01
pwrapcopyq02
    ldx z
    brk
    .byt ld | N2
    .byt std | N0
    .byt ld | N3
    .byt std | N0
    .byt nxt

;--------------------------------------------------------------
#if 0
name=EDITCOPIER
stack=( 40|80 addr -- )
tags=editor,nosymbol
Append the text of the current logical line to the `paste` buffer.  Wrap bits
are handled separately, see `wrapcopy?`

```
: editcopier   ( 40|80 addr -- )
    paste @  third cmove paste +! ;
```
#endif
#include "align.i65"
_editcopier
    jsr enter
#include "page.i65"
    .word paste
#include "page.i65"
    .word fetch
#include "page.i65"
    .word third
#include "page.i65"
    .word cmove
#include "page.i65"
    .word paste
#include "page.i65"
    .word plusstore
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDITCOPY
stack=( -- )
tags=editor,nosymbol
STOP-C Copy Line

Appends a copy of the current logical screen line to the paste buffer

```
: editcopy
:editcopy
    ...
```
#endif
#include "align.i65"
_editcopy
    jsr enter
    ;fall through
;--------------------------------------------------------------
#if 0
name=:EDITCOPY
stack=( -- )
tags=editor,nosymbol
STOP-C Copy Line

Appends a copy of the current logical screen line to the paste buffer

```
:editcopy   ( -- )
    logline lineinfo >r paste @  r@ cmove
    paste r@ +!
    pwrap 2@ r> 40/mod nip wrap+ pwrap 2! ;

:editcopy
    linea paste @ lines  paste under +!  cmove ;
```
#endif
#include "page.i65"
__editcopy
    .word linesa
#include "page.i65"
    .word wrapcopyq
#include "page.i65"
    .word pquerycolon
    .word _editcopier
    .word twodrop
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITDEL
stack=( -- )
tags=editor,nosymbol
`STOP-D` Delete Line

Append current logical screen line to paste buffer and delete it from screen

```
: editdel   ( -- )
    editcopy linesa 2up + 2dup eoss
    dup>r cmove r> + swap blank
    wrapdel ;
```
#endif
#include "page.i65"
__editdel
    .word _editcopy             ; append logical line at cursor to `pad`
#include "page.i65"
    .word linesa                ; get `size` and `addr` of current line
#include "page.i65"
    .word twodup
#include "page.i65"
    .word plus
#include "page.i65"
    .word twodup
#include "page.i65"
    .word _eoss
#include "page.i65"
    .word duptor
#include "page.i65"
    .word cmove
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word plus
#include "page.i65"
    .word swap
#include "page.i65"
    .word blank
#include "page.i65"
    .word wrapdel               ; linewrap handler for `STOP-D`
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITPASTE
stack=( -- )
tags=editor,nosymbol

STOP-P

Insert paste buffer before current logical line

```
:editpaste   ( -- )
    linesa nip dup>r  paste @   ( vidaddr paste R; vidaddr )
    r@ eoss  cmove              \ concatenate rest of screen to `paste`
    pad r@ r> eoss cmove        \ fill to end of screen from `pad`
    linesa nip dup>r  paste @   (  )
    wrappaste ;
```
#endif
#include "page.i65"
__editpaste
    .word linesa
#include "page.i65"
    .word nip
#include "page.i65"
    .word duptor
#include "page.i65"
    .word paste
#include "page.i65"
    .word fetch
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word _eoss
#include "page.i65"
    .word cmove
#include "page.i65"
    .word _pad
#include "page.i65"
    .word rfetch
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word _eoss
#include "page.i65"
    .word cmove
#include "page.i65"
    .word _wrappaste            ; linewrap handler for `STOP-P`
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NOWRAP
stack=( -- )
tags=editor,nosymbol

`STOP-CLR` reset the linewrap table and change this packet to be a screen
 even if it was a data packet.  `STOP-R` should be able to undo this.


 ~todo: Check into effects of updating the pkt.header $8000 bit without performing `update` afterward?
#endif
#include "align.i65"
_nowrap
    jsr enter
#include "page.i65"
    .word true
#include "page.i65"
    .word true
#include "page.i65"
    .word wrapstore
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(EDITNOWRAP)
stack=( -- )
tags=editor,nosymbol
Reset the linewrap table and force this packet to be screen, not block

#endif
peditnowrap
    ldy #1
    lda (R0L+2*N8),y
    ora #$80
    sta (R0L+2*N8),y
    jmp exit

;--------------------------------------------------------------
#if 0
name=:EDITNOWRAP
stack=( -- )
tags=editor,nosymbol
Reset the linewrap table and force this packet to be screen, not block

#endif
#include "align.i65"
__editnowrap
    .word _nowrap
#include "past.i65"
    .word peditnowrap

;--------------------------------------------------------------
#if 0
name=:EDITTOPSCR
stack=( -- )
tags=editor,nosymbol

 from the top (first) screen

```
:edittopscr   ( -- )
    0 >edit ;
```
#endif
#include "align.i65"
__edittopscr
    .word zero
#include "page.i65"
    .word _toedit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITQUIT
stack=( -- )
tags=editor,nosymbol
STOP-_   Exit the editor
    update current packet
STOP-Q   Quit the editor
    vmbuf off


```
:editquit   ( -- )
    editing off  rdrop rdrop ;
```
#endif
#include "page.i65"
__editexit
    .word _update
#include "page.i65"
__editquit
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word off
#include "page.i65"
    .word editing
#include "page.i65"
    .word off
#include "page.i65"
    .word rdrop                 ; discard returns
#include "page.i65"
    .word rdrop                 ; discard returns
#include "past.i65"
    .word exit                  ; exiting from EDIT

edithelpscr
    .byt $03,$0F,$0D,$0D,$02,$01
    .byt $0E,$04,$20,$0B,$05,$19,$13,$3A,$20,$20,$08,$17,$0F,$12,$04,$13
    .byt $3A,$20,$20,$35,$9A,$01,$10,$20,$20,$05,$BF,$20,$08,$05,$0C,$10
    .byt $20,$20,$1A,$83,$0F,$10,$19,$20,$20,$04,$9F,$20,$05,$18,$09,$14
    .byt $20,$20,$07,$9F,$20,$05,$04,$09,$14,$0F,$12,$20,$20,$0B,$84,$05
    .byt $0C,$20,$20,$05,$88,$8F,$8D,$85,$20,$06,$09,$12,$13,$14,$20,$20
    .byt $03,$9E,$20,$03,$01,$10,$14,$15,$12,$05,$20,$20,$0A,$90,$01,$13
    .byt $14,$05,$20,$20,$03,$95,$90,$20,$20,$03,$10,$12,$05,$16,$20,$20
    .byt $04,$90,$12,$05,$16,$20,$13,$03,$12,$20,$20,$0B,$8C,$0F,$01,$04
    .byt $20,$20,$04,$84,$8F,$97,$8E,$20,$0E,$05,$18,$14,$20,$20,$04,$8E
    .byt $05,$18,$14,$20,$13,$03,$12,$20,$20,$0B,$93,$01,$16,$05,$20,$20
    .byt $04,$92,$05,$13,$14,$0F,$12,$05,$20,$20,$06,$8C,$09,$13,$14,$20
    .byt $13,$03,$12,$20,$20,$0B,$96,$05,$12,$09,$06,$19,$20,$20,$02,$83
    .byt $8C,$92,$20,$20,$02,$0E,$0F,$17,$12,$01,$10,$20,$20,$15,$89,$0E
    .byt $04,$05,$18,$20,$20,$03,$89,$8E,$93,$20,$20,$02,$03,$0C,$0F,$0E
    .byt $05,$20,$20,$16,$91,$15,$09,$14,$20,$20,$04,$84,$85,$8C,$20,$20
    .byt $02,$03,$0C,$05,$01,$0E
edithelpscrz

;--------------------------------------------------------------
#if 0
name=:EDITINFO
stack=( -- )
tags=editor,nosymbol
Show the user an info screen

```
:editinfo   ( -- )
    update vmbuf @ scr @ >pkt

```
#endif
#include "page.i65"
__editinfo
    .word _update
#include "page.i65"
    .word dotclr
#include "page.i65"
    .word _info
#include "parm.i65"
    .word dlit
    .word edithelpscr
    .word VIDRAM+400
#include "parm.i65"
    .word plit
    .word edithelpscrz-edithelpscr
#include "pad.i65"
    .word rldecode
#include "parm.i65"
    .word _pdq
    .byt <(editinfo01-*-1)
    .asc CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR
editinfo01
#include "pad.i65"
    .word true
#include "page.i65"
    .word _pause
#include "page.i65"
    .word dothome
#include "past.i65"
    .word branch
    .byt <(__editrestore-*+1)

;--------------------------------------------------------------
#if 0
name=:EDITINDEX
stack=( -- )
tags=editor,nosymbol
STOP-I   Show the user an index screen

```
:editindex   ( -- )
    update index 0 pause ;
```
#endif
#include "page.i65"
__editindex
    .word _update
#include "page.i65"
    .word editing
#include "page.i65"
    .word off
#include "page.i65"
    .word dotclr
#include "page.i65"
    .word _index
#include "page.i65"
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word false
#include "page.i65"
    .word _pause
#include "page.i65"
    .word dothome
#include "past.i65"
    .word branch
    .byt <(__editrestore-*+1)

;--------------------------------------------------------------
#if 0
name=:EDITSAVE
stack=( -- )
tags=editor,nosymbol

 STOP-S   Save all buffers to a PRG file

```
:editsave   ( -- ) ;
```
#endif
#include "page.i65"
__editsave
    .word _update
#include "page.i65"
    .word dotclr
#include "page.i65"
    .word _savebuffers
#include "past.i65"
    .word branch
    .byt <(__editrestore-*+1)

;--------------------------------------------------------------
#if 0
name=:EDITLOAD
stack=( -- )
tags=editor,nosymbol

 STOP-L   Load a group of buffers from a PRG file

```
:editload   ( -- ) ;
```
#endif
#include "page.i65"
__editload
    .word dotclr
#include "page.i65"
    .word _loadbuffers
#include "page.i65"
    .word scr
#include "page.i65"
    .word off
#include "past.i65"
    .word branch
    .byt <(__editrestore-*+1)

;--------------------------------------------------------------
#if 0
name=LIST
stack=( scr -- )
tags=editor
List the specified screen and set `scr`; Invoke `editor` vocabulary
#endif
#include "align.i65"
_list
    jsr enter
#include "page.i65"
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word _editchongo
#include "page.i65"
    .word editing
#include "page.i65"
    .word off
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITCHONGO
stack=( u -- )
tags=editor,nosymbol
set `scr`
callable entry point to `:editrestore`

#endif
#include "align.i65"
_editchongo
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
;fall through
;--------------------------------------------------------------
#if 0
name=:EDITRESTORE
stack=( -- )
tags=editor,nosymbol

 STOP-R   Restore the current screen from the buffer

```
:editrestore   ( -- )
    scr @ block drop ;
```
#endif
#include "page.i65"
__editrestore
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _block
#include "page.i65"
    .word drop
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITVERIFY
stack=( -- )
tags=editor,nosymbol

 STOP-V   Verify a buffer file vs. memory

```
:editverify   ( -- )
   .clr verify-buffers true pause :editrestore
```
#endif
#include "page.i65"
__editverify
    .word dotclr
#include "page.i65"
    .word _verifybuffers
#include "page.i65"
    .word true
#include "page.i65"
    .word _pause
#include "past.i65"
    .word branch
    .byt <(__editrestore-*+1)

;--------------------------------------------------------------
#if 0
name=EDITZILCH
stack=( -- )
tags=editor,nosymbol

#endif
#include "align.i65"
_editzilch
    jsr enter
    ;fall through
;--------------------------------------------------------------
#if 0
name=:EDITZILCH
stack=( -- )
tags=editor,nosymbol

 STOP-Z   Zilch the paste buffer

```
:editzilch   ( -- )
     pad paste !  pwrap 4 erase  pwrap 1+! ;
```
#endif
#include "page.i65"
__editzilch
    .word _pad
#include "page.i65"
    .word paste
#include "page.i65"
    .word store
#include "page.i65"
    .word pwrap
#include "page.i65"
    .word twooff
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITDELSCR
stack=( -- )
tags=editor,nosymbol
`STOP-DEL` cuts  the current screen.  After updating the current packet to the screen buffer, the screen immediately after this (or a new, blank screen) will be presented to the user.

```
:editdelscr
    begin
        blkbuf 2-
        begin
            pkt.next
            begin
                dup @ $8005 =
                dup if vmbuf @ over - 5 - 5 cmove then
            not until
            dup @ 0=
        until drop #blk! ;

        #blk @ 0 do
            i >pkt  <n8 @ $8005 =
            if vmbuf @ <n8 over - 5 - 5 cmove not then

:editdelscr   ( scr -- packet )
    >pkt
    vmbuf floor size +move
    #blk! scr @ #blk @ 1- max
    >edit ;

:editdelscr
    update vmbuf dup @ pkt.this
    scr @ 1+ ?mkpkts drop
    (edit.delscr)
    cmove cmove vmbuf +! ;
```
:editdelscr
        blkbuf 2-
        begin
            pkt.next
            begin
                dup @ $8005 =
            while
                vmbuf @ over 3- 5 +move
            repeat
            dup @ 0=
        until drop #blk! ;

#endif
#include "page.i65"
__editdelscr
    .word _update
#include "page.i65"
    .word blkbuf
#include "page.i65"
    .word twominus
#include "page.i65"
editdelscr01
    .word _pktnxt
#include "page.i65"
editdelscr02
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plit
    .word $8005
#include "page.i65"
    .word eq
#include "parm.i65"
    .word qbranch
    .byt <(editdelscr03-*+1)
#include "pad.i65"
    .word vmbuf
#include "page.i65"
    .word fetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word five
#include "page.i65"
    .word plus
#include "page.i65"
    .word third
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word cmovegt
#include "parm.i65"
    .word branch
    .byt <(editdelscr02-*+1)
#include "pad.i65"
editdelscr03
#include "page.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zeq
#include "parm.i65"
    .word qbranch
    .byt <(editdelscr01-*+1)
#include "pad.i65"
    .word drop
#include "page.i65"
    .word _numblkstore
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITINSSCR
stack=( -- )
tags=editor,nosymbol

clone the current screen to the end

```
:editinsscr   ( -- )
    update scr @ >pkt
    vmbuf @
    pkt.size - 2-  0 !+
    dup vmbuf !
    pkt.size cmove ;

:editinsscr   ( -- )
    update #blk @ blk ! update ;

```
#endif
#include "page.i65"
__editinsscr
    .word _update
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word tuck
#include "page.i65"
    .word _editchongo
#include "page.i65"
    .word _editchongo
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
#include "page.i65"
    .word _update
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITSPACE
stack=( -- )
tags=editor,nosymbol

scan for shifted spaces

```
:editspace   ( -- )
     vidram b/scr + vidram
     do
       i c@ $60 =
       if $E0 i c! then
    loop ;

peditspace
    ldy #0
    lda (tos),y
    eor #$60
    bne +

```
#endif
#include "page.i65"
__editspace
    .word vidram
#include "page.i65"
    .word bperscr
#include "page.i65"
    .word plus
#include "page.i65"
    .word vidram
#include "parm.i65"
    .word pdo
    .byt <(editspace03-*+1)
#include "pad.i65"
editspace01
    .word i
#include "page.i65"
    .word cfetch
#include "parm.i65"
    .word blit
    .byt $60
#include "pad.i65"
    .word eq
#include "parm.i65"
    .word qbranch               ; IF
    .byt <(editspace02-*+1)
#include "pad.i65"
    .word blit
    .byte $E0
#include "page.i65"
    .word i
#include "page.i65"
    .word cstore
#include "parm.i65"
editspace02
    .word ploop
    .byt <(editspace01-*+1)
#include "past.i65"
editspace03
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITNEXTSCR
stack=( -- )
tags=editor,nosymbol
restore from the next screen or append a blank one

```
:editnextscr   ( -- )
    1 +edit ;

```
#endif
#include "page.i65"
__editnextscr
    .word one
#include "page.i65"
    .word _plusedit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITPREVSCR
stack=( -- )
tags=editor,nosymbol

 restore from the previous screen or insert a blank one

```
:editprevscr   ( -- )
    -1 +edit ;
```
#endif
#include "page.i65"
__editprevscr
    .word minusone
#include "page.i65"
    .word _plusedit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDITFOTO
stack=( -- )
tags=editor,nosymbol

write FOTO file on host

#endif
#include "align.i65"
__editfoto
    .word foto
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:EDIT^CASE
stack=( -- )
tags=editor,nosymbol

 restore from the previous screen or insert a blank one

```
:edit^case   ( -- )
    -1 +edit ;
```
#endif
#include "align.i65"
__edittogglecase
    .word *+2
    lda 59468
    eor #2
    sta 59468
    jmp exit

;--------------------------------------------------------------
#if 0
name=EDITCMD
stack=( -- )
tags=editor,nosymbol

 get a key and perform that command

#endif
#include "align.i65"
_editcmd
    jsr enter
#include "parm.i65"
    .word dlit
    .word editcmd
    .word editmenu
#include "pad.i65"
    .word flipscr
#include "page.i65"
    .word key                   ; ( editmenu char )
#include "page.i65"
    .word flipscr
#include "page.i65"
    .word dolindex
#include "page.i65"
    .word twostar
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word *+2
    lda tos+1
    ldy tos
    pha
    jsr slide
    pla
    jmp jumpay

;--------------------------------------------------------------
#if 0
name=EDITCMD
tags=editor,data,nosymbol
editor menu commands (no `cfa`)
#endif
editcmd
    .word editspace03           ; 0 = `nada`
    .word __editexit            ; update and leave
    .word __editquit            ; just leave
    .word __editindex
    .word __editsave
    .word __editload
    .word __editverify
    .word __editzilch
    .word __editrestore
    .word __editdel
    .word __editcopy
    .word __editpaste
    .word __editspace
    .word __editinfo
    .word __editdelscr
    .word __editinsscr
    .word __edittopscr
    .word __editnowrap
    .word __editnextscr
    .word __editprevscr
    .word __edittogglecase
    .word __editfoto

;--------------------------------------------------------------
#if 0
name=EDITMENU
tags=editor,data,nosymbol
editor menu commands (no `cfa`)
#endif
editmenu
    .byt editmenuz-*-1
    .asc "_QISLVZRDCP ?",DELETE,INSERT,HOME,CLR,DOWN,UP
    .asc "UF"
editmenuz

;--------------------------------------------------------------
#if 0
name=(EDIT)
stack=( scr -- )
tags=editor,nosymbol
`(edit)` is an endless loop that calls CHRIN with IRQ redirected to
a STOP key trap.  On pressing STOP, the screen is inverted until the
following keystroke, which is processed as an `editor` command

#endif
pedit
    stx z                       ; preserve Forth data stack pointer
    tsx
    stx n                       ; preserve machine stack frame pointer

pedit01                         ; PET screen editor forever loop
    jsr CHRIN                   ; Kernel - blink, then ignore a line of input
    jsr CROUT                   ; Kernel - echo the carriage return
                                ; `pla` at end of CROUT clears Z flag
    bne pedit01                 ; ... do this forever

    ; this is edit's IRQ handler
editorirq
    jsr GETSTOP
    bne pedit03
                                ; someone pressed STOP. Exit the editor
                                ; but not so fast!  Are we in quotes or inserts?
    lda QTSW                    ; $CD nonzero=quotes mode
    ora KBINS                   ; $DC number of inserts pending
    beq pedit04
pedit03
            ; ~jmp (petirq) to perform normal system IRQ
;    jmp MAINIRQ                 ; not yet?  perform normal system IRQ
    jmp (userirq)

; if we get here, clean up from cursor wink and bail out of the IRQ
pedit04
    jsr UDTIM                   ; keep the clock running even if someone leans on STOP
    ;sec                        ; because f7a1 debounce loop always sets carry
    inc BLNSW                   ; turn off cursor A7
    lda GDBLN                   ; true character at cursor position A9
    jsr DSPP                    ; ROM $E606 on 40-column BASIC4 PET
    ldx n
    txs                         ; reset stack frame
    jmp spnext                  ; restore Forth stack pointer
    ;ldx z
    ;jmp next

;--------------------------------------------------------------
#if 0
name=EDITMODE
stack=( scr -- )
tags=editor,nosymbol

#endif
#include "align.i65"
_editmode
    jsr enter
#include "page.i65"
editmode01
    .word editing
#include "page.i65"
    .word on
#include "page.i65"
    .word editor
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=>EDIT
stack=( scr -- )
tags=editor,nosymbol

* Turn on edit mode
* Save current screen in packet buffer

```
: >edit   ( scr -- )
    editmode  update  0 max block drop ;
```
#endif
#include "align.i65"
_toedit
    jsr enter
#include "page.i65"
    .word _editmode
#include "page.i65"
    .word _update
#include "page.i65"
    .word _editchongo
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=+EDIT
stack=( n -- )
tags=editor,nosymbol

Save current editor screen in packet buffer, edit the screen
`n` screens away from the current [[SCR]]

```
: +edit   ( n -- )
    scr @ +
    dup 0<
    if
        #blk @ +
    then >edit ;
```
~#golf combine this with `>np`
#endif
#include "align.i65"
_plusedit
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word zlt
#include "parm.i65"
    .word qbranch
    .byt <(plusedit01-*+1)
#include "pad.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
plusedit01
    .word _toedit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EDIT
stack=( scr -- )
tags=editor
PETTIL's editor leverages the absolutely wonderful ROM screen editor of the PET.  There is no `ESC` button on PET graphics keyboards, and you won't find one on the VIC-20 or C=64 either, so we'll just be using the `STOP` key instead.  There are things about the editor that might seem a little wonky at first, especially if you're used to editors on modern systems.

Here is the editor help screen, which shows up when someone presses `STOP-?` in the editor:
[img width=95% [edithelpscreen.png]]

There is a line buffer, which begins at `pad` and grows upward. It contains zero or more lines (up to a maximum of `height` lines) of text. Everything here operates in 40 or 80 byte chunks. The linewrap information is in user variable `pwrap`

Separate from the line buffer is the screen buffer, which is an exact replica of whatever is on entire screen when the programmer types `STOP-DEL` in the editor.  This is a screen `cut` operation.  The screen will move forward to the next screen or append a new, blank screen when `STOP-DEL` happens in the last packet.  The temporary screen buffer gets located in RAM below `vmbuf` and holds exactly one packet.  Unlike the line buffer, data blocks may be copied and pasted using this mechanism.

The `STOP-INS` command inserts a new packet that comes just before the current screen, with whatever is in the screen buffer.  If the screen buffer is empty, a new, blank screen is inserted. The programmer might type `STOP-DEL` then `STOP-INS` more than twice to make multiple copies of a screen, say, for an animation sequence.

|^key / word|^description|h
|^`STOP-Z`|^zap line buffer|
|^`STOP-C`|^copy current line to line buffer|
|^`STOP-D`|^delete current line, appending it to line buffer|
|^`STOP-P`|^insert line buffer above current line|
|^`STOP-L`|^load vmbuf from tape|
|^`STOP-S`|^save vmbuf to tape|
|^`STOP-V`|^verify vmbuf versus tape|
|^`STOP-I`|^display index (top line) of all blocks|
|^`STOP-Q`|^quit without update.  same as `STOP-R` `STOP-_`|
|^`STOP-?`|^display help screen and system info|
|^`STOP-_`|^update and exit|
|^`STOP-HOME`|^go to screen #0|
|^`STOP-UP`|^go to previous screen<br/>if performed from screen #0<br/>it wraps to the last screen|
|^`STOP-DOWN`|^go to next screen<br/>from the last screen,<br/>this adds a new, blank screen|
|^`STOP-R`|^restore current screen (undo before update)|
|^`STOP-CLR`|^set linewrap to all 40-column lines<br/>set packet type to `isscr?`<br/>and make it editable<br/>discards unseen last 24 bytes|
|^`STOP-INS`|^insert screen buffer before current screen|
|^`STOP-DEL`|^delete current screen, replacing screen buffer|
|^`_`|^exit editor (with update)|
|^`^`|^exit editor (with update)|
|^`P`|^exit editor (with update)|
|^`N`|^exit editor (with update)|
|^`L`|^exit editor (with update)|
#endif
#include "align.i65"
_edit
    jsr enter
#include "page.i65"
    .word _editmode
#include "page.i65"
    .word _editchongo
#include "page.i65"
    .word _editzilch
#include "parm.i65"
    .word plit
    .word editorirq
#include "pad.i65"
    .word cinv
#include "page.i65"
    .word store
#include "parm.i65"
edit00                          ; reentry to editor here
    .word callz
    .word swapirq               ; enable STOP key trap
#include "pad.i65"
    .word pedit
#include "parm.i65"
    .word callz
    .word swapirq               ; disable STOP key trap, also does CLI
#include "pad.i65"
    .word _editcmd              ; get and perform editor command
#include "past.i65"
    .word branch
    .byt <(edit00-*+1)          ; AGAIN

;--------------------------------------------------------------
#if 0
name=_
stack=( -- )
tags=editor

Enter the editor

(it's a back arrow character)

```
: _   ( -- )
    scr @ edit ;
```
!!!pronounced: "back"
#endif
#include "align.i65"
_back
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _edit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=^
stack=( -- )
tags=editor
The capture word `^` first captures the contents (including linewrap)
of the current display into a new editor packet, which is created and
appended to the end of the [[VMBUF]] area. Then the editor is invoked.

```
: ^   ( -- )
    editmode pkt+ update _ ;
    #blk @  scr ! pkt+ update _ ;
```
!!!pronounced: "capture"
#endif
#include "align.i65"
_caret
    jsr enter
#include "page.i65"
    .word _editmode
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
#include "page.i65"
    .word _pktplus
#include "page.i65"
    .word _update
#include "page.i65"
    .word _back
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=L
stack=( -- )
tags=editor
vocab=2
List the current screen and set `scr`
#endif
#include "align.i65"
_l
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _list
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=>NP
stack=( -- )
tags=editor,nosymbol
List the specified screen and set [[SCR]]

//pronounced: do N-P//

```
: >np
   scr @ +
   0 max  #blk @ min
   scr ! ;
```
#endif
#include "align.i65"
_donp
    jsr enter
#include "page.i65"
    .word scr
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word zero
#include "page.i65"
    .word max
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word min
#include "page.i65"
    .word scr
#include "page.i65"
    .word store
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=N
stack=( -- )
tags=editor
vocab=2
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_n
    jsr enter
#include "page.i65"
    .word one
#include "page.i65"
    .word _donp
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=P
stack=( -- )
tags=editor
vocab=2
List the specified screen and set [[SCR]]
#endif
#include "align.i65"
_p
    jsr enter
#include "page.i65"
    .word minusone
#include "page.i65"
    .word _donp
#include "past.i65"
    .word exit
