; pettil-name.a65
;#echo .       pettil-name.a65           Text parser

;--------------------------------------------------------------
#if 0
name=SKIP
stack=( -- offset )
tags=nosymbol
skip to non-match of char in `n7`, in line buffer

```
code skip   ( -- offset )
    $f0 #       lda,
    $2c c,  \ bit abs opcode
    \ fall through
end-code
```
#endif
skip
    lda #$F0                    ; BEQ opcode
    .byt $2C                    ; BIT abs
    ;fall through
;--------------------------------------------------------------
#if 0
name=SCAN
stack=( -- offset )
tags=self-modifying,nosymbol
scan to next match of char in `n7`, in line buffer pointed to by `(n6)`

N6 line buffer
N7 char delimiter

```
code scan   ( -- offset )
    $d0 #           lda,
    \ entry from skip
    '+              sta,
    in              ldy,
                    dey,
here            &-
                    iny,
    span            cpy,
                '++ bcs,
    n6 )y           lda,
    n7              eor,
here &+     \ self-modifying
    '-              bvc,
here            &++
    in              sty,
                    tya,
    'push0a         jmp,
end-code
```
#endif
scan
    lda #$D0                    ; BNE opcode
    ;
    sta skipscan03              ; #selfmodifying
    ldy userin                  ; `in`
    dey
skipscan01                                                                      BEGIN
    iny
    cpy userspan
    bcs skipscan05
    lda (R0L+2*N6),y            ; get char from buffer
    eor R0L+2*N7                ; compare to character we seek
skipscan03
    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)             UNTIL
skipscan05
    sty userin                  ; found char !, move `in`
    tya
    jmp push0a                  ;( offset )

;--------------------------------------------------------------
#if 0
name=PARSE
stack=( -- nfa|0 )
tags=secondary,outer,extra,nosymbol

* set n7 delimiter char
* refill the line buffer (if empty)
* skip/scan move `in` past token
* set n8 token length
* put length before text in buffer
* move `in` past trailing space

```
: parse   ( -- length )
    skip dup 1- <n6 +
    scan rot -
    dup !nfa ;

: !nfa
    >n8 over c!  in 1+! ;
```
#endif
#include "align.i65"
_parse
    jsr enter
#include "page.i65"
    .word skip                  ; start of name
#include "page.i65"
    .word dup
#include "page.i65"
    .word oneminus
#include "parm.i65"
    .word zpfrom
    .byt R0L+2*N6               ; line buffer
#include "pad.i65"
    .word plus
#include "page.i65"
    .word scan                  ; end of name (and/or buffer)
#include "page.i65"
    .word rot
#include "page.i65"
    .word minus                 ; length
#include "page.i65"
    .word in
#include "page.i65"
    .word oneplusstore
#include "parm.i65"
    .word tozp
    .byt R0L+2*N8               ; name.len
#include "pad.i65"
    .word tuck                  ; ( len buf len )
#include "parm.i65"
    .word pquerycolon
    .word tuck                  ; ( buf len buf )
    .word under                 ; ( 0 0 buf )
#include "pad.i65"
    .word cstore
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name==CURSOR
stack=( addr|0 -- )
tags=primitive,ext
This word serves the purposes of:

# Simultaneously fetch and store the firmware cursor in a portable way
# Manage multiple cursor instances

|tos|swap `cursor` uservar with...|<|h
|0|hardware cursor|(use `0`, although any zp address works)|
|256..65535|6 consecutive bytes at `addr`||

```
        0 =cursor               \ swap 6 bytes at `cursor` uservar with firmware cursor values
 mycursor =cursor               \ swap 6 bytes at `cursor` with `mycursor`
```
#endif
exchgcursor
    stx z
    ldx #<(-6)
    ldy #0
excur01
    lda tos+1
    bne excur02                 ; when argument is 0,
    ldy firmwarecursor-250,x    ; get Y from a list of cursor zeropage addresses
excur02
    lda (tos),y
    pha
    lda usercursor-250,x
    sta (tos),y
    iny
    pla
    sta usercursor-250,x
    inx
    bmi excur01
dropfixup
    ldx z
    jmp drop

firmwarecursor
    ;    $AF   $C6  $D5  ($C4)     $D8
    .byt DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX
    ;    3     in   lin  lin*40    span
    ;                    +blkbuf
; C4 PNT   current (logical) screen line address
; C6 PNTR  current cursor column on current line
; D8 LNMX  width of the screen (39 or 79)

;--------------------------------------------------------------
#if 0
name=QUERY
stack=( -- )
tags=secondary,fig,interpreter
Accept another line of input from the keyboard to `tib`

```
: query
    span c@ ?exit
    tib 80 expect ;
```
#endif
#include "align.i65"
_query
    jsr enter
#include "page.i65"
    .word tib
#include "pad.i65"
    .word eighty
#include "page.i65"
    .word expect
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=REFILL
stack=( -- )
tags=secondary,outer,extra,nosymbol
Uses CHRIN via `expect` to load `sib` buffer with line `lin` from `blkbuf`

assumptions:
    `lin` is valid (0..24)

    lin buf.wrap >bit cbit@             \ 0=80 1=40
    ?: 40 80 dup r> c!

;   ( 40|80 buf.line cursor -- )
: !buf.cursor
    3 c!+                        \ DFLTN device = screen(3)
                                        \ PNTR cursor position on line = 0 to capture the whole line
                                        \ TBLX = 0
    ( buffer cursor+2 )
: refill   ( -- )
    sib                                 ( sib )
    lin 40* blk@ block +                ( sib buf.line )
    lin buf.wrap >bit cbit@             ( sib buf.line 1|0 )
    ?: forty eighty swap                ( sib 40|80 buf.line )
    cursor                              ( sib 40|80 buf.line cursor )
    !buf.cursor                         ( sib 40|80 )

    lin 40* rot + !+  >r
    lin buf.wrap >bit cbit@

```
: refill   ( -- )
    sib  blk@ block   ( sib blkbuf )
    cursor
        3 c!+  0 !+
        lin 40* rot + !+  >r
        lin buf.wrap >bit cbit@
        ?: forty eighty  dup  r> c!
    0 =cursor  expect  0 =cursor ;

: refill   ( -- )
    sib  blk@ block
    cursor
        3 c!+  0 !+
        lin 40* rot + !+  >r
        lin buf.wrap >bit cbit@
        ?: forty eighty  dup  r> c!
    0 =cursor  expect  0 =cursor ;
```
#endif
#include "align.i65"
_refill
    jsr enter
#include "page.i65"
    .word sib
#include "page.i65"
    .word blkfetch
#include "page.i65"
    .word _block
#include "page.i65"
    .word cursor
#include "page.i65"
    .word three
#include "page.i65"
    .word cstoreplus
#include "page.i65"
    .word zero
#include "page.i65"
    .word _storeplus
#include "page.i65"
    .word lin
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word rot
#include "page.i65"
    .word plus
#include "page.i65"
    .word _storeplus
#include "page.i65"
    .word tor
#include "page.i65"
    .word lin
#include "page.i65"
    .word _bufwrap
#include "page.i65"
    .word tobit
#include "page.i65"
    .word cbitfetch
#include "parm.i65"
    .word pquerycolon
    .word forty
    .word eighty
#include "pad.i65"
    .word dup
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word cstore
#include "page.i65"
    .word zero
#include "page.i65"
    .word exchgcursor
#include "page.i65"
    .word expect
#include "page.i65"
    .word zero
#include "page.i65"
    .word exchgcursor
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=LIN+
stack=( -- flag )
tags=primitive,outer,extra,nosymbol
Return `false` when last line of screen is reached

#endif
linplus
    ldy userlin
    bmi linplus01               ; lin = -1 means top of screen, +1
    bit usercursor+5            ; V is opposite of linewrap bit for this line (0=40 true=80)
    bvc linplus01               ; ( 40 ) lin 1+!
    iny                         ; ( 80 ) lin 2+!
linplus01
    iny
    sty userlin
    jmp next

;--------------------------------------------------------------
#if 0
name=EOI?
stack=( -- flag )
tags=primitive,outer,extra,nosymbol
( interactive ) true when `in` reaches end of line
( loading ) true when `lin` reaches end of screen or, (when intereactive) `eol?`

#endif
eoiq
    lda userblk
    beq eolq
    lda userlin
    cmp #LPERSCR
    jmp xpushc
;[13]

;--------------------------------------------------------------
#if 0
name=EOL?
stack=( -- flag )
tags=primitive,outer,extra,nosymbol
true when `lin` reaches end of screen

#endif
eolq
    lda userin
    cmp userspan
    jmp xpushc
;[9]

;--------------------------------------------------------------
#if 0
name=EMPTY?
stack=( -- flag )
tags=primitive,outer,extra,nosymbol
Did the user just hit RETURN on an empty line?

This relies on `n0` as a (very) temporary mailbox written by `expect`!

#endif
emptyq
    ldy n                       ; mailbox. if populated with $FF by `expect`, that's why.
    iny                         ; presumably, the user will just hit return all day long
    jmp xpushz
;[6]

;--------------------------------------------------------------
#if 0
name=NOMLOADING?
stack=( -- flag )
tags=secondary,outer,extra,nosymbol


```
: nomloading? ( -- flag )
    lin+ eoi? ;
```
#endif
#include "align.i65"
_nomloadingq
    jsr enter
#include "page.i65"
    .word linplus
#include "page.i65"
    .word eoiq
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NOMSESSION?
stack=( -- flag )
tags=secondary,outer,extra,nosymbol

```
: nomsession? ( -- flag )
    span c@ empty? or ;
```
#endif
#include "align.i65"
_nomsessionq
    jsr enter
#include "page.i65"
    .word span
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word emptyq
#include "page.i65"
    .word orx
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=HUNGRY?
stack=( -- flag )
tags=secondary,outer,extra,nosymbol

```
: hungry?   ( -- flag )
    blk@ ?: nomloading? nomsession? ;
```
#endif
#include "align.i65"
_hungryq
    jsr enter
#include "page.i65"
    .word blkfetch
#include "parm.i65"
    .word pquerycolon
    .word _nomloadingq
    .word _nomsessionq
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?NOMNOM
stack=( flag -- )
tags=secondary,outer,extra,nosymbol
`name` is the name of the word formerly known as `word`, which is not
present.  Absence of `word` is a variance from the Forth-83 standard, and
the new and improved `name` fulfills all the original purposes of `word`.
---
return address of next token in the line buffer, or
return false when the input stream is exhausted.

```
: ?nomnom   ( flag -- )
    ?exit blk@ ?: refill query ;
```
//maybe-nom-nom//
#endif
#include "align.i65"
_qnomnom
    jsr enter
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word blkfetch
#include "parm.i65"
    .word pquerycolon
    .word _refill
    .word _query
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NAME
stack=( char -- nfa|false )
tags=outer,extra
`name` is the name of the word formerly known as `word`, which is not
present.  Absence of `word` is a variance from the Forth-83 standard, and
the new and improved `name` fulfills all the original purposes of `word`.
---
return NFA of next token in the line buffer, or
return FALSE when the input stream is exhausted.

```
: name   ( char -- nfa|false )
    blk@ ?: sib tib  n6 2!
    begin   eol?
    while   hungry?  dup ?nomnom
    until
    exhausted? ?: false parse  n0 coff ;
```

#endif
#include "align.i65"
_name
    jsr enter
#include "page.i65"
    .word blkfetch
#include "parm.i65"
    .word pquerycolon
    .word sib
    .word tib
#include "parm.i65"
    .word blit
    .byt R0L+2*N6
#include "pad.i65"
    .word twostore              ; set n6=lib; n7=char
#include "page.i65"
name01
    .word eolq
#include "parm.i65"
    .word qbranch
    .byt <(name02-*+1)
#include "pad.i65"
    .word _hungryq
#include "page.i65"
    .word _qnomnom
#include "page.i65"
    .word eoiq
#include "page.i65"
    .word qbranch
    .byt <(name01-*+1)
#include "pad.i65"
name02
    .word eoiq
#include "parm.i65"
    .word pquerycolon
    .word false
    .word _parse
#include "parm.i65"
    .word blit
    .byt R0L+2*N0                       ; empty mailbox
#include "pad.i65"
    .word coff
#include "past.i65"
    .word exit
