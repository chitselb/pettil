; pettil-studio.a65
#echo .       pettil-studio.a65
#echo .       PETTIL Developer Studio (intepreter, compiler, editor, assembler)

#include "setopts.i65"
#include "sweet16.i65"
#include "../../tmp/pettil-core.def"
hitop=$HITOP

    * = fencepost
; temporary one-time startup code and entertainment
#include "pettil-cold.a65"
;==============================================================
; code above this point is void memory after startup
;==============================================================

    .word hitop-2               ; load address
    .word tdictend-_studio      ; size of the transient dictionary in bytes
    * = hitop
#echo Transient Dictionary
#print *

;--------------------------------------------------------------
#if 0
name=STUDIO
stack=( -- )
tags=system,startup,throwaway,nosymbol
One time startup code

* start `splash` entertainment
* cmove `symtab`
* `symdex`
* `deadbeef`
* `warm`

```
<0400> core
<1B68> fence
{ disappearing startup code }
<1F6F> there
hitop-2
tdict.size
{ disappearing tdict startup code }
{ deadbeef }
<56FE> vmbuf

<00> zeropage
<01> stack
<0200> buffers
<0400> core
<1A24> here
{ disappearing banner startup code }
{ deadbeef }
<56FE> vmbuf
<5700> blkbuf
<5B00> symtab
<6900> { disappearing startup code & deadbeef }
<6A00> tdict (studio code)
<7E84> tdp
<8000> VIDRAM

: studio
    ['] there+2 @+ + 32 - symtab !
    chilly cmove
    ." banner message"
    cold

: studio   ( -- )



```
#endif
#include "align.i65"
_studio
    jsr enter
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word yeahboy
;#include "pass.i65"
;    .word plits
;    .byt 3
;    .word user0tdict           ; cmove
;    .word usertdict
;    .word utdict-user0tdict
;#include "page.i65"
;    .word cmove                ; reset `tdict` `tdp` `#voc`
#include "page.i65"
    .word _qletter              ; all caught up on big letters
#include "pass.i65"
    .word dlit
    .word there+2
    .word EAL
#include "page.i65"
    .word fetchplus
#include "page.i65"
    .word plus
#include "page.i65"
    .word twoplus               ; start of symbols
#include "page.i65"
    .word swap
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word minus
#include "page.i65"
    .word _calcmem
#include "page.i65"
    .word cmovegt
#include "page.i65"
    .word bl
#include "page.i65"
    .word minus
#include "page.i65"
    .word symtab                ; points to unindexed symbol list
#include "page.i65"
    .word store
#include "pass.i65"
    .word plits
    .byt 7
    .word _warm                 ; !
    .word userstartup
    .word _mackinac
    .word userwarning
    .word user0tdict            ; cmove
    .word usertdict
    .word utdict-user0tdict
#include "page.i65"
    .word cmove                 ; reset `tdict` `tdp` `#voc`
#include "page.i65"
    .word store                 ; set `warning` to `mackinac`
#include "page.i65"
    .word store                 ; set `startup` to `warm`
#include "page.i65"
    .word _symdex
#include "page.i65"
    .word _emptybuffers
#include "pass.i65"
    .word restart               ; and bounce it (#3) (fake)`warm`

#include "pass.i65"
    .word plits
    .byt 3
    .word splashirq
#ifdef IS_VIC20
    .word VIDRAM+11*22
    .word 12*22
#else
    .word VIDRAM+11*40
    .word 14*40
#endif
#include "page.i65"
    .word blank

yeahboy
    jmp next

;--------------------------------------------------------------
#if 0
name=SPLASHIRQ
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
splashirq
    jsr splash
    jsr countactions
    jmp MAINIRQ

;--------------------------------------------------------------
#if 0
name=COUNTACTIONS
stack=( -- )
tags=system,subroutine,startup,nosymbol
Subroutine, bump the action number during startup

0 nothing happened yet
1 "P"
2 "E"
3 "T"
4 "*"
5 "T"
6 "I"
7 "L"
etc...

#endif
countactions
    dec actiondelay
    bne countactions09
    inc actionidx
    lda #33
    sta actiondelay
countactions09
    rts

;--------------------------------------------------------------
#if 0
name=SPLASH
stack=( -- )
tags=system,subroutine,startup,nosymbol
Subroutine, randomly dither diagonal lines on the screen

#endif
splash
    lda #8
    sta splashes
splash01
    jsr randu
    tax
    lda #>((VIDRAM + BPERSCR + $0100) & $0F00)  ; VIC-20 = 2; PET,C=64,Plus/4 = 4; PET80 = 8; how many pages/screen?
    sta splashpage
    lda #>VIDRAM
    sta splash02+2
    sta splash03+2
splash02
    lda VIDRAM,x
    jsr splish
splash03
    sta VIDRAM,x
    inc splash02+2
    inc splash03+2
    dec splashpage
    bne splash02
    dec splashes
    bne splash01
    rts

splish
    tay
    eor #$4C                    ; swap \ <--> / else leave it alone
    and #$7C
    php
    tya
    plp
    bne splish01
    eor #3
splish01
    rts

actiondelay
    .byt 15

actionidx
    .byt 0

actionnow
    .byt 0

actioncfa
    .word pettillogo

splashpage
    .byt 0

splashes
    .byt 0

;--------------------------------------------------------------
#if 0
name=CALCMEM
stack=( size -- size addr )
tags=system,startup,throwaway,nosymbol
Calculate `symtab` memory requirements, given a size



```
| zp | stack | system | core | available RAM | vmbuf | blkbuf | symtab | tdict |
```
#endif
#include "align.i65"
_calcmem
    jsr enter
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word tdict
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "pass.i65"
    .word plit
    .word $FF00
#include "page.i65"
    .word andx
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SYMDEX
stack=( -- )
tags=system,startup,nosymbol
Build thread index for `symtab`

```
: symdex   ( -- )
    ;
```
#endif
#include "align.i65"
_symdex
    jsr enter
#include "page.i65"
    .word xyzzy
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=MACKINAC
stack=( -- )
tags=system,startup,nosymbol
Part of cold start, connect lower `core` and upper `tdict` dictionaries

6976
5C20
d56

41CF
347A
d55

gross trick: the error path out of `warm` gets us here.  Once here,
fix the error handler (`warning`) and `warm` now kicks out to `abort`


: mackinac
    (automem)
    ( lowmem symtab symtab.size ) cmove


#endif
#include "align.i65"
_mackinac
    jsr enter
#include "page.i65"
    .word drop                  ; `warm` sent us an error #
#include "page.i65"
    .word here                  ; `here` now points to `there`
#include "page.i65"
    .word _pforget
#include "pass.i65"
    .word plits
    .byt 5
    .word userdp
    .word userfence             ; @ swap !
    .word _errormsg
    .word userwarning           ; !
    .word MAINIRQ               ; irq!
#include "page.i65"
;~~~    .word irqstore              ; restore default IRQ handler
#include "page.i65"
    .word store                 ; set `warning` to `error.msg`
#include "page.i65"
    .word fetch                 ; fix DP to reclaim startup code area
#include "page.i65"
    .word swap
#include "page.i65"
    .word store
#include "page.i65"
    .word pl11
#include "page.i65"
    .word _deadbeef
#include "page.i65"
    .word _emptybuffers         ; do this again here, because DEADBEEF
#include "pass.i65"
    .word restart               ; restart #4 -> `warm`

;--------------------------------------------------------------
#if 0
name=DEADBEEF
stack=( -- )
tags=startup,nosymbol
Fill available memory with the 32-bit value `$DEADBEEF` . Discarded after
running once at startup.  Used to assist in debugging.

#endif
#include "align.i65"
_deadbeef
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt deadbeef00-*-1
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc CRSRLEFT,CRSRLEFT,RVSON,"DEAD",CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT
deadbeef00
#include "page.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "pass.i65"
deadbeef01
    .word dlit
    .word $adde,$efbe           ; little-endian makes pretty 8-bit hex dumps
#include "page.i65"
    .word rot
#include "page.i65"
    .word four
#include "page.i65"
    .word minus
#include "page.i65"
    .word here
#include "page.i65"
    .word over
#include "page.i65"
    .word lt
#include "pass.i65"
    .word qbranch
    .byt <(deadbeef02-*+1)
#include "page.i65"
    .word dashrot
#include "page.i65"
    .word third
#include "page.i65"
    .word twostore
#include "pass.i65"
    .word branch
    .byt <(deadbeef01-*+1)
#include "page.i65"
deadbeef02
    .word drop
#include "page.i65"
    .word here
#include "page.i65"
    .word twostore
#include "pass.i65"
    .word _pdq
    .byt deadbeef03-*-1
    .asc    RVSOFF,"BEEF",CR,CR
deadbeef03
#include "pass.i65"
    .word exit

#print *
    .dsb hitop+512-*,$EA       ; ~#resizetdict
#print *

#if 0
name=TDICTBASE
stack=( -- )
tags=nosymbol
Bottom edge of PETTIL Studio.  [[TDICT]] contains this address.
#endif
tdictbase

;--------------------------------------------------------------
user0tdict      .word tdictbase
user0tdp        .word tdictend
user0numvoc     .word 2         ; `editor` & `assembler`
user0vocabs     .byt 9
utdict

; ---- copy from initialization values
usertdict       = uendcore+0    ;1
usertdp         = uendcore+2    ;2
usernumvoc      = uendcore+4    ;3
uservocabs      = uendcore+6    ;                                       10-byte

; ---- WARM will set to 0
usercsp         = uendcore+16
usercurrent     = uendcore+18
userredefined   = uendcore+20
usernewest      = uendcore+22
userstate       = uendcore+24
userpwrap       = uendcore+26   ;                                        4-byte
userpaste       = uendcore+30
usersymnew      = uendcore+32   ;1
usersymtail     = uendcore+34   ;2
userbloom       = uendcore+36   ;3                                       64-bit
userpassbits    = uendcore+44   ;                                        32-bit
utend = uendcore+48

;--------------------------------------------------------------
#if 0
name=~ Error messages
tags=general,nosymbol
PETTIL system messages, output by [[FAIL]]
#endif
messages
    .word msg00,msg01,msg02,msg03,msg04,msg05,msg06,msg07
    .word msg08,msg09,msg10,msg11,msg12,msg13
msg00
    .byt msg01-*-1
    .asc CR,"WELCOME TO PETTIL "

#if (ROM_OPTIONS & ROM_PET_4)
#if (ROM_OPTIONS <> ROM_PET_CHITSELB)
#if (ROM_OPTIONS & ROM_PET_80)
    .asc "(80 COLUMN)"
#else
    .asc "(4.0 PET)"
#endif
#else
    .asc "(#700251)"
#endif
#endif
#if (ROM_OPTIONS & ROM_PET_UPGRADE)
    .asc "(UPGRADE ROM)"
#endif
#if (ROM_OPTIONS & ROM_VIC20)
    .asc "(VIC-20)"
#endif
#if (ROM_OPTIONS & ROM_C64)
    .asc "(C=64)"
#endif
#if (ROM_OPTIONS & ROM_C128)
    .asc "(C128)"
#endif
msg01
    .byt msg02-*-1
    .asc "STACK UNDERFLOW"
msg02
    .byt msg03-*-1
    .asc "STACK OVERFLOW"
msg03
    .byt msg04-*-1
    .asc "NOT FOUND"
msg04
    .byt msg05-*-1
    .asc "MISSING NAME"
msg05
    .byt msg06-*-1
    .asc "COMPILATION ONLY"
msg06
    .byt msg07-*-1
    .asc "UNPAIRED CONDITIONALS"
msg07
    .byt msg08-*-1
    .asc "NOT BELOW FENCE"
msg08
    .byt msg09-*-1
    .asc "BLOCK OUT OF RANGE"
msg09
    .byt msg10-*-1
    .asc "MISSING DELIM"
msg10
    .byt msg11-*-1
    .byt "CORRUPT VIRTUAL MEMORY"
msg11
    .byt msg12-*-1
    .byt "BAD ADDRESSING MODE"
msg12
    .byt msg13-*-1
    .byt "BAD VM PACKET"
msg13

;--------------------------------------------------------------
#if 0
name=WARM
stack=( -- )
tags=startup

#endif
_warm
    jsr aloha
#include "align.i65"
    jsr enter
#include "pass.i65"
    .word plits
    .byt 5
    .word uservocabs+1          ; erase
    .word usersymnew-uservocabs-1
    .word user0tdict            ; cmove
    .word usertdict
    .word utdict-tdictbase
#include "page.i65"
    .word cmove                 ; reset `tdict` `tdp` `#voc`
#include "page.i65"
    .word erase                 ; reset
#include "page.i65"
    .word zero
#include "pass.i65"
    .word fail

;==============================================================
#include "pettil-name.a65"
#print *
#include "pettil-number.a65"
#print *
#include "pettil-user.a65"
#print *
#include "pettil-dictionary.a65"
#print *
#include "pettil-interpreter.a65"
#print *
#include "pettil-compiler.a65"
#print *
#include "pettil-utils.a65"
#print *
#include "pettil-editor.a65"
#print *
#include "pettil-assembler.a65"
#print *

nop
nop
nop

;--------------------------------------------------------------
#if 0
name=TDICTEND
stack=( -- )
tags=nosymbol,nosymbol
This label marks the upper boundary of the transient dictionary ([[TDP]])
#endif
tdictend
;==============================================================

#print (*-tdictbase)
