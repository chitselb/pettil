; pettil-number.a65
;#echo .       pettil-number.a65         Number parser
;" num.char+ more.char? prefixes flagme digit ?dpl (nextchar) (number) <=>
;" <=>n4 regoffset double? itsnormal itsaspaceship rebase :base :register :<=>
;" number :digits :. :-

;--------------------------------------------------------------
#if 0
name=NUM.CHAR+
stack=( -- c )
tags=numword,nosymbol
Return next character of the number we're parsing.  Return 0 at end of string.

~#comfortablynumber
#endif
numcharplus
    brk
    .byt dcr | N8
    .byt ld | N8
    .byt bz , <(numch01-*-2)
    .byt ldi | N7
numch01
    .byt push
    .byt nxt

;--------------------------------------------------------------
#if 0
name=MORE.CHAR?
stack=( -- f )
tags=numword,nosymbol
Returns `true` when `n8` reaches 0.

~#comfortablynumber
#endif
morecharq
    sec
    dec R0L+2*N8
    beq morecharq01
    clc
morecharq01
    jmp xpushc

;--------------------------------------------------------------
#if 0
name=PREFIXES
stack=( -- addr )
tags=numword,nosymbol
`number` prefix indexed jump table (no `cfa`)
~#comfortablynumber
#endif
prefixes
     .byt prefixes01-*-1        ; number of prefixes
     .asc ".-<=>RN#$%"
prefixes01

;--------------------------------------------------------------
#if 0
name=FLAGME
stack=( -- )
tags=numword,nosymbol

#endif
flagme
    jsr topfas
    pha
    and R0L+2*N6+1
    beq flagme01                ; blergh! `not found`
    iny                         ; ldy #3
    jmp error
flagme01
    pla
    asl
    asl
    asl
    asl
    ora R0L+2*N6+1
    sta R0L+2*N6+1
    jmp parm1pip

;--------------------------------------------------------------
#if 0
name=DIGIT
stack=( char -- digit )
tags=numword,nosymbol
Throws a "NOT FOUND" exception if `char` is not a valid digit in the current number base.  Otherwise leave `digit` on the stack.  Operates only on low byte of `tos`

#endif
digit
    lda tos
    sec
    sbc #$30
    bcs digit02                 ; is it maybe a digit?
digit01
    ldy #3
    jmp error
digit02
    cmp #10
    bcc digit03                 ; see if it's a hex digit or a real digit
    sbc #7
digit03
    cmp R0L+2*N6                ; compare to current number base
    bcs digit01                 ; not a digit?
    sta tos
digit04
    jmp next

;--------------------------------------------------------------
#if 0
name=?DPL
stack=( -- )
tags=numword,primitive,nosymbol
See if there has been a decimal point yet in the string we're parsing
to see if it is a number.  If `dpl` is positive, increment it.

|value|meaning|h
|-1|no `.` encountered|
|0|the previous character was `.`|
|+n|count of digits after `.`|

#endif
qdpl
    bit userdpl+1
    bmi digit04                 ; no decimal point so far? next
    inc userdpl                 ; `dpl` should never exceed 127
    bpl digit04                 ; bra next

;--------------------------------------------------------------
#if 0
name=(NEXTCHAR)
stack=( -- char )
tags=numword,nosymbol
Get next character, part of `number`.

|^n6|^base c@|^//(unchanged)//|
|^n7|^addr|^//+1//|
|^n8|^length|^//(unchanged)//|
|^r11|^0|^//rundown handler//|
|^tos<br/>2os|^0.||
#endif
nextchar
    brk
    .byt ldi | N7
    .byt push
    .byt nxt

;--------------------------------------------------------------
#if 0
name=(NUMBER)
stack=( addr base -- 0. )
tags=numword,nosymbol
Setup for number parser

* n7 = addr
* n6 = base c@
* n8 = length
* r11 = 0
* tos,2os = 0.

~#comfortablynumber
#endif
pnumber
    brk
    .byt set | R11              ; `number.rundown`
    .word next
    .byt ldi | TOS              ; `base c@`
    .byt st | N6                ; temp number base ; flags=0
    .byt pull
    .byt st | N7                ; address of text buffer
    .byt ldi | N7
    .byt st | N8                ; `len` and bump char pointer
    .byt sub | ACC
    .byt st | TOS
    .byt push                   ; leave `0.` as initial result
    .byt st | N3                ; zero `-` flag. -1 with a leading `-` sign
    .byt st | N4                ; zero rundown cfa (normal number)
    .byt st | N5                ; zero `nr` flag
    .byt nxt

;--------------------------------------------------------------
#if 0
name=<=>
stack=( cfa d -- )
tags=numword,nosymbol

#endif
#include "align.i65"
_spaceshipx
    jsr enter
#include "pass.i65"
    .word zpfrom
    .byt R0L+2*N4
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(spaceship01-*+1)
#include "page.i65"
    .word _xtcomma
#include "page.i65"
    .word _ccomma
#include "pass.i65"
spaceship01
    .word exit

;--------------------------------------------------------------
#if 0
name=<=>N4
stack=( -- )
tags=numword,nosymbol,primitive

#endif
sshipn4
    ldy tos
    lda sshipl-'<',y
    sta R0L+2*N4
    lda sshiph-'<',y        ; could be 'lda #7'
                                ; if zpfrom zpex tozp are on page 7
    sta R0L+2*N4+1
    jmp drop

sshipl
    .byt <zpfrom, <zpex, <tozp
sshiph
    .byt >zpfrom, >zpex, >tozp

;--------------------------------------------------------------
#if 0
name=REGOFFSET
stack=( R|N -- )
tags=primitive,numword,nosymbol

#endif
regoffset
    sec
    lda #10                     ; for R0..R15, N0..N8
    sta R0L+2*N6                ; register numbers are base 10
    lda #'R'+2                  ; off-by-one to make `n5` flag nonzero
    sbc tos                     ; +2 for `R`, or +6 if it's `N`
    lsr
    sta R0L+2*N5
    jmp drop

;--------------------------------------------------------------
#if 0
name=DOUBLE?
stack=( -- flag )
tags=primitive,numword,nosymbol
returns a poorly formed flag (either `0` or `dpl+1`)

;2018-09-06 chitselb    [7] -4 replaced secondary with shorter primitive

```
: double?   ( -- flag )
    dpl @ 1+ ;
```
#endif
#include "align.i65"
doubleq
    ldy userdpl
    iny
    jmp pvoc05
;           tya
;           jmp push0a

;--------------------------------------------------------------
#if 0
name=ITSNORMAL
stack=( d|n -- )
tags=numword,nosymbol

#endif
#include "align.i65"
_itsnormal
    jsr enter
#include "page.i65"
    .word doubleq
#include "page.i65"
    .word pquerycolon
    .word _dliteral
    .word droplit
#include "pass.i65"
    .word exit

droplit
    jsr slide
    jmp _literal

;--------------------------------------------------------------
#if 0
name=ITSASPACESHIP
stack=( n cfa -- )
tags=numword,nosymbol

#endif
#include "align.i65"
_itsaspaceship
    jsr enter
#include "page.i65"
    .word _xtcomma
#include "page.i65"
    .word _ccomma
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=REBASE
stack=( #|$|% -- )
tags=numword,nosymbol,primitive

#endif
rebasex
    ldy tos
    lda allurbases-'#',y
    sta R0L+2*N6                ; temporary number base
    jmp drop

allurbases
    .byt 10,16,2                ; #$%

;--------------------------------------------------------------
#if 0
name=:BASE
stack=( #|$|% -- )
tags=numword,nosymbol

#endif
#include "align.i65"
_base
    jsr enter
#include "page.i65"
    .word flagme
    .byt %00110001
#include "page.i65"
    .word rebasex
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:REGISTER
stack=( R|N -- )
tags=numword,nosymbol

#endif
#include "align.i65"
_register
    jsr enter
#include "page.i65"
    .word flagme
    .byt %10110010
#include "page.i65"
    .word regoffset
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:<=>
stack=( addr -- d )
tags=numword,nosymbol

#endif
#include "align.i65"
_spaceship
    jsr enter
#include "page.i65"
    .word qcomp
#include "pass.i65"
    .word flagme
    .byt %11110100
#include "page.i65"
    .word sshipn4
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NUMBER
stack=( addr -- d )
tags=numword
`number` rewritten for `studio`, this variant recognizes several prefix
characters

|prefix|purpose|
|`-`|''negative''|
|`digit`|valid ''digit'' in current number base|
|`.`|''point''|
|`<`|''from'' //(`addr` push to `tos`)//|
|`=`|''exchange'' //(swap `tos` with `addr`)//|
|`>`|''to'' //(copy `tos` to `addr`)//|
|`N`|''N'' register|
|`R`|Sweet16 ''R'' register|
|`#`|''decimal'' number base|
|`$`|''hex'' number base|
|`%`|''binary'' number base|

# push single/char
# push double
# enclose lit
# enclose clit
# enclose dlit
# compile zpfrom
# compile addrfrom
# compile zpex
# compile addrex
# compile tozp
# compile toaddr

# `-` `.` `digit` characters work like ''standard Forth''
#* `-` negate this number
#** `-` works with `.` and `#$%`
#** do not combine `-` with `<=>` or `nr`
#* `.` decimal point
#** treat this number as a 32-bit double
#** set `dpl` to location of decimal point
#** or `dpl` is -1 if not present
#** `.` works with `-` and `#$%`
#** do not combine `.` with `<=>` or `nr`
#* `digit`
#** decimal -- //0 1 2 3 4 5 6 7 8 9//
#** hex -- //0 1 2 3 4 5 6 7 8 9 A B C D E F//
#** binary -- //0 1//
#** must be less than base
# `<` `=` `>` ''spaceship'' group copies 16-bit values between `tos` and memory
#* //compilation only//
#* works with registers `>n3` `<r11`
#* uses default number base `decimal >142 hex =E820`
#* also works with explicit base operator `>#142` `=$E820`
#* may not be combined with `-` or `.`
#* `<` push contents of address to `tos`
#* `=` exchange `tos` with contents of address
#* `>` copy `tos` to an address, stack unchanged
# `n` `r` ''register'' group references Sweet16 registers
#* push register address to `tos`
#** `n3` pushes 10 to `tos`
#* works with spaceship operators `=r6` `>n8`
#* do not combine with `-` or `.`
#* `n` Forth registers `n0`.. `n8`
#* `r` Sweet16 registers `r0`..`r15`
# `#` `$` `%` ''base''  group sets number base for this number only
#* idea stolen from Volksforth
#* `#` decimal //(base 10)//
#* `$` hexadecimal //(base 16)//
#* `%` binary //(base 2)//

```
: number   ( 123 -- d )
    (number)                    \ set things up
                                    \ initialize prefix flags = 0
                                    \ `n7` already has `addr`
                                    \ `n8` already has `len`
                                    \ set `n6` to `base`
                                    \ push 0.
    begin
        num.char+ dup
        " -<=>RN#$%"+null $index 2*
        >dispatch
        :digits? ,
        :minus ,
        :from ,  :exchange ,  :to ,
        :r ,  :n ,
        :decimal ,  :hex ,  :binary ,
:num.next
                                ( flag )
    until
    ;



    begin
        num.char+ ?dup
    while
        " -<=>RN#$%" $index 2*
        >dispatch
        :digits? ,
        :minus ,
        :from ,  :exchange ,  :to ,
        :r ,  :n ,
        :decimal ,  :hex ,  :binary ,
:num.next
    repeat
    ;

:minus  ( -- )
    %11101000 prefix.flags      \ -<N#-<N# disallow/set
                                \ set prefix flag `-`
                                    \ disallow another `-`
                                    \ disallow `<=>`
                                    \ disallow `rn`
                                    \ allow `#$%`
        >num.next               \ another character


:<=>
                                \ state off: "COMPILATION ONLY"
                                \ state on: compile one of:
                                    `tozp`
                                    ;`tomem`
                                    `zpex`
                                    ;`exchgmem`
                                    `zpfrom`
                                    ;`memfrom`
    ?comp                       \ compile mode only
    %11000100 prefix.flags      \ -<N#-<N# disallow/set
                                \ set prefix flag `<=>`
                                    \ disallow `-`
                                    \ disallow another `<=>`
                                    \ allow `rn`
                                    \ allow `#$%`
:from
zpfrom
:exchange
zpex
:to
tozp

:register
    %11110010 prefix.flags      \ -<N#-<N# disallow/set
                                \ set prefix flag `rn`
                                    \ disallow `-`
                                    \ disallow `<=>`
                                    \ disallow another `rn`
                                    \ disallow `#$%`
                                \ `this.chr`
                                \ eor #$04    r or n
                                \ adc ACC     offset
                                \ + 2* `value`

    prefix?
                                \ addr -> n7
                                ( flag )

:r
+4
:n
+0

:base
                                \ sets default number `base`
    %11110001 prefix.flags      \ -<N#-<N# disallow/set
                                \ set prefix flag `#$%`
                                    \ disallow `-`
                                    \ disallow `<=>`
                                    \ disallow `rn`
                                    \ disallow another `#$%`
                                \ change 'n6l'

:decimal
10 >base
:hex
16 >base
:binary
2 >base


     0 0 rot count
                                ( 0 0 addr+1 len )
     over c@ [ ascii - ] literal  =
                                ( 0 0 addr+1 len negative? )
     dup>r
                                ( 0 0 addr+1 len negative? )  ( R; negative? )
     +                          \ adjust length for sign char )
                                ( 0 0 addr+1 lenadj )
     over + r@ -
                                ( 0 0 addr+1 addrhigh+1 )
     swap  r@ -
                                ( 0 0 addrhigh+1 addrlow )
     dpl on                     \ -1 means no decimal place
     ?do
                                ( d )
         base @ >r
                                ( d ) ( R; base negative? )
         i c@  r@
                                ( )
         digit
                                ( -- d currdigit~?~ flag )
         if
             swap r@ um*
             drop rot
             r@ um* d+
             dpl @ 1+  0= negate dpl +!
         else
             i c@ [ ascii . ] literal  =
             dpl @ 0<  and
             if
                 dpl off
             else
                 3 fail ( abort" not found" )
             then
         then
         r> drop
                                ( R; negative? ; discard base )
     loop
     r>  if  dnegate  then ;

Inspired by what I read about PLASMA, another 6502 retro language targeting very similar Apple II hardware, I thought, well here's 32 bytes of Sweet16 register space just sitting around while Forth spins itself dizzy at the tip of the stack. Why not put in something like local variables which map to the Sweet16 register space, and have certain sets of primitives like the outer interpreter share information there? A place to spread out some of the work and speed things up, reduce code size, maybe other goodness too.

In traditional Forth, `number` leaves a signed `d` on the stack and sets `dpl`.



For implementation, I'm hooking it into NUMBER so that R0 >R0 <R0 >N8 N8 <N0 >R15 etc... won't have to be in the dictionary. While I'm at it, e.g. $BEEF will momentarily switch BASE to hexadecimal and switch back after converting the NUMBER after the leading dollar-sign, #31415 for decimal constants, %1001100 for binary

: number ( addr -- )
    dpl on  base (number)
                                ( 0. )
    begin
        (nextchar)




        \ out of characters?
    until
    brk
    ldi n7

( dlo dhi )
dpl @ 1+ ?dup 2drop
( dlo dhi )

```

!!!Test Plan

|^319<br/>32768<br/>32767<br/>999999|319<br/>-32768<br/>32767<br/>16959|^handle 16-bit positive numbers<br/>//range 0-65535//|
|^-32879||^handle 16-bit negative numbers<br/>//range 0-65535//|
|^3.141592653<br/>55.15555<br/>32767<br/>999999|^3141592653|^handle 32-bit positive numbers<br/>//range 0-65535//|
|^-32879|^32657|^handle 32-bit negative numbers<br/>//range 0-65535//|
|^-32879<br/>//compilation only//|^32657|^handle 32-bit negative numbers<br/>//range 0-65535//|


~#comfortablynumber
#endif
#include "align.i65"
_number
    jsr enter
#include "page.i65"
    .word dpl
#include "page.i65"
    .word on
#include "page.i65"
    .word base
#include "page.i65"
    .word pnumber               ; ( 0. )
#include "page.i65"
number01
    .word nextchar              ; ( result. char )
#include "pass.i65"
    .word dlit
    .word prefixes
    .word number09
#include "page.i65"
    .word third
#include "page.i65"
    .word dolindex
#include "page.i65"
    .word _casenum
#include "page.i65"
number02
    .word morecharq
#include "pass.i65"
    .word qbranch
    .byt <(number01-*+1)
#include "pass.i65"
    .word zpfrom
    .byt R0L+2*N3               ; -1 for negative; 0 for positive
#include "pass.i65"
    .word qbranch
    .byt <(number03-*+1)
#include "page.i65"
    .word dnegate
#include "page.i65"
number03
    .word doubleq              ; ( 0 if single, nonzero if double )
#include "page.i65"
    .word qdup
#include "page.i65"
    .word twodrop
#include "pass.i65"
    .word zpfrom
    .byt R0L+2*N5               ; flag -- `n`=3; `r`=1; not a register = 0
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(number04-*+1)
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word plus
#include "page.i65"
    .word twostar
#include "page.i65"
number04
    .word compilingq
#include "pass.i65"
    .word qbranch
    .byt <(number06-*+1)
#include "pass.i65"
    .word zpfrom
    .byt R0L+2*N4               ; cfa or `0` for normal number
#include "page.i65"
    .word dup
#include "page.i65"
    .word pquerycolon
    .word _itsaspaceship
    .word _itsnormal
#include "page.i65"
    .word extuntil02            ; jmp(r11) performs `number` rundown
#include "pass.i65"
number06
    .word exit

number09
    .word _digits              ; digit <base
    .word _punkt               ; .
    .word _minus               ; -
    .word _spaceship           ; <
    .word _spaceship           ; =
    .word _spaceship           ; >
    .word _register            ; R
    .word _register            ; N
    .word _base                ; #
    .word _base                ; $
    .word _base                ; %

;--------------------------------------------------------------
#if 0
name=:DIGITS
stack=( addr -- d )
tags=numword,nosymbol
:digits   ( d 0 -- )

#endif
#include "align.i65"
_digits
    jsr enter
#include "page.i65"
    .word digit
#include "page.i65"
    .word tor
#include "pass.i65"
    .word zpfrom
    .byt R0L+2*N6
#include "page.i65"
    .word lsb
#include "page.i65"
    .word zero
#include "pass.i65"
    .word tozp
    .byt R0L+2*ACC
#include "page.i65"
    .word pumstar
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word _mplus
#include "page.i65"             ; ~called 1x, could inline
    .word qdpl                  ; what about the decimal point?
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:.
stack=( addr -- d )
tags=numword,nosymbol
Decimal point `.` handler for `number`


#endif
#include "align.i65"
_punkt
    jsr enter
#include "pass.i65"
    .word flagme
    .byt %01101111              ; - <=> NR #$%
#include "page.i65"
    .word dpl
#include "page.i65"
    .word nip
#include "page.i65"
    .word dup
#include "page.i65"
    .word fetch
#include "page.i65"
    .word oneplus
#include "pass.i65"
    .word qerror
    .byt 3
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=:-
stack=( addr -- d )
tags=numword,nosymbol

set rundown vector to negate routine for either double/single

#endif
#include "align.i65"
_minus
    jsr enter
#include "pass.i65"
    .word flagme
    .byt %11111000              ; - <=> NR #$%
#include "page.i65"
    .word minusone
#include "pass.i65"
    .word tozp
    .byt R0L+2*N3               ; for rundown handler
#include "page.i65"
    .word twodrop               ; discard `-` sign and -1 flag
#include "pass.i65"
    .word exit
