; pettil-dictionary.a65
;#echo .       pettil-dictionary.a65     Dictionary

/*
src/studio/pettil-dictionary.a65:name=-@
src/studio/pettil-dictionary.a65:name=NAME>
src/studio/pettil-dictionary.a65:name=>NAME
src/studio/pettil-dictionary.a65:name=EXISTS?
src/studio/pettil-dictionary.a65:name='
src/studio/pettil-dictionary.a65:name=REHASH
src/studio/pettil-dictionary.a65:name=FORGET
src/studio/pettil-dictionary.a65:name=DEFINITIONS
src/studio/pettil-dictionary.a65:name=FORTH
*/


;--------------------------------------------------------------
#if 0
name=SYMTHREAD
stack=( n -- thread )
tags=interpreter,ext,nosymbol
Returns thread address for the given input hash

0..F    @(@symtab+2*n)  (low four bits of first character)
-1      @symnew         (unsorted insertion area)

```
: symthread   ( n -- thread )
    dup 0<
    if
        drop
        symnew
    else
        2* symtab @ +
    then ;
```
#endif
symthread
    ldy usersymtab+1
    asl tos
    bcc symthread09
    lda usersymnew                  ; `-1 symthread` -> symnew
    sta tos
    ldy usersymnew+1
symthread09
    jmp puty

;--------------------------------------------------------------
#if 0
name=SYMLEN
stack=( -- len )
tags=nfa,nosymbol
visible length of `nfa` in `n3`

#endif
symlen
    lda #>(pushya-1)
    pha
    lda #<(pushya-1)
    pha
;--------------------------------------------------------------
#if 0
name=SYMLENS
tags=subroutine,nfa,nosymbol
return visible length of `nfa` in `n3`

```
N3      nfa             .
N8L     .               len
A       .               len
Y       .               0
C       .               vocab?
Z       .               last?
```
#endif
symlens
    ldy #0
    lda (R0L+2*N3),y            ; length/flags
    asl
    asl                         ; Vocab bit to C flag
    lda (R0L+2*N3),y            ; length/flags
    and #$1F                    ; length
    sta R0L+2*N8                ; N8L = visible length (omit vocab +1)
    rts
;{27}

;--------------------------------------------------------------
#if 0
name=SYMCOPYS
stack=( target -- target )
tags=subroutine,nfa,nosymbol

* copy `name` text
* copy length/flags byte
* copy `vocabid` byte

```
TOS     target          .
N3      nfa             .
N8L     .               len
A       .               len
Y       .               FF
N       .               true
C       .               false
Z       .               false
```
#endif
symcopys
    jsr symlens
    adc #0
    tay
symcopy01
    lda (R0L+2*N3),y
    sta (tos),y
    dey
    bpl symcopy01
    rts

;--------------------------------------------------------------
#if 0
name=SYM+S
stack=( -- )
tags=subroutine,ext,primitive,nfa,nosymbol
hop `n3` to next `nfa`

```
N3      nfa             nfa+
N8L     .               len
Y       .               0
Z       .               false
```
#endif
sympluss
    jsr symlens
    adc #3
    adc R0L+2*N3
    sta R0L+2*N3
    bcc sympluss01
    inc R0L+2*N3+1
sympluss01
    rts

;--------------------------------------------------------------
#if 0
name=NEWSYMTAB
stack=( symtab.end symtab.start -- addr )
tags=ext,nosymbol
Calculate a new `symtab` address

```
TOS     symtab.start    symtab'
TOS.L   .               0
N0      symtab.end      symtab.size
N1      .               tdp
```
#endif
newsymtab
    jsr harvests2
    brk
    .byt ld | N0                ; `symtab.end`
    .byt sub | TOS              ; -`symtab.start`
    .byt st | N0                ; `symtab.size`
    .byt set | N1
    .word userstudio
    .byt ldd | N1               ; `studio`
    .byt sub | N0
    .byt st | TOS               ; `symtab`
    .byt rtn
    dec tos+1                   ; another page for growth, please
    jmp ff00and

;--------------------------------------------------------------
#if 0
name=BLOOM#
stack=( -- n )
tags=ext,nosymbol
The Bloom filter tries to answer the question, 'is this word a number?'

The string under consideration is pointed to by (N3) with a length of N8.

Generate a hash of a string, in the range 0..63, used as an index into the
sparsely populated `bloom` 8-byte bitfield.

A `true` bloom filter bit means, this word might be in the dictionary
A `false` bit means, this word is not present

`create` turns on the `bloom` bit for each new name
`forget` completely rebuilds the `bloom` filter

#endif
bloomhash
    ldy R0L+2*N8                ; length
    lda #0
    sta z
bloomhash01
    lda (R0L+2*N3),y
    eor #$30
    cmp #10
    bcs bloomhash02
    sec
    adc z
    sta z
bloomhash02
    dey
    bne bloomhash01
    lda z
    and #$3F                    ; width of the filter is 64 bits
    jmp pushya

;--------------------------------------------------------------
#if 0
name=BLOOMFILTER
stack=( -- mask addr )
tags=nfa,dictionary,nosymbol

Returns a `mask`/`addr` pair suitable for `cbit!` or `cbit@`

```
: bloomfilter   ( -- mask addr )
    bloom# bloom >bit ;
```
#endif
#include "align.i65"
_bloomfilter
    jsr enter
#include "page.i65"
    .word bloomhash
#include "page.i65"
    .word bloom
#include "page.i65"
    .word tobit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=PEARSON#
stack=( nfa -- nfa pearson# )
tags=ext,nfa,nosymbol
tuck the hash value for name field address at N3
`pearson#` is the 4-bit thread index (0..F)

This hash is used to divide the entire symbol table into
16 roughly equal-sized lists called "threads".  The Ruby
script `pearson.rb` is used to generate 8 initial values
from the base dictionary, so if you feel a need to come
up with your own numbers after adding to the common wordlist,
there's the tool.

the Pearson hash should return an evenly distributed
value between $00-$0F based on the values generated from
the core dictionary.  In other words, all 16 threads
are initially balanced with the same number of words,
to reduce searches to (on average) 1/16th of the
dictionary.

```
symbol table entry
+---------------+
|    CFA[low]   |  -2      Code field address
|    CFA[high]  |
+-+-+-+-+-+-+-+-+
|     [   len   ]  NFA     Length field
[S]             |          Smudge bit
| [V]           |          Vocabulary bit
|   [I]         |          Immediate bit
+-+-+-+-+-+-+-+-+
|   name[1]     |  +1      Name field
|           ... |
|   name[len]   |  +len
+---------------+
?  vocab id     ?  +len+1  Vocabulary ID (if V bit set)
+---------------+
```

2017-09-20 this is just AND #$0F, not Pearson hash anymore, so vestigial label.
#endif
pearsonhash
    ldy #1
    lda (R0L+2*N3),y    ; [5]
    and #$0F
    jmp push0a

;--------------------------------------------------------------
#if 0
name=UNSMUDGE
stack=( nfa -- )
tags=compiler,nosymbol
Turn off the smudge bit so it can be found by [[FIND]].  In
PETTIL, the smudge bit does double duty, also deactivating any
words that have been [[REDEFINED]].

#endif
unsmudge
    clc
    .byt $29            ; AND #
    ; fall through
;--------------------------------------------------------------
#if 0
name=SMUDGE
stack=( nfa -- )
tags=compiler,nosymbol
Turn on the smudge bit.  Smudged names won't be found by FIND.
In PETTIL, the smudge bit does double duty, also marking as
inactive any names that have been [[REDEFINED]].
#endif
smudge
    sec
    ;
    php
    ldy #0
    lda (tos),y
    asl
    plp
    ror
    sta (tos),y
    jmp drop

;--------------------------------------------------------------
#if 0
name=-@
stack=( nfa -- cfa )
tags=extra
decrement `tos` and fetch the value

#endif
minusfetch
;--------------------------------------------------------------
#if 0
name=NAME>
stack=( nfa -- cfa )
tags=compiler
Returns the Code Field Address (`cfa`) of the provided Name
Field Address (`nfa`)

```
: name>   ( nfa -- cfa )
    2- @ ;
```
#endif
namefrom
    jsr tos2minus
namefrom01
    jmp fetch

;--------------------------------------------------------------
#if 0
name=>NAME
stack=( cfa -- nfa|0 )
tags=compiler
Returns the Name Field Address (`nfa`) of a given word, or 0
if the provided Code Field Address (`cfa`) wasn't found in the
symbol table.  This word honors the smudge bit

Populates `n3` with the current `nfa`

~todo: handle smudged names

```
: >name   ( cfa -- nfa|0 )
    0 symthread @ n3 !
    begin
        name> under <>
    while
        sym+ symlen 0=
    until
    <n3 symlen 0<> and nip ;
```
#endif
#include "align.i65"
_toname
    jsr enter
#include "page.i65"
    .word zero
#include "page.i65"
    .word symthread
#include "page.i65"
    .word fetch
#include "parm.i65"
    .word blit
    .byt R0L+2*N3
#include "pad.i65"
    .word store
#include "parm.i65"
toname01
    .word zpfrom
    .byt R0L+2*N3
#include "pad.i65"
    .word namefrom
#include "page.i65"
    .word under
#include "page.i65"
    .word ne
#include "parm.i65"
    .word qbranch
    .byt <(toname02-*+1)
#include "parm.i65"
    .word callz
    .word sympluss
#include "parm.i65"
    .word symlen
#include "page.i65"
    .word zeq
#include "parm.i65"
    .word qbranch
    .byt <(toname01-*+1)
#include "parm.i65"
toname02
    .word zpfrom
    .byt R0L+2*N3
#include "pad.i65"
    .word symlen
#include "page.i65"
    .word zne
#include "page.i65"
    .word andx
#include "page.i65"
    .word nip
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=IMMEDORNOT
stack=( true -- -1|+1 )
tags=interpreter,forth-83,nosymbol
Returns +1 if the immediate bit is set on current `nfa`
Otherwise returns -1
#endif
immedornot
    ldy #0
    lda (R0L+2*N3),y            ; length/flags of curr `nfa`
    and #$20                    ; immediate?
    lsr
    lsr
    lsr
    lsr                         ; divide by 16, $02 when immediate
    jmp nplus                   ; add 0 or 2 to tos

;--------------------------------------------------------------
#if 0
name=(SEEK)
stack=( n3=nfa n4=sorted/unsorted ; nfa -- xfa ; n2=flag )
tags=interpreter,primitive,nosymbol
search a segment of the dictionary
                                        n2
search exits when:
end of list
    reach `symtail` (symlen = 0)        false

    found                               -1|1
        also replace nfa with cfa

    not found
    searching sorted list AND mismatched thread.id
                                        false

`tos` seek nfa
`n2` result flag ( -1 = found; 0 = not found; 1 = found, immediate )
`n3` current nfa
`n4l` seek length
`n4h` sorted thread flag:  sorted by size (0) or unsorted ($FF)
`n5` seek vocab (works like FIG `context`)
`n6` next vocab address
`n8l` current length

#endif
pseek
    jsr symlens
    beq pseeknotfound           ; reached `symtail`? not found!
    eor R0L+2*N4
    bne pseekkeeplook           ; different lengths?
    lda (R0L+2*N3),y            ; reget symbol flags
    bmi pseeknext               ; smudged? next!
    ldy R0L+2*N8                ; length (n4 == n8)
    bcc pseekscanname
    iny                         ; point to vocab id byte after `name`
    lda R0L+2*N5                ; context vocab
    .byt $2C                    ; BIT abs opcode, skip 2 bytes
pseekscanname
    lda (tos),y
    ;
    eor (R0L+2*N3),y
    bne pseekkeeplook
    dey
    bne pseekscanname
; found!
    lda (R0L+2*N3),y
    and #$20                    ; check immediate bit
    beq pseeknotimmed
    inc R0L+2*N2                ; +1
pseeknotimmed
    brk
    .byt popd | N3              ; get CFA
    .byt st | TOS
    .byt ld | N2
    .byt bnz , <(pseekfoundimmed-*-2) ; return +1, immediate
    .byt dcr | N2               ; -return 1,  not immediate
pseekfoundimmed
    .byt nxt
pseekkeeplook
    bit R0L+2*N6+1              ; stupid flag tricks
    bmi pseeknext               ; unsorted list? next!
pseeksorted
    lda R0L+2*N8
    cmp R0L+2*N4                ; length.current > length.seeking?
    bcs pseeknotfound               ; not found on sorted list!
pseeknext
    jsr sympluss                ; next!
    bne pseek                   ; bra
pseeknotfound
    inc R0L+2*N6+1              ; stupid flag tricks
    jmp next

;--------------------------------------------------------------
#if 0
name=(FOUND?)
stack=( name vocabs -- )
tags=interpreter,forth-83,nosymbol
set up Sweet16 registers for `found?`

|register|contents|h
|tos|seek nfa|
|n3|nfa|
|n4|len|
|n5|vocabs|
|n6|sorted/unsorted|
|n7|vocabid|
|n8|len|

#endif
pfoundq
    brk
    .byt ld | TOS
    .byt st | N4                ; seek N4L=`symlen` and N4H=`pearson#`
    .byt pull
    .byt inr | TOS
    .byt ld | TOS
    .byt st | N6                ; first context vocab addr, `vocabs`+1
    .byt pull
    .byt sub | ACC
    .byt st | N2                ; result 0="not found"
    .byt nxt

;--------------------------------------------------------------
#if 0
name=NOT.IN.THREAD?
stack=( name thread -- nfa|0 )
tags=compiler,nosymbol

```
: not.in.thread?   ( nfa addr -- xfa flag )
    @ n3 !                      ( nfa )
    (seek) <n2 0= ;             ( xfa flag )
```
#endif
#include "align.i65"
_notinthreadq
    jsr enter
#include "page.i65"
    .word fetch
#include "parm.i65"
    .word blit
    .byt R0L+2*N3
#include "pad.i65"
    .word store
#include "page.i65"
    .word pseek
#include "parm.i65"
    .word zpfrom
    .byt R0L+2*N2
#include "pad.i65"
    .word zeq
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=VOCAB+
stack=( -- ; N7 = @N5++ )
tags=sweet16,nosymbol

#endif
vocabnext
    brk
    .byt ldi | N5
    .byt st | N7
    .byt nxt

;--------------------------------------------------------------
#if 0
name=FOUND?
stack=( nfa -- xfa flag )
tags=interpreter,forth-83,nosymbol
This replaces the Forth-83 standard word `find`, idea from Albert van der Horst
in comp.lang.forth ~locate link~

`core` is always the last vocabulary searched.

~`only` a word to ignore core in searches~

```
n2  0
n3  01FF nfa
n4  0004 len
n5  0000 vocabs
n6  FFFF sorted/unsorted flag
n7  0000 vocabid

: found?   ( nfa -- xfa flag )
    n2 off  n3 over !+
    symlen !+  vocabs 1+ !+  on
    bloomfilter cbit@
    if
        begin
            vocab+  symnew
            not.in.thread?
        while
            >n3 pearson# 2*
            symtab @ +
            not.in.thread?
        while
            <n7 0=
        until
    then  <n2 ;

```
#endif
#include "align.i65"
_foundq
    jsr enter
#include "parm.i65"
    .word blit
    .byt R0L+2*N2
#include "parm.i65"
    .word off                   ; N2=0 (`found?` result)
#include "parm.i65"
    .word blit
    .byt R0L+2*N3
#include "parm.i65"
    .word over
#include "page.i65"
    .word _storeplus            ; N3=seek nfa
#include "page.i65"
    .word symlen                ; (so we can get length)
#include "page.i65"
    .word _storeplus            ; N4=seek length
#include "page.i65"
    .word vocabs
#include "page.i65"
    .word oneplus
#include "parm.i65"
    .word _storeplus            ; N5=vocabs+1
#include "page.i65"
    .word on                    ; N6=$FFFF (sorted/unsorted)
#include "pad.i65"
    .word _bloomfilter          ; sum of decimal digits in name % 64
#include "page.i65"
    .word cbitfetch
#include "parm.i65"
    .word qbranch               ;     if
    .byt <(foundq03-*+1)
#include "page.i65"
foundq01                        ;     begin (loop through vocabs)
    .word vocabnext
#include "page.i65"
    .word symnew
#include "page.i65"
    .word _notinthreadq
#include "parm.i65"
    .word qbranch               ;     while
    .byt <(foundq03-*+1)
#include "parm.i65"
    .word tozp
    .byt R0L+2*N3
#include "pad.i65"
    .word pearsonhash
#include "page.i65"
    .word twostar
#include "page.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word _notinthreadq
#include "parm.i65"
    .word qbranch               ;     while
    .byt <(foundq03-*+1)
#include "parm.i65"
    .word zpfrom
    .byt R0L+2*N6
#include "pad.i65"
    .word zeq
#include "parm.i65"
    .word qbranch               ;     until then
    .byt <(foundq01-*+1)
#include "parm.i65"
foundq03
    .word zpfrom
    .byt R0L+2*N2
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EXISTS?
stack=( -- addr flag )
tags=interpreter,ext
parses the next token in the input stream.  Returns either the
address of the (unfound) token at HERE and a 0, or the code
field address of the word and -1 for normal, +1 for immediate
words

```
: exists?   ( -- addr flag )
   bl name ?dup ?: found? false  0<> and ;
```
#endif
#include "align.i65"
_existsq
    jsr enter
#include "page.i65"
    .word bl
#include "page.i65"
    .word _name
#include "page.i65"
    .word qdup
#include "parm.i65"
    .word pquerycolon
    .word _foundq
    .word false
#include "pad.i65"
    .word zne
#include "page.i65"
    .word andx
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name='
stack=( -- cfa )
tags=forth-83
Parse the next token in the input stream and search for it,
returning the CFA if successful.  Otherwise aborts with the
message "NOT FOUND"

```
: '   ( "name" -- cfa )
    exists? dup 0=  3 ?error ;
```
#endif
#include "align.i65"
_tick
    jsr enter
#include "page.i65"
    .word _existsq
#include "page.i65"
    .word dup
#include "page.i65"
    .word zeq
#include "parm.i65"
    .word qerror
    .byt 3                      ; NOT FOUND
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=((REDEFINE))
stack=(  -- f )
tags=compiler,nosymbol

#endif
ppredefine
    brk
    .byt ldd | N3
    .byt ld | N3
    .byt std | TOS
    .byt st | TOS
    .byt nxt

;--------------------------------------------------------------
#if 0
name=((CREATE))
stack=( a b c d -- f )
tags=compiler,nosymbol
Create a new symbol in the symbol table

* if duplicate `found?`
** `smudge` previously existing name
** issue warning message " [rvs]" .name ." [off] exists"
** set `redefined` to NFA of existing word
* enclose 3-byte CFA in the dictionary (page-adjusted)
* set Bloom Filter bit
* set `newest` to `here 3-` (page-adjusted CFA)
* is `current` nonzero?
** set NFA vocab flag bit $40
** append `current` vocab to symtail
* append CFA to `symtail`
* `symcopy` NFA to `symtail`
* move `symtail`

#endif
ppcreate
    jsr harvests6
    brk
    .byt popd | N0               ; symtail @
    .byt st | N3
    .byt ld | N2                ; cfa'
    .byt std | N3               ; write CFA to symtab
    .byt ld | N3                ; nfa'
    .byt std | TOS              ; populate `newest`
    .byt ext
    .word symcopys              ; copy the symbol/length
    .byt ldi | N1               ; vocab
    .byt bz , <(ppcreate01-*-2)
    .byt set | ACC
    .word $40
ppcreate01
    .byt st | TOS               ; TOS = $00 or $40 if vocab
    .byt inr | N7
    .byt pop | N7
    .byt st | N5
    .byt add | TOS              ; ora #$40 if vocab bit
    .byt sti | N7               ; symbol length with a proper vocab bit
    .byt ld | N7
    .byt add | N5
    .byt st | N7
    .byt pop | N1
    .byt bz , <(ppcreate02-*-2)
    .byt sti | N7
ppcreate02
    .byt ld | N7
    .byt std | N0               ; symtail !
    .byt sub | ACC
    .byt sti | N7               ; write three nulls at symtail
    .byt std | N7
    .byt pull
    .byt nxt

;--------------------------------------------------------------
#if 0
name=(CREATE)
stack=( "name" ; cfa -- )
tags=compiler,nosymbol
`(create)` adds a code field address to the dictionary and creates a new name
in `symtab` to point to it, called by `create`

smudges the existing NFA, if found.  Words like `:` will need to
switch the smudginess of the existing and newly created definition, and `;`
will undo this, smudging the prior word and unsmudging the new one.  Only one
unsmudged NFA (the most recent) should ever exist for any given `name(vocab)`.



* if duplicate `found?`
** `smudge` previously existing name
** issue warning message " [rvs]" .name ." [off] exists"
** set `redefined` to NFA of existing word
* enclose 3-byte CFA in the dictionary (page-adjusted)
* set Bloom Filter bit
* set `newest` to `here 3-` (page-adjusted CFA)
* `((create))` does these things in Sweet16
**


```
: (create)   ( "name" ; cfa -- )
    eol? [ 4 ] ?error
    redefined off  exists?
    if  .rvs  redefined ((redefine))
        dup smudge  $. ." [off] exists"
    then
    ?align cfa,  here 3-  ((create)) ;
    bloom ( symtail 2+ )
    current here 3- newest      ( symtail+2 current cfa' newest )
        ((create)) ;
```
#endif
#include "align.i65"
_pcreate
    jsr enter                   ; ( cfa )
#include "page.i65"
    .word eolq
#include "parm.i65"
    .word qerror
    .byt 4                      ; MISSING NAME
#include "pad.i65"
    .word redefined
#include "page.i65"
    .word off
#include "pad.i65"
    .word _existsq
#include "parm.i65"
    .word qbranch
    .byt <(pcreate02-*+1)
#include "pad.i65"
    .word dotrvs
#include "page.i65"
    .word redefined
#include "page.i65"
    .word ppredefine
#include "page.i65"
    .word dup
#include "page.i65"
    .word smudge
#include "page.i65"
    .word _stringdot
#include "parm.i65"
    .word _pdq
    .byt <(pcreate01-*-1)
    .asc RVSOFF," EXISTS"
pcreate01
#include "pad.i65"
pcreate02
    .word _qalign               ; enclose a NOP where `dp` is $xxFC
#include "page.i65"
    .word _cfacomma
#include "page.i65"
    .word bloom                 ; aka `symtail` +2
#include "page.i65"
    .word current
#include "page.i65"
    .word here
#include "page.i65"
    .word threeminus            ; first enclose, then rewind to cfa
#include "page.i65"
    .word newest                ; ( symtail+2 current cfa newest )
#include "page.i65"
    .word ppcreate
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?VMMOVE
stack=( newsymtab -- )
tags=ext,nosymbol
* if `#blk` nonzero, move `vmbuf` area

```
: ?vmmove   ( newsymtab -- )
    #blk @
    if  symtab @                \ old SYMTAB
                                ( newsymtab oldsymtab )
        2dup -                  \ newsymtab oldsymtab delta ) set up for +MOVE
        vmbuf @
        2dup + >r               ( newsymtab oldsymtab delta vmbuf@ newvmbuf )
        rot b/buf -     ( newsymtab delta vmbuf@ oldsymtab-1K )
        rot +move

        vmbuf under +!          \ update vmbuf pointer while we're at it
        rot +move               ( newsymtab )
    else
        dup b/buf - 2-
        dup off
    then
     vmbuf !
    symtab ! ;
```
    jsr harvests4               ; grab just b/buf & vmbuf, leave newsymtab next
    brk
    .byt ldd | TOS              ; #blk@
    .byt st | TOS               ; if we leave abruptly, don't +MOVE anything
    .byt bz , <(qvmmovemagic01-*-2)
    .byt pull                   ; newsymtab
    .byt st | N2                ; put it somewhere safe, for now
    .byt sub | N6               ; old `symtab`
qvmmovemagic01
    .byt rtn






```
: ?vmmove   ( newsymtab -- )
    #blk @
    if  symtab @                \ old SYMTAB
                                ( newsymtab oldsymtab )
        2dup -                  \ newsymtab oldsymtab delta ) set up for +MOVE
        vmbuf @
        2dup + >r               ( newsymtab oldsymtab delta vmbuf@ newvmbuf )
        rot b/buf -     ( newsymtab delta vmbuf@ oldsymtab-1K )
        rot +move

        vmbuf under +!          \ update vmbuf pointer while we're at it
        rot +move               ( newsymtab )
    else
        dup b/buf - 2-
        dup off
    then
     vmbuf !
    symtab ! ;


: ?vmmove   ( newsymtab -- )
    vmbuf
    b/buf
    #blk
    (?vmmove).magic             ( newsymtab newvmbuf from to delta flag )
    ?: +move 3drop
    vmbuf !
    symtab ! ;

;(?vmmove).magic   ( newsymtab vmbuf b/buf #blk -- newvmbuf newsymtab )
qvmmovemagic
    jsr locals4                 ; grab just b/buf & vmbuf, leave newsymtab next
    brk
    .byt ldd | TOS              ; #blk@
    .byt st | TOS               ; in case must leave abruptly, don't +MOVE anything
    .byt bz , <(qvmmovemagic01-*-2)
    .byt pull                   ; newsymtab
    .byt st | N2                ; put it somewhere safe, for now
    .byt sub | N6               ; old `symtab`


                                ; no blocks in VM buffer to worry about here
                                ; not much to do either, really
qvmmovemagic01
    .byt rtn
    ldy #4
    jsr restack
    jmp next



    if  symtab @                \ old SYMTAB
                                ( newsymtab oldsymtab )
        2dup -                  \ newsymtab oldsymtab delta ) set up for +MOVE
        vmbuf @
        2dup + >r               ( newsymtab oldsymtab delta vmbuf@ newvmbuf )
        rot b/buf -     ( newsymtab delta vmbuf@ oldsymtab-1K )
        rot +move

        vmbuf under +!          \ update vmbuf pointer while we're at it
        rot +move               ( newsymtab )
    else
        dup b/buf - 2-
        dup off
    then
```
#endif
#include "align.i65"
_qvmmove
    jsr enter
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?KEEP
stack=( cfa -- flag )
tags=interpreter,nfa,nosymbol

#endif
#include "align.i65"
_qkeep
    jsr enter
#include "parm.i65"
    .word zpfrom
    .byt R0L+2*N7
#include "pad.i65"
    .word store
#include "parm.i65"
    .word callz
    .word symcopys
#include "pad.i65"
;    .word swap73
#include "parm.i65"
    .word callz
    .word sympluss
#include "pad.i65"
;    .word swap73
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=!SYMTAIL
stack=( tail -- symnew )
tags=dictionary,nosymbol
* Append three nulls as an end marker to symbol table
* Set uservar `symtail`
* used by `(cold)`, `(forget)` and `(create)`

|n0|`symtail`|
|n1|`studio`|
|n2|`studio.size`|
|n3|temp addr|
|n4|`symtab`|
|stack|`sym.start sym.end from to howmany`|
#endif
#include "align.i65"
setsymtail
    brk
    .byt set | N0
    .word usersymtail
    .byt ld | TOS                       ; tail
    .byt std | N0                       ; `symtail !`
    .byt sub | ACC
    .byt std | TOS
    .byt sti | TOS                      ; put three nulls at tail
    .byt pop | TOS                      ; back up over the last one to reach `symnew`
    .byt nxt

;--------------------------------------------------------------
#if 0
name=SOUTHERLY
stack=( )
tags=interpreter,extension,nosymbol

: southerly

    <n1 ?exit
    <n8 passbits >bit cbit! ;

: pforgetpass1
    i
    .word qbranch
    .byt <(pforgetpass1b-*+1)
    .word i
    .word symlen
    .word eq
    .word qbranch
    .byt <(symnext01-*+1)       ; next!
;#refactor
    .word zpfrom                ; nfa
    .byt R0L+2*N3
    .word namefrom              ; nfa>cfa
    .word twodup
    .word studio
    .word fetch
    .word swap
    .word oneplus
    .word betweenq
pforgetpass1a
    .word pquerycolon
    .word drop
    .word _pforgetkeep
    .word branch
    .byt <(symnext01-*+1)       ; next!
pforgetpass1b                   ; pass 0 only, set passbits and bloomfilter
    .word symlen
    .word _passbitsstore         ; if ((i-1) = 0) set `passbits` for all lengths
    .word _bloomfilter          ; doing this here speeds things up slightly,
#include "page.i65"             ; with a low risk of setting (inconsequential)
    .word cbitstore             ; false positives in `bloom#` for forgotten words
    .word branch
    .byt <(symnext01-*+1)       ; next!


southerly
    jsr symlens
    iny
    lda (n3),y
    and #$0F
    eor n1
    bne nextsymbol

nextsymbol
    beq lastone
    lda n1
    bne

lastone
    inc n1                      ; counter

    lda R0L+2*N1                ; counter 0..31

    i



#endif
#include "align.i65"
_southerly
    jsr enter
#include "page.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=GOSOUTH
stack=( cfa -- targetend )
tags=interpreter,extension,nosymbol
Copy names from `symtab` to `pad`
exclude names where:  tos <= CFA <= studio

    start at thread 0, len 1

    thread=0
    begin
        thread
        begin
            len=1
            begin
                if                      \ subsequent pass

                else                    \ first pass

                then
                symlen 0=
            until
        until
    until

tos                             0
n0                              cfa
n1                              src
n2                              dest
n3                              fence
n4                              studio

: !passbits

for each thread
    thread
    if
    else
    then

    for each size
        copy symtab
        copy symnew


: next.available.size   ( border -- size )
    passbits 2@
    symnew @ n3 !
    begin
( border studio n3 )
        @- 1+ between?
    begin at thread 0
        cfa < forget.cfa?
        copy it
        symlen > currsize
    until

    or the next thread

    copy everything downward

    look at each thread 0..15
        ( border studio cfa ) between?



: ?keep   ( flag -- )
    if

    then




: (forget)   ( cfa -- addr )
    bloom 8 erase  passbits 2off
    symnew @ n3 !
    begin
        symlen passbits >bit cbit!
        sym+ symlen 0=
    until  n5 off
    pad    ( cfa target )
    16 0  do
        i symthread n3 !
        32 1  do
            begin
                symlen i =
            while
                ?keep  sym+
            repeat
            i passbits >bit cbit@
            if
                j
                -1 symthread =n3 >r
                begin
                    symlen i =
                    over pearson# = and
                    if
                        ?keep
                    then
                    sym+ symlen 0=
                until
                r> n3 !  drop
            then
        loop
    loop
    pad
    pad  newsymtab  dup symtab !  bl +
    <n7 third -  cmove>

    0 symthread

    pad 0 thread 0
    fence
    (gosouth)
    begin
        southerly
    until

tos                             0
n0                              cfa
n1                              src
n2                              dest
n3                              fence
n4                              studio
#endif
#include "align.i65"
_gosouth
    jsr enter
#include "page.i65"
    .word bloom                 ; cfa bloom )
#include "parm.i65"
    .word blit                 ; cfa bloom 12 )
    .byt <(userpassbits+4-userbloom)
#include "pad.i65"
    .word erase                 ; reset bloom filter, passbits
#include "page.i65"
    .word zero
#include "page.i65"
    .word symthread
#include "page.i65"
    .word _pad
#include "page.i65"
    .word pgosouth
#include "page.i65"
gosouth01                       ; begin
    .word doextreg
#include "parm.i65"             ;  ( flag )
    .word qbranch               ; until
    .byt <(gosouth01-*+1)
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(GOSOUTH)
stack=( -- flag )
tags=interpreter,extension,nosymbol

#endif
pgosouth
    jsr harvests4
    brk
    .byt set | R11
    .word _southerly
    .byt ld | TOS
    .byt st | N3
    .byt ld | N1
    .byt st | N7
    .byt sub | ACC
    .byt st | N1
    .byt nxt

;--------------------------------------------------------------
#if 0
name=GONORTH
stack=( -- )
tags=interpreter,extension,nosymbol

#endif
#include "align.i65"
_gonorth
    jsr enter
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=PASSBIT?
stack=( -- flag )
tags=dictionary,nosymbol

#endif
passbitq
    stx z
    ldx #3
    clc
passbitq01
    rol userpassbits,x
    dex
    bpl passbitq01
    ldx z
    jmp xpushc

;--------------------------------------------------------------
#if 0
name=(FORGET)
stack=( cfa -- )
tags=nfa,ext,nosymbol
(FORGET) rebuilds and reindexes the entire dictionary, balancing it
into 16 roughly equal-sized 'threads'.  (FORGET) merges symbols
created at SYMNEW since the last (FORGET) into their thread. Then
SYMNEW is set to SYMTAIL, emptying the 'noob' list

!!!Symbol table entry
|field| size| offset|h
|cfa| 2| -2|
|flags+length| 1| `NFA` 0|
|name| length| +1|
|voabcid| 1| +length+1|
A ''//clone//'' is a symbol which has the same name (and length) as well as
both belonging to the same vocabulary (or both [[FORTH]], no vocabulary).  The
distinction is that each `clone` has a different `cfa`.  When (CREATE) adds
a `clone`, this new definition replaces the original and smudges the lower,
earlier definition.  It is up to [[(FORGET)]] to reverse that process.

Smudge is set between ''[[:]]'' and ''[[;]]'' during a word's
creation. If there is an error during compilation, [[UNDEFINE]]
cleans up the partial (smudged) definition in the symbol table
and also moves [[DP]] back to where it started.  There should
only ever be one symbol at a time that is smudged during word
creation.

The other reason a word is smudged is when it is redefined.
When ''[[;]]'' closes the definition, if there is a previous
active definition ([[REDEFINED]] is non-zero) then it will be
smudged, and the new definition becomes active.  There should
only ever be one active `clone` (the most recent) at a time.

As [[FORGET]] sorts through the symbol table, when it finds a
smudged symbol, that is how it knows it found a `clone`.  Since
PASS1 processes Pearson-hashed symbols in [[SYMTAB]] first,
then [[SYMNEW]] symbols, the first clone found will also be
the original definition of the word.  This order corresponds
to the chronological order in which symbols are added.  At this
point, PASS1 collects all the other clones and smudges them.
When no more clones can be found, the last `clone` is unsmudged,
making it the active one.

[SYMTAB ... SYMTAIL] is also a long continuous chain of symbols, beginning at
SYMTAB+32 and ending at the triple null where SYMTAIL points.

    pad >syms
    migrate

code copy?
    doextreg
    jmp (R11)


: migrate   ( cfa to from -- )
    going up or down?
        vector R11 (for speed)
        going down?
            initial length=1
            stash cfa in a register
        going up?
            initial hash=0
    begin
        copy?
            this word's address is < cfa
            it is the correct length

        ?copy
copy them down
    filter anything >= `cfa`
    set bloom filter bit for each `bloom#`
    set pass bit for each length

 automem
    `cfa` dp !
    three nulls at end of pad area
    calculate new symtab location
    symtab !
    calculate new symnew location
    symnew !
    calculate new symtail location
    symtail !
    write three nulls at new symtail location also

passbit 0 off
copy them all up
    set thread pointers


```
: (forget)   ( cfa -- )
    plits 6

    passbits
    $80
    bloom
    8
    erase !+ off
    pad >syms
    migrate
    !symtab                     ( -- symtab )
    ?vmmove
    pad 2+
    migrate

b a do rewind begin cfa execute while copy? repeat loop`

: (forget).keep
    (forget).postcfa
    symcopy swap73 1 sym+ swap73 ;

 pforgetpostcfa
    brk
    .byt ld | TOS
    .byt std | N7
    .byt pull
    .byt nxt

erase bloom filter
    bloom
    00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
passbit 0 only (all lengths)
    passbits
    10000000 00000000 00000000 00000000

tos                             sym0
n0                              cfa
n1                              target
n2                              .
n3                              .
n7                              target
n8                              sym.len (visible, no vocab)

0000  DC 64 22 57  4E 1A 00.00  88 1A 22.57  05 FF 00 00
0010  B8 06 F2.1A  05 00 .cfa.  00 01 1B 00  0A 93 67 6C

: keeper?   ( -- flag )
    <n3 name> <n0 < ;


: southerly
    i symlen <> ?exit
    keeper? if (forget).keep then
    sym+


: forget.next
    sym+ 'foo =r11
: symdex.next
    sym+ 'bar =r11

: symdex   ( -- )
    bloom 8 erase
    0 symthread  symtab @  n2 2!        ( )
    -1                                  ( current )
    begin
        bloom# bloom >bit cbit!
        pearson# under <>               ( current flag )
        if  1+ <n2 <n3 !+ n2 !          \ write start of each thread to index
        then  sym+  symlen 0=
    until ;

: (forget)   ( cfa -- )
    n0 !   pad n7 !             ( )
    bloom 12 erase
    16 0 do
        i symthread
        begin
            i symlen =
            if
                southerly
            then
        until
    loop
    !symtab ?vmmove
    32 1 do
        northerly
    loop ;


    (forget).pass1 (filter)!
    32 0  >syms pad
    (forget).looper             \ does `ext-until` 32x, completing pass1

    passbits on
    (forget).pass2 (filter)!
    16 0  pad 3+ (automem)
    (forget).looper             \ does `ext-until` 16x, completing pass2
```
#endif
#include "align.i65"
_pforget
    jsr enter
#include "page.i65"
    .word _gosouth
#include "page.i65"
    .word newsymtab
#include "page.i65"
;    .word _setsymtab
#include "page.i65"
    .word _qvmmove
#include "page.i65"
    .word _gonorth
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=REHASH
stack=( -- )
tags=interpreter,extension
Rebuilds the PETTIL [[symbol table ~]].

```
: rehash  ( -- )
    here (forget) ;   \ effectively a FORGET nil
```
#endif
#include "align.i65"
_rehash
    jsr enter
#include "page.i65"
    .word here
#include "page.i65"
    .word _pforget
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=FORGET
stack=( "name" -- )
tags=interpreter,dictionary,forth-83,forth-79,fig
checks FENCE, sorts symbol table, keeping only words below the CFA of the named word

```
: forget   ( "name" -- )
    '  dup  fence @  u<  7 ?error
    (forget) ;

~wut?  maybe new and improved 2017-09-04
: forget   ( "name" -- )
    '  dup  fence @ studio @ between 0=
    7 ?error (forget) ;
```
#endif
#include "align.i65"
_forget
    jsr enter
#include "page.i65"
    .word _tick
#include "page.i65"
    .word dup
#include "page.i65"
    .word fence
#include "page.i65"
    .word fetch
#include "page.i65"
    .word ult
#include "parm.i65"
    .word qerror
    .byt 7                      ; CAN'T FORGET BELOW FENCE
#include "pad.i65"
    .word _pforget
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DEFINITIONS
stack=( -- )
tags=forth-83
Sets the compilation vocabulary by copying the first vocabulary in
the [[VOCABS]] search order to [[CURRENT]].

#endif
#include "align.i65"
definitions
    lda uservocabs+1
    sta usercurrent
definitions99
    jmp next

;--------------------------------------------------------------
#if 0
name=FORTH
stack=( -- )
tags=vocabulary,forth-83
Reset the vocabulary search order to just CORE.  Equivalent to
`ONLY FORTH` in ANS Forth

```
: forth   ( -- )
    vocabs 12 erase ;
```
#endif
#include "align.i65"
_forth
    jsr enter
#include "page.i65"
    .word vocabs
#include "page.i65"
    .word count
#include "page.i65"
    .word erase
#include "past.i65"
    .word exit
