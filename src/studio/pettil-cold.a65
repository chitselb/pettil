; pettil-cold.a65
#echo .       pettil-cold.a65
#echo .       PETTIL cold start throwaway code to relocate tdict, display animated banner, DEADBEEF, etc...

;--------------------------------------------------------------
#if 0
name=COLD
tags=system,startup,throwaway,nosymbol
A primitive relocator to move already-linked code to upper memory
Gets us from `pettil-core` to module LAUNCH

* CMOVE transient dictionary to upper memory
* EXECUTE first word in transient dictionary

Setting the `size` of the transient dictionary to 0 will prevent
moving anything; control still transfers to `loadaddr+2`.

*    ?aloha
*    sp!
*    =irq
*    !sw16
*    diagfill
*    there @+ tuck over @ 2+ cmove 2+ startup !
*    cold variables, cmove erase
*    restart

```
code cold   ( -- )
    ' ?aloha jsr,
    >forth,
    sp! 'there @+ tuck over @ 2+ cmove 2+ startup !
    (lits) 5 'ustart 'uendcore 'ustart - 'userarea 'ucore 'uarea 'userarea -
    cmove erase restart \ ;
```
#endif
cold
    jsr qaloha
#include "align.i65"
    jsr toforth                 ; transition from 6502 Assembly to Forth
#include "page.i65"
    .word spstore
#include "page.i65"
    .word _diagfill             ; fill the screen with '/' graphic
#include "page.i65"
    .word callz
#include "page.i65"
    .word setsw16               ; so we may use BRK to access Sweet16
#include "pass.i65"
    .word dlit
    .word userirq
    .word there+(splashirq-_studio+4)  ; `splashirq` low, before moving tdict
#include "page.i65"
    .word store
#include "page.i65"
    .word callz
#include "page.i65"
    .word swapirq               ; use `splashirq` entertainment
#include "pass.i65"
    .word plit
    .word there
#include "page.i65"
    .word fetchplus             ; link to upper dictionary
#include "page.i65"
    .word tuck
#include "page.i65"
    .word over
#include "page.i65"
    .word fetch
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word cmove                 ; but first, make an upper dictionary
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word startup
#include "page.i65"
    .word store                 ; `studio` -> `startup` for 2nd `restart`
#include "pass.i65"
    .word plits
    .byt 5
    .word ustart                ; erase
    .word uendcore-ustart
    .word userarea              ; cmove
    .word ucore
    .word uarea-userarea
#include "page.i65"
    .word cmove
#include "page.i65"
    .word erase
#include "page.i65"
    .word xyzzy
#include "pass.i65"
    .word restart               ; restart #2 (of 3) --> `studio`

;--------------------------------------------------------------
#if 0
name=DIAGFILL
stack=( -- )
tags=system,startup,nosymbol
fill the screen with a rapidly changing diagonal maze effect

#endif
_diagfill
    jsr enter
#include "page.i65"
    .word callz
#include "page.i65"
    .word CLRSCR
#ifdef IS_VIC20
#include "page.i65"
    .word spnext
#include "pass.i65"
    .word plits
    .byt 6
    .word $9400                 ;color memory
    .word BPERSCR
    .word 5
    .word 255
    .word 36879
    .word 156                   ;purple
#include "page.i65"
    .word emit
#include "page.i65"
    .word cstore
#include "page.i65"
    .word fill
#endif
#include "page.i65"
    .word vidram
#include "page.i65"
    .word bperscr
#include "pass.i65"
    .word clit
    .byt (BACKDIAG & $7F)
#include "page.i65"
    .word fill
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=FLIPPER
stack=( -- false )
tags=system,startup,nosymbol

```
: flipper  2-
    9 40* vidram dup +under
    do
        i c@ c>s 0<
        if $66 i c! then
    loop ;
```
#endif
#include "align.i65"
_flipper
    jsr enter
#include "page.i65"
    .word vidram
#include "pass.i65"
    .word plit
#ifdef IS_VIC20
    .word 9*22
#else
    .word 9*40
#endif
#include "page.i65"
    .word plus
#include "page.i65"
    .word vidram
#include "pass.i65"
    .word pdo
    .byt <(flipper03-*+1)
#include "page.i65"
flipper01
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word ctos
#include "page.i65"
    .word zlt
#include "pass.i65"
    .word qbranch
    .byt <(flipper04-*+1)
#include "pass.i65"
    .word clit
    .byt WEDGESE | $80
#include "page.i65"
    .word over
#include "page.i65"
    .word eq
#include "pass.i65"
    .word clit
    .byt $E1
#include "page.i65"
    .word third
#include "page.i65"
    .word eq
#include "page.i65"
    .word orx
#include "pass.i65"
    .word clit
    .byt $A0
#include "page.i65"
    .word swap
#include "pass.i65"
    .word pquerycolon
    .word drop
    .word nip
#include "page.i65"
flipper04
    .word i
#include "page.i65"
    .word cstore
#include "pass.i65"
flipper02
    .word ploop
    .byt <(flipper01-*+1)
#include "pass.i65"
flipper03
    .word exit


pettillogo
    .word pl0,pl1,pl2,pl3,pl4,pl5,pl6,pl7,pl8

;"setup screen"
#include "align.i65"
pl0
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl0x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,DELETE,CRSRDOWN
    .asc DELETE,CRSRRIGHT,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
pl0x
    .word _pdq
    .byt (pl0y-*-1)
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE
pl0y
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,"SORTING SYMBOLS... 30 SECONDS"
pl0x
#endif
#include "pass.i65"
    .word exit

;"P"
#include "align.i65"
pl1
    jsr enter
;1000  6b 73 71 72                                          ksqr
#include "pass.i65"
    .word _pdq
    .byt (pl1x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DIAG
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF,WEDGESE
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRDOWN,CRSRLEFT
    .asc RVSON,$F3,CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
#else
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,RVSON,$CE,RVSOFF,$E9,RVSON
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$E9,$F2,$CE,$CE,$CE,$DF
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,RVSOFF,$E9
#endif
pl1x
#include "pass.i65"
    .word exit


;"E"
#include "align.i65"
pl2
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl2x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,$EB,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$F3,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$F1,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $F3,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON
#endif
pl2x
#include "pass.i65"
    .word exit

;"T"1
#include "align.i65"
pl3
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl3x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,$F2,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$F1,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,RVSON,$E9,$F2,$CE,$CE,$CE,$CE,CRSRLEFT
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
#endif
pl3x
#include "pass.i65"
    .word exit

;"personal electronic transactor"
#include "align.i65"
pl4
    jsr enter
#include "page.i65"
    .word _flipper
#include "pass.i65"
    .word _pdq
    .byt (pl4x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,RVSON,"PERSONAL ELECTRONIC",CR
    .asc CRSRRIGHT,RVSON,"TRANSACTOR",CR
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,RVSOFF,$D6,RVSON,CR,CR,CR,CR,CR,CR,CR
    .asc "     PERSONAL ELECTRONIC TRANSACTOR",CR
#endif
pl4x
#include "pass.i65"
    .word exit

;"T"2
#include "align.i65"
pl5
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl5x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,$F3,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT
#else
    .asc "     THREADED INTERPRETIVE LANGUAGE",CR
#endif
pl5x
#include "pass.i65"
    .word exit

;"I"
#include "align.i65"
pl6
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl6x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,RVSOFF
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
#endif
pl6x
#include "pass.i65"
    .word exit

;"L"
#include "align.i65"
pl7
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl7x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,$EB,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DELETE,DIAG,CRSRLEFT,INSERT,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DELETE,RVSOFF,WEDGESE
    .asc RVSON,CRSRLEFT,INSERT,DIAG,RVSOFF
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,RVSOFF,$E9,RVSON
#endif
pl7x
#include "pass.i65"
    .word exit


;"threaded interpretive language"
#include "align.i65"
pl8
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl8x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON," THREADED",CR
    .asc RVSON,"INTERPRETIVE LANGUAGE",CR
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $EB,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$CE,RVSOFF,$E9
#endif
pl8x
#include "pass.i65"
    .word exit

#include "align.i65"
pl9
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl9x-*-1)
#ifdef IS_VIC20
    .asc HOME,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR
    .asc "GITHUB:CHITSELB/PETTIL"
    .asc CRSRRIGHT,RVSON,"FORTH FOR THE VIC-20",CR
pl9x
#include "page.i65"
    .word _flipper
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,RVSON,"FORTH FOR THE COMMODORE PET",CR
pl9x
#endif
#include "pass.i65"
    .word exit

#include "align.i65"
pl11
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl11x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN
;p
    .asc $CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,SPACE,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;e
    .asc $CD,SPACE,SPACE,SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,SPACE,SPACE,SPACE,SPACE,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;t
    .asc CRSRRIGHT,CRSRRIGHT,$CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;t
    .asc CRSRRIGHT,CRSRRIGHT,$CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;i
    .asc $CD,SPACE,SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
;l
    .asc CRSRRIGHT,CRSRRIGHT,$CD,CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRLEFT,SPACE
    .asc CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,$CD,SPACE,SPACE,SPACE,SPACE,SPACE
pl11x
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NEXTACTION
stack=( -- )
tags=system,startup,nosymbol


```
: nextaction   ( -- )
    'actioncfa dup>r @ @+ execute r> ! ;
```
#endif
#include "align.i65"
_nextaction
    jsr enter
#include "pass.i65"
    .word plit
    .word actioncfa
#include "page.i65"
    .word duptor
#include "page.i65"
    .word fetch
#include "page.i65"
    .word fetchplus
#include "page.i65"
    .word execute
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?LETTER
stack=( -- )
tags=system,startup,throwaway,nosymbol
Synchronize `actionidx` with `actionnow`



```
| zp | stack | system | core | available RAM | vmbuf | blkbuf | symtab | tdict |

: ?letter   ( -- )
    begin
        'actionidx @ csplit =
    ?exit
        nextaction 'actionnow 1+!
    again
```
#endif
#include "align.i65"
_qletter
    jsr enter
#include "pass.i65"
qletter01
    .word plit
    .word actionidx
;   .byt 0
;actionnow
;   .byt 0
#include "page.i65"
    .word fetch
#include "page.i65"
    .word csplit
#include "page.i65"
    .word eq
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word _nextaction           ; ( -- false )
#include "pass.i65"
    .word plit
    .word actionnow
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word branch
    .byt <(qletter01-*+1)

;--------------------------------------------------------------
#if 0
name=BANNER
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
#include "align.i65"
_banner
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (bannermsg01-*-1)      ; length of bannermsg
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    "VERSION: 2019-12-13",CR
    .asc    "1928 JACK TRAMIEL'S BIRTHDAY",CR
            ;123456789.123456789.123456789.123456789.
bannermsg01
#include "pass.i65"
    .word exit

there
