; pettil-tdd.a65
;#echo .       pettil-tdd.a65
;#echo .       PETTIL test-driven development harness

;--------------------------------------------------------------
#if 0
name=TDD
stack=( -- )
tags=system,startup,secondary,tdd

#endif
#include "align.i65"
_tdd
    jsr enter
#include "page.i65"
    .word _info                     ; some entertainment
#include "page.i65"
    .word cr
#include "page.i65"
    .word _tdd01
#include "page.i65"
;    .word pseequewrapper
#include "page.i65"
;    .word xyzzy
#include "page.i65"
    .word _tddresult
#include "past.i65"
    .word exit

;--------------------------------------------------------------
tddata
    .asc 2,"0="

;--------------------------------------------------------------
#if 0
name=TDDRESULT
stack=( f -- )
tags=system,startup,secondary,tdd
Display the test result

#endif
#include "align.i65"
_tddresult
    jsr enter
#include "parm.i65"
    .word qbranch
    .byt <(tddresult05-*+1)
#include "parm.i65"
    .word _pdq
    .byt (tddresult01-*-1)
    .asc CIRCLEFILL, SPACE, RVSON,"PASS",RVSOFF
tddresult01
#include "parm.i65"
    .word branch
    .byt <(tddresult07-*+1)
#include "past.i65"
tddresult05
#include "parm.i65"
    .word _pdq
    .byt (tddresult02-*-1)
    .asc CIRCLEEMPTY, SPACE, RVSON,"FAIL",RVSOFF
tddresult02
#include "pad.i65"
tddresult07
    .word _info
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=TDD01
stack=( -- )
tags=system,startup,secondary,tdd

#endif
#include "align.i65"
_tdd01
    jsr enter
#include "page.i65"
    .word forth
#include "parm.i65"
    .word dlit
    .word zeq
    .word -1
#include "parm.i65"
    .word dlit
    .word tddata
    .word 0
#include "pad.i65"
    .word pseek
#include "page.i65"
    .word _deq
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=TDD02
stack=( -- )
tags=system,startup,secondary,tdd

#endif
#include "align.i65"
_tdd02
    jsr enter
#include "page.i65"
    .word assembler
#include "parm.i65"
    .word dlit
    .word tddata
    .word 1
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=TDD03
stack=( -- )
tags=system,startup,secondary,tdd

#endif
#include "align.i65"
_tdd03
    jsr enter
#include "page.i65"
    .word assembler
#include "parm.i65"
    .word dlit
    .word tddata
    .word $FFFF
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=TDD04
stack=( -- )
tags=system,startup,secondary,tdd

#endif
#include "align.i65"
_tdd04
    jsr enter
#include "page.i65"
    .word forth
#include "parm.i65"
    .word dlit
    .word tddata
    .word $FFFF
#include "past.i65"
    .word exit

;--------------------------------------------------------------

pseek
;    jsr plugh
    jmp true


pseequewrapper
    brk
    .byt ld  | TOS
    .byt st  | N5
    .byt pull
;    .byt ext
;    .word plugh
    .byt ext
    .word pseeque
    .byt nxt

/*

    brk
    .byt set | N6
    .word uservocabs+1                  ; first vocab
pseequewrap01
    .byt ldd | N6
    .byt st  | N5                       ; get vocabid
    .byt set | N3
    .word usersymnew
    .byt ldd | N3
    .byt st  | N3
    .byt ext
    .word pseeque
    .byt bc  , <(pseequewrap86-*-2)          ; early exit if it was found
    .byt ld  | N7                       ; let's have a look at the sorted list then
    .byt st  | N3
pseequewrap86

*/
