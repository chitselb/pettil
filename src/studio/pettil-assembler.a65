; pettil-assembler.a65
;#echo .       pettil-assembler.a65      ASSEMBLER Vocabulary (1)
; credit for the original form of this assembler goes to William F. Ragsdale
; of FIG

;--------------------------------------------------------------
#if 0
name=ASSEMBLER
stack=( -- )
tags=assembler,vocabulary,extension
Add `assembler` vocabulary to `vocabs` context
#endif
assembler
    jsr dovocab
    .byt 1                      ; vocabulary identifier

;--------------------------------------------------------------
#if 0
name=Z
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
zero page scratch location

```
ff cconstant z
```
#endif
asmz
    jsr docconst
    .byt $ff

;--------------------------------------------------------------
#if 0
name=UP
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
User pointer, points to the user variable area

```
84 cconstant up
```
#endif
asmup
    jsr docconst
    .byt <up

;--------------------------------------------------------------
#if 0
name=IP
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Forth instruction pointer

```
8b cconstant ip
```
#endif
asmip
    jsr docconst
    .byt <pip

;--------------------------------------------------------------
#if 0
name=N
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
N area, a scratch space for primitives

```
4 cconstant n
```
#endif
asmn
    jsr docconst
    .byt <n

;--------------------------------------------------------------
#if 0
name=TOS
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Top of stack

```
2 cconstant tos
```
#endif
asmtos
    jsr docconst
    .byt <tos

;--------------------------------------------------------------
#if 0
name=STACKL
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Stack low order side
#endif
asmstackl
    jsr docconst
    .byt <stackl

;--------------------------------------------------------------
#if 0
name=STACKH
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Stack high order side
#endif
asmstackh
    jsr docconst
    .byt <stackh

;--------------------------------------------------------------
#if 0
name=NEXT
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of NEXT routine

```
86 cconstant next
```
#endif
asmnext
    jsr docconst
    .byt <next

;--------------------------------------------------------------
#if 0
name=POP
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of POP routine
#endif
asmpop
    jsr doconst
    .word drop

;--------------------------------------------------------------
#if 0
name=POPTWO
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of POPTWO routine
#endif
asmpoptwo
    jsr doconst
    .word twodrop

;--------------------------------------------------------------
#if 0
name=PUT
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of NEXT routine

```
86 cconstant next
```
#endif
asmput
    jsr doconst
    .word put

;--------------------------------------------------------------
#if 0
name=PUSHYA
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of PUSHYA routine
#endif
asmpushya
    jsr doconst
    .word pushya

;--------------------------------------------------------------
#if 0
name=HARVESTS
stack=( -- n )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler constant
Address of HARVESTS subroutine
#endif
asmharvests
    jsr doconst
    .word harvests

;--------------------------------------------------------------
#if 0
name=ASMINDEX
stack=( -- n )
tags=assembler,ext,nosymbol
vocab=1
!!!Assembler constant
Table of addressing modes
#endif
asmindex
    .byt $09,$00,$05,$15,$15,$01,$11,$80
    .byt $09,$80,$0d,$1d,$19,$80,$80,$80
    .byt $80,$00,$04,$14,$14,$80,$80,$80
    .byt $80,$80,$0c,$1c,$1c,$80,$80,$2c

;--------------------------------------------------------------
#if 0
name=MODE
stack=( -- n )
tags=assembler,vocabulary,ext,nosymbol
vocab=1
Addressing mode, one of `.a # mem ,x ,y x) )y )`

```
variable mode
```
!!!Assembler variable
#endif
asmmode
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=>ASMMODE
stack=( -- )
tags=assembler,vocabulary,ext,nosymbol
vocab=1
!!!Subroutine
Set the addressing mode
#endif
#include "align.i65"
_doasmmode
    jsr enter
#include "page.i65"
    .word caller
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word asmmode
#include "page.i65"
    .word store
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=OPCODE,
stack=( [ operand ... ] opcode 0|1|2|3 -- )
tags=assembler,nosymbol
vocab=1
encloses the instruction and 0, 1 or 2 bytes of operand


```
 : instr,
    0 do
        c,
    loop ;
```
#endif
#include "align.i65"
_opcodecomma
    jsr enter
#include "page.i65"
    .word zero
#include "parm.i65"
    .word pdo
    .byt <(opcodecomma02-*+1)
#include "pad.i65"
opcodecomma01
    .word _ccomma
#include "parm.i65"
    .word ploop
    .byt <(opcodecomma01-*+1)
#include "pad.i65"
opcodecomma02
    .word asmmem
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DOCPU
stack=( -- )
tags=assembler,vocabulary,ext,nosymbol
vocab=1
!!!Assembler mode
Indirect addressing mode
#endif
#include "align.i65"
_docpu
    jsr enter
#include "page.i65"
    .word caller
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word one
#include "page.i65"
    .word _opcodecomma
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DECODE
stack=( addr-1 --  [ [arghi] arglo] opcode n )
tags=assembler,assembler,nosymbol
vocab=1
Adjusts the addressing mode
determines the instruction
encloses the instruction and 0, 1 or 2 bytes of operand
#endif
decode
    brk
    .byt ldi | TOS              ; n+0=opcode base
    .byt st | N0
    .byt ldd | TOS
    .byt st | N1                ; n+2=modes.lsb n+3=modes.msb
    .byt sub | ACC
    .byt push
    .byt push                   ; TOS=0; 2OS=0; 3OS=junk; [4OS=arg]
    .byt rtn
                                ; y = 0..3  instruction group
                                ;  0 | 1  right side (odd) is 16-bit
                                ; ---+--- left side is 8-bit
                                ;  2 | 3  bottom half has $8x modes.lsb
decode00
    ldy #2                      ; assume bottom half
    sty tos                     ; assume 16-bit
    lda n+2                     ; the lsb of the modes, please
    bmi decode01                ; $8x? (group 2,3)
    ldy #0
    lsr
    bcc decode02
    sty tos
    inx                         ; .A mode, no arguments
    bne decode05                ; bra (quadrant 0)
decode01
    asl
    beq decode03                ; JMP or JSR? 16-bit (quadrant 3)
decode02
    lda stackh+2,x
    beq decode04                ; 8-bit?
decode03
    lda stackl+2,x
    sta stackl+1,x
    lda stackh+2,x
    sta stackl+2,x              ; TOS=0; 2OS=junk; 3OS=arg16.lo; 4OS=arg16.hi
    iny
    bne decode05
decode04
    dec tos                     ; left side, 1 argument
    inx                         ; TOS=0; 2OS=junk; 3OS=arg8
decode05
    tya
    asl
    asl
    asl
    ;clc
    ora asmmode+3
    tay
    lda asmindex,y
    bpl decode06
    ldy #11                     ; "BAD ADDRESSING MODE"
    jmp error
decode06
    adc n
    sta stackl,x
    inc tos
decode07
    jmp next

;--------------------------------------------------------------
#if 0
name=M/CPU
stack=( -- )
tags=assembler,nosymbol
vocab=1
Adjusts the addressing mode
determines the instruction
encloses the instruction and 0, 1 or 2 bytes of operand

```
: m/cpu  create c, , does>
    dup 1+ @ 80 and
    if
        10 mode +!
    then
    over
    ff00 and upmode upmode
    if
        mem cr latest id.
        abort" has incorrect address mode"
    then
    c@ mode c@
    index + c@ + c,  mode c@ 7 and
    if
        mode c@
        0f and 7 <
        if
            c,
        else
            ,
        then
    then
    mem ;

: m/cpu  create c, , does>
    2r> >r  decode  opcode, ;
```
#endif
#include "align.i65"
_domcpu
    jsr enter
#include "page.i65"
    .word caller
#include "page.i65"
    .word decode
#include "page.i65"
    .word _opcodecomma
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=IF,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1

```
: if,   ( opcode -- )
    4 +/-pairs drop , here 1- false ;
```
#endif
#include "align.i65"
_asmif
    jsr enter
#include "page.i65"
    .word four
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word _comma                ; enclose branch opcode, then 00
#include "page.i65"
    .word here
#include "page.i65"
    .word oneminus              ; point to branch offset
#include "page.i65"
    .word false
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ELSE,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
: else,   ( dp flag -- dp flag )
    here 1+
    -4 +/-pairs +/-pairs  jmp,
    here 2swap [ 6 ] ?error
    dup>r - 1- r> c! true ;
```
#endif
#include "align.i65"
_asmelse
    jsr enter
#include "page.i65"
    .word here
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word minusfour
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word ijmp                  ; jmp $0004
#include "page.i65"
    .word here
#include "page.i65"
    .word twoswap
#include "parm.i65"
    .word qerror
    .byt 6                      ; UNPAIRED CONDITIONALS
#include "pad.i65"
    .word duptor
#include "page.i65"
    .word minus
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word cstore
#include "page.i65"
    .word true
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=THEN,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
: then,   ( -- )
    -4 +/-pairs drop
    if
        here swap !
    else
        >resolve
    then ;
```
#endif
#include "align.i65"
_asmthen
    jsr enter
#include "page.i65"
    .word minusfour
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "parm.i65"
    .word qbranch
    .byt <(asmthen01-*+1)
#include "pad.i65"
    .word here
#include "page.i65"
    .word swap
#include "page.i65"
    .word store
#include "parm.i65"
    .word branch
    .byt <(asmthen02-*+1)
#include "pad.i65"
asmthen01
    .word _toresolve
#include "past.i65"
asmthen02
    .word exit

;--------------------------------------------------------------
#if 0
name=BEGIN,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1

```
: begin,   ( -- here )
    5 +/-pairs drop
    here ;
```
#endif
#include "align.i65"
_asmbegin
    jsr enter
#include "page.i65"
    .word five
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word here
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WHILE,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1


_asmif
    jsr enter
#include "page.i65"
    .word four
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word _comma                ; enclose branch opcode, then 00
#include "page.i65"
    .word here
#include "page.i65"
    .word oneminus              ; point to branch offset
#include "page.i65"
    .word false
#include "past.i65"
    .word exit


```
: while,   ( -- )
    -5 +/-pairs +/-pairs drop
    , here 1- ;
```
#endif
#include "align.i65"
_asmwhile
    jsr enter
#include "page.i65"
    .word minusfive
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word _comma
#include "page.i65"
    .word here
#include "page.i65"
    .word oneminus
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=UNTIL,
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
: until,   ( dp opcode -- )
    -5 +/-pairs drop
    c, here swap - c, ;
```
#endif
#include "align.i65"
_asmuntil
    jsr enter
#include "page.i65"
    .word minusfive
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word _ccomma
#include "page.i65"
    .word here
#include "page.i65"
    .word minus
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word _ccomma
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=AGAIN,
stack=( addr -- )
tags=assembler,vocabulary,extension
flags=immediate
vocab=1
```
: again,   ( dp -- )
    -5 +/pairs drop
    jmp, ;
```
#endif
#include "align.i65"
_asmagain
    jsr enter
#include "page.i65"
    .word minusfive
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word ijmp
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=REPEAT,
stack=( addr1 addr2 -- )
tags=assembler,vocabulary,extension
flags=immediate
vocab=1
```
: repeat,   ( addr1 addr2 -- )
    -5 +/-pairs drop
    swap jmp,  >resolve ;
```
#endif
#include "align.i65"
_asmrepeat
    jsr enter
#include "page.i65"
    .word minusfive
#include "page.i65"
    .word plusminuspairs
#include "page.i65"
    .word drop
#include "page.i65"
    .word swap
#include "page.i65"
    .word ijmp
#include "page.i65"
    .word _toresolve
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NOT
stack=( opcode -- opcode^20 )
tags=assembler,vocabulary,extension
vocab=1

```
: not   20 xor ;  ( reverse assembly test )
```
#endif
#include "align.i65"
_asmnot
    jsr enter
#include "page.i65"
    .word bl
#include "page.i65"
    .word xor
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CS
stack=( "name" -- )
tags=assembler,vocabulary,extension
vocab=1

~wut? shouldn't this be `cc`?
$90 BCC
$B0 BCS

```
90 cconstant cs ( assembler test for carry set )
```
#endif
_asmcs
    jsr docconst
    .byt $90

;--------------------------------------------------------------
#if 0
name=0=
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1

```
d0 cconstant 0= ( assembler test for equal zero )
```
#endif
asmzeq
    jsr docconst
    .byt $d0

;--------------------------------------------------------------
#if 0
name=0<
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
10 cconstant 0< ( assembler test for less than or equal zero )
```
#endif
asmzlt
    jsr docconst
    .byt $10

;--------------------------------------------------------------
#if 0
name=>=
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
90 cconstant >= ( assembler test for greater or equal zero )
                  ( >= is only correct after sub, or cmp, )
```
#endif
asmge
    jsr docconst
    .byt $90

;--------------------------------------------------------------
#if 0
name=VS
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
```
50 cconstant vs ( assembler test for overflow set )
```
#endif
asmvs
    jsr docconst
    .byt $50

;--------------------------------------------------------------
#if 0
name=CODE-SETUP
stack=( "name" -- )
tags=assembler,vocabulary,ext,nosymbol
vocab=1
Creates a symbol table header for a new assembler definition
#endif
#include "align.i65"
_codesetup
    jsr enter
#include "page.i65"
    .word here
#include "page.i65"
    .word _pcreate
#include "page.i65"
    .word latest
#include "page.i65"
    .word smudge
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CODE-FIXUP
stack=( -- )
tags=assembler,vocabulary,ext,nosymbol
vocab=1
Adjusts `LATEST` symbol to behave as a new assembler definition
#endif
#include "align.i65"
_codefixup
    jsr enter
#include "page.i65"
    .word hex
#include "page.i65"
    .word storecsp
#include "page.i65"
    .word assembler
#include "page.i65"
    .word asmmem
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CODE
stack=( "name" -- )
tags=assembler,vocabulary,extension
Create a new (smudged) name and invoke the assembler vocabulary
#endif
#include "align.i65"
_code
    jsr enter
#include "page.i65"
    .word _codesetup
#include "page.i65"
    .word _codefixup
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(;CODE)
stack=( -- )
tags=assembler,compiler,nosymbol
vocab=1
#endif
#include "align.i65"
_psemicode
    jsr enter
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word latest
#include "page.i65"
    .word namefrom
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word store
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=;CODE
stack=( -- )
tags=assembler,compiler,unimplemented
flags=immediate
vocab=1
Transition from high-level Forth to 6502 assembly
#endif
#include "align.i65"
_semicode
    jsr enter
#include "page.i65"
    .word qcomp
#include "page.i65"
    .word here
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word _comma
#include "page.i65"
    .word assembler
#include "page.i65"
    .word _closedef
#include "page.i65"
    .word _codefixup
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=END-CODE
stack=( "name" -- )
vocab=1
tags=assembler,vocabulary,extension
Remove [[ASSEMBLER]] vocabulary from VOCABS.  Does this by
(re)invoking the [[ASSEMBLER]] vocabulary to make it the
first one in [[VOCABS]], then sliding the rest of [[VOCABS]]
backward to overwrite it.

```
: end-code   ( -- )
    close-definition assembler vdrop ;
```
#endif
#include "align.i65"
_endcode
    jsr enter
#include "page.i65"
    .word _closedef
#include "page.i65"
    .word assembler             ; force assembler to front
#include "page.i65"
    .word _vdrop                ; and drop it
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=.A
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Accumulator addressing mode
#endif
asmdota
    jsr _doasmmode
    .byt 0

;--------------------------------------------------------------
#if 0
name=#
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Immediate addressing mode
#endif
asmimm
    jsr _doasmmode
    .byt 1

;--------------------------------------------------------------
#if 0
name=MEM
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Memory addressing mode (abs or zp)
#endif
asmmem
    jsr _doasmmode
    .byt 2

;--------------------------------------------------------------
#if 0
name=,X
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Indexed X addressing mode
#endif
asmindexx
    jsr _doasmmode
    .byt 3

;--------------------------------------------------------------
#if 0
name=,Y
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Indexed Y addressing mode
#endif
asmindexy
    jsr _doasmmode
    .byt 4

;--------------------------------------------------------------
#if 0
name=X)
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Indirect X addressing mode
#endif
asmindirx
    jsr _doasmmode
    .byt 5

;--------------------------------------------------------------
#if 0
name=)Y
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Indirect-Y addressing mode
#endif
asmindiry
    jsr _doasmmode
    .byt 6

;--------------------------------------------------------------
#if 0
name=)
stack=( -- )
tags=assembler,vocabulary,extension
vocab=1
!!!Assembler mode
Indirect addressing mode
#endif
asmindir
    jsr _doasmmode
    .byt $0f

;--------------------------------------------------------------
#if 0
name=BRK,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a BRK opcode
#endif
ibrk
    jsr _docpu
    .byt $00

;--------------------------------------------------------------
#if 0
name=CLC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CLC opcode
#endif
iclc
    jsr _docpu
    .byt $18

;--------------------------------------------------------------
#if 0
name=CLD,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CLD opcode
#endif
icld
    jsr _docpu
    .byt $d8

;--------------------------------------------------------------
#if 0
name=CLI,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CLI opcode
#endif
icli
    jsr _docpu
    .byt $58

;--------------------------------------------------------------
#if 0
name=CLV,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CLV opcode
#endif
iclv
    jsr _docpu
    .byt $b8

;--------------------------------------------------------------
#if 0
name=DEX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a DEX opcode
#endif
idex
    jsr _docpu
    .byt $ca

;--------------------------------------------------------------
#if 0
name=DEY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a DEY opcode
#endif
idey
    jsr _docpu
    .byt $88

;--------------------------------------------------------------
#if 0
name=INX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a INX opcode
#endif
iinx
    jsr _docpu
    .byt $e8

;--------------------------------------------------------------
#if 0
name=INY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a INY opcode
#endif
iiny
    jsr _docpu
    .byt $c8

;--------------------------------------------------------------
#if 0
name=NOP,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a NOP opcode
#endif
inop
    jsr _docpu
    .byt $ea

;--------------------------------------------------------------
#if 0
name=PHA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a PHA opcode
#endif
ipha
    jsr _docpu
    .byt $48

;--------------------------------------------------------------
#if 0
name=PHP,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a PHP opcode
#endif
iphp
    jsr _docpu
    .byt $08

;--------------------------------------------------------------
#if 0
name=PLA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a PLA opcode
#endif
ipla
    jsr _docpu
    .byt $68

;--------------------------------------------------------------
#if 0
name=PLP,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a PLP opcode
#endif
iplp
    jsr _docpu
    .byt $28

;--------------------------------------------------------------
#if 0
name=RTI,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a RTI opcode
#endif
irti
    jsr _docpu
    .byt $40

;--------------------------------------------------------------
#if 0
name=RTS,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a RTS opcode
#endif
irts
    jsr _docpu
    .byt $60

;--------------------------------------------------------------
#if 0
name=SEC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a SEC opcode
#endif
isec
    jsr _docpu
    .byt $38

;--------------------------------------------------------------
#if 0
name=SED,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a SED opcode
#endif
ised
    jsr _docpu
    .byt $f8

;--------------------------------------------------------------
#if 0
name=SEI,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a SEI opcode
#endif
isei
    jsr _docpu
    .byt $78

;--------------------------------------------------------------
#if 0
name=TAX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TAX opcode
#endif
itax
    jsr _docpu
    .byt $aa

;--------------------------------------------------------------
#if 0
name=TAY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TAY opcode
#endif
itay
    jsr _docpu
    .byt $a8

;--------------------------------------------------------------
#if 0
name=TSX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TSX opcode
#endif
itsx
    jsr _docpu
    .byt $ba

;--------------------------------------------------------------
#if 0
name=TXA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TXA opcode
#endif
itxa
    jsr _docpu
    .byt $8a

;--------------------------------------------------------------
#if 0
name=TXS,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TXS opcode
#endif
itxs
    jsr _docpu
    .byt $9a

;--------------------------------------------------------------
#if 0
name=TYA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a TYA opcode
#endif
itya
    jsr _docpu
    .byt $98

;--------------------------------------------------------------
#if 0
name=ADC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a ADC opcode
#endif
iadc
    jsr _domcpu
    .byt $60
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=AND,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a AND opcode
#endif
iand
    jsr _domcpu
    .byt $20
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=CMP,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CMP opcode
#endif
icmp
    jsr _domcpu
    .byt $c0
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=EOR,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a EOR opcode
#endif
ieor
    jsr _domcpu
    .byt $40
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=LDA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a LDA opcode
#endif
ilda
    jsr _domcpu
    .byt $a0
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=ORA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a ORA opcode
#endif
iora
    jsr _domcpu
    .byt $00
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=SBC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a SBC opcode
#endif
isbc
    jsr _domcpu
    .byt $e0
    .word $1c6e

;--------------------------------------------------------------
#if 0
name=STA,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a STA opcode
#endif
ista
    jsr _domcpu
    .byt $80
    .word $1c6c

;--------------------------------------------------------------
#if 0
name=ASL,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a ASL opcode
#endif
iasl
    jsr _domcpu
    .byt $01
    .word $0d0d

;--------------------------------------------------------------
#if 0
name=DEC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a DEC opcode
#endif
idec
    jsr _domcpu
    .byt $c1
    .word $0c0c

;--------------------------------------------------------------
#if 0
name=INC,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a INC opcode
#endif
iinc
    jsr _domcpu
    .byt $e1
    .word $0c0c

;--------------------------------------------------------------
#if 0
name=LSR,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a LSR opcode
#endif
ilsr
    jsr _domcpu
    .byt $41
    .word $0d0d

;--------------------------------------------------------------
#if 0
name=ROL,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a ROL opcode
#endif
irol
    jsr _domcpu
    .byt $21
    .word $0d0d

;--------------------------------------------------------------
#if 0
name=ROR,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a ROR opcode
#endif
iror
    jsr _domcpu
    .byt $61
    .word $0d0d

;--------------------------------------------------------------
#if 0
name=STX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a STX opcode
#endif
istx
    jsr _domcpu
    .byt $81
    .word $0414

;--------------------------------------------------------------
#if 0
name=CPX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CPX opcode
#endif
icpx
    jsr _domcpu
    .byt $e0
    .word $0414

;--------------------------------------------------------------
#if 0
name=CPY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a CPY opcode
#endif
icpy
    jsr _domcpu
    .byt $c0
    .word $0414

;--------------------------------------------------------------
#if 0
name=LDX,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a LDX opcode
#endif
ildx
    jsr _domcpu
    .byt $a2
    .word $1496

;--------------------------------------------------------------
#if 0
name=LDY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a LDY opcode
#endif
ildy
    jsr _domcpu
    .byt $a0
    .word $0c8e

;--------------------------------------------------------------
#if 0
name=STY,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a STY opcode
#endif
isty
    jsr _domcpu
    .byt $80
    .word $048c

;--------------------------------------------------------------
#if 0
name=JSR,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a JSR opcode
#endif
ijsr
    jsr _domcpu
    .byt $14
    .word $0480

;--------------------------------------------------------------
#if 0
name=JMP,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a JMP opcode
#endif
ijmp
    jsr _domcpu
    .byt $40
    .word $8480

;--------------------------------------------------------------
#if 0
name=BIT,
stack=( -- )
tags=assembler
vocab=1
!!!Assembler instruction
compiles a BIT opcode
#endif
ibit
    jsr _domcpu
    .byt $20
    .word $0484

;"  0 R0
;"  1 R1
;"  2 R2
;"  3 R3
;"  4 R4
;"  5 R5
;"  6 R6
;"  7 R7
;"  8 R8
;"  9 R9
;" 10 R10
;" 11 R11
;" 12 R12
;" 13 R13
;" 14 R14
;" 15 R15
;"
;"  0 ACC
;"  1 TOS
;"  2 N0
;"  3 N1
;"  4 N2
;"  5 N3
;"  6 N4
;"  7 N5
;"  8 N6
;"  9 N7
;" 0a N8
;"  0 R0L
;" R0L 1+ R0H
;" R0L 1c + R14L
;" R0L 1d + R14H
;" R0L 1e + R15L
;" R0L 1f + R15H
;"
;"
;"
;" 00 rtn,  01 bp,   02 bm,   03 bz,
;" 04 bnz,  05 bm1,  06 bnm1, 07 nxt,
;" 08 push, 09 pull, 0a br,   0b ext,
;" 0c bs,   0d rs,   0e bc,   0f bnc,
;" 10 set,  20 ld,   30 st,   40 ldi,
;" 50 sti,  60 ldd,  70 std,  80 pop,
;" 90 stpx, a0 add,  b0 sub,  c0 popd,
;" d0 cpr,  eo inr,  f0 dcr,
