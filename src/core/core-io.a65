; core-io.a65
;#echo .       core-io.a65               I/O

;--------------------------------------------------------------
#if 0
name=EMIT
stack=( c -- )
tags=forth-83,i/o
#endif
emit
    inc usernumout
    bne emit01
    inc usernumout+1
emit01
    lda tos
    jsr CHROUT
    jmp drop

;--------------------------------------------------------------
#if 0
name=?KEY
stack=( -- c )
tags=i/o
Get a character from the keyboard, or 0 if no key pressed

#endif
qkey
    stx z
    jsr GETIN
    bpl key02                   ; bra

;--------------------------------------------------------------
#if 0
name=KEY
stack=( -- c )
tags=forth-83,i/o
Wait for a keypress by the user

#endif
key
    stx z
key01
    jsr GETIN
    beq key01
key02
    ldx z
    jmp push0a

;--------------------------------------------------------------
#if 0
name=CR
stack=( -- )
tags=forth-83,i/o
Output a carriage return, uses machine-specific ROM address

```
cr
    [ CROUT ] literal jsr
    #out off #line 1+! ;  ( 17 )

(docall)
lets us call 6502 subroutines as forth primitives terminating in [[NEXT]]
when RTS executes

: jsr ( -- ; pronounced: "j-s-r" )
    r> 2+ @ ['] next >r execute ;
```
cr
    jsr CROUT                   ; $D534
    lda #0
    sta usernumout
    sta usernumout+1
    inc usernumline
    bne cr01
    inc usernumline+1
cr01
    jmp next

#endif
cr
    brk
    .byt ext
    .word CROUT                 ; ROM routine prints a carriage return
    .byt set | N0
    .word usernumline+2
    .byt popd | N0
    .byt inr | ACC
    .byt std | N0               ; `#line 1+!`
;    .byt set | N0
;    .word usernumout
    .byt sub | ACC
    .byt std | N0               ; `#out off`
    .byt nxt
;[13]

;--------------------------------------------------------------
#if 0
name=EXPECT
stack=( addr +n -- )
tags=primitive,forth-83,i/o
''Forth-83:''//  EXPECT       addr +n --                    M,83
       Receive characters and store each into memory.  The transfer
       begins at addr proceeding towards higher addresses one byte
       per character until either a "return" is received or until
       +n characters have been transferred.  No more than +n
       characters will be stored.  The "return" is not stored into
       memory.  No characters are received or transferred if +n is
       zero.  All characters actually received and stored into
       memory will be displayed, with the "return" displaying as a
       space.  See:  SPAN  "9.5.2 EXPECT"//

Caller may set up hardware (with `cursor!`) prior to `expect`.  The hardware cursor state that `CHRIN` uses establishes context for input streams from either `vmbuf` when loading or `tib` in keyboard input mode.

|Receive characters and store each into memory.|check.|
|The transfer begins at `addr` proceeding towards higher addresses|check.|
|one byte per character|check.|
|until either a "return" is received|check.|
|or until +n characters have been transferred.|and double check.|
|No more than +n characters will be stored.|check.|
|The "return" is not stored into memory.|check.|
|No characters are received or transferred if +n is zero.|uhhhh... I didn't check that, sorry|
|All characters actually received and stored into memory will be displayed|check.|
|with the "return" displaying as a space.|check.|

#endif
expect
    jsr harvests2               ; `addr` to `n0`
;   ldy #0                      ; thanks, `harvests`
    sty userin                  ; `in coff`
expect01
    jsr CHRIN                   ; preserves `x` register!
    cmp #CR
    beq expect02
    sta (n),y
    iny
    cpy tos                     ; check maxwidth, typically 80
    bcc expect01
expect02
    dey
    bmi expect03
    lda (n),y
    eor #SPACE                  ; $20
    beq expect02
expect03
    iny
    sty userspan                ; set `span`
    jmp drop

;--------------------------------------------------------------
#if 0
name=(.@)
stack=( x y -- )
tags=ext

```
-1 .. -25    comes in from the bottom
0 .. 24    comes in from the top
-1 .. -40  from the right
0 .. 39    from the left

usage

"13 -20 cursor: +center+
```
#endif
#include "align.i65"
docursor
    jsr topfas
    sta PNTR                            ; horizontal cursor position
    iny
    lda (pip),y
    sta TBLX                            ; physical line of cursor
    stx z
    jsr PUTCURSOR
    ldx z
    lda #1
    jmp pad

;--------------------------------------------------------------
#if 0
name=>.C
stack=( -- )
tags=forth-83,i/o,nosymbol
Emits a character


```
: >.c   ( c == ; addr -- )
\ : .cparent <builds c,
   does> c@  emit ;
```
#endif
#include "align.i65"
dodotc
    jsr dodoes
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word emit
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=.CLR
stack=( -- )
tags=core
Emit CLR character (clear screen)

#endif
#include "align.i65"
dotclr
    jsr dodotc
    .byt CLR

;--------------------------------------------------------------
#if 0
name=.HOME
stack=( -- )
tags=core
Emit HOME character (home cursor)

#endif
#include "align.i65"
dothome
    jsr dodotc
    .byt HOME

;--------------------------------------------------------------
#if 0
name=SPACE
stack=( -- )
tags=forth-83,i/o
Emits a space character

```
: space   ( -- )
   bl emit ;
```
#endif
space
    jsr dodotc
    .byt SPACE

;--------------------------------------------------------------
#if 0
name=SPACES
stack=( n -- )
tags=forth-83,i/o
Emits "n" spaces

```
: spaces   ( n -- )
    0 max 0
    ?do
        space
    loop ;
```
#endif
#include "align.i65"
_spaces
    jsr enter
#include "page.i65"
    .word zero
#include "page.i65"
    .word max
#include "page.i65"
    .word zero
#include "parm.i65"
    .word pqdo
    .byt <(spaces02-*+1)
#include "pad.i65"
spaces01
    .word space
#include "parm.i65"
    .word ploop
    .byt <(spaces01-*+1)
#include "past.i65"
spaces02
    .word exit

;--------------------------------------------------------------
#if 0
name=TYPE
stack=( addr count -- )
tags=forth-83,i/o
#endif
type
    jsr harvests2
    clc
    lda tos
    adc usernumout
    sta usernumout
    lda tos+1
    adc usernumout+1
    sta usernumout+1
    ;ldy #0
type01
    cpy tos
    bne type02
    dec tos+1
    bpl type02
    jmp drop
type02
    lda (n),y
    jsr CHROUT
    iny
    bne type01
    inc n+1
    bne type01                  ; bra

;--------------------------------------------------------------
#if 0
name=$.
stack=( addr -- )
tags=string
Outputs a string

#endif
#include "align.i65"
_stringdot
    jsr enter
#include "page.i65"
    .word count
#include "page.i65"
    .word type
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=HOLD
stack=( char -- )
tags=numword,forth-83


 Inserts  character into a pictured numeric out-
 put string.
 char is inserted into a pictured numeric output
 string.  Typically used between  [[<#]] and [[#>]] .

```
: hold   ( char -- )
    hld 1-!  hld @  c! ;
```
#endif
#include "align.i65"
_hold
    jsr enter
#include "page.i65"
    .word hld
#include "page.i65"
    .word oneminusstore
#include "page.i65"
    .word hld
#include "page.i65"
    .word fetch
#include "page.i65"
    .word cstore
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=<#
stack=( -- )
tags=numword,forth-83

see also: [[HOLD]] [[HLD]]

pronounced: 'less-than-sharp'

```
: <#   ( -- )
    pad hld ! ;
```
#endif
#include "align.i65"
_ltsharp
    jsr enter
#include "page.i65"
    .word _pad                  ; ( pad )
#include "page.i65"
    .word hld                   ; ( pad hld )
#include "page.i65"
    .word store                 ; ( )
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=#>
stack=( d -- hld size )
tags=numword,forth-83
Terminates pictured numeric output, discarding the double `d` and returning
the starting address and size of the output string.

see also: [[<#]] [[#]] [[#S]] [[HOLD]] [[HLD]] [[SIGN]]

pronounced: 'sharp-greater'

```
: #>   ( d -- hld size )
    2drop hld @ pad over - ;
```
#endif
#include "align.i65"
_sharpgt
    jsr enter
#include "page.i65"
    .word twodrop
#include "page.i65"
    .word hld
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _pad
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SIGN
stack=( n -- )
tags=numword,forth-83

 If n is negative, an ASCII "-" (minus sign) is appended to the
 pictured numeric output string.  Typically used between <# and #> .

```
: sign   ( n -- )
    0< if '-' hold then ;
```
#endif
#include "align.i65"
_sign
    jsr enter
#include "page.i65"
    .word zlt
#include "parm.i65"
    .word qbranch
    .byt <(sign01-*+1)
#include "pad.i65"
    .word blit
    .byt '-'
#include "pad.i65"
    .word _hold
#include "past.i65"
sign01
    .word exit

;--------------------------------------------------------------
#if 0
name=(DIGIT)
stack=( n -- c )
tags=numword,nosymbol

pronounced: 'paren-digit'
#endif
pdigit
    lda tos
    sed
    cmp #10
    adc #'0'
    cld
    sta tos
    jmp next

;--------------------------------------------------------------
#if 0
name=#
stack=( +d1 -- +d2 )
tags=numword,forth-83

 +d1 is divided by BASE and the quotient is
 placed onto the stack.  The remainder is con-
 verted to an ASCII character and appended to
 the output string toward lower memory ad-
 dresses.
 The remainder of +d1 divided by the value of
 BASE is converted to an ASCII character and ap-
 pended to the output string toward lower memory
 addresses.  +d2 is the quotient and is main-
 tained for further processing.  Typically used
 between <# and #> .

pronounced: 'sharp'
#endif
#include "align.i65"
_sharp
    jsr enter
#include "page.i65"
    .word base                  ; ( d base )
#include "page.i65"
    .word fetch                 ; ( d @base )
#include "page.i65"
    .word udslashmod            ; ( rem d )
#include "page.i65"
    .word rot                   ; ( d rem )
#include "page.i65"
    .word pdigit
#include "page.i65"
    .word _hold                 ; ( d )
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=#S
stack=( d -- )
tags=numword,forth-83

pronounced: 'sharp-s'
#endif
#include "align.i65"
_sharps
    jsr enter
#include "page.i65"
sharps01
    .word _sharp                ; ( d )
#include "page.i65"
    .word twodup                ; ( d d )
#include "page.i65"
    .word _dzeq                 ; ( d flag )
#include "parm.i65"
    .word qbranch
    .byt <(sharps01-*+1)
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(UD.)
stack=( d -- )
tags=numword,nosymbol
Print an unsigned double

pronounced: 'paren-u-d-dot'

```
: (ud.)
    <# #s #> ;
```
#endif
#include "align.i65"
_puddot
    jsr enter
#include "page.i65"
    .word _ltsharp
#include "page.i65"
    .word _sharps
#include "page.i65"
    .word _sharpgt
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(D.)
stack=( d -- )
tags=numword,nosymbol
Print a signed double

```
: (d.)
    dup>r  dabs  <# #s r> sign #> ;
```
#endif
#include "align.i65"
_pddot
    jsr enter
#include "page.i65"
    .word duptor
#include "page.i65"
    .word dabs
#include "page.i65"
    .word _ltsharp
#include "page.i65"
    .word _sharps
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word _sign
#include "page.i65"
    .word _sharpgt
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(U.)
stack=( u -- )
tags=numword,nosymbol
Print an unsigned number

```
: (u.)
    0 (ud.) ;
```
#endif
#include "align.i65"
_pudot
    jsr enter
#include "page.i65"
    .word zero
#include "page.i65"
    .word _puddot
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=(.)
stack=( n -- )
tags=i/o,inner,nosymbol
Print a signed number

```
: (.)
    s->d (d.) ;
```
#endif
#include "align.i65"
_pdot
    jsr enter
#include "page.i65"
    .word stod
#include "page.i65"
    .word _pddot
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=UD.
stack=( ud -- )
tags=numword

#endif
#include "align.i65"
_uddot
    jsr enter
#include "page.i65"
    .word _puddot
#include "past.i65"
    .word branch
    .byt <(tse-*+1)
;--------------------------------------------------------------
#if 0
name=D.
stack=( d -- )
tags=numword

#endif
#include "align.i65"
_ddot
    jsr enter
#include "page.i65"
    .word _pddot
#include "past.i65"
    .word branch
    .byt <(tse-*+1)
;--------------------------------------------------------------
#if 0
name=U.
stack=( n -- )
tags=numword,forth-83

#endif
#include "align.i65"
_udot
    jsr enter
#include "page.i65"
    .word _pudot
#include "past.i65"
    .word branch
    .byt <(tse-*+1)
;--------------------------------------------------------------
#if 0
name=.
stack=( n -- )
tags=numword,forth-83


 The value of n is displayed in a free field for-
 mat with a leading minus sign if n is negative.
#endif
#include "align.i65"
_dot
    jsr enter
#include "page.i65"
    .word _pdot                 ; ( addr count )
#include "page.i65"
tse                             ; type, space, exit
    .word type                  ; ( )
#include "page.i65"
    .word space                ; ( )
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=U.R
stack=( u w -- )
tags=numword

 u is converted using the value of BASE and then
 displayed as an unsigned number right-aligned
 in a field +n characters wide.  If the number
 of characters required to display u is greater
 than +n, an error condition exists.

#endif
#include "align.i65"
_udotr
    jsr enter
#include "page.i65"
    .word tor
#include "page.i65"
    .word _pudot
#include "parm.i65"
    .word branch
    .byt <(rjustify-*+1)
;--------------------------------------------------------------
#if 0
name=.R
stack=( n1 w -- )
tags=numword

#endif
#include "align.i65"
_dotr
    jsr enter
#include "page.i65"
    .word tor
#include "page.i65"
    .word _pdot
#include "parm.i65"
    .word branch
    .byt <(rjustify-*+1)
;--------------------------------------------------------------
#if 0
name=UD.R
stack=( d w -- )
tags=numword

#endif
#include "align.i65"
_uddotr
    jsr enter
#include "page.i65"
    .word tor
#include "page.i65"
    .word _puddot
#include "parm.i65"
    .word branch
    .byt <(rjustify-*+1)
;--------------------------------------------------------------
#if 0
name=D.R
stack=( d n -- )
tags=numword

#endif
#include "align.i65"
_ddotr
    jsr enter
#include "page.i65"
    .word tor
#include "page.i65"
    .word _pddot
#include "page.i65"
rjustify
    .word rfrom
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "page.i65"
    .word _spaces
#include "page.i65"
    .word type
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?
stack=( addr -- )
tags=i/o,memory
Output value at `addr` as a signed number

#endif
#include "align.i65"
_question
    jsr enter
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _dot
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=!SW16
stack=( -- )
tags=nosymbol
Set up to invoke Sweet-16 on `brk` opcode

#endif
setsw16
    lda CBINV+1                 ; BRK vector high byte
    cmp #>(SW16)
    beq swapirq03
    ; fall through
;--------------------------------------------------------------
#if 0
name==BRK
stack=( -- )
tags=nosymbol
swap BRK at $0092 with `userbrk`

#endif
swapbrk
    ldy #2
    .byt $2C                    ; BIT abs
;--------------------------------------------------------------
#if 0
name==NMI
stack=( -- )
tags=nosymbol
swap NMI at $0094 with `usernmi`

#endif
swapnmi
    ldy #4
    ;
    .byt $2C                    ; BIT abs
;--------------------------------------------------------------
#if 0
name=(=IRQ)
stack=( -- )
tags=primitive,nosymbol
Perform a safe switcheroo of the IRQ, BRK, or NMI vector

save previous vector in its corresponding user variable (e.g. `cinv`)

#endif
swapirq
    ldy #0
    ;
    lda userirq+1,y
    beq swapirq03
    pha
    lda userirq,y
    pha
    lda CINV+1,y
    sta userirq+1,y
    lda CINV,y
    sta userirq,y
setirqbrk
    sei
    pla
    sta CINV,y
    pla
    sta CINV+1,y
    cli
swapirq03
    rts

;--------------------------------------------------------------
#if 0
name==IRQ
stack=( -- )
tags=secondary
Perform a safe switcheroo of the IRQ, BRK, or NMI vector

save previous vector in its corresponding user variable (e.g. `cinv`)

#endif
#include "align.i65"
_swapirq
    jsr enter
#include "parm.i65"
    .word callz
    .word swapirq
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CALLZ
stack=( -- r; 'next )
tags=nosymbol
Push a return address to the return stack, so that the following subroutine
call concludes with `next`; see `spnext`

#endif
callz
    stx z
    lda #>(spnext-1)
    pha
    lda #<(spnext-1)
    pha
    jmp next
