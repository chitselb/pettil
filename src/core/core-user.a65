; core-user.a65
;#echo .       core-user.a65             Core User Variables
;~2.0 byte-size uservariables? more natural interface to things like cursor, file i/o
; user variables required for pettil-core

;--------------------------------------------------------------
#if 0
name=USERVAR
stack=( -- addr )
tags=uservar,nosymbol
Runtime action of all user variables.  Returns the address of
the user variable.

#endif
uservar
    clc
    ldy #1
    pla
    sta n
    pla
    sta n+1
    lda (n),y
    adc up
    ldy up+1
    bcc uservar02
    iny
uservar02
    jmp pushya

;--------------------------------------------------------------
#if 0
name=LIMIT
stack=( -- addr )
tags=uservar,kernel
!!!User variable
Unlike other user variables, this points to an address not in of `uarea` but in `zpbuf`, where PETTIL preserves a copy of the bottom of zero page.  As PETTIL relocates itself statically, not dynamically it does not read this value, and PETTIL really has no need to modify it.  `limit` is only concerned with the BASIC firmware and any software referencing $34..35

#endif
limit
    jsr doconst
    .word zpbuf+MEMSIZ

;--------------------------------------------------------------
#if 0
name=SP0
stack=( -- addr )
tags=uservar,fig
User variable
The data stack initialization value ($31)

+1 is added to optimize `?stack`

#endif
sp0
    jsr uservar
    .byt usersp0-uarea

;--------------------------------------------------------------
#if 0
name=RP0
stack=( -- addr )
tags=uservar,fig
[heading]User variable[/heading]

#endif
rp0
    jsr uservar
    .byt userrp0-uarea

;--------------------------------------------------------------
#if 0
name=CINV
stack=( -- addr )
tags=uservar
[heading]User variable[/heading]

#endif
cinv
    jsr uservar
    .byt userirq-uarea

;--------------------------------------------------------------
#if 0
name=CBINV
stack=( -- addr )
tags=uservar
[heading]User variable[/heading]
The return stack initialization value ($01FE)
#endif
cbinv
    jsr uservar
    .byt userbrk-uarea

;--------------------------------------------------------------
#if 0
name=NMINV
stack=( -- addr )
tags=uservar
[heading]User variable[/heading]

#endif
nminv
    jsr uservar
    .byt usernmi-uarea

;--------------------------------------------------------------
#if 0
name=STARTUP
stack=( -- addr )
tags=uservar
!!!User variable
Code field address of the word that executes on startup.  In
the development environment, this is set to [[ABORT]]
#endif
startup
    jsr uservar
    .byt userstartup-uarea

;--------------------------------------------------------------
#if 0
name=WARNING
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
A user variable containing a value controlling messages.

* 0 = messages will be presented by number
* addr = address of the error messages table
#endif
warning
    jsr uservar
    .byt userwarning-uarea

;--------------------------------------------------------------
#if 0
name=DP
stack=( -- addr )
tags=uservar,fig
Dictionary pointer
#endif
dp
    jsr uservar
    .byt userdp-uarea

;--------------------------------------------------------------
#if 0
name=FENCE
stack=( -- addr )
tags=uservar,fig
!!!User variable
Returns the address of the user variable FENCE which defines
the lower limit of FORGET
#endif
fence
    jsr uservar
    .byt userfence-uarea

;--------------------------------------------------------------
#if 0
name=SYMTAB
stack=( -- addr)
tags=uservar,interpreter,compiler
!!!User variable
base of symbol table.  There are 16 words here, each the address of a smaller list of symbols, sorted by first character (and'ed with $0F to limit the set to 16 elements) and within that, sorted by asscending length.

Instead of the first-char-AND-15 scheme for breaking into 16 piles that PETTIL uses now, this used to be a Pearson hash.  I found it on wikipedia when researching hash functions.  The Pearson hash had the advantage of being able to tune it such that all 16 piles of words were very close to the same size, within one or two of the mode pile length.  But...
A) The code was expensive, weighing in at 70 bytes or so, also slower
B) As the programmer defines enough words, the original hash values would become unbalanced.
C) A roughly alpha-sort with the first-char-AND-15 approach makes it easy to find a word if you know what it starts with.

* `>thread` requires `symtab` to always be at a page boundary

|^`symtab @`|^get address of the symbol table|
|^`symtab off`|^discards all symbols<br/>`blkbuf` is now at top of RAM|
|^`forget`|^rebuilds symbol table|
!!!pronounced: "sim-tab"
#endif
symtab
    jsr uservar
    .byt usersymtab-uarea

;--------------------------------------------------------------
#if 0
name=BASE
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
!!!User variable
Number base.  ? Reset to decimal (base 10) on ABORT

#endif
base
    jsr uservar
    .byt userbase-uarea

;--------------------------------------------------------------
#if 0
name=FILENAME
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the address of a counted string which is
the filename that will be used on the next [[SAVE-BUFFERS]]
[[LOAD-BUFFERS]] or STOP-S STOP-V STOP-L in the editor
#endif
filename
    jsr uservar
    .byt userfilename-uarea

;--------------------------------------------------------------
#if 0
name=SA#
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the secondary address for [[FILE]]

!!!pronounced: "S-A-num"
#endif
sanum
    jsr uservar
    .byt usersanum-uarea

;--------------------------------------------------------------
#if 0
name=DRV#
stack=( -- addr )
tags=uservar,vm,i/o
!!!User variable
User variable that holds the device # used by [[SAVE-BUFFERS]]
[[LOAD-BUFFERS]] STOP-S STOP-V and STOP-L in the editor

!!!pronounced: "drive-num"
#endif
drvnum
    jsr uservar
    .byt userdrvnum-uarea

;--------------------------------------------------------------
#if 0
name=VMBUF
stack=( -- addr )
tags=uservar,vm
!!!User variable
User variable that points to the bottom of the virtual memory
packet buffer.  Save and Verify operations use this as their
base address.  Load operations will load from magnetic media
to [[PAD]], then [[move|MOVE]] that data up so it ends just below
[[BLKBUF]] before setting `VMBUF`.  Creating and destroying
packets changes the value of `VMBUF`

!!!pronounced: "v-m-buff"
#endif
vmbuf
    jsr uservar
    .byt uservmbuf-uarea

;--------------------------------------------------------------
#if 0
name=#BLK
tags=uservar,vm
stack=( -- addr )
!!!User variable
Number of virtual memory packets used in `vmbuf`.

There should be a null `00` at the address pointed to by `vmbuf`

#endif
numblk
    jsr uservar
    .byt usernumblk-uarea

;--------------------------------------------------------------
#if 0
name=SCR
stack=( -- addr )
tags=uservar
!!!User variable
Packet number of screen most recently LISTed or EDITed

Three user variables each track a packet index: `scr`, `prev` and `blk`

* `scr` used by ''editor''
** set by `edit`
** currently visible screen
** associates with contents of `vidram`
** used by `editor` vocabulary's `l` `p` and `n`
** used by `STOP-HOME` `STOP-UP` and `STOP-DOWN` editor commands
* `prev` used by ''virtual memory''
** set by `block`
** reset by `empty-buffers`
** read by `update`
** associates with contents of `blkbuf`
** `blkbuf` reload is inhibited when not `editing?`
** set by `block`
** `-1` `blkbuf` is invalid
** `0` block/screen 0 loaded in `blkbuf`
** `>0` block/screen loaded in `blkbuf`
* `blk` used by ''interpret''
** current input source
** connects `blkbuf` with `sib`
** `0` input from keyboard `tib`
** `>0` loading from `blkbuf` and `sib`

|^`scr`|^`0`|^`pkt` #0 is loaded in `vidram`|
|~|`> 0`|^`pkt` is loaded in `vidram`|
|^`prev`|^`-1`|^`blkbuf` invalid|
|~|^`0`|^`pkt` #0 is loaded in `blkbuf`|
|~|^`> 0`|^`pkt` is loaded in `blkbuf`|
|~|~|afawef|
|^`blk`|^`0`|^input from keyboard|
|~|`> 0`|^actively loading from `blk`|

#endif
scr
    jsr uservar
    .byt userscr-uarea

;--------------------------------------------------------------
#if 0
name=PREV
stack=( -- addr )
tags=uservar
!!!User variable
Packet number of block currently loaded

!!!Detecting block already loaded
Unless `editing?` is true, `block` exits without unpacking if `prev` matches the requested value.
`update` uses `prev` if `editing?` is false, (else `scr`)

#endif
prev
    jsr uservar
    .byt userprev-uarea

;--------------------------------------------------------------
#if 0
name=BLK
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
!!!User variable
The address of a variable containing the number of the mass
storage block being interpreted as the input stream.  If the
value of BLK is zero the input stream is taken from the text
input buffer.  {{0..the number of blocks available -1}}
#endif
blk
    jsr uservar
    .byt userblk-uarea

;--------------------------------------------------------------
#if 0
name=IN
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
horizontal position in input stream

initialized by `expect`
updated by `skip` and `scan`
adjacent to `lin`

```
uservar in   ( -- addr )
    1 allot
```
#endif
in
    jsr uservar
    .byt userin-uarea

;--------------------------------------------------------------
#if 0
name=LIN
stack=( -- line )
tags=uservar,extra
upper byte of `in`, vertical line in line buffer
    always points to start of a logical line
    initialized by `load`
    updated by `lin+`

Upper half of `in`, contains current fake screen line during `load`

```
code lin   ( -- line )
    in 1+     lda,
    'push0a   jmp,
end-code
```
#endif
lin
    lda userlin
    jmp push0a

;--------------------------------------------------------------
#if 0
name=SPAN
stack=( -- addr )
tags=uservar,fig,forth-79,forth-83
User variable containing the width of the current line of input

In PETTIL, `span` is in the range $00..FF. It represents either the length of
`sib` when processing blocks, or the length of `tib` during a keyboard session.

~todo one byte uservar

#endif
span
    jsr uservar
    .byt userspan-uarea

;--------------------------------------------------------------
#if 0
name=#LINE
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
Counts the number of lines output
#endif
numline
    jsr uservar
    .byt usernumline-uarea

;--------------------------------------------------------------
#if 0
name=#OUT
stack=( -- addr )
tags=uservar,fig,forth-79
User variable
Counts number of characters that have been emitted
#endif
numout
    jsr uservar
    .byt usernumout-uarea

;--------------------------------------------------------------
#if 0
name=EDITING
tags=uservar,vm,editor
stack=( -- addr )
!!!User variable
If `EDITING`

* [[BLOCK]] will generate new [[screen packets|PETTIL packet map]]
* [[VIDRAM]] buffer is used by [[BLOCK]] and [[UPDATE]]
* screen packets are displayed and updated
* data packets are displayed but not updated

If not `EDITING`

* [[BLOCK]] will generate new [[data packets|PETTIL packet map]]
* [[BLKBUF]] buffer is used by [[BLOCK]] and [[UPDATE]]
* [[screen and data packets|PETTIL packet map]] are updated
#endif
editing
    jsr uservar
    .byt userediting-uarea

;--------------------------------------------------------------
#if 0
name=DPL
stack=( -- addr )
tags=uservar
!!!User variable
User variable containing the number of digits following the
decimal in numeric input conversion

~#comfortablynumber
#endif
dpl
    jsr uservar
    .byt userdpl-uarea

;--------------------------------------------------------------
#if 0
name=HLD
stack=( -- addr )
tags=uservar,fig,forth-79
!!!User variable

~#comfortablynumber
#endif
hld
    jsr uservar
    .byt userhld-uarea

;--------------------------------------------------------------
#if 0
name=CURSOR
stack=( -- addr )
tags=interpreter,uservar
virtual cursor, these are the fields and their meanings:

                        loading                     interactive session
D5    DFLTN                   3                           0
C6    PNTR                    in                          cursor column
D8    TBLX                    0 (inhibit scroll)          cursor line
C4    (PNT)                   blkbuf+lin*40               (logical) line address
D5    LNMX                    40 or 80                    39 or 79, max length

```
uservar cursor   ( -- addr )
    6 allot
```
#endif
cursor
    jsr uservar
    .byt usercursor-uarea
