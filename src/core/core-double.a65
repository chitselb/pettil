; core-double.a65
;#echo .       core-double.a65           32-bit numbers

;--------------------------------------------------------------
#if 0
name=D+
stack=( d1 d2 -- d1+d2 )
tags=primitive,forth-79,forth-83,double,math
Add two double precision numbers

#endif
dplus
    jsr dodnegate
    ; fall through
;--------------------------------------------------------------
#if 0
name=D-
stack=( d1 d2 -- d1-d2 )
tags=primitive,forth-79,forth-83,double,math
Subtract "d2" from "d1" leaving the result on the stack

#endif
dminus
    lda #>(put-1)
    pha
    lda #<(put-1)
    pha
;--------------------------------------------------------------
#if 0
name=DSUB
stack=( d1 d2 -- d1-d2 )
tags=subroutine,double,math
Perform `d1 - d2`

#endif
dsub
    sec
    lda stackl+2,x
    sbc stackl,x
    sta stackl+2,x
    lda stackh+2,x
    sbc stackh,x
    sta stackh+2,x
    lda stackl+1,x
    sbc tos
    pha
    lda stackh+1,x
    sbc tos+1
    tay
    pla
    inx
    inx
    rts

;--------------------------------------------------------------
#if 0
name=DNEGATE
stack=( d -- -d )
tags=primitive,forth-83,double,math
Negate the double on the stack

```
dodnegate
    sec                                 ;[2]
    lda stackl,x                        ;[4]
    eor #$FF                            ;[2]
    adc #0                              ;[2]
    sta stackl,x                        ;[4]
    lda stackh,x                        ;[4]
    eor #$FF                            ;[2]
    adc #0                              ;[2]
    sta stackh,x                        ;[4]
    jmp neg2                            ;[3]
;[20 bytes, 29 cycles] chitselb OG
```
#endif
dnegate
    lda #>(next-1)
    pha
    lda #<(next-1)
    pha
dodnegate
    sec                                 ;[2]
    lda #0                              ;[2]
    sbc stackl,x                        ;[4]
    sta stackl,x                        ;[4]
    lda #0                              ;[2]
    sbc stackh,x                        ;[4]
    sta stackh,x                        ;[4]
    jmp neg2                            ;[3]
;~~~code golf~~~
;[-4 bytes, -4 cycles] barrym95838 2020-04-07

;--------------------------------------------------------------
#if 0
name=M+
stack=( d1 n -- d2 )
tags=primitive,forth-83,double,math
Adds sign-extended `n` to `d1` yielding sum `d2`

```
: m+   ( d1 n -- d2 )
   s>d d+ ;
```
#endif
#include "align.i65"
_mplus
    jsr enter
#include "page.i65"
    .word stod
#include "page.i65"
    .word dplus
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DABS
stack=( d -- +d )
tags=primitive,forth-83,double,math
Returns the absolute value of double "d"
#endif
dabs
    lda tos+1
    bpl dabs01
    jmp dnegate
dabs01
    jmp next

;--------------------------------------------------------------
#if 0
name=2DUP
stack=( d -- d d )
tags=primitive,forth-83,double
Make a copy of the double on top of stack

#endif
twodup
    sec
    .byt $24                    ; BIT z.p. opcode, fall through
;--------------------------------------------------------------
#if 0
name=2OVER
stack=( d2 d1 -- d2 d1 d2 )
tags=primitive,double,stack,forth-83
Copy the double underneath the double on top of stack to become the new top of stack
#endif
twoover
    clc
    jsr slip
    dex
    bcc twoover01
twodup01
    lda stackh+2,x
    sta stackh,x
    lda stackl+2,x
    sta stackl,x
    jmp next
twoover01
    lda stackh+4,x
    sta stackh,x
    lda stackl+4,x
    sta stackl,x
    lda stackh+3,x
    sta tos+1
    lda stackl+3,x
    sta tos
    jmp next

;--------------------------------------------------------------
#if 0
name=2ROT
stack=( lo3 hi3 lo2 hi2 lo1 hi1 -- lo2 hi2 lo1 hi1 lo3 hi3 )
tags=primitive,double,ext
Rotate the three doubles on the stack

```
tworot
    ldy stackh+4,x
    lda stackh+2,x
    sta stackh+4,x
    lda stackh,x
    sta stackh+2,x
    sty stackh,x
    ldy stackl+4,x
    lda stackl+2,x
    sta stackl+4,x
    lda stackl,x
    sta stackl+2,x
    sty stackl,x                ; done moving lo words
    ldy stackh+3,x
    lda stackh+1,x
    sta stackh+3,x
    lda tos+1
    sta stackh+1,x
    sty tos+1
    ldy stackl+3,x
    lda stackl+1,x
    sta stackl+3,x
    lda tos
    sta stackl+1,x
    sty tos                     ; done moving hi words
    jmp next
```
#endif
#include "align.i65"
_tworot
    jsr enter
#include "page.i65"
    .word twotor
#include "page.i65"
    .word twoswap
#include "page.i65"
    .word tworfrom
#include "page.i65"
    .word twoswap
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=2SWAP
stack=( hi2 lo2 hi1 lo1 -- hi1 lo1 hi2 lo2 )
tags=primitive,double,ext
Swap the two doubles on the stack
#endif
twoswap
    ldy tos+1
    lda stackh+1,x
    sta tos+1
    sty stackh+1,x
    ldy tos
    lda stackl+1,x
    sta tos
    sty stackl+1,x
    ldy stackh,x
    lda stackh+2,x
    sta stackh,x
    sty stackh+2,x
    ldy stackl,x
    lda stackl+2,x
    sta stackl,x
    sty stackl+2,x
    jmp next

;--------------------------------------------------------------
#if 0
name=2!
stack=( d addr -- )
tags=primitive,forth-83,double
Store the 32-bit double `d` at `addr`.

The high word and the low word are inverted in memory, following the example of "Blazin' Forth."  PET FIG Forth does not include `2@` `2!` primitives for 32-bit doubles.

#endif
twostore
    ldy #0
twostore02
    lda stackl,x
    sta (tos),y
    iny
    lda stackh,x
    sta (tos),y
    inx
    iny
    cpy #4
    bne twostore02
    jmp drop

;--------------------------------------------------------------
#if 0
name=D2/
stack=( d -- d/2 )
tags=primitive,double,math
Divides double "d" by 2, unsigned

h/t barrym95838
#endif
dtwoslash
    lsr tos+1
    ror tos
    ror stackh,x
    ror stackl,x
    jmp next

;--------------------------------------------------------------
#if 0
name=D2*
stack=( d -- d*2 )
tags=primitive,double,math
Multiply the double "d" by 2
#endif
dtwostar
    asl stackl,x
    rol stackh,x
    rol tos
    rol tos+1
    jmp next

;--------------------------------------------------------------
#if 0
name=DMIN
stack=( d1 d2 -- d3 )
tags=secondary,double,math,ext
Returns d1 or d2, whichever is smaller (signed)
#endif
#include "align.i65"
_dmin
    jsr enter
#include "page.i65"
    .word twoover
#include "page.i65"
    .word twoover
#include "page.i65"
    .word _dge
#include "parm.i65"
    .word pquerycolon
    .word twoswap
    .word twodrop
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DMAX
stack=( d1 d2 -- d3 )
tags=secondary,double,math,ext
Returns the larger of two doubles, signed
#endif
#include "align.i65"
_dmax
    jsr enter
#include "page.i65"
    .word twoover
#include "page.i65"
    .word twoover
#include "page.i65"
    .word dlt
#include "parm.i65"
    .word qbranch
    .byt <(dmax01-*+1)
#include "pad.i65"
    .word twoswap
#include "page.i65"
dmax01
    .word twodrop
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=2R@
stack=( -- x1 x2 ) ( R; x1 x2 -- x1 x2 )
tags=primitive,double,ext
Copy cell pair x1 x2 from the return stack. Semantically equivalent to `R> R> 2DUP >R >R SWAP`

#endif
tworfetch
    jsr slip
    dex                         ; add a double to stack
    stx z
    tsx
    txa
    tay                         ; register juggling fun
    ldx z
    lda $0104,y
    sta stackh,x
    lda $0103,y
    sta stackl,x
    lda $0102,y
    sta n
    lda $0101,y
    ldy n
    jmp put

;--------------------------------------------------------------
#if 0
name=PICK
stack=( an ... a3 a2 a1 n -- an ... a3 a2 a1 an )
tags=primitive,forth-83,nucleus


 0 pick = same as dup
 1 pick = same as over
#endif
pick
    txa
    clc
    adc tos
    tay
    lda stackh,y
    sta tos+1
    lda stackl,y
    sta tos
    jmp next

;--------------------------------------------------------------
#if 0
name=2@
stack=( addr -- hi lo )
tags=primitive,double,memory,forth-83,ext
Retrieve the double stored at "addr" to the stack

#endif
twofetch
    ldy #3
    clc
twofetch01
    lda (tos),y
    pha
    dey
    bpl twofetch01
    bcc twofetch02
    pla
    sta tos
    pla
    sta tos+1
    bcs tworfrom
twofetch02
    jsr slide
    ; fall through
;--------------------------------------------------------------
#if 0
name=2R>
stack=( -- x1 x2 ) ( R; x1 x2 -- )
tags=primitive,double,stack,ext

Transfer cell pair x1 x2 from the return stack. Semantically equivalent to `R> R> SWAP`
#endif
tworfrom
    jsr slip
    dex
    pla
    sta tos
    pla
    sta tos+1
    pla
    sta stackl,x
    pla
    sta stackh,x
    jmp next

