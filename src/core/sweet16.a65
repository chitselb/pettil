; sweet16.a65
;#echo .       sweet16.a65               Woz's SWEET-16 virtual machine, emulates the Cosmac 1802

;--------------------------------------------------------------
#if 0
name=~ Sweet-16 interpreter
tags=nosymbol
Woz's Sweet-16 interpreter

I added four no-argument opcodes and renumbered them, partly to gain a better
undertanding and partly to see if I could improve things.  See
[[this article|http://pettil.tumblr.com/post/82927214679/in-which-i-take-on-the-great-stevewoz-at-code-golf]]

* ext
* nxt
* push
* pull
#endif
sweet16
; based on "http://6502.org/source/interpreters/sweet16.htm
;
;* SWEET 16 INTERPRETER
;
;* APPLE-II PSEUDO MACHINE INTERPRETER
;* COPYRIGHT (C) 1977
;* APPLE COMPUTER, INC
;* ALL RIGHTS RESERVED
;* S. WOZNIAK
;

;r0 = 2*R0           ; ACC
;r1 = 2*R1           ; TOS
;r2 = 2*R2           ; N0
;r3 = 2*R3           ; N1
;r4 = 2*R4           ; N2
;r5 = 2*R5           ; N3
;r6 = 2*R6           ; N4
;r7 = 2*R7           ; N5
;r8 = 2*R8           ; N6
;r9 = 2*R9           ; N7
;r10 = 2*R10         ; N8
;r11 = 2*R11         ; EXT address
;r12 = 2*R12         ; BS/RS stack pointer
;r13 = 2*R13         ; CPR result
;r14 = 2*R14         ; prior result register(l) and carry flag(h)
;r15 = 2*R15         ; Sweet16 PC

BRTBL
    .BYT <RTN-1         ;00
OPTBL
    .BYT <SET-1   ;1x
    .BYT <BP-1          ;01
    .BYT <LD-1    ;2x
    .BYT <BM-1          ;02
    .BYT <ST-1    ;3x
    .BYT <BZ-1          ;03
    .BYT <LDAT-1  ;4x
    .BYT <BNZ-1         ;04
    .BYT <STAT-1  ;5x
    .BYT <BM1-1         ;05
    .BYT <LDDAT-1 ;6x
    .BYT <BNM1-1        ;06
    .BYT <STDAT-1 ;7x
    .BYT <NXT-1         ;07
    .BYT <POP-1   ;8x
    .BYT <PUSH-1        ;08
    .BYT <STPAT-1 ;9x
    .BYT <PULL-1        ;09
    .BYT <ADD-1   ;Ax
    .BYT <BR-1          ;0A
    .BYT <SUB-1   ;Bx
    .BYT <EXT-1         ;0B     uses R11
    .BYT <POPD-1  ;Cx
    .BYT <BS-1          ;0C     uses R12
    .BYT <CPR-1   ;Dx           uses R13
    .BYT <RS-1          ;0D
    .BYT <INR-1   ;Ex
    .BYT <BC-1          ;0E
    .BYT <DCR-1   ;Fx
    .BYT <BNC-1         ;0F


SW16C
    INC R15L
    BNE SW16D
    INC R15H
SW16D
    LDA #>LD       ;COMMON HIGH BYTE FOR ALL ROUTINES
    PHA            ;PUSH ON STACK FOR RTS
    LDY #0
    LDA (R15L),Y   ;FETCH INSTR
    AND #$0F       ;MASK REG SPECIFICATION
    ASL            ;DOUBLE FOR TWO BYTE REGISTERS
    TAX            ;TO X REG FOR INDEXING
    LSR            ; always clears carry
    EOR (R15L),Y   ;NOW HAVE OPCODE
    BEQ TOBR       ;IF ZERO THEN NON-REG OP
    STX R14L       ;INDICATE "PRIOR RESULT REG"
    LSR
    LSR            ;OPCODE*2 TO LSB'S
    LSR
    TAY            ;TO Y REG FOR INDEXING
    LDA OPTBL-2,Y  ;LOW ORDER ADR BYTE
    PHA            ;ONTO STACK
disp1
    RTS            ;GOTO REG-OP ROUTINE

    ; A = 0
    ; X = opcode*2
    ; Y = 0
    ; N = 0
    ; Z = 1
    ; C = 0
TOBR
    LDA BRTBL,X    ;LOW ORDER ADR BYTE
    PHA            ;ONTO STACK FOR NON-REG OP

    ; nxt, push, pull, br, ext, rs, rtn
    ; A = addr[low]
    ; X = opcode*2
    ; N = top/bottom of addr[low]
    ; Z = 0
    ; C = 0
    BMI TOBR4
    INC R15L
    BEQ TOBR5
TOBR2
    CPX #nxt*2
    BCS TOBR3
    LDX R14L
    LDA R0H,X

    ; bp, bm, bz, bnz, bm1, bnm1
    ; A = prior result[high]
    ; X = prior register*2
    ; Y = 0
    ; N = sign? prior result[high]
    ; Z = zero? prior result[high]
    ; C = 0
disp2
    RTS
TOBR3
    LDA R14H
    LSR

    ; bs, bc, bnc
    ; A = ?
    ; X = opcode*2
    ; Y = 0
    ; N = 0
    ; Z = ?
    ; C = from prior result
TOBR4
disp3
    RTS
TOBR5
    INC R15H
    BNE TOBR2


;* FOLLOWING CODE MUST BE
;* CONTAINED ON A SINGLE PAGE!

LD
    LDA R0L,X
    STA R0L
    LDA R0H,X       ;MOVE RX TO R0
    STA R0H
    RTS
STAT
    LDA R0L
STAT2
    STA (R0L,X)     ;STORE BYTE INDIRECT
    LDY #0
STAT3
    STY R14L        ;INDICATE R0 IS PRIOR RESULT REG
INR
    INC R0L,X
    BNE INR2        ;INCR RX
    INC R0H,X
INR2
    RTS
LDAT
    LDA (R0L,X)     ;LOAD INDIRECT (RX)
    STA R0L         ;TO R0
    LDY #0
    STY R0H         ;ZERO HIGH ORDER R0 BYTE
    BEQ STAT3       ;ALWAYS TAKEN
POP
    LDY #0          ;HIGH ORDER BYTE = 0
    BEQ POP2        ;ALWAYS TAKEN
POPD
    JSR DCR         ;DECR RX
    LDA (R0L,X)     ;POP HIGH ORDER BYTE @RX
    TAY             ;SAVE IN Y REG
POP2
    JSR DCR        ;DECR RX
    LDA (R0L,X)    ;LOW ORDER BYTE
    STA R0L        ;TO R0
    STY R0H
POP3
    LDY #0         ;INDICATE R0 AS LAST RESULT REG
    STY R14L
    RTS
BP
    BPL BR1        ;BRANCH IF SO
    RTS
BM
    BMI BR1
    RTS
BZ
    ORA R0L,X       ;(BOTH BYTES)
    BEQ BR1        ;BRANCH IF SO
    RTS
BNZ
    ORA R0L,X       ;(BOTH BYTES)
    BNE BR1        ;BRANCH IF SO
    RTS
BM1
    AND R0L,X       ;FOR $FF (MINUS 1)
    EOR #$FF
    BEQ BR1         ;BRANCH IF SO
    RTS
BNM1
    AND R0L,X       ;CHECK BOTH BYTES FOR NO $FF
    EOR #$FF
    BNE BR1         ;BRANCH IF NOT MINUS 1
    RTS
BS
    ;LDX #R12*2     ; already R12 because x=opcode*2
    LDA R15L        ;NOTE X REG IS 12*2!
    JSR STAT2       ;PUSH LOW PC BYTE VIA R12
    LDA R15H
    JSR STAT2       ;PUSH HIGH ORDER PC BYTE
    ;LDY #0
BR
    CLC             ;bra
BNC
    BCS BNC2        ;NO CARRY TEST
BR1
    ;LDY #0
    ;CLC
    LDA (R15L),Y    ;DISPLACEMENT BYTE
    BPL BR2
    DEY
BR2
    ADC R15L        ;ADD TO PC
    STA R15L
    TYA
    ADC R15H
    STA R15H
BNC2
    RTS
BC
    BCS BR
    RTS
ST
    LDA R0L
    STA R0L,X       ;MOVE R0 TO RX
    LDA R0H
    STA R0H,X
    RTS
;--------------- middle of page ---------------
LDDAT
    JSR LDAT        ;LOW ORDER BYTE TO R0, INCR RX
    LDA (R0L,X)     ;HIGH ORDER BYTE TO R0
    STA R0H
    JMP INR         ;INCR RX
STDAT
    JSR STAT        ;STORE INDIRECT LOW ORDER
    LDA R0H         ;BYTE AND INCR RX. THEN
    STA (R0L,X)     ;STORE HIGH ORDER BYTE.
    JMP INR         ;INCR RX AND RETURN
EXT
    ;LDX #R11*2
    STX R14L
    LDY #2          ; point to high byte of transfer address
    JSR SET
    jmp extdispatch
STPAT
    JSR DCR         ;DECR RX
    LDA R0L
    STA (R0L,X)     ;STORE R0 LOW BYTE @RX
    JMP POP3        ;INDICATE R0 AS LAST RESULT REG
DCR
    LDA R0L,X
    BNE DCR2        ;DECR RX
    DEC R0H,X
DCR2
    DEC R0L,X
    RTS
SUB
    LDY #0          ;RESULT TO R0
CPR
    ;LDY #R13*2
    SEC             ;NOTE Y REG = 13*2 FOR CPR
    LDA R0L
    SBC R0L,X
    STA R0L,Y       ;R0-RX TO RY
    LDA R0H
    SBC R0H,X
SUB2
    STA R0H,Y
    STY R14L        ;LAST RESULT REG*2
    ROL R14H        ;CARRY TO LSB
    RTS
NXT
    LDA #<(next-1)
    STA R15L
    LDA #>(next-1)
    STA R15H
RTN
    INC R15L
    BNE RTN2
    INC R15H
RTN2
    PLA
    PLA
    TSX
    LDA R15L
    STA $0105,X
    LDA R15H
    STA $0106,X
    JMP DORTI       ; pop registers & rti
RS
    BMI RSZ         ;bra
PULL
    BMI PULLZ       ;bra
PUSH
    BMI PUSHZ       ;bra
ADD
    ;CLC            ;already clear
    LDA R0L
    ADC R0L,X
    STA R0L         ;R0+RX TO R0
    LDA R0H
    ADC R0H,X
    LDY #0          ;R0 FOR RESULT
    BEQ SUB2        ;FINISH ADD
SET
    ;LDY #2
    ;X = register * 2
    LDA (R15L),Y    ;HIGH ORDER BYTE OF CONSTANT
    STA R0H,X
    DEY
    LDA (R15L),Y    ;LOW ORDER BYTE OF CONSTANT
    STA R0L,X
    TYA
    SEC             ;ADD 2 to R15
    ADC R15L
    STA R15L
    BCS SET2        ;usually 2 clocks
    RTS
SET2
    INC R15H
    RTS
RSZ
    LDX #ACC+2*R12  ;STACK POINTER
    JSR DCR         ;DECR STACK POINTER
    LDA (R0L,X)     ;POP HIGH RETURN ADDRESS TO PC
    STA R15H
    JSR DCR         ;SAME FOR LOW ORDER BYTE
    LDA (R0L,X)
    STA R15L
    RTS
PULLZ
    TSX
    LDA $0104,X
    TAX             ; get PETTIL stack pointer
    JSR slide       ; remove item from Forth data stack (DROP in Forth)
    TXA
    TSX
    STA $0104,X
    LDX #ACC+2*TOS      ; LD TOS
    JMP LD
PUSHZ
    TSX
    LDA $0104,X
    TAX             ; get PETTIL stack pointer
    JSR slip        ; push TOS -> Forth data stack (DUP in Forth)
PUSH2
    TXA
    TSX
    STA $0104,X
    LDX #ACC+2*TOS  ; ST TOS
    JMP ST
extdispatch
    tsx
    lda $0104,x     ; be kind to our buddies outside, restore Forth data stack ptr
    tax
    jsr extdispatch02
    txa
    tsx
    sta $0104,x
    rts
extdispatch02
    jmp (2*R11)

SW16
    cli             ; Allow interrupt processing during Sweet16.
                    ; This will cause problems if Sweet16 is used
                    ; as part of an IRQ handler.  Not doing this
                    ; will stop the jiffy clock during Sweet16.
    LDY $0106,X     ;INIT SWEET16 PC
    LDA $0105,X     ;ADDRESS
    SEC
    SBC #2
    BCS SW16A
    DEY
SW16A
    STY R15H
    STA R15L
SW16B
    JSR SW16C      ;INTERPRET AND EXECUTE
    JMP SW16B      ;ONE SWEET16 INSTR.
