; core-locals.a65
;#echo "       core-locals.a65           Local variables N0..N8 R0..R15 etc

;--------------------------------------------------------------
#if 0
name=HARVESTS10
tags=subroutine,locals,nosymbol
Sets up five locals in the N area

#endif
harvests10
    ldy #10
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=HARVESTS8
tags=subroutine,locals,nosymbol
Sets up four locals in the N area

#endif
harvests8
    ldy #8
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=HARVESTS6
tags=subroutine,locals,nosymbol
Sets up three locals in the N area

#endif
harvests6
    ldy #6
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=HARVESTS4
tags=subroutine,locals,nosymbol
Sets up two locals in the N area

#endif
harvests4
    ldy #4
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=HARVESTS2
tags=subroutine,locals,nosymbol
Sets up one local in the N area

#endif
harvests2
    ldy #2
    ; fall through
;--------------------------------------------------------------
#if 0
name=HARVESTS
tags=subroutine,locals,nosymbol
Pops cells from the split stack to N area, working backwards.
Used for setting up primitives that consume multiple arguments

Input

* Y = how many words *2 to pop from the stack, e.g. Y=6 pops 3 words

Returns

* Y = 0
* TOS unchanged
* Z flag set
* C flag unchanged

|^Y|R1<br>TOS|R2<br>N0|R3<br>N1|R4<br>N2|R5<br>N3|R6<br>N4|R7<br>N5|R8<br>N6|R9<br>N7|R10<br>N8|h
|1|TOS|2OS|||||||||
|2|TOS|3OS|2OS||||||||
|3|TOS|4OS|3OS|2OS|||||||
|4|TOS|5OS|4OS|3OS|2OS||||||
|5|TOS|6OS|5OS|4OS|3OS|2OS|||||
|6|TOS|7OS|6OS|5OS|4OS|3OS|2OS||||
|7|TOS|8OS|7OS|6OS|5OS|4OS|3OS|2OS|||
|8|TOS|9OS|8OS|7OS|6OS|5OS|4OS|3OS|2OS||
|9|TOS|10OS|9OS|8OS|7OS|6OS|5OS|4OS|3OS|2OS|
|>|>|>|>|>|>|>| stack area and N area order is inverted |<|<|<|f

|Y: 0|Z: set|TOS: unchanged|C: unchanged|
#endif
harvests
    lda stackh,x        ; {4}
    dey                 ; {2}
    sta n,y             ; {5}
    lda stackl,x        ; {4}
    inx                 ; {2}
    dey                 ; {2}
    sta n,y             ; {5}
    bne harvests        ; {3|2 on last}
    rts                 ; {6}               {17}+{27y}

;--------------------------------------------------------------
#if 0
name=PLANTS12
tags=subroutine,locals,nosymbol
puts 6 locals underneath `tos`

#endif
plants12
    ldy #12
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS10
tags=subroutine,locals,nosymbol
puts 5 locals underneath `tos`

#endif
plants10
    ldy #10
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS8
tags=subroutine,locals,nosymbol
puts 4 locals underneath `tos`

#endif
plants8
    ldy #8
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS6
tags=subroutine,locals,nosymbol
puts 3 locals underneath `tos`

#endif
plants6
    ldy #6
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS4
tags=subroutine,locals,nosymbol
Sets up two locals in the N area

#endif
plants4
    ldy #4
    .byt $2c                    ; BIT abs opcode
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS2
tags=subroutine,locals,nosymbol
Sets up two locals in the N area

#endif
plants2
    ldy #2
    ; fall through
;--------------------------------------------------------------
#if 0
name=PLANTS
tags=subroutine,locals,nosymbol
Pushes N area back onto stack ~ untested

Input

* Y = how many words *2 to push to the stack, e.g. Y=6 pushes 3 words

Returns

* Y = 0
* TOS unchanged
* Z flag set
* C flag unchanged

|Y: 0|Z: set|TOS: unchanged|C: unchanged|
#endif
plants
    dex
    lda n-1,y
    sta stackh,x
    lda n-2,y
    sta stackl,x
    dey
    dey
    bne plants
    rts

;--------------------------------------------------------------
#if 0
name=>ZP
stack=( n -- n )
tags=primitive,locals,nosymbol
Copy `tos` to an inline zero page address.  Does not affect `tos`

#endif
tozp
    ldy #2
    lda (ip),y                  ; inline zp address
    tay
tozp01
    lda tos+1
    sta 1,y
    lda tos
    sta 0,y
    jmp bump

;--------------------------------------------------------------
#if 0
name=<ZP
stack=( <n == ; -- @n )
tags=primitive,locals,nosymbol
Replaces TOS with 16-bit fetch from inline z.p. address

~#comfortablynumber
#endif
zpfrom
    ldy #2                      ; Squeaky's little sister, Zeepy
    lda (ip),y
zpfrom01                        ; pass A
    tay                         ; Y = the actual address
zpfrom02                        ; pass Y
    jsr slip
    lda 1,y
    sta tos+1
    lda 0,y
    sta tos                     ; we'd like 16 bits, please
    jmp bump

;--------------------------------------------------------------
#if 0
name==ZP
stack=( x -- @n )
tags=primitive,locals,nosymbol
Exchange `tos` with (16-bit) word at inline z.p. address

zpex
    lda tos
    pha
    lda tos+1
    pha
    ldy #0
    sty tos+1
    ldy #2
    lda (ip),y                  ; inline zp-addr
    sta tos
zpex01
    pla
    dey
    sta (tos),y
    bpl zpex01
    jmp bump

#endif
zpex
    ldy #2
    lda (ip),y
    tay
    lda 1,y
    pha
    lda 0,y
    pha
    lda tos+1
    sta 1,y
    lda tos
    sta 0,y
    lda #1
    jsr padjust
    jmp rfrom
