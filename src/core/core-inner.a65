;core-inner.a65
;#echo .       core-inner.a65            Inner Interpreter

;--------------------------------------------------------------
#if 0
name=HEX
stack=( -- )
tags=forth-83,number,i/o
Sets the system number base to hexadecimal
#endif
#include "align.i65"
hex
    lda #$10
    .byt $2c            ; BIT addr to skip next two bytes
    ; fall through
;--------------------------------------------------------------
#if 0
name=DECIMAL
stack=( -- )
tags=number,i/o,forth-83
Sets the system number base to decimal
#endif
#include "align.i65"
decimal
    lda #10
    sta userbase
    bne put99   ; jmp next

;--------------------------------------------------------------
#if 0
name=DO2CONST
stack=( -- d )
tags=nosymbol,inner
Runtime behavior of a word defined by 2CONSTANT
#endif
dotwoconst
    pla
    sta n
    pla
    sta n+1
    ldy #4
dotwoconst01
    lda (n),y
    pha
    dey
    bne dotwoconst01
    jmp tworfrom

;--------------------------------------------------------------
#if 0
name=RP!
stack=( -- )
tags=fig
Ordinarily the 6502 machine stack (aka PETTIL return stack) is
initialized to $01FF by BASIC, but the value stored at RP0 defaults
to $01fe instead.  This is because the PET ROM stores a line of
input at $0200 (where TIB points) and INTERPRET will be storing a
count of the first word on the line at $01ff
#endif
rpstore
    txa
    ldx userrp0
    txs
    tax
    jmp next

;--------------------------------------------------------------
#if 0
name=SP!
stack=( -- )
tags=fig
Initializes the data stack pointer to the value in user
variable SP0
#endif
spstore
    ldx usersp0
    dex             ; because it's 1> to make ?stack faster
    jmp next

;--------------------------------------------------------------
#if 0
name=DOCONST
stack=( -- n )
tags=nosymbol,inner,primitive
Child runtime action of words defined by `constant`
#endif
doconst
    sec
    .byt $29                    ; AND #
;--------------------------------------------------------------
#if 0
name=DOCCONST
stack=( -- c )
tags=nosymbol,inner,primitive
Child runtime action of words defined by `cconstant`

#endif
docconst
    clc
    ;
    jsr slip
    pla
    sta tos
    pla
    sta tos+1
    ldy #1
    bne fetch01

;--------------------------------------------------------------
#if 0
name=B<
stack=( u -- c )
tags=primitive,ext
Returns the low byte of a cell

#endif
lsb
    lda tos
    .byt $2C                    ; BIT abs opcode
    ;fall through
;--------------------------------------------------------------
#if 0
name=B>
stack=( u -- c )
tags=primitive,ext
Returns the most significant byte of a cell
#endif
msb
    lda tos+1
put0a
    ldy #0
    beq put

;--------------------------------------------------------------
#if 0
name=M>R
stack=( count addr -- )
tags=primitive,extra,memory

#endif
mtor
    ldy #0
mtor01
    lda (tos),y
    pha
    iny
    dec stackl,x
    bne mtor01
    beq twodrop
;[12]

;--------------------------------------------------------------
#if 0
name=R>M
stack=( count addr -- )
tags=primitive,extra,memory

#endif
rtom
    ldy stackl,x
rtom01
    dey
    bmi twodrop
    pla
    sta (tos),y
    jmp rtom01
;[11]

;--------------------------------------------------------------
#if 0
name=C!
stack=( 8b addr -- )
tags=forth-83,nucleus,memory
 The least-significant 8 bits of 16b are stored into the byte
 at addr.

!!! pronounced: "c-store"
#endif
cstore
    clc
    .byt $29                    ; AND #

;--------------------------------------------------------------
#if 0
name=!
stack=( n addr -- )
tags=forth-83,nucleus,fig,memory

Store 16 bits of n at address.

!!! pronounced "store"
#endif
store
    sec                 ; [2]
    ldy #0              ; [2]
    lda stackl,x        ; [4]
    sta (tos),y         ; [6]
    bcc twodrop         ; [2/3]
    lda stackh,x        ; [4]
    iny                 ; [2]
    sta (tos),y         ; [6]   ; MSB is stored last, important to EVENTS
    ; fall through
;--------------------------------------------------------------
#if 0
name=2DROP
stack=( d -- )
tags=stack,forth-83
Discard the top two items on the stack
#endif
twodrop
    inx
    ; fall through
;--------------------------------------------------------------
#if 0
name=DROP
stack=( n -- )
tags=stack,forth-83
Discard the top item on the stack
#endif
drop
    ldy stackh,x
    lda stackl,x
    inx
put
    sta tos
puty
    sty tos+1
put99
    jmp next

;--------------------------------------------------------------
#if 0
name=SLIDE
stack=( n -- )
tags=subroutine,nosymbol
!!!Subroutine
Drop the top stack item

Returns `tos` low in A
Always clears Z flag on return


#endif
slide
    lda stackh,x                ;[10]{4 {=22}}    [bytes]{clocks {=total}}
    sta tos+1                   ;{3} slide something off of the stack
    lda stackl,x                ;{4}
    sta tos                     ;{3}
    inx                         ;{2} stack pointer is never 0, clear Z
    rts                         ;{6}

;--------------------------------------------------------------
#if 0
name=4DROP
stack=( a b c d -- )
tags=stack,ext
Discard the top four stack items
#endif
fourdrop
    inx
    ; fall through
;--------------------------------------------------------------
#if 0
name=3DROP
stack=( a b c -- )
tags=stack,ext
Discard the top three stack items
#endif
threedrop
    inx
    bne twodrop                 ; bra

;--------------------------------------------------------------
#if 0
name=C@
stack=( addr -- 8b )
tags=forth-79,nucleus,memory,forth-83

!!! pronounced: "c-fetch"
 8b is the contents of the byte at addr.

#endif
cfetch
    clc
    .byt $29                    ; AND #
    ; fall through
;--------------------------------------------------------------
#if 0
name=@
stack=( addr -- 16b )
tags=forth-79,nucleus,memory,fig,forth-83
Leave the 16 bit contents of address.

!!! pronounced:"fetch"
  16b is the value at addr.
#endif
fetch
    sec
    ;
    ldy #0
fetch01
    lda (tos),y
    bcc put0a
; in     C = clear
;        Y = offset
; out   YA = (tos),Y+1 (tos),Y
fetchyax
    lda (tos),y
    pha
    iny
    lda (tos),y
    tay
    pla
    bcs put
    rts

;--------------------------------------------------------------
#if 0
name=PARMPUSH
stack=( -- )
tags=inner,subroutine,nosymbol

#endif
parmpush
    jsr slip
parmputs
    lda (pip),y
    sta tos
    iny
    lda (pip),y
    sta tos+1
    rts

;--------------------------------------------------------------
#if 0
name=(?:)
stack=( flag -- )
tags=inner,nosymbol
The runtime of `?:`, invokes one of the two high-level Forth words
following this word depending on `flag`

||before|after|h
|tos| flag | . |
|2os| . ||
|ip| addr | addr+6 |

|addr-2|||||
|addr|(?:)||||
|addr+2|yeah||||
|addr+4|nope||||
|addr+6|||||

#endif
pquerycolon
    jsr topfas
    lda tos
    ora tos+1
    bne pquerycolon01
    iny
    iny
pquerycolon01
    jsr parmputs
    lda #3
    jsr paday
    dey
    dey
    sty pip
    sta pip+1
    ;fall through
;--------------------------------------------------------------
#if 0
name=EXECUTE
tags=inner,forth-83
stack=( cfa -- )
Executes the word whose code field address is on the stack.

#endif
execute
    lda tos+1       ;{3}
    pha             ;{4}
    lda tos         ;{3}
    pha             ;{4}
exec01
    jsr slide       ;{*}   ; (slide will clear Z flag)
    php             ;{4}
    rti             ;{7}

;--------------------------------------------------------------
#if 0
name=?EXIT
stack=( flag -- )
tags=extension
Exits the calling word if the flag is true

```
: ?exit   ( flag -- )
    if rdrop then ;
```
#endif
#include "align.i65"
_qexit
    jsr enter
#include "parm.i65"
    .word qbranch
    .byt <(qexit01-*+1)
#include "pad.i65"
    .word rdrop
#include "past.i65"
qexit01
    .word exit

;--------------------------------------------------------------
#if 0
name=(.")
stack=( -- )
tags=inner,nosymbol
Displays an inline string

```
: (.")
    r> count 2dup type  >6502  ( `;code` instead? )
    tos         lda,
    bumps       jsr,
    stackh ,x   lda,
                pha,
    stackl ,x   lda,
                pha,
                inx,
    exit        bne,
```
#endif
#include "align.i65"
_pdq
    jsr enter
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word count
#include "page.i65"
    .word twodup
#include "page.i65"
    .word type
#include "page.i65"
    .word plus
#include "page.i65"
    .word tor
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?STACK
stack=( -- )
tags=inner
Check the  data stack pointer for sanity, abort if trouble
#endif
qstack
    ldy #2                          ; 2 = stack full
    txa
    bmi error
    beq error
    dey                             ; 1 = stack empty
    cpx usersp0
    bcc put99
    ;fall through
;--------------------------------------------------------------
#if 0
name=SYSERR
stack=( -- )
tags=inner,nosymbol
General-purpose error handler, callable from primitives, used
to print a system error message and abort
pass in the error # in Y
      1 stack empty
      2 stack full
#endif
error
    sty tos
    ldy #0
    sty tos+1
    ;fall through
;--------------------------------------------------------------
#if 0
name=FAIL
stack=( error -- )
tags=inner
Outputs an [[error message|Error messages]], then [[ABORT]]

```
: fail   ( err# -- )
    warning @ ?dup
    ?: execute .err
```
#endif
#include "align.i65"
fail
    lda userwarning+1
    beq _doterr
    jmp (userwarning)

;--------------------------------------------------------------
#if 0
name=DLIT
stack=( -- d )
tags=nosymbol,inner
Runtime behavior of DLITERAL

#endif
dlit
    sec
    .byt $29

;--------------------------------------------------------------
#if 0
name=(LITS)
stack=( a b c d e f n == ; -- a b c d e f )
tags=primitive,system,startup,ext,nosymbol
Works like `(LIT)` but for a group, will pile several inline literal
constants onto the stack.  Think if `(lits)` as `list` (of literals),
spelled sideways

```
: (lits)   ( 0 [args...] "name" == ; -- [args...] )
    @ip c@+ 0 do @+ swap loop drop ; [23]

[plits] [3] [word3os] [word2os] [wordtos]

usage:
    : foo  [ 64 41 17 12  4 ] literals ;
    foo .s
```
#endif
plits
    clc
    ;
    jsr slip
    jsr topfas
    bcc plits00
    lda #2
    dey
plits00
    sta n
    ;beq weredone
plits01
    iny
    lda (pip),y
    dex
    sta stackl,x
    iny
    lda (pip),y
    sta stackh,x
    dec n
    bne plits01
    jsr slide
    tya
    jmp pad                     ; bra   ~ok

;--------------------------------------------------------------
#if 0
name=(?ERROR)
stack=( error# == ; flag -- )
tags=compiler,extension,nosymbol
Aborts with the (inline) numbered error if the flag is true

#endif
qerror
    jsr topfas
    tay
    lda tos
    ora tos+1
    bne error
qerror01
    jsr slide
    jmp bump

;--------------------------------------------------------------
#if 0
name=.ERR
stack=( err# -- ; performs `restart` )
tags=system,startup,nosymbol
`pettil-core` has no texty error messages.  This simplified error
handler will print the error number, followed by a `pause` before `restart`

`pettil-studio` replaces this handler with `error.msg`

```
: .err   ( err# -- )
    . ." ?err" restart ;
```
#endif
#include "align.i65"
_doterr
    jsr enter
#include "page.i65"
    .word _dot
#include "parm.i65"
    .word _pdq
    .byt (fail02-*-1)
    .asc "?ERR"
fail02
#include "pad.i65"
    .word true
#include "page.i65"
    .word _pause
#include "past.i65"
    .word restart               ; "My baby drove up in a brand new Cadillac
                                ; She said, 'Hey, come here, Daddy!'
                                ; 'I ain't never comin' back!'" -- The Clash

;--------------------------------------------------------------
#if 0
name=(")
stack=( -- addr )
tags=inner,nosymbol
Returns the address of an inline string
#endif
#include "align.i65"
_pquote
    jsr enter
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word twoplus
#include "past.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ENTER
stack=( -- )
tags=inner,nosymbol
Performs 'secondary' words defined by `:`, pushes IP+2 to the return stack and nests into a secondary.

#endif
enter
    txa             ;[2]
    pha             ;[3]
    tsx             ;[2]
;
    lda pip         ;[3]
#ifdef SAFER
    cmp #$FF
    bcs *                       ; runtime paging error
    ;clc                        ; thanks, CMP
#else
    clc             ;[2]
#endif
    adc #2          ;[2]
    ldy $0102,x     ;[4]
    sta $0102,x     ;[5]
    iny             ;[2]
    bne enter02     ;[3]
    inc $0103,x
enter02
    sty pip         ;[3]
    lda pip+1       ;[3]
    ldy $0103,x     ;[4]
    sta $0103,x     ;[5]
    sty pip+1       ;[3]
;
    pla             ;[4]
    tax             ;[2]
    jmp nexto       ;[3]
                    ;[55 clocks]

;--------------------------------------------------------------
#if 0
name=(DOES)
tags=inner,nosymbol
stack=( -- )
Runtime behavior of a word built with `<builds ... does>`

#endif
dodoes
/*
start
    DS          howmany
                from
    RS          dofill+2
                blank+2
    ip          1a8a in `(cold)`

near end of (does>)
    DS          blank+3
                howmany
                from
    RS          dofill+3                <-- last thing, via `>forth`
                1a8c *
    ip          dofill+3

exit...                         c@ fill ;
*/
    jsr slip
    stx z
    tsx
    ldy $0103,x
    iny
    sty tos
    ldy $0104,x
    lda tos
    bne dodoes01
    iny
dodoes01
    sty tos+1
    clc
    lda pip
    adc #2
    sta $0103,x
    lda pip+1
    adc #0
    sta $0104,x
    ldx z
    ;fall through
;--------------------------------------------------------------
#if 0
name=>FORTH
tags=inner,nosymbol
stack=( -- )
Passes control from 6502 assembly to high level Forth following the
`jsr toforth` instruction.

#endif
toforth
    txa
    tsx
toforth01
    inx
    inc $0100,x
    beq toforth01
    tax
    ;fall through
;--------------------------------------------------------------
#if 0
name=EXIT
stack=( -- )
tags=inner,forth-83,nosymbol
The runtime behavior of ;
Exits a colon definition, pop one level of the return stack
#endif

exit

//      .      .      .      .      .      .      .      .      .      .      //

// PURPOSE:
// `exit` is compiled by `;` to terminate `:` definitions
// it will unnest from within a secondary begun earlier by `enter`

// METHOD:
// * pop from the return stack to IP, unmodified

// TRICKS:
// * multiple entry points

//      .      .      .      .      .      .      .      .      .      .      //
    pla
    tay
    pla
jumpay
    sta pip+1
exit03
    sty pip
    jmp nexto

;--------------------------------------------------------------
#if 0
name=DOPAGE
stack=( -- )
tags=inner,nosymbol
Page boundary crossing is handled by the compiler inserting 'page'
when the DP gets to $xxFD or $xxFE.  IP = $xxFF is never supposed
to occur, and indicates an error in the compiler.

#endif
page
    ldy #0
pageb
    inc pip+1
    bne exit03                  ; bra

;--------------------------------------------------------------
#if 0
name=(BLIT)
tags=inner,nosymbol
stack=( -- n )
Runtime behavior of `literal`. Pushes the single byte following IP
on the stack

#endif
blit
    clc
    .byt $29
    ; fall through
;--------------------------------------------------------------
#if 0
name=(LIT)
tags=inner,nosymbol
stack=( -- n )
Runtime behavior of `literal`, puts a number `n` on the stack

#endif
plit
    sec
    ;
    jsr slip
    jsr topfas
    sta tos
    sty tos+1
    bcc plit01
    jsr parmputs
plit01
    tya
    bpl pad

;--------------------------------------------------------------
#if 0
name=(+LOOP)
stack=( n -- )
tags=inner,nosymbol
Add `n` to inner loop index.  If loop index exceeds loop limit,
then iterate back to (do), otherwise exit the loop.  PETTIL uses
four bytes of zero page for the inner loop index/limit, for speed

[[Posted question on comp.lang.forth|https://groups.google.com/d/msg/comp.lang.forth/V9evPkLwRoM/Khwons3O4QwJ]]
#endif
pploop
    sec
    lda zi
    sbc zlim
    sta n
    lda zi+1
    sbc zlim+1
    eor #$80
    tay
    clc
    lda n
    adc tos
    tya
    adc tos+1
    php
    clc
    lda tos
    adc zi
    sta zi
    lda tos+1
    adc zi+1
    sta zi+1
    jsr slide
    plp
    bvc branch
    bvs unloop

;--------------------------------------------------------------
#if 0
name=?BRANCH
stack=( flag -- )
tags=inner,nosymbol
If the flag is zero, take the branch

start
    DS          true, skip the branch
    ip          x
after
    DS
    ip          x+3 via topfas *

start
    DS          false, take the branch
    ip          x
middle
    DS
    ip          x
     A
start
    DS          false, take the branch
    ip          x
after
    DS
    ip          x+@(x+2) (branch)


near end of (does>)
    DS          blank+3
                howmany
                from
    RS          dofill+3
                1a8c *
    ip          dofill+3


#endif
qbranch
    lda tos                     ; get half of flag before
    ldy stackl,x                ; replace it with `2os`
    sty tos
    ldy stackh,x
    inx
    ora tos+1                   ; check upper half
    sty tos+1                   ; finish the `drop`
    bne pad2
    ; fall through
;--------------------------------------------------------------
#if 0
name=BRANCH
stack=( -- )
tags=inner,nosymbol
Compiles an unconditional branch operation. When used in the form:
[[COMPILE]] [[BRANCH]] , an unconditional branch operation is compiled.
A one-byte signed offset follows the pointer to `BRANCH`.  These branch
offset values are typically generated with [[<RESOLVE]] or [[>MARK]] .

`IP` points to address of `BRANCH`
(`IP`)+2 = the offset to `IP`,  calculated the same as for 6502 branches.
#endif
branch
    ldy #2
    lda (pip),y
    bpl pad
    dec pip+1
    .byt $2C
pad0
    lda #0
    .byt $2C
pad2
    lda #2
pad
    sec
    adc pip
    tay
    lda pip+1
    adc #0
    sta pip+1
    iny
    beq pageb
    dey
    bcc jumpay                          ; bra

;--------------------------------------------------------------
#if 0
name=(LOOP)
stack=( -- )
tags=inner,nosymbol
Compiled by [[LOOP]], this is the runtime routine to increment
the inner loop index `zi`.  If loop index exceeds loop limit
`zlim`, iterate back to (do), otherwise exit the loop.

PETTIL uses four bytes of [[zero page|PETTIL Zero page memory map]] for the inner loop
index/limit (`zi` `zlim`), for speed
#endif
ploop
    inc zi
    bne ploop01
    inc zi+1
ploop01
    lda zi
    eor zlim
    bne branch
    lda zi+1
    eor zlim+1
    bne branch
    ;fall through
;--------------------------------------------------------------
#if 0
name=UNLOOP
stack=( -- )
tags=nosymbol,inner,control
Exits from a [[DO]]-[[LOOP]], either because the index exceeded the limit, or
early exit due to [[LEAVE]] or [[?LEAVE]]
#endif
unloop
    ldy #<(-4)
unloop01
    pla
    sta zi-$100+4,y             ; effective address $FF7C,y wraps around
    iny
    bne unloop01
    beq pdoexit                 ; jmp exit

;--------------------------------------------------------------
#if 0
name=(?DO)
stack=( end begin -- )
tags=inner,nosymbol
Performs a do-loop if end<>begin

#endif
pqdo
    sec
    .byt $29                    ; AND# to skip CLC instruction
    ; fall through
;--------------------------------------------------------------
#if 0
name=(DO)
stack=( end begin -- )
tags=inner,nosymbol
runtime code for [[DO]] [[LOOP]]

#endif
pdo
    clc
    ;
    rol z
    jsr topfas
    jsr paday
    dey
    dey
    pha             ; {3}
    tya             ; {2}
    pha             ; {3}

    lsr z           ; {3}
    bcc pdo01       ; {2|3}     ; (DO) vs (?DO)

    jsr peq         ; {*}      ; (?DO), test equality loop start/limit
    bne pdo01       ; {2|3}
    inx             ; {2}       ; loop indices are identical, so ` 2DROP ; `
    jsr slide
pdoexit
    jmp exit
pdo01
    jsr harvests2
    ldy #3
pdo02
    lda zi,y
    pha
    lda tos,y
    sta zi,y
    dey
    bpl pdo02
    jsr slide
bump
    lda #0
    bpl pad                     ; bra

;--------------------------------------------------------------
#if 0
name=(?LEAVE)
stack=( flag -- )
tags=inner,nosymbol
If flag is nonzero, exit the do loop early
#endif
pqleave
    lda tos
    ora tos+1
    php
    jsr slide
    plp
    bne unloop
    jmp next

;--------------------------------------------------------------
#if 0
name=I
tags=inner,forth-83
stack=( -- index )
Push the inner loop index of a DO LOOP to the stack

#endif
i
    ldy zi+1
    lda zi
    ; fall through
;--------------------------------------------------------------
#if 0
name=PUSHYA
stack=( --  n )
tags=stack,nosymbol
pass YA = value to push on stack

#endif
pushya
    pha
    dex
    lda tos+1
    sta stackh,x
    lda tos
    sta stackl,x
    pla
    jmp put

;--------------------------------------------------------------
#if 0
name=SP@
stack=( -- sp )
tags=fig
Fetch the data stack pointer

#endif
spfetch
    txa
push0a
    ldy #0
    beq pushya                  ; bra

;--------------------------------------------------------------
#if 0
name=R@
stack=( -- n ) ( R; n -- n )
tags=forth-83,nucleus,stack
Copy the top of the return stack to the data stack

!!! pronounced: "r-fetch"
#endif
rfetch
                                ; you can call me r@, or you can call me j,
                                ; but you doesn't have to call me johnson
;--------------------------------------------------------------
#if 0
name=J
stack=( -- index )
tags=inner,forth-83
Push the outer loop index of a DO LOOP to the stack (alias for [[R@]])
#endif
j
    stx z
    tsx
    ldy $0102,x
    lda $0101,x
    ldx z
    bne pushya

;--------------------------------------------------------------
#if 0
name=PADAY
tags=inner,subroutine,nosymbol
stack=( -- )
subroutine to add a (paged) value to offset IP, result returned in AY

#endif
paday
    sec             ;[2]        ; A+1 = offset to be added to IP
    adc pip         ;[3]
    tay             ;[2]
    bcs paday01                 ;[2]
    cpy #$FF                    ;[2]
    bcc paday01                 ;[3]
    iny
paday01
    lda pip+1       ;[3]
    adc #0          ;[2]
    rts             ;[6]

;--------------------------------------------------------------
#if 0
name=TOPFAS
stack=( -- n )
tags=ext,subroutine,nosymbol
To the parameter field address!

Y = 0
A = first byte in parameter field

(to-p-f-a-s)
#endif
topfas
    inc pip
plusparms
    inc pip
    bne getparms
    inc pip+1
getparms
    ldy #0
    lda (pip),y
    rts

