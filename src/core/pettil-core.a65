; pettil-core.a65
;#echo .       pettil-core.a65
;#echo .       PETTIL - Personal Electronics Transactor
;#echo .                Threaded Interpretive Language
;#echo .
; PETTIL core dictionary

#include "setopts.i65"
#include "sweet16.i65"
#include "pettil.i65"

*=BASIC-2
    .word *+2                   ; PRG file load address `$0401`

;==============================================================
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;====                     BASIC bootstrap                  ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;--------------------------------------------------------------
#if 0
name=BASIC2PETTIL
tags=system,nosymbol
! BASIC bootstrap `$0401`

PETTIL loads as a BASIC program consisting of the line,

`10 SYS1037`

PETTIL is designed with the idea of having a clear separation between
`pettil-core` (which is this file) and any application code running
on top of core.

The bonus of doing this is to release about 10K of RAM when `pettil-studio`
and the symbol table are not resident.  PETTIL Studio behaves like any other
applications coded to run on top of `pettil-core`.
#endif
basic2pettil
    .word basend                ; BASIC line link
    .word 2001                  ; BASIC line number
    .byt $9E                    ; SYS token
#ifdef IS_PET
    .asc "1037",0               ; restart #1 (of 3) `cold` $040D
#endif
#ifdef IS_VIC20
    .asc "4621",0               ; `cold` at $120D
#endif
#ifdef IS_C64
    .asc "2061",0               ; `cold` at $080D
#endif
#ifdef IS_C128
    .asc "7181",0               ; `cold` at $1C0D
#endif
#ifdef IS_264
    .asc "4109",0               ; `cold` at $100D
#endif
basend
    .word 0

;--------------------------------------------------------------
#if 0
name=RESTART
stack=( -- )
tags=system,startup,default
Performs the `startup` action.  Usually results in a `warm` boot,
when reentering PETTIL from BASIC.

During startup, `restart` executes four times
1. when called from BASIC to `cold`
2. to start the upper dictionary
3. at the end of `cold`
4. finally, at the end of `mackinac` to get to the first `warm` boot

```
: restart   ( -- )
    startup @  execute ;
```
#endif
restart
    jmp (userstartup)
;====                                                      ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;==============================================================





;==============================================================
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;====                     Zero page buffer                 ====
;====                        Powers of 2                   ====
;||||                        `plugh`                       ||||
;||||                                                      ||||
;||||                                                      ||||
;--------------------------------------------------------------
#if 0
name=ZPBUF
tags=system,nosymbol,startup,self-modifying
!Zero page buffer and NEXT routine `$0410`

|ROM_PET_4|$00-$8C|
|ROM_PET_UPGRADE|$00-$8C|
|ROM_VIC20||
|ROM_C64|$02-$8C|

zero page swap region, first 141 bytes

`aloha` swaps this region with a little over half of zero page when
coming from or going back to BASIC

* Sweet16 stack pointer initialized to `$0100` here
* copy of NEXT routine is here
#endif
zpbuf
;$0000
    .word $0000,$1001,$2002,$3003   ; overlapping
    .word $4004,$5005,$6006,$7007   ; PETTIL registers
    .word $8008,$9009,$A00A,$B00B   ; and
    .word $0100,$D00D,$E00E,$F00F   ; Sweet16 registers ()
;$0020 ($0022 on C=64, et al)
    .dsb bos,$aa                ; low stack
;$0050
    .dsb bos,$bb                ; high stack
;$0080
    .word 0, 0, uarea           ; zi, zlim, up
;
;       NEXT
;               +IP
;               [IP] -> PC
;
; PETTIL's minimalist NEXT.
;
; PETTIL's NEXT routine puts responsibility for page alignment on the compiler,
; greatly improving execution speed vs. a more conventional indirect-threaded
; design.
;
;$0086
zpnext
    inc pip              ;[5]    ; (next)
    inc pip              ;[5]    ; (next1)
;ip = *+1
    jmp ($cafe)         ;[5]    ; (nexto)

                        ;[15]   ; clock cycles total!!!
;$008D TIME                     ; end of zero page buffer, Jiffy clock is here

#ifdef HAS_PORT0
    .word 0                     ; put back the two missing stack bytes here
                                ; to align Sweet16 properly
#endif

;--------------------------------------------------------------
; powers of 2 in a lookup table
power2
    .byt $80,$40,$20,$10,$08,$04,$02,$01

;--------------------------------------------------------------
#if 0
name=PLUGH
tags=nosymbol
An isolated RTS instruction, used only as a VICE xpet debugger breakpoint, set in the `pettil.dbg` config file. [[XYZZY]] is the high-level Forth variant of this.

```
Some examples of how this might look in your assembly code:

    .byt ld | N0
    .byt std | N2
    .byt ext                    ; invoking VICE debugger from Sweet16
    .word plugh
    .byt ld | N3
    .byt nxt

    jsr something
    jsr somethingelse
    sta anyplace
    jsr plugh                   ; invoking VICE debugger from 6502
    ldx anyplace
```
#endif
plugh
    rts

;====                                                      ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;==============================================================





;==============================================================
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;====                      SWEET16                         ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;==== ALL SWEET16 OPERATION HANDLERS MUST BE ON SAME PAGE! ====
;||||                                                      ||||
;||||                                                      ||||
; The reason for this is because SWEET16 dispatches each opcode
; by pushing two bytes to the return stack followed by RTS.  The
; high order byte is the page where most of SWEET16's code lives.
;||||                                                      ||||
; 0401 - 040F PET BASIC bootstrap
; 0410 - 04A5     zero page image
;||||                                                      ||||
; 1201 - 120F VIC20 BASIC bootstrap
; 1210 - 12A5
; Before this point there should be exactly 156($9C) bytes of code
; and data, beginning at $0401 (BASIC), with the last byte at $04A5.
; This is where `pettil-core` page-aligns Sweet-16.
; <$0401> | BASIC | $9C bytes of padding |
; <$04A6> | Sweet16 prequel |
; <$0500> | Sweet16 opcode handler page |
; <$0600> | Sweet16 sequel |
; <$0660> | User variables init/storage |
; check for build at proper point in memory

#if (* = SW16LOAD)
#echo Sweet16 is sweeeeeeetly located @ "SW16LOAD"!
#else
#echo PETTIL Build Error - Program counter is not at SW16LOAD
#echo You moved something, didn't you?  Sweet16 wants to load
#echo at "SW16LOAD".  This is a problem.  Lots of other things
#echo that need Sweet16 are broken too.  Please fix.
#echo .       program counter is now: *
#print *
#endif
;
;==== ALL SWEET16 OPERATION HANDLERS MUST BE ON SAME PAGE! ====
;==============================================================
#include "sweet16.a65"
;====                                                      ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;==============================================================





;==============================================================
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;====                     PETTIL core                      ====
;||||                                                      ||||
;||||                                                      ||||
;||||                                                      ||||
;--------------------------------------------------------------
#if 0
name=USERAREA
stack=
tags=system,uservar,nosymbol
!User Area
Initialization and storage area for User Variables

#endif
userarea
; ---- initialization values per each `cold`
user0base       .word 10
user0filename   .word currname+3 ;1 counted string, default "PETTILPACKETS"
user0sanum      .word 0         ;2 default secondary address is 0, (PRG file)
user0drvnum     .word 1         ;3 default drive (datasette #1),

; ---- UP points to here, all live user variables
uarea
; ---- not re-initialized or initialized another way
usersp0         .word bos+1     ; `abort` does `sp!`
userrp0         .word $01FE     ; `quit` does `rp!`
userirq         .word 0         ; see `=irq`
userbrk         .word SW16      ; see `=brk` `!sw16`
usernmi         .word 0         ; see `=nmi`
userstartup     .word fencepost ;`studio` begins here
userwarning     .word _doterr   ;1/ `studio` replaces `.err` with `error.msg`
userdp          .word fencepost
userfence       .word fencepost
usersymtab      .word 0

ucore
    .dsb uarea-userarea+80,$cc  ; storage for user variables

; ---- re-initialized by `cold`
userbase        = ucore+0
userfilename    = ucore+2
usersanum       = ucore+4
userdrvnum      = ucore+6

ustart = ucore+8
uservmbuf       = ustart+0      ;1 There is code that relies on adjacency of
usernumblk      = ustart+2      ;2 1 these sets of uservariables, so that bytes
userscr         = ustart+4      ;3 2 and clocks may be saved
userprev        = ustart+6      ;  3 most recently referenced block
userblk         = ustart+8      ;1 4
userin          = ustart+10     ;2                                        8-bit
userlin          = userin+1     ; upper byte is physical line counter
userspan        = ustart+12     ;3                                        8-bit
usereoi          = userspan+1   ; upper byte is end of input flag
usernumline     = ustart+14     ;4
usernumout      = ustart+16     ;5
userediting     = ustart+18     ;
userdpl         = ustart+20     ;                                         8-bit
userhld         = ustart+22     ;
usercursor      = ustart+24     ;                                       6 bytes

uendcore = ustart+30            ; mark our place for piggyback app's uservar base

;--------------------------------------------------------------
#if 0
name=ALIVE
stack=( -- )
tags=system,uservar,nosymbol,data
!User Area

00 = BASIC in the house
01 = PETTIL is alive

This one's like a meta-User variable, in that it has to function properly even when PETTIL is switched out (reasons: BASIC; TIM monitor; cassette I/O)

It's only one bit of one byte, which makes it a convenient thing to move around to word-align something like `userarea`

A byte used as a semaphore by `?aloha` to test/indicate whether BASIC (0) or PETTIL (1) occupies (a bit more than half of) zero page

#endif
alive
    .byt 0

;==============================================================
#if 0
name=COREBASE
tags=nosymbol
When changing these files, also modify `tools/xap.rb`

#endif
corebase
#include "core-locals.a65"
#include "core-user.a65"
#include "core-nucleus.a65"
#include "core-extra.a65"
#include "core-inner.a65"
#include "core-double.a65"
#include "core-vm.a65"
#include "core-io.a65"
;other source modules can be added to core
;#include "../studio/pettil-name.a65"
;#include "../studio/pettil-number.a65"

;lower location for `fencepost` for turnkey apps (without `cold`)
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;==============================================================
; If your app will never `restart` again, it would be okay to
; move FENCE to ` ' restart ` before invoking `restart`
; * No in and out of BASIC/TIM
; * tape I/O will still work
; * no restart with COLD
; * no editor (needs IRQ switching)
;==============================================================

;--------------------------------------------------------------
#if 0
name=?ALOHA
tags=subroutine,startup,nosymbol
Performs `aloha` only when `alive` is off

#endif
qaloha
    lsr alive
    inc alive
    bcs aloha4
    jsr setsw16
    ;fall through
;--------------------------------------------------------------
#if 0
name=ALOHA
stack=
tags=subroutine,startup,nosymbol
Flip back and forth between BASIC and PETTIL.

* Swap bottom half of zero page with zpbuf
** tape I/O
** return to BASIC
** floating point ROM

#endif
aloha
    stx z
#ifdef HAS_PORT0
    ldx #32+94+6+7              ; swap 139 bytes of z.p. with `zpbuf`
#else
    ldx #32+96+6+7              ; swap 141 bytes of z.p. with `zpbuf`
#endif
aloha3
    lda <(R0L-1),x
    ldy zpbuf-1,x
    sty <(R0L-1),x
    sta zpbuf-1,x
    dex
    bne aloha3
    ldx z
aloha4
    rts

;--------------------------------------------------------------
#if 0
name=FENCEPOST
stack=
tags=system,startup,nosymbol
This is where [[FENCE]] points, and also [[DP]] after initial
build of the symbol table.  First-run startup code beyond
this point (`fencepost` to `there`) may not have symbol table
entries pointing to it.

#endif
fencepost
