; pettil-user.a65
#echo .       pettil-user.a65           User variables for dev env

;--------------------------------------------------------------
#if 0
name=USER
stack=( n -- )
tags=fig,defining
A defining word used in the form:

`n USER cccc`

which creates a user variable cccc.
The parameter field of cccc contains n as a fixed offset relative to
the user pointer register UP for this user variable. When cccc is
later executed, it places the sum of its offset and the user area
base address on the stack as the storage address of that
particular variable.

#endif
#include "align.i65"
user
    jsr enter
#include "page.i65"
    .word _cconstant
#include "pass.i65"
    .word *+2
    jmp uservar

;--------------------------------------------------------------
#if 0
name=TDICT
tags=uservar
stack=( -- addr )
!!!User variable
base address of transient dictionary
#endif
tdict
    jsr uservar
    .byt usertdict-uarea

;--------------------------------------------------------------
#if 0
name=TDP
stack=( -- addr )
tags=uservar
!!!User variable
Transient Dictionary Pointer

#endif
tdp
    jsr uservar
    .byt usertdp-uarea

;--------------------------------------------------------------
#if 0
name=#VOC
stack=( -- addr )
tags=uservar,ext
!!!User variable
User variable containing the total number of vocabularies
defined on the system.  Defining a new vocabulary increases
this by 1

#endif
numvoc
    jsr uservar
    .byt usernumvoc-uarea

;--------------------------------------------------------------
#if 0
name=CSP
stack=( -- addr )
tags=uservar
!!!User variable
User variable used to store the current stack pointer, used by
the compiler to check for balance.

#endif
csp
    jsr uservar
    .byt usercsp-uarea

;--------------------------------------------------------------
#if 0
name=CURRENT
stack=( -- addr )
tags=vocabulary,uservar
!!!User variable
The vocabulary id of the compilation vocabulary, where new definitions
are added.  [[DEFINITIONS]] sets this to the first entry in [[VOCABS]]

#endif
current
    jsr uservar
    .byt usercurrent-uarea

;--------------------------------------------------------------
#if 0
name=REDEFINED
stack=( -- addr )
tags=uservar,ext,nosymbol
!!!User variable
Makes something like `: DUP DUP ;` possible.

contents:

* 0 means we are not in a colon definition and/or not redefining anything
* nonzero means the current : definition is a redefinition

#endif
redefined
    jsr uservar
    .byt userredefined-uarea

;--------------------------------------------------------------
#if 0
name=NEWEST
stack=( -- addr )
tags=uservar,ext,nosymbol
!!!User variable
User variable containing the address (NFA) of the most recently
created symbol.  Used by LATEST

#endif
newest
    jsr uservar
    .byt usernewest-uarea

;--------------------------------------------------------------
#if 0
name=STATE
stack=( -- addr )
tags=forth-83,uservar
!!!User variable
The address of the user variable containing the compilation
state.    A non-zero content indicates compilation is occuring,
but the value itself is system dependent.  A Standard Program
may not modify this variable.

#endif
state
    jsr uservar
    .byt userstate-uarea

;--------------------------------------------------------------
#if 0
name=PWRAP
stack=( -- addr )
tags=editor
Double variable, stores 25 bits of line wrap info for paste buffer

#endif
pwrap
    jsr uservar
    .byt userpwrap-uarea

;--------------------------------------------------------------
#if 0
name=PASTE
stack=( -- addr )
tags=editor
Paste buffer pointer, starts at [[PAD]]

#endif
paste
    jsr uservar
    .byt userpaste-uarea

;--------------------------------------------------------------
#if 0
name=VOCABS
stack=( -- addr )
tags=uservar,vocabulary,interpreter
Vocabulary stack establishes search order.  [[FORTH]] (vocid = 0) is
the last vocabulary searched, and is always present.  Executing a
vocabulary pushes it to the head of this stack.

This is a 10-byte area that determines vocabulary search order.
Vocabularies are searched from left to right, ending with CORE  ( =0 )

|0|Forth|
|1|Assembler|
|2|Editor|
|3...|user defined vocabularies|

```
vocabulary editor
forth assembler editor cr vocabs 10 dump
02 01 00 00 00 00 00 00
00 00  OK
```

First `editor`(2) will be searched, then `assembler`(1), lastly `core`(0)

When `vocabs[0]` is nonzero, WORDS will only display all non-CORE
words in the search order

#endif
#include "align.i65"
vocabs
    jsr uservar
    .byt uservocabs-uarea

;--------------------------------------------------------------
#if 0
name=SYMNEW
stack=( -- addr )
tags=uservar,ext
!!!User variable
Start of new (unhashed) symbols. These are [[searched|Search Order]]
first, regardless of length

#endif
symnew
    jsr uservar
    .byt usersymnew-uarea

;--------------------------------------------------------------
#if 0
name=SYMTAIL
stack=( -- addr )
tags=uservar
[heading]User variable[/heading]
Symbol table end address

Where new symbols are appended

#endif
symtail
    jsr uservar
    .byt usersymtail-uarea

;--------------------------------------------------------------
#if 0
name=BLOOM
stack=( -- addr )
tags=ext,nosymbol
The 64-bit Bloom filter used by the core dictionary.  The hash
is designed to exclude most names containing digits (numbers)

#endif
bloom
    jsr uservar
    .byt userbloom-uarea

;--------------------------------------------------------------
#if 0
name=PASSBITS
stack=( -- addr )
tags=interpreter,nfa,nosymbol
32-bit filter so we don't scan for sizes that aren't there (FORGET) pass 1

when i=1, cbit! happens
when i>1, cbit@ happens

pre-initialized data for program control at startup

#endif
passbits
    jsr uservar
    .byt userpassbits-uarea

#print (*-user)
