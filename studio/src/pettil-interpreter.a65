; pettil-interpreter.a65
#echo .       pettil-interpreter.a65    Outer Interpreter

;--------------------------------------------------------------
#if 0
name=~ Error messages
tags=general,nosymbol
PETTIL system messages, output by [[FAIL]]
#endif
errptr
    .word msg00,msg01,msg02,msg03,msg04,msg05,msg06,msg07
    .word msg08,msg09,msg10,msg11,msg12,msg13
msg00
    .byt msg01-*-1
    .asc CR,"WELCOME TO PETTIL"
#ifdef ROM_PET_4
    .asc " (4.0 ROM)"
#endif
#ifdef ROM_PET_UPGRADE
    .asc " (UPGRADE ROM)"
#endif
#ifdef ROM_PET_ORIGINAL
    .asc " (ORIGINAL ROM)"      -- good luck on this
#endif
#ifdef ROM_VIC20
    .asc " FOR VIC-20!"
#endif
#ifdef ROM_C64
    .asc " C=64!"
#endif
msg01
    .byt msg02-*-1
    .asc "STACK UNDERFLOW"
msg02
    .byt msg03-*-1
    .asc "STACK OVERFLOW"
msg03
    .byt msg04-*-1
    .asc "NOT FOUND"
msg04
    .byt msg05-*-1
    .asc "MISSING NAME"
msg05
    .byt msg06-*-1
    .asc "COMPILATION ONLY"
msg06
    .byt msg07-*-1
    .asc "UNPAIRED CONDITIONALS"
msg07
    .byt msg08-*-1
    .asc "CAN'T FORGET BELOW FENCE"
msg08
    .byt msg09-*-1
    .asc "BLOCK OUT OF RANGE"
msg09
    .byt msg10-*-1
    .asc "UNCLOSED QUOTES"
msg10
    .byt msg11-*-1
    .byt "CORRUPT VIRTUAL MEMORY"
msg11
    .byt msg12-*-1
    .byt "BAD ADDRESSING MODE"
msg12
    .byt msg13-*-1
    .byt "BAD VM PACKET"
msg13
    .byt msg14-*-1
    .byt RVSON,"STO","P"
msg14

;--------------------------------------------------------------
#if 0
name=ERROR.MSG
stack=( -- addr flag )
tags=interpreter,ext,nosymbol
Instead of RESTART performing an ABORT at the end to start the
QUIT-INTERPRET loop, it does a FENCE @ (FORGET) and sends us here.

If WARNING is non-zero, FAIL executes it, which also points here.
When WARNING is 0, FAIL will perform

WARNING @  ?: WARNING STARTUP  @ EXECUTE

* Prints an error message
* performs ABORT
```
```
#endif
#include "align.i65"
_errormsg
    jsr enter
#include "page.i65"
    .word twostar
#include "pass.i65"
    .word plit
    .word errptr
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word space
#include "page.i65"
    .word _stringdot
#include "page.i65"
    .word cr
#include "pass.i65"
    .word _abort

;--------------------------------------------------------------
#if 0
name=?CHAR
stack=( char -- addr )
tags=compiler,nosymbol
Scans ahead in the input stream until `char` is found.  Moves >IN beyond
that character.
#endif
#include "align.i65"
_qchar
    jsr enter
#include "page.i65"
    .word _name
#include "page.i65"
    .word in
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=-->
stack=( -- )
tags=interpreter
flags=immediate
An immediate word which loads the next screen of Forth source

!!! pronounced: "next-block"

```
: -->   ( -- )
    blk 1+!  >in off  source! ; immediate
```
: -->
    ?loading 0 in !
    b/scr blk @ over mod -
    blk +! ;
L18be .byt 3 | bit7 | bit6
 .byt "--",">"|bit7
 .word L1885
DASHDASHGT
 .word DOCOL
 .word QLOADING
 .word ZERO
 .word IN
 .word STORE
 .word BSCR
 .word BLK
 .word FETCH
 .word OVER
 .word MOD
 .word NEGATE
 .word BLK
 .word PSTORE
 .word SEMIS
#endif
#include "align.i65"
_nextblock
    jsr enter
#include "page.i65"
    .word blk
#include "page.i65"
    .word oneplusstore
#include "page.i65"
    .word backslash             ; span off
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=\
stack=( "text$ -- )
tags=primitive,extra
flags=immediate
After `\`,  `interpret` will ignore all text to the end of the current line, useful as a comment delimiter.

```
: \   ( -- )
   span off ; immediate
```
#endif
backslash
    lda #0
    sta userspan                ; ~wut? does not bother with high byte of SPAN
    jmp next

;--------------------------------------------------------------
#if 0
name=INTERPRET.CFA
stack=( cfa -1|+1 -- )
tags=secondary,interpreter,nosymbol

```
: interpret.cfa   ( cfa flag -- )
    compiling? <>
    ?: execute xt, ;
```
#endif
#include "align.i65"
_interpretcfa
    jsr enter
#include "page.i65"
    .word compilingq
#include "page.i65"
    .word ne
#include "pass.i65"
    .word pquerycolon
    .word execute
    .word _xtcomma
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=INTERPRET
stack=( -- )
tags=secondary,fig,forth-79,forth-83,interpreter
The Forth interpreter loop in PETTIL uses a lazy-loading approach.  Turning
`span` off triggers `name` to refill either the `tib` (from the keyboard) or
`sib` (when loading) buffer with the next line of input.  When `name` returns
`0`, `interpret` exits (to `quit` or `load`).

* at the end of a line in interactive mode
* at the end of a screen when loading

If `name` returns an `nfa`, then `found?` will search the dictionary or try
parse it as a `number` if it is not found. Depending on `compiling?` state,
`cfa`s and numbers are either compiled or executed.

|^condition|^exit|^mode|^buffer|h
|^blk = 0|^end of line|^interactive|^tib|
|^blk > 0|^end of screen|^loading|^sib|

```
: interpret   ( -- )
    begin
        ?stack
        bl name  ( nfa|0 )
        ?dup
    while
        dup found?
        ?dup ?: interpret.cfa number
    repeat ;
```
#endif
#include "align.i65"
_interpret
    jsr enter
#include "page.i65"
interpret01
    .word qstack
#include "page.i65"
    .word bl
#include "page.i65"
    .word _name                 ;( nfa | 0 )
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(interpret04-*+1)
#include "page.i65"             ;( nfa 0 ; not found )
    .word _foundq               ;( cfa -1 ; found, normal )
#include "page.i65"             ;( cfa 1 ; found, immediate )
    .word qdup
#include "pass.i65"
    .word pquerycolon
    .word _interpretcfa
    .word _number
#include "pass.i65"
    .word branch
    .byt <(interpret01-*+1)
#include "pass.i65"
interpret04
    .word exit

;--------------------------------------------------------------
#if 0
name=QUIT
stack=( -- )
tags=secondary,forth-79,forth-83,interpreter
`quit` will accept and `interpret` an infinite number of lines typed in from the keyboard in interactive mode.

This is the infinite outer interpreter loop.  PETTIL uses a lazy loading scheme such that when `interpret` finds it has nothing in the buffer (`span` is 0) it will reload the buffer.

```
: quit
    rp! blk 12 erase            \ erases line editing uservars
    begin                       \ `interpret` will get new line from keyboard
        interpret
        compiling? blk@ or 0=
         if  ." OK" then
    again ;
```
#endif
#include "align.i65"
_quit
    jsr enter
#include "page.i65"
    .word rpstore               ; reset return stack pointer
#include "page.i65"
    .word blk
#include "pass.i65"
    .word clit
    .byt 12                     ; `blk` `in` `span` `#out` `#line` `editing`
#include "page.i65"
    .word erase
#include "page.i65"
quit01                          ; BEGIN
    .word _interpret            ; outer interpreter main loop
#include "page.i65"
    .word compilingq
#include "page.i65"
    .word blkfetch
#include "page.i65"
    .word orx
#include "page.i65"
    .word zeq
#include "page.i65"
    .word qbranch               ; IF
    .byt <(quit01-*+1)
#include "pass.i65"
    .word _pdq                  ; both blk and state must be 0 to see this
    .byt (quit02-*-1)
    .asc    " OK"
quit02
#include "page.i65"
    .word cr                    ; this way for proper `#line` and `#out`
#include "pass.i65"             ; THEN AGAIN
    .word branch
    .byt <(quit01-*+1)
;#include "pass.i65"            ; you can check out any time you like
;    .word exit                 ; but you can never leave

;--------------------------------------------------------------
#if 0
name=ABORT
stack=( -- )
tags=secondary,fig,forth-79,forth-83,interpreter,startup
* Clear data stack
* Reset `current` and `vocabs` vocabulary to `forth`
* perform `quit`

`abort` sets up and starts `quit` to bgin an interactive session.

#endif
#include "align.i65"
_abort
    jsr enter
#include "page.i65"
    .word spstore               ; reset data stack
#include "page.i65"
    .word _forth                ; resset `vocabs` to core-only
#include "page.i65"
    .word definitions           ; set `core` as `current`
#include "pass.i65"
    .word _quit

;--------------------------------------------------------------
#if 0
name=LOAD
stack=( u -- )
tags=interpreter,forth-83
Redirect the input stream to screen `u` of Forth source and `interpret` it.

* 1 is the lowest block which may be loaded, as 0 is the keyboard
* `load` will not create empty blocks
* `u` must be presently available in `vmbuf`
* error conditions (`BLOCK OUT OF RANGE`)
** `u` < 1
** `u` >= `#blk`



 The contents of >IN and BLK , which locate the current input
 stream, are saved.  The input stream is then redirected to
 the beginning of screen u by setting >IN to zero and BLK to
 u.  The screen is then interpreted.  If interpretation from
 screen u is not terminated explicitly it will be terminated
 when the input stream is exhausted and then the contents of
 >IN and BLK will be restored.  An error condition exists if
 u is zero.  See  [[>IN]] [[BLK]] [[BLOCK]]



```
: load   ( scr -- )
    ?dup
    if
    dup #blk @ > ?exit
        blk 2@ ( >in @ ) 2>r
        blk !  source! interpret
        2r> ( >in ! ) blk 2!  source!
    then ;

: load   ( blk -- )
    0 #blk @ third between? 0= 8 ?error
    0 over < #blk @ third > or
  \ checks requested block within range 0 .. #blk or error message
  \ pushes >in and blk to return stack
  \ resets >in
  \ interpret
  \ restores blk and >in from return stack
  0 2dup  #blk @  between? 0=
  8 ?error
  blk 2@ ( >in @ )  2>r
  blk 2! ( >in off )
  interpret
  2r>  blk 2! ( >in ! ) ;


* check that `u` is in range of loaded blocks `0 < u < #blk`
* push `blk` `in` `span` to return stack
* interpret
* pop `blk` `in` `span` from  return stack

: load   ( u -- )
    0 #blk @ third between? 0= 8 ?error
    blk tuck 3@>r !+ 2off prev on
    interpret
    blk 3r>!
```
#endif
#include "align.i65"
_load
    jsr enter
#include "page.i65"
    .word zero
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word third
#include "page.i65"
    .word betweenq
#include "page.i65"
    .word zeq                   ; `blk` must be available in `vmbuf`
#include "pass.i65"
    .word qerror
    .byt 8                      ; "BLOCK OUT OF RANGE"
#include "page.i65"
    .word blk
#include "page.i65"
    .word tuck                  ;( blk u blk )
#include "page.i65"
    .word threefetchtor         ; stash `blk` `in` `span` on return stack
#include "page.i65"
    .word _storeplus            ; just like `blk !  in`
#include "page.i65"
    .word twooff                ; `in` and `span` both off
#include "page.i65"
    .word prev
#include "page.i65"
    .word on                    ; forces `block` to load buffer
#include "page.i65"
    .word _interpret            ; interpret has two clients, `load` and `quit`
#include "page.i65"
    .word blk
#include "page.i65"
    .word threerfromstore       ; restore prior `blk` `in` `span`
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=EXISTS?
stack=( -- addr flag )
tags=interpreter,ext,nosymbol
parses the next token in the input stream.  Returns either the
address of the (unfound) token at HERE and a 0, or the code
field address of the word and -1 for normal, +1 for immediate
words

```
: exists?
   bl word dup c@ ?: find 0 ;
```
#endif
#include "align.i65"
_existsq
    jsr enter
#include "page.i65"
    .word bl
#include "page.i65"
    .word _name            ; ~~2
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word pquerycolon
    .word _foundq
    .word zero
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name='
stack=( -- cfa )
tags=forth-83
Parse the next token in the input stream and search for it,
returning the CFA if successful.  Otherwise aborts with the
message "NOT FOUND"

```
: '   ( "name" -- cfa )
    exists? 0=  3 ?error ;
```
#endif
#include "align.i65"
_tick
    jsr enter
#include "page.i65"
    .word _existsq
#include "page.i65"
    .word zeq
#include "pass.i65"
    .word qerror
    .byt 3                      ; NOT FOUND
#include "pass.i65"
    .word exit

#print (*-errptr)
