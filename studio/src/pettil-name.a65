; pettil-name.a65
#echo .       pettil-name.a65           Text parser

;--------------------------------------------------------------
#if 0
name=SKIP
stack=( delim -- offset )
tags=nosymbol
`addr1` is the starting address in the input stream where up
to `size1` bytes are skipped *WHILE* they match `delim`.  Returns
`addr2` as the address of the first non-matching character and
`count2` as the remaining number of bytes in the buffer.
#endif
skip
    lda #$F0                    ; BEQ opcode
    .byt $2C                    ; BIT abs
    ;fall through
;--------------------------------------------------------------
#if 0
name=SCAN
stack=( delim -- offset )
tags=self-modifying,nosymbol
Pass through the input stream until `delim` either matches (or
for `skip`, does not match).  Leave the `offset` into the line
buffer on the stack.
#endif
scan
    lda #$D0                    ; BNE opcode
    sta skipscan03              ; #selfmodifying
    ldy userin                  ; `in`
    dey
skipscan01
    iny
    cpy userspan                ; Carry true at end of line
    bcc skipscan02
    lda #0                      ; oh, we done
    sta userspan                ; `span off`
    beq skipscan04
skipscan02
    lda (ACC+2*N6),y            ; get char from buffer
    eor tos                     ; compare to character we seek
skipscan03
    bvc skipscan01              ; dummy opcode, BEQ(skip) BNE(scan)
skipscan04
    sty userin                  ; found char !, move `in`
    tya
    jmp put0a                   ;( offset )

;--------------------------------------------------------------
#if 0
name=NFA!
stack=( addr size -- nfa )
tags=outer,extra,nosymbol
Replace the ` ` before a name in the buffer with its count byte; bump `in`

```
: nfa!   ( addr size -- nfa )
    over c!  in 1+! ;
```
#endif
#include "align.i65"
_nfastore
    jsr enter
#include "page.i65"
    .word over
#include "page.i65"
    .word cstore
#include "page.i65"
    .word in
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NAME
stack=( char -- nfa|0 )
tags=outer,extra
Parse the next `word` from the `input stream`.  Return `false` if the
`input stream` is exhausted, or the `nfa` of the found word, built
directly within the input stream.  Advance `in` past the parsed `word`.

Leading delimiters are ignored.   If the delimiter is not found the value of
IN is the size of the input stream.  If the delimiter is found IN is
 adjusted to indicate the offset to the character following
 the delimiter.  `span` is unmodified.

In PETTIL `name` replaces the function of Forth-83 //required// reserved
word `word`, which is //omitted//.

As much of the `ugly` as I could for the `blk` conspiracy goes in here.
Isolating conspiracy support in as few words as possible will hopefully
reduce overall system complexity and present clear transitions between the
phases of the outer interpreter.

```
: name   ( char -- nfa|0 )
     'stream
     dup skip dup>r 1- <n6 +
     swap scan r> - >n8 dup
     ?: nfa! nip ;
```
#endif
#include "align.i65"
_name
    jsr enter
#include "page.i65"
    .word _tickstream
#include "page.i65"
    .word dup
#include "page.i65"
    .word skip                  ; start of name
#include "page.i65"
    .word duptor
#include "page.i65"
    .word oneminus
#include "pass.i65"
    .word zpfrom
    .byt ACC+2*N6               ; buf
#include "page.i65"
    .word plus
#include "page.i65"
    .word swap
#include "page.i65"
    .word scan                  ; end of name (and/or buffer)
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word minus
#include "pass.i65"
    .word tozp
    .byt ACC+2*N8               ; name.len
#include "page.i65"
    .word dup
#include "pass.i65"
    .word pquerycolon
    .word _nfastore
    .word nip
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name='STREAM
stack=( -- )
tags=outer,extra,nosymbol
Sets up the input stream, refilling from the keyboard or `vmbuf` as needed.

```

: 'stream   ( -- )
    \ set n6 to point to linebuf tib or sib
    blk@ ?: sib tib >n6 drop
    span @  ?exit
    refill ;

: refill
    <n6 blk@ ?: linesize 80 expect ;

```
#endif
#include "align.i65"
_tickstream
    jsr enter
#include "page.i65"
    .word blkfetch
#include "pass.i65"
    .word pquerycolon
    .word sib
    .word tib
#include "pass.i65"
    .word clit
    .byt ACC+2*N6
#include "page.i65"
    .word store
#include "page.i65"
    .word span
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word _refill
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=CURSOR@
stack=( -- )
tags=primitive,extra,nosymbol
Fetch hardware cursor (to return stack)

#endif
cursorfetch
    lda PNT+1
    pha
    lda PNT
    pha
    lda PNTR
    pha
    lda LNMX
    pha
    lda TBLX
    pha
    lda DFLTN
    pha
    jmp next

;--------------------------------------------------------------
#if 0
name=CURSOR!
stack=( -- )
tags=primitive,extra
Set hardware cursor (from return stack)

This is a lighter version pending implementation of general cursor words: `:cursor` `<cursor` `=cursor` `>cursor`

#endif
cursorstore
    pla
    sta DFLTN
    pla
    sta TBLX
    pla
    sta LNMX
    pla
    sta PNTR
    pla
    sta PNT
    pla
    sta PNT+1
    jmp next

;--------------------------------------------------------------
#if 0
name=REFILL
stack=( -- )
tags=outer,extra
Sets up the input stream, refilling from the keyboard or `vmbuf` as needed.

* 'force refill' check first -- exit to outer caller ( of INTERPRET )
* 'end of line/buffer' check next
* 'processing' do nothing else, exit

* TIB Terminal Input Buffer
** aka 'user I/O from the PET keyboard'
* PETSCII screens
** extracted from virtual memory buffer as screen `packets`
** `interpret` processes one 40 or 80 byte `logical line` at a time
** line-wrap is treated as whitespace
* Forth blocks
** 16x64 ASCII blocks //(future support planned)//
* SEQ ASCII file //(future support planned)//
** continuous text stream from SEQ file //(future support planned)//

* 'force refill' check first -- exit to outer caller ( of INTERPRET )
* 'end of line/buffer' check next
* 'processing' do nothing else, exit

* `TRUE` refilled
* `FALSE` did not refill

* set things up BLK IN SPAN (n5 n6 n7)
* blk=0 ? TIB : TIB+80 (n4)

This word relies on user variables `blk` `in` and `span` being adjacent and
in the right order in the userarea block ~#userorder



```
$C4 PNT 16-bit address of current line
$C6 PNTR position of cursor along line
$D4 DFLTN current device# (set to 3)
$D5 LNMX length of current line

    lin dup 1+! @
    25 <
    if
        lin @                   ( lin )
        dup >bit blkbuf + cbit@ ( lin flag )
        swap 24 = or            ( flag )
        if
            forty
        else
            lin 1+! eighty
        then                    ( 40|80 )
        dup    LNMX c!
        3      DFLTN c!
        @lin @ PNT dup dup>r 3c@ >r >r !
        0      PNTR c!          ( 40|80 )
        cas2buf over 2dup expect -trailing
        r> r> r> 3c!            ( restore screen cursor )
        @lin +!
        span @  #lin !
    then ;

FFCF  4C 15 F2    JMP $F215     ; CHRIN

;input a byte
F215  A5 AF       LDA $AF       ; input device (default = #0, keyboard)
F217  D0 0B       BNE $F224
                                ; it is keyboard #0.
F219  A5 C6       LDA $C6       ; position of cursor along line
F21B  85 A4       STA $A4       ; cursor column
F21D  A5 D8       LDA $D8       ; screen line of cursor
F21F  85 A3       STA $A3       ; cursor row
F221  4C 16 E1    JMP $E116

F224  C9 03       CMP #$03      ; is it the screen, perhaps?
F226  D0 09       BNE $F231
                                ; it is screen #3.
;get from the screen
F228  85 AC       STA $AC       ; copy of device #3
F22A  A5 D5       LDA $D5       ; length of current line (39 or 79)
F22C  85 A1       STA $A1       ; count of chars of line input from screen
F22E  4C 16 E1    JMP $E116

F231  B0 29       BCS $F25C     ; is device > #3?
                                ; it is tape #1 or #2.
;get from cassette #1 or cassette #2
F233  86 AD       STX $AD       ; stash the X-register before tape i/o
F235  20 49 F2    JSR $F249     ; advance tape buffer pointer
F238  48          PHA           ; this is it! this is the input byte!
F239  20 49 F2    JSR $F249     ; advance tape buffer pointer
F23C  D0 05       BNE $F243
F23E  A9 40       LDA #$40
F240  20 C4 FB    JSR $FBC4     ; flag contents of A into ST byte

F243  D6 BA       DEC $BA,X
F245  A6 AD       LDX $AD       ; restore X register
F247  68          PLA           ; pop the input byte
F248  60          RTS

F249  20 4B F8    JSR $F84B
F24C  D0 0B       BNE $F259
F24E  20 9A F8    JSR $F89A
F251  A6 D4       LDX $D4
F253  A9 00       LDA #$00
F255  95 BA       STA $BA,X
F257  F0 F0       BEQ $F249
F259  B1 D6       LDA ($D6),Y
F25B  60          RTS
;get from an IEEE device
F25C  A5 96       LDA $96 ...

;chrin from screen device #3
E116  98          TYA
E117  48          PHA
E118  8A          TXA
E119  48          PHA
E11A  A5 AC       LDA $AC       ; input from screen (#3) or from keyboard (#0) flag
E11C  F0 A1       BEQ $E0BF     ; is it the keyboard?
                                ; it is screen #3.
E11E  A4 C6       LDY $C6       ; position of cursor along line
E120  B1 C4       LDA ($C4),Y   ; pointer to screen RAM position of start of current line
E122  85 D9       STA $D9       ; last key input
E124  29 3F       AND #$3F
E126  06 D9       ASL $D9       ; C = set if RVS char
E128  24 D9       BIT $D9
E12A  10 02       BPL $E12E     ; N = set if shifted char
E12C  09 80       ORA #$80

E12E  90 04       BCC $E134
E130  A6 CD       LDX $CD       ; Quote flag: 0 = direct cursor, else control chars printed
E132  D0 04       BNE $E138     ; quote mode

E134  70 02       BVS $E138
E136  09 40       ORA #$40

E138  E6 C6       INC $C6       ; scoot the cursor along to the right
E13A  20 67 E1    JSR $E167     ; check for quote toggle
E13D  C4 A1       CPY $A1       ; count of chars of line input from screen
E13F  D0 17       BNE $E158     ; we are done, unless 39th/79th char reached

E141  A9 00       LDA #$00
E143  85 AC       STA $AC       ; input from screen (#3) or from keyboard (#0) flag
E145  A9 0D       LDA #$0D
E147  A6 AF       LDX $AF       ; Input device (default = #0, keyboard)
E149  E0 03       CPX #$03      ; is it the screen?
E14B  F0 06       BEQ $E153
E14D  A6 B0       LDX $B0       ; Output device (default = #3, screen)
E14F  E0 03       CPX #$03
E151  F0 03       BEQ $E156

E153  20 02 E2    JSR $E202     ; output a character to the screen

E156  A9 0D       LDA #$0D

E158  85 D9       STA $D9       ; last key input
E15A  68          PLA
E15B  AA          TAX
E15C  68          PLA
E15D  A8          TAY
E15E  A5 D9       LDA $D9       ; last key input
E160  C9 DE       CMP #$DE      ; ~what? translate `pi` char to $FF diagonal quarterblock char
E162  D0 02       BNE $E166
E164  A9 FF       LDA #$FF
E166  60          RTS

E167  C9 22       CMP #$22      ; is it a quote?
E169  D0 08       BNE $E173     ; nope? bye
E16B  A5 CD       LDA $CD       ; quote flag: 0 = not in quotes
E16D  49 01       EOR #$01      ; toggle quote flag
E16F  85 CD       STA $CD
E171  A9 22       LDA #$22
E173  60          RTS

: refill   ( -- )
    <n6 blk@ ?: linesize 80 expect ;

    ?refill 'stream drop >n6 drop
     dup skip dup>r 1- <n6 +
     swap scan r> - >n8 dup
     if
        over c! in 1+!
        dup                     \ something for nip
     then nip ;

: refill   ( -- )
    blk@  if cursor@ then       \ possibly load stack with h/w cursor (5 cells)
    <n6                         ( tib )          \ keyboard mode
                                ( cursor sib )   \ ...or when loading
    begin
        line.size               ( buf siz )
        ?dup
    until
    expect                      ( -- | -- cursor )
    blk@  if cursor! then  ;

: refill
    blk@ if
        cursor@ <n6 line.size
        expect
        cursor!
    else
        <n6 80
        expect
    then ;

: line.setup
    blk@ if
        cursor@
        sib
        3
          blk@ block lin 40* +
          0 0 0 0 cursor!
    else
        tib eighty
    then ;


: refill   ( -- )
    line.setup                  ( ?cursor buf size )
    expect                      ( ?cursor )
    blk@ if cursor! then ;      ( -- )


```
#endif
#include "align.i65"
_refill
    jsr enter
#include "pass.i65"
    .word zpfrom
    .byt ACC+2*N6               ; tib or sib
#include "page.i65"
    .word blkfetch
#include "pass.i65"
    .word pquerycolon
    .word cursorfetch
    .word next
#include "page.i65"
refill02
    .word blkfetch
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word pquerycolon
    .word _linesize
    .word eighty
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(refill02-*+1)
#include "page.i65"
    .word expect
#include "page.i65"
    .word blkfetch
#include "pass.i65"
    .word pquerycolon
    .word cursorstore
    .word next
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=>LINE
stack=( -- addr size )
tags=outer,extra
Return `addr` and `size` of line# `lin`

```
: >line    ( -- addr size )
    blk@ block lin 40* +
    lin bufwrap >bit cbit@
    ?: forty eighty
    -trailing nip ;

ptickstream
    lda #3
    sta DFLTN                   ; $AF Default Input Device
    lda tos
    sta userspan
    sta LNMX                    ; $D5 logical line length (39 or 79)
    lda userin
    sta PNTR                    ; $C6 cursor column on current line
    lda userlin
    sta TBLX                    ; $D8 cursor physical line number
    cmp #LPERSCR
    bit LNMX
    inc userlin
    bvc ptickstream01
    inc userlin
ptickstream01
    bcc ptickstream02
    jsr plugh
    inx
    inx
    jmp putnotc
ptickstream02
    jmp next

: line.size   ( u -- 40|80 )
    block lin 40* +
    lin buf.wrap >bit cbit@
    in 1+ over ?: 1+! 2+!
    ?: 40 80
    -trailing ('stream) ;
```
#endif
#include "align.i65"
_toline
    jsr enter
#include "page.i65"
    .word blkfetch
#include "page.i65"
    .word _block
#include "page.i65"
    .word lin
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word plus                  ;( line.addr )
#include "page.i65"
    .word lin
#include "page.i65"
    .word _bufwrap
#include "page.i65"
    .word tobit
#include "page.i65"
    .word cbitfetch             ;( addr wrapbit )
#include "page.i65"
    .word in
#include "page.i65"
    .word oneplus               ; 'lin is high byte of `in`
#include "page.i65"
    .word over
#include "pass.i65"
    .word pquerycolon           ; `lin` points to next line
    .word oneplusstore          ; 40 column
    .word twoplusstore          ; 80 column
#include "pass.i65"
    .word pquerycolon
    .word forty
    .word eighty
#include "page.i65"
    .word dashtrailing
#include "page.i65"
    .word nip                   ; ( addr size )
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=LINESIZE
stack=( -- size )
tags=outer,extra
Return `size` of either a line input from the keyboard
or when loading, set hardware cursor to line# `lin` of `blk`
advances `lin`

```
: linesize
    blk@
    if
        >line
    else
    then
        block  lin 40*  +
    dup 'PNT !
    lin bufwrap >bit cbit@
    ?: forty eighty
    -trailing nip ;

ptickstream
    lda #3
    sta DFLTN                   ; $AF Default Input Device
    lda tos
    sta userspan
    sta LNMX                    ; $D5 logical line length (39 or 79)
    lda userin
    sta PNTR                    ; $C6 cursor column on current line
    lda userlin
    sta TBLX                    ; $D8 cursor physical line number
    cmp #LPERSCR
    bit LNMX
    inc userlin
    bvc ptickstream01
    inc userlin
ptickstream01
    bcc ptickstream02
    jsr plugh
    inx
    inx
    jmp putnotc
ptickstream02
    jmp next

: line.size   ( u -- 40|80 )
    block lin 40* +
    lin buf.wrap >bit cbit@
    in 1+ over ?: 1+! 2+!
    ?: 40 80
    -trailing ('stream) ;
```
#endif
#include "align.i65"
_linesize
    jsr enter
#include "page.i65"
    .word _block
#include "page.i65"
    .word lin
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word plus                  ;( addr )
#include "page.i65"
    .word lin
#include "page.i65"
    .word _bufwrap
#include "page.i65"
    .word tobit
#include "page.i65"
    .word cbitfetch             ;( addr wrapbit )
#include "page.i65"
    .word in
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word over
#include "page.i65"
    .word pquerycolon
    .word oneplusstore
    .word twoplusstore

#include "pass.i65"
    .word pquerycolon
    .word forty
    .word eighty
#include "page.i65"
    .word dashtrailing
#include "page.i65"
    .word ptickstream
#include "pass.i65"
    .word exit

ptickstream
    lda #3
    sta DFLTN                   ; $AF Default Input Device

    lda stackl,x
    sta PNT
    lda stackh,x
    sta PNT+1

    lda tos
    sta userspan
    sta LNMX                    ; $D5 logical line length (39 or 79)
    lda userin
    sta PNTR                    ; $C6 cursor column on current line
    lda userlin
    sta TBLX                    ; $D8 cursor physical line number
    jmp nip


#print (*-skip)
