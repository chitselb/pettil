; pettil-cold.a65
#echo .       pettil-cold.a65
#echo .       PETTIL cold start throwaway code to relocate tdict, display animated banner, DEADBEEF, etc...

* = fencepost

;--------------------------------------------------------------
#if 0
name=COLD
tags=system,startup,throwaway,nosymbol
A primitive relocator to move already-linked code to upper memory
Gets us from `pettil-core` to module LAUNCH

* CMOVE transient dictionary to upper memory
* EXECUTE first word in transient dictionary

Setting the `size` of the transient dictionary to 0 will prevent
moving anything; control still transfers to `loadaddr+2`.

*    ?aloha
*    sp!
*    =irq
*    !sw16
*    barf
*    there @+ tuck over @ 2+ cmove 2+ startup !
*    cold variables, cmove erase
*    restart

```
code cold   ( -- )
    ' ?aloha jsr,
    >forth,
    sp! 'there @+ tuck over @ 2+ cmove 2+ startup !
    (lits) 5 'ustart 'uendcore 'ustart - 'userarea 'ucore 'uarea 'userarea -
    cmove erase restart \ ;
```
#endif
cold
    jsr qaloha
#include "align.i65"
    jsr toforth                 ; transition from 6502 Assembly to Forth
#include "page.i65"
    .word spstore
#include "page.i65"
    .word _barf                 ; fill the screen with '/' graphic
#include "page.i65"
    .word call
#include "page.i65"
    .word setsw16               ; so we may use BRK to access Sweet16
#include "pass.i65"
    .word dlit
    .word userirq
    .word there+(splashirq-_studio+4)  ; `splashirq` low, before moving tdict
#include "page.i65"
    .word store
#include "page.i65"
    .word call
#include "page.i65"
    .word swapirq               ; use `splashirq` entertainment
#include "pass.i65"
    .word plit
    .word there
#include "page.i65"
    .word fetchplus             ; link to upper dictionary
#include "page.i65"
    .word tuck
#include "page.i65"
    .word over
#include "page.i65"
    .word fetch
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word cmove                 ; but first, make an upper dictionary
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word startup
#include "page.i65"
    .word store                 ; `studio` -> `startup` for 2nd `restart`
#include "pass.i65"
    .word plits
    .byt 5
    .word ustart                ; erase
    .word uendcore-ustart
    .word userarea              ; cmove
    .word ucore
    .word uarea-userarea
#include "page.i65"
    .word cmove
#include "page.i65"
    .word erase
#include "pass.i65"
    .word restart               ; restart #2 (of 3) --> `studio`

;--------------------------------------------------------------
#if 0
name=BARF
stack=( -- )
tags=system,startup,nosymbol
fill the screen with a rapidly changing diagonal maze effect

#endif
_barf
    jsr enter
#include "page.i65"
    .word call
#include "page.i65"
    .word CLRSCR
#ifdef IS_VIC20
#include "pass.i65"
    .word plits
    .byt 6
    .word $9400                 ;color memory
    .word BPERSCR
    .word 5
    .word 255
    .word 36879
    .word 156                   ;purple
#include "page.i65"
    .word emit
#include "page.i65"
    .word cstore
#include "page.i65"
    .word fill
#endif
#include "page.i65"
    .word vidram
#include "page.i65"
    .word bperscr
#include "pass.i65"
    .word clit
    .byt (BACKDIAG & $7F)
#include "page.i65"
    .word fill
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=FLIPPER
stack=( -- false )
tags=system,startup,nosymbol

```
: flipper  2-
    9 40* vidram dup +under
    do
        i c@ c>s 0<
        if $66 i c! then
    loop ;
```
#endif
#include "align.i65"
_flipper
    jsr enter
#include "page.i65"
    .word vidram
#include "pass.i65"
    .word plit
#ifdef IS_VIC20
    .word 9*22
#else
    .word 9*40
#endif
#include "page.i65"
    .word plus
#include "page.i65"
    .word vidram
#include "pass.i65"
    .word pdo
    .byt <(flipper03-*+1)
#include "page.i65"
flipper01
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word ctos
#include "page.i65"
    .word zlt
#include "pass.i65"
    .word qbranch
    .byt <(flipper04-*+1)
#include "pass.i65"
    .word clit
    .byt WEDGESE | $80
#include "page.i65"
    .word over
#include "page.i65"
    .word eq
#include "pass.i65"
    .word clit
    .byt $E1
#include "page.i65"
    .word third
#include "page.i65"
    .word eq
#include "page.i65"
    .word orx
#include "pass.i65"
    .word clit
    .byt $A0
#include "page.i65"
    .word swap
#include "pass.i65"
    .word pquerycolon
    .word drop
    .word nip
#include "page.i65"
flipper04
    .word i
#include "page.i65"
    .word cstore
#include "pass.i65"
flipper02
    .word ploop
    .byt <(flipper01-*+1)
#include "pass.i65"
flipper03
    .word exit


pettillogo
    .word pl0,pl1,pl2,pl3,pl4,pl5,pl6,pl7,pl8

;"setup screen"
#include "align.i65"
pl0
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl0x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,DELETE,CRSRDOWN
    .asc DELETE,CRSRRIGHT,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
pl0x
    .word _pdq
    .byt (pl0y-*-1)
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE,DELETE
    .asc DELETE
pl0y
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,"SORTING SYMBOLS... 30 SECONDS"
pl0x
#endif
#include "pass.i65"
    .word exit

;"P"
#include "align.i65"
pl1
    jsr enter
;1000  6b 73 71 72                                          ksqr
#include "pass.i65"
    .word _pdq
    .byt (pl1x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DIAG
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF,WEDGESE
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRDOWN,CRSRLEFT
    .asc RVSON,$F3,CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
#else
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,RVSON,$CE,RVSOFF,$E9,RVSON
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$CE,$CE
    .asc    CRSRUP,CRSRLEFT,CRSRLEFT,$E9,$F2,$CE,$CE,$CE,$DF
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,$EB,$CE
    .asc    CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,$CE,$CE,$CE,RVSOFF,$E9
#endif
pl1x
#include "pass.i65"
    .word exit


;"E"
#include "align.i65"
pl2
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl2x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,$EB,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$F3,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$F1,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $F3,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON
#endif
pl2x
#include "pass.i65"
    .word exit

;"T"1
#include "align.i65"
pl3
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl3x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,$F2,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$F1,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,RVSON,$E9,$F2,$CE,$CE,$CE,$CE,CRSRLEFT
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
#endif
pl3x
#include "pass.i65"
    .word exit

;"personal electronic transactor"
#include "align.i65"
pl4
    jsr enter
#include "page.i65"
    .word _flipper
#include "pass.i65"
    .word _pdq
    .byt (pl4x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,RVSON,"PERSONAL ELECTRONIC",CR
    .asc CRSRRIGHT,RVSON,"TRANSACTOR",CR
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,RVSOFF,$D6,RVSON,CR,CR,CR,CR,CR,CR,CR
    .asc "     PERSONAL ELECTRONIC TRANSACTOR",CR
#endif
pl4x
#include "pass.i65"
    .word exit

;"T"2
#include "align.i65"
pl5
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl5x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,$F3,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSOFF,WEDGESE
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT,CRSRRIGHT
#else
    .asc "     THREADED INTERPRETIVE LANGUAGE",CR
#endif
pl5x
#include "pass.i65"
    .word exit

;"I"
#include "align.i65"
pl6
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl6x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,$A1,RVSOFF,$A1
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,$EB,RVSOFF
    .asc CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRUP,CRSRRIGHT
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,$CE,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,RVSOFF,$E9,RVSON
#endif
pl6x
#include "pass.i65"
    .word exit

;"L"
#include "align.i65"
pl7
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl7x-*-1)
#ifdef IS_VIC20
    .asc RVSON,WEDGESE,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,$EB,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DELETE,DIAG,CRSRLEFT,INSERT,DIAG,RVSOFF
    .asc CRSRDOWN,CRSRLEFT,CRSRLEFT
    .asc RVSON,DIAG,CRSRRIGHT,DELETE,RVSOFF,WEDGESE
    .asc RVSON,CRSRLEFT,INSERT,DIAG,RVSOFF
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$F1,RVSOFF,$E9,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc RVSOFF,$AA,RVSON,$CE,RVSOFF,$B4,RVSON,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $E9,$CE,$CE,$CE,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F1,$CE,$CE,RVSOFF,$E9,RVSON
#endif
pl7x
#include "pass.i65"
    .word exit


;"threaded interpretive language"
#include "align.i65"
pl8
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl8x-*-1)
#ifdef IS_VIC20
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON," THREADED",CR
    .asc RVSON,"INTERPRETIVE LANGUAGE",CR
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT,CRSRRIGHT
    .asc RVSON,$E9,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$F3,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $EB,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$F2,$CE,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRDOWN
    .asc $CE,$CE,$CE,$CE,$CE,RVSOFF,$E9
#endif
pl8x
#include "pass.i65"
    .word exit

#include "align.i65"
pl9
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl9x-*-1)
#ifdef IS_VIC20
    .asc HOME,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR,CR
    .asc "GITHUB:CHITSELB/PETTIL"
    .asc CRSRRIGHT,RVSON,"FORTH FOR THE VIC-20",CR
pl9x
#include "page.i65"
    .word _flipper
#else
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRRIGHT,RVSON,"FORTH FOR THE COMMODORE PET",CR
pl9x
#endif
#include "pass.i65"
    .word exit

#include "align.i65"
pl11
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (pl11x-*-1)
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN
;p
    .asc $CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,SPACE,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;e
    .asc $CD,SPACE,SPACE,SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT,SPACE,SPACE,SPACE,SPACE,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;t
    .asc CRSRRIGHT,CRSRRIGHT,$CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;t
    .asc CRSRRIGHT,CRSRRIGHT,$CD,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
;i
    .asc $CD,SPACE,SPACE,SPACE,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,SPACE
    .asc CRSRUP,CRSRLEFT,SPACE,SPACE,CRSRUP,CRSRLEFT,SPACE,CRSRUP,CRSRLEFT,$CD
;l
    .asc CRSRRIGHT,CRSRRIGHT,$CD,CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRLEFT,SPACE
    .asc CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRLEFT,SPACE,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRLEFT,CRSRLEFT,CRSRLEFT,$CD,SPACE,SPACE,SPACE,SPACE,SPACE
pl11x
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=NEXTACTION
stack=( -- )
tags=system,startup,nosymbol


```
: nextaction   ( -- )
    'actioncfa dup>r @ @+ execute r> ! ;
```
#endif
#include "align.i65"
_nextaction
    jsr enter
#include "pass.i65"
    .word plit
    .word actioncfa
#include "page.i65"
    .word duptor
#include "page.i65"
    .word fetch
#include "page.i65"
    .word fetchplus
#include "page.i65"
    .word execute
#include "page.i65"
    .word rfrom
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?LETTER
stack=( -- )
tags=system,startup,throwaway,nosymbol
Synchronize `actionidx` with `actionnow`



```
| zp | stack | system | core | available RAM | vmbuf | blkbuf | symtab | tdict |

: ?letter   ( -- )
    begin
        'actionidx @ csplit =
    ?exit
        nextaction 'actionnow 1+!
    again
```
#endif
#include "align.i65"
_qletter
    jsr enter
#include "pass.i65"
qletter01
    .word plit
    .word actionidx
;   .byt 0
;actionnow
;   .byt 0
#include "page.i65"
    .word fetch
#include "page.i65"
    .word csplit
#include "page.i65"
    .word eq
#include "page.i65"
    .word _qexit
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word _nextaction           ; ( -- false )
#include "pass.i65"
    .word plit
    .word actionnow
#include "page.i65"
    .word oneplusstore
#include "pass.i65"
    .word branch
    .byt <(qletter01-*+1)

;--------------------------------------------------------------
#if 0
name=BANNER
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
#include "align.i65"
_banner
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt (setupmsg01-*-1)
    .asc    HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc    "    ",RVSON,"FORTH FOR THE COMMODORE PET 2001",CR,CR,CR
    .asc    "       ",RVSON,"GITHUB.COM/CHITSELB/PETTIL",CR,CR
setupmsg01
#include "pass.i65"
    .word _pdq
    .byt (bannermsg01-*-1)      ; length of bannermsg
    .asc    "VERSION: 2018-12-13",CR
    .asc    "1928 JACK TRAMIEL'S BIRTHDAY",CR
            ;123456789.123456789.123456789.123456789.
bannermsg01
#include "pass.i65"
    .word exit

there
























































































;hitop=VIDRAM-$1B00   ; BLKBUF 5200
;hitop=VIDRAM-$1D00   ; BLKBUF 5000
;hitop=VIDRAM-$2300   ; BLKBUF 4A00, coexist with SUPERMON 7A33
;hitop=VIDRAM-$2300              ; <--- ~#resizetdict here, also lower down

    .word hitop-2               ; load address
    .word tdictend-_studio      ; size of the transient dictionary in bytes
    * = hitop
#echo Transient Dictionary
#print *

;--------------------------------------------------------------
#if 0
name=STUDIO
stack=( -- )
tags=system,startup,throwaway,nosymbol
One time startup code

* start `splash` entertainment
* cmove `symtab`
* `symdex`
* `deadbeef`
* `warm`

```
<0400> core
<1B68> fence
{ disappearing startup code }
<1F6F> there
hitop-2
tdict.size
{ disappearing tdict startup code }
{ deadbeef }
<56FE> vmbuf

<00> zeropage
<01> stack
<0200> buffers
<0400> core
<1A24> here
{ disappearing banner startup code }
{ deadbeef }
<56FE> vmbuf
<5700> blkbuf
<5B00> symtab
<6900> { disappearing startup code & deadbeef }
<6A00> tdict (studio code)
<7E84> tdp
<8000> VIDRAM

: studio
    ['] there+2 @+ + 32 - symtab !
    chilly cmove
    ." banner message"
    cold

: studio   ( -- )



```
#endif
#include "align.i65"
_studio
    jsr enter
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word yeahboy
;#include "pass.i65"
;    .word plits
;    .byt 3
;    .word user0tdict           ; cmove
;    .word usertdict
;    .word utdict-user0tdict
;#include "page.i65"
;    .word cmove                ; reset `tdict` `tdp` `#voc`
#include "page.i65"
    .word _qletter              ; all caught up on big letters
#include "pass.i65"
    .word dlit
    .word there+2
    .word EAL
#include "page.i65"
    .word fetchplus
#include "page.i65"
    .word plus
#include "page.i65"
    .word twoplus               ; start of symbols
#include "page.i65"
    .word swap
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word minus
#include "page.i65"
    .word _calcmem
#include "page.i65"
    .word cmovegt
#include "page.i65"
    .word bl
#include "page.i65"
    .word minus
#include "page.i65"
    .word symtab                ; points to unindexed symbol list
#include "page.i65"
    .word store
#include "pass.i65"
    .word plits
    .byt 7
    .word _warm                 ; !
    .word userstartup
    .word _mackinac
    .word userwarning
    .word user0tdict            ; cmove
    .word usertdict
    .word utdict-user0tdict
#include "page.i65"
    .word cmove                 ; reset `tdict` `tdp` `#voc`
#include "page.i65"
    .word store                 ; set `warning` to `mackinac`
#include "page.i65"
    .word store                 ; set `startup` to `warm`
#include "page.i65"
    .word _symdex
#include "page.i65"
    .word _emptybuffers
#include "pass.i65"
    .word restart               ; and bounce it (#3) (fake)`warm`

#include "pass.i65"
    .word plits
    .byt 3
    .word splashirq
#ifdef IS_VIC20
    .word VIDRAM+11*22
    .word 12*22
#else
    .word VIDRAM+11*40
    .word 14*40
#endif
#include "page.i65"
    .word blank

yeahboy
    jmp next

;--------------------------------------------------------------
#if 0
name=SPLASHIRQ
stack=( -- )
tags=system,startup,nosymbol
splash screen irq handler
choose a random location
check character on either page
    4D?  replace it with 4E
    4E?  replace it with 4D
    else? leave it alone

#endif
splashirq
    jsr splash
    jsr countactions
    jmp MAINIRQ

;--------------------------------------------------------------
#if 0
name=COUNTACTIONS
stack=( -- )
tags=system,subroutine,startup,nosymbol
Subroutine, bump the action number during startup

0 nothing happened yet
1 "P"
2 "E"
3 "T"
4 "*"
5 "T"
6 "I"
7 "L"
etc...

#endif
countactions
    dec actiondelay
    bne countactions09
    inc actionidx
    lda #33
    sta actiondelay
countactions09
    rts

;--------------------------------------------------------------
#if 0
name=SPLASH
stack=( -- )
tags=system,subroutine,startup,nosymbol
Subroutine, randomly dither diagonal lines on the screen

#endif
splash
    lda #8
    sta splashes
splash01
    jsr randu
    tax
    lda #>((VIDRAM + BPERSCR + $0100) & $0F00)  ; VIC-20 = 2; PET,C=64,Plus/4 = 4; PET80 = 8; how many pages/screen?
    sta splashpage
    lda #>VIDRAM
    sta splash02+2
    sta splash03+2
splash02
    lda VIDRAM,x
    jsr splish
splash03
    sta VIDRAM,x
    inc splash02+2
    inc splash03+2
    dec splashpage
    bne splash02
    dec splashes
    bne splash01
    rts

splish
    tay
    eor #$4C                    ; swap \ <--> / else leave it alone
    and #$7C
    php
    tya
    plp
    bne splish01
    eor #3
splish01
    rts

actiondelay
    .byt 15

actionidx
    .byt 0

actionnow
    .byt 0

actioncfa
    .word pettillogo

splashpage
    .byt 0

splashes
    .byt 0

;--------------------------------------------------------------
#if 0
name=CALCMEM
stack=( size -- size addr )
tags=system,startup,throwaway,nosymbol
Calculate `symtab` memory requirements, given a size



```
| zp | stack | system | core | available RAM | vmbuf | blkbuf | symtab | tdict |
```
#endif
#include "align.i65"
_calcmem
    jsr enter
#include "page.i65"
    .word xyzzy
#include "page.i65"
    .word tdict
#include "page.i65"
    .word fetch
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "pass.i65"
    .word plit
    .word $FF00
#include "page.i65"
    .word andx
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SYMDEX
stack=( -- )
tags=system,startup,nosymbol
Build thread index for `symtab`

```
: symdex   ( -- )
    ;
```
#endif
#include "align.i65"
_symdex
    jsr enter
#include "page.i65"
    .word xyzzy
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=MACKINAC
stack=( -- )
tags=system,startup,nosymbol
Part of cold start, connect lower `core` and upper `tdict` dictionaries

6976
5C20
d56

41CF
347A
d55

gross trick: the error path out of `warm` gets us here.  Once here,
fix the error handler (`warning`) and `warm` now kicks out to `abort`


: mackinac
    (automem)
    ( lowmem symtab symtab.size ) cmove


#endif
#include "align.i65"
_mackinac
    jsr enter
#include "page.i65"
    .word drop                  ; `warm` sent us an error #
#include "page.i65"
    .word here                  ; `here` now points to `there`
#include "page.i65"
    .word _pforget
#include "pass.i65"
    .word plits
    .byt 5
    .word userdp
    .word userfence             ; @ swap !
    .word _errormsg
    .word userwarning           ; !
    .word MAINIRQ               ; irq!
#include "page.i65"
;~~~    .word irqstore              ; restore default IRQ handler
#include "page.i65"
    .word store                 ; set `warning` to `error.msg`
#include "page.i65"
    .word fetch                 ; fix DP to reclaim startup code area
#include "page.i65"
    .word swap
#include "page.i65"
    .word store
#include "page.i65"
    .word pl11
#include "page.i65"
    .word _deadbeef
#include "page.i65"
    .word _emptybuffers         ; do this again here, because DEADBEEF
#include "pass.i65"
    .word restart               ; restart #4 -> `warm`


;--------------------------------------------------------------
#if 0
name=DEADBEEF
stack=( -- )
tags=startup,nosymbol
Fill available memory with the 32-bit value `$DEADBEEF` . Discarded after
running once at startup.  Used to assist in debugging.

#endif
#include "align.i65"
_deadbeef
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt deadbeef00-*-1
    .asc HOME,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN
    .asc CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRDOWN,CRSRLEFT,CRSRLEFT,CRSRLEFT
    .asc CRSRLEFT,CRSRLEFT,RVSON,"DEAD",CRSRLEFT,CRSRLEFT,CRSRLEFT,CRSRLEFT
deadbeef00
#include "page.i65"
    .word symtab
#include "page.i65"
    .word fetch
#include "pass.i65"
deadbeef01
    .word dlit
    .word $adde,$efbe           ; little-endian makes pretty 8-bit hex dumps
#include "page.i65"
    .word rot
#include "page.i65"
    .word four
#include "page.i65"
    .word minus
#include "page.i65"
    .word here
#include "page.i65"
    .word over
#include "page.i65"
    .word lt
#include "pass.i65"
    .word qbranch
    .byt <(deadbeef02-*+1)
#include "page.i65"
    .word dashrot
#include "page.i65"
    .word third
#include "page.i65"
    .word twostore
#include "pass.i65"
    .word branch
    .byt <(deadbeef01-*+1)
#include "page.i65"
deadbeef02
    .word drop
#include "page.i65"
    .word here
#include "page.i65"
    .word twostore
#include "pass.i65"
    .word _pdq
    .byt deadbeef03-*-1
    .asc    RVSOFF,"BEEF",CR,CR
deadbeef03
#include "pass.i65"
    .word exit

#print *
    .dsb hitop+256-*,$EA       ; ~#resizetdict
#print *
