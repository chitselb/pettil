; pettil-utils.a65
#echo .       pettil-utils.a65          Utility words

;--------------------------------------------------------------
#if 0
name=.S
tags=i/o,stack,ext
Output the data stack

d;m 0 8f;m 1f0 1ff;m 74f0 751f;z


```
: .s ( ?? -- ?? )
    depth ?dup
    if
        0 do
            depth i - 1- pick  7 u.r space
        loop
    else
        ." stack empty"
    then ;
```
#endif
#include "align.i65"
_dots
    jsr enter
#include "page.i65"
    .word depth
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(dots02-*+1)
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(dots04-*+1)
#include "page.i65"
dots01
    .word depth
#include "page.i65"
    .word i
#include "page.i65"
    .word minus
#include "page.i65"
    .word oneminus
#include "page.i65"
    .word pick
#include "page.i65"
    .word _udot
#include "pass.i65"
    .word ploop
    .byt <(dots01-*+1)
#include "pass.i65"
dots02
    .word _pdq
    .byt dots03-*-1
    .asc "STACK EMPTY "
dots03
#include "page.i65"
dots04
    .word exit

;--------------------------------------------------------------
#if 0
name=PETSCII"
stack=( -- c )
tags=string,ext
Converts a quoted character to its numeric value

usage: `petscii" x" .` responds `88  ok`

~#test
```
#endif
#include "align.i65"
_petscii
    jsr enter
#include "pass.i65"
    .word clit
    .byt 34
#include "page.i65"
    .word _name
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=.H
stack=( c -- )
tags=i/o
Prints out a number as an unsigned hexadecimal byte
```
: .h   ( c -- )
    base @ hex swap
    0 <# # # #> type
    base ! ;
```
#endif
#include "align.i65"
_doth
    jsr enter
#include "page.i65"
    .word base
#include "page.i65"
    .word fetch
#include "page.i65"
    .word hex
#include "page.i65"
    .word swap
#include "page.i65"
    .word zero
#include "page.i65"
    .word _ltsharp
#include "page.i65"
    .word _sharp
#include "page.i65"
    .word _sharp
#include "page.i65"
    .word _sharpgt
#include "page.i65"
    .word type
#include "page.i65"
    .word base
#include "page.i65"
    .word store
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=.4H
stack=( u -- )
tags=i/o
Prints out a number as an unsigned hexadecimal word
```
: .4h   ( u -- )
    dup msb .h
    lsb .h ;
```
#endif
#include "align.i65"
_dotfourh
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word msb
#include "page.i65"
    .word _doth
#include "page.i65"
    .word lsb
#include "page.i65"
    .word _doth
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=XLATE
stack=( char -- printablechar )
tags=i/o,nosymbol

#endif
xlate
    lda tos
    and #$7f
    cmp #$20
    bcs xlate01
    lda #'.'
    sta tos
xlate01
    jmp next

;--------------------------------------------------------------
#if 0
name=DUMP
stack=( addr size -- )
tags=i/o
Dumps a region of memory as lines of eight bytes each

```
: dump   ( addr size -- )
    1+ 0
    ?do
        #out @ 0=
        if
            dup msb .h
            dup lsb .h
        then
        c@+ space .h
        l/scr #out @ <
        if
            space 18 ( RVSON ) emit
            dup 8 - under
            do i c@ xlate emit loop cr
        then
        ?terminal  if leave then
    loop
    drop ;
```
#endif
#include "align.i65"
_dump
    jsr enter
#include "page.i65"
    .word cr
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pqdo
    .byt <(dump06-*+1)
#include "page.i65"
dump01
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zeq
#include "pass.i65"
    .word qbranch
    .byt <(dump02-*+1)
#include "page.i65"
    .word dup
#include "page.i65"
    .word _dotfourh
#include "page.i65"
dump02
    .word cfetchplus
#include "page.i65"
    .word space
#include "page.i65"
    .word _doth
#include "page.i65"
    .word lperscr               ; 25
#include "page.i65"
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word lt
#include "pass.i65"
    .word qbranch
    .byt <(dump05-*+1)
#include "page.i65"
    .word space
#include "pass.i65"
    .word clit
    .byt RVSON
#include "page.i65"
    .word emit
#include "page.i65"
    .word dup
#include "page.i65"
    .word eight
#include "page.i65"
    .word minus
#include "page.i65"
    .word under
#include "pass.i65"
    .word pdo
    .byt <(dump04-*+1)
#include "page.i65"
dump03
    .word i
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word xlate
#include "page.i65"
    .word emit
#include "pass.i65"
    .word ploop
    .byt <(dump03-*+1)
#include "page.i65"
dump04
    .word _pausecr
#include "pass.i65"
dump05
    .word ploop
    .byt <(dump01-*+1)
#include "page.i65"
dump06
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.
stack=( -- )
tags=compiler
Displays the name at the current `nfa` in `n3`

```
: id.   ( -- )
    <n3 1+ sym.len type ;
```
#endif
#include "align.i65"
_iddot
    jsr enter
#include "pass.i65"
    .word zpfrom
    .byt ACC+2*N3
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word symlen
#include "page.i65"
    .word type
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.L
stack=( nfa -- )
tags=ext,nosymbol

#endif
#include "align.i65"
_iddotl
    jsr enter
#include "page.i65"
    .word _iddot
#include "page.i65"
    .word space
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.WL
stack=( -- )
tags=ext,nosymbol
emits a carriage return in `words` output to avoid wrapping lines

```
: id.wl   ( -- )
    sym.len #out @ + 1+ 40 >
    if ?pause cr then ;
```
#endif
#include "align.i65"
_iddotwl
    jsr enter
#include "page.i65"
    .word symlen
#include "page.i65"
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word twoplus
#include "page.i65"
    .word width
#include "page.i65"
    .word fetch
#include "page.i65"
    .word gt
#include "pass.i65"
    .word pquerycolon
    .word _pausecr
    .word space
#include "page.i65"
    .word _iddot
#include "pass.i65"
qcr02
    .word exit

; ?CR   ( -- )
#include "align.i65"
_pausecr
    jsr enter
#include "page.i65"
    .word _qquit
#include "page.i65"
    .word _qpause
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

; ?QUIT   ( -- )
#include "align.i65"
_qquit
    jsr enter
#include "page.i65"
    .word qterminal
#include "page.i65"
    .word zeq
#include "page.i65"
    .word _qexit
#include "pass.i65"
    .word _quit

;--------------------------------------------------------------
#if 0
name=(VOC)
stack=( -- voc )
tags=ext,nosymbol
return the `voc` of the current `nfa` in `n3`
#endif
pvoc
    jsr symlens
    bcc pvoc05
    tay
    iny
    lda (ACC+2*N3),y
    .byt $24
pvoc05
    tya
    jmp push0a

;--------------------------------------------------------------
#if 0
name=WORD-LIST
stack=( voc -- )
tags=interpreter,dictionary,forth-83
Displays all words in vocabulary `n`

user symcurr  ( -- addr )


	symcurr off
	sym+  ( -- )

for each symbol
    is it in the right vocab?
        dup id.
next

dup c@ $40 and 0=               \ TRUE if in core


```
: wordlist   ( voc -- )
    sym.rewind
    begin
        (voc) over =
        ?terminal 0= and
        if  ?cr id.l  then
        3 sym+ 0=
    until drop ;

: word-list   ( voc -- )
    sym.rewind
    begin
        (voc) over =
        if id.wl then
        3 sym+
        symlen 0=
    until  drop ;
```
#endif
#include "align.i65"
_wordlist
    jsr enter
#include "page.i65"
    .word _symrewind
#include "page.i65"
wordlist01
    .word pvoc
#include "page.i65"
    .word over
#include "page.i65"
    .word eq
#include "pass.i65"
    .word qbranch
    .byt <(wordlist02-*+1)
#include "page.i65"
    .word _iddotwl
#include "page.i65"
wordlist02
    .word symplus
    .byt 3
#include "page.i65"
    .word symlen
#include "page.i65"
    .word zeq
#include "pass.i65"
    .word qbranch
    .byt <(wordlist01-*+1)
#include "page.i65"
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WORDS
stack=( -- )
tags=interpreter,dictionary,forth-83
When `vocabs` is empty, display the `forth` vocabulary
otherwise, show search (context) vocabularies

```
: words   ( -- )
    cr vocabs 1+ dup
    begin
        c@+ ?dup
    while
        word-list
    repeat
    - 1+ dup
    ?: drop word-list ;
```
#endif
#include "align.i65"
_words
    jsr enter
#include "page.i65"
    .word cr
#include "page.i65"
    .word vocabs
#include "page.i65"
    .word oneplus               ; skip the count
#include "page.i65"
    .word dup
#include "page.i65"
words01
    .word cfetchplus
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(words02-*+1)
#include "page.i65"
    .word _wordlist
#include "pass.i65"
    .word branch
    .byt <(words01-*+1)
#include "page.i65"
words02
    .word minus
#include "page.i65"
    .word oneplus
#include "page.i65"
    .word dup                   ; something to drop
#include "pass.i65"
    .word pquerycolon
    .word drop
    .word _wordlist
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=?MARGIN
stack=( size -- )
tags=ext,nosymbol
perform `cr` when Xcurpos + `size` is greater than `width`

```
: id.8   ( cfa -- )
    dup >name drop 7 sym.len -
    spaces id.l execute ;
```
#endif
#include "align.i65"
_qmargin
    jsr enter
#include "page.i65"
    .word numout
#include "page.i65"
    .word fetch
#include "page.i65"
    .word plus
#include "page.i65"
    .word width
#include "page.i65"
    .word fetch
#include "page.i65"
    .word gt
#include "pass.i65"
    .word qbranch
    .byt <(qmargin01-*+1)
#include "page.i65"
    .word _pausecr
#include "pass.i65"
qmargin01
    .word exit

;--------------------------------------------------------------
#if 0
name=ID.8
stack=( cfa -- )
tags=ext,nosymbol
formatted output, three-column layout used by `info`

```
: id.8   ( cfa -- )
    dup >name drop 7 sym.len -
    spaces id.l execute ;
```
#endif
#include "align.i65"
_iddot8
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word seven
#include "page.i65"
    .word symlen
#include "page.i65"
    .word minus
#include "page.i65"
    .word _spaces
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word execute
#include "pass.i65"
    .word exit

info05
; 3-column layout

;            BASE     #BLK    VMBUF
    .word    base,  numblk,   vmbuf

;           FENCE      SCR   SYMTAB
    .word   fence,     scr,  symtab

;              DP     PREV   SYMNEW
    .word      dp,    prev,  symnew

;          LIMIT   EDITING  SYMTAIL
    .word  limit,  editing, symtail

;            DRV#     #VOC    TDICT
    .word  drvnum,  numvoc,   tdict

;             SA#  CURRENT      TDP
    .word   sanum, current,     tdp

; end
    .word 0

;--------------------------------------------------------------
#if 0
name=INFO
stack=( -- )
tags=editor
Displays info on various editor and memory system variables

```
: info   ( -- )
    info05 c@ 0
    do
        i ?: 6spaces next
        i 2* 1+ info05 + @ dup
        >name.l10 execute
        @ .4h
    loop
    cr ['] vocabs >name id. 3 spaces
    vocabs 10 0
    do
        c@+ space .h
    loop
    drop cr
    ['] filename >name.l10
    filename @ dup .4h space dup c@ .h
    space $. cr
    ['] startup >name.l10
    startup @ >name.l10 ;

: info   ( -- )
    cr 'info05
    begin
        @+ ?dup
    while
        dup
        >name >n8 8 sym.len - spaces id.l
        drop execute @ .4h  13 ?margin
    repeat
    vocabs >name drop id.l
    vocabs count 0
    do
        c@+ .h space
    loop
    drop cr 'filename >name drop id.l filename @ dup .4h space dup c@ .h space $. ;
```
#endif
#include "align.i65"
_info
    jsr enter
#include "page.i65"
    .word cr
#include "pass.i65"
    .word plit
    .word info05
#include "page.i65"
info01
    .word fetchplus
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(info02-*+1)
#include "page.i65"
    .word dup
#include "page.i65"
    .word _toname
#include "pass.i65"
    .word tozp
    .byt ACC+2*N8
#include "page.i65"
    .word eight
#include "page.i65"
    .word symlen
#include "page.i65"
    .word minus
#include "page.i65"
    .word _spaces
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word drop
#include "page.i65"
    .word execute
#include "page.i65"
    .word fetch
#include "page.i65"
    .word _dotfourh
#include "pass.i65"
    .word clit
    .byt 13
#include "page.i65"
    .word _qmargin
#include "pass.i65"
    .word branch
    .byt <(info01-*+1)
#include "pass.i65"
info02
    .word plit
    .word filename
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word filename
#include "page.i65"
    .word fetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word _dotfourh
#include "page.i65"
    .word space
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "page.i65"
    .word _doth
#include "page.i65"
    .word space
#include "page.i65"
    .word _stringdot
#include "page.i65"
    .word cr
#include "pass.i65"
    .word plit
    .word vocabs
#include "page.i65"
    .word nip
#include "page.i65"
    .word _toname
#include "page.i65"
    .word drop
#include "page.i65"
    .word _iddotl
#include "page.i65"
    .word vocabs
#include "page.i65"
    .word count
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(info04-*+1)
#include "page.i65"
info03
    .word cfetchplus
#include "page.i65"
    .word _doth
#include "page.i65"
    .word space
#include "pass.i65"
    .word ploop
    .byt <(info03-*+1)
#include "page.i65"
info04
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=VMDUMP
stack=( addr -- )
tags=test

```
: vmdump
    vmbottom $fff0 and
    blkbuf over - dump ;
```
#endif
#include "align.i65"
_vmdump
    jsr enter
#include "page.i65"
    .word _vmbottom
#include "page.i65"
    .word dup
#include "page.i65"
    .word _dotfourh
#include "pass.i65"
    .word plit
    .word $FFF8                 ; align dump output
#include "page.i65"
    .word andx
#include "page.i65"
    .word blkbuf
#include "page.i65"
    .word over
#include "page.i65"
    .word minus
#include "page.i65"
    .word _dump
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=DELAY
stack=( y -- )
tags=test

#endif
delay
    jsr docreate
    .word 5

;--------------------------------------------------------------
#if 0
name=ANIMAL
stack=( y -- )
tags=test

#endif
animal
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=TASK
stack=( y -- )
tags=test

#endif
task
    jsr docreate
    .word 0

;--------------------------------------------------------------
#if 0
name=WORK
stack=( y -- )
tags=test

#endif
work
    jsr docreate
    .dsb 32,0

;--------------------------------------------------------------
#if 0
name=TIMEOUTS
stack=( y -- )
tags=test

#endif
timeouts
    jsr docreate
    .dsb 16,0

;--------------------------------------------------------------
#if 0
name=ANIMIRQ
stack=( y -- )
tags=test

#endif
animirq
    ldx #$0F
animirq01
    lda timeouts+3,x
    bne animirq03
    dex
    bpl animirq01
animirq02
    jmp MAINIRQ
animirq03
    lda #<bang
    sta work+3
    lda #>bang
    sta work+4
    bne animirq02               ; bra

;--------------------------------------------------------------
#if 0
name=HAND
stack=( y -- )
tags=test

#endif
#include "align.i65"
_hand
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(hand04-*+1)
#include "page.i65"
hand01
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word vidram
#include "page.i65"
    .word plus
#include "pass.i65"
    .word clit
    .byt 17
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(hand03-*+1)
#include "page.i65"
hand02
#include "page.i65"
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word clit
    .byt $80
#include "page.i65"
    .word xor
#include "page.i65"
    .word swap
#include "page.i65"
    .word cstore
#include "pass.i65"
    .word ploop
    .byt <(hand02-*+1)
#include "page.i65"
hand03
    .word drop
#include "pass.i65"
    .word ploop
    .byt <(hand01-*+1)
#include "page.i65"
hand04
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=SISYPHUS
stack=( y -- )
tags=test

#endif
#include "align.i65"
_sisyphus
    jsr enter
#include "page.i65"
    .word task
#include "page.i65"
    .word off
#include "page.i65"
sisyphus01
    .word task
#include "page.i65"
    .word fetch
#include "page.i65"
    .word dup
#include "page.i65"
    .word work
#include "page.i65"
    .word plus
#include "page.i65"
    .word fetch
#include "page.i65"
    .word qdup
#include "pass.i65"
    .word qbranch
    .byt <(sisyphus02-*+1)
#include "page.i65"
    .word execute
#include "page.i65"
    .word dup
#include "page.i65"
    .word work
#include "page.i65"
    .word plus
#include "page.i65"
    .word off
#include "page.i65"
sisyphus02
    .word twoplus
#include "pass.i65"
    .word clit
    .byt 31
#include "page.i65"
    .word andx
#include "page.i65"
    .word task
#include "page.i65"
    .word store
#include "page.i65"
    .word qterminal
#include "pass.i65"
    .word qbranch
    .byt <(sisyphus01-*+1)
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=RVS
stack=( n -- n )
tags=test

#endif
#include "align.i65"
rvson
    jsr dodotc
    .asc RVSON

;--------------------------------------------------------------
#if 0
name=VIRT
stack=( -- )
tags=test

#endif
#include "align.i65"
virt
    jsr dodotc
    .asc VLINE5

;--------------------------------------------------------------
#if 0
name=RVSOFF
stack=( n -- n )
tags=test

#endif
#include "align.i65"
rvsoff
    jsr dodotc
    .asc RVSOFF

;--------------------------------------------------------------
#if 0
name=BANG
stack=( n -- n )
tags=test

#endif
#include "align.i65"
bang
    jsr dodotc
    .asc '!'

;--------------------------------------------------------------
#if 0
name=.ON
stack=( n -- n )
tags=test

#endif
#include "align.i65"
onbit
    jsr dodotc
    .byt BLOCK8

;--------------------------------------------------------------
#if 0
name=.OFF
stack=( n -- n )
tags=test

#endif
#include "align.i65"
offbit
    jsr dodotc
    .byt $F0                    ; ~todo - add to cbm.def

;--------------------------------------------------------------
#if 0
name=.B
stack=( n -- n )
tags=test

#endif
#include "align.i65"
_dotb
    jsr enter
#include "page.i65"
    .word benjamin
#include "page.i65"
    .word eight
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(dotb03-*+1)
#include "page.i65"
dotb01
    .word twoslash
#include "page.i65"
    .word twodup
#include "page.i65"
    .word andx
#include "pass.i65"
    .word pquerycolon
    .word onbit
    .word offbit
#include "pass.i65"
    .word ploop
    .byt <(dotb01-*+1)
#include "page.i65"
dotb03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=HIGHLIGHT
stack=( y -- )
tags=test

#endif
#include "align.i65"
_highlight
    jsr enter
#include "page.i65"
    .word three
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(highlight04-*+1)
#include "page.i65"
highlight01
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word vidram
#include "page.i65"
    .word plus
#include "pass.i65"
    .word clit
    .byt 17
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(highlight03-*+1)
#include "page.i65"
highlight02
#include "page.i65"
    .word i
#include "page.i65"
    .word over
#include "page.i65"
    .word plus
#include "page.i65"
    .word dup
#include "page.i65"
    .word cfetch
#include "pass.i65"
    .word clit
    .byt $80
#include "page.i65"
    .word xor
#include "page.i65"
    .word swap
#include "page.i65"
    .word cstore
#include "pass.i65"
    .word ploop
    .byt <(highlight02-*+1)
#include "page.i65"
highlight03
    .word drop
#include "pass.i65"
    .word ploop
    .byt <(highlight01-*+1)
#include "page.i65"
highlight04
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDBREAK
stack=( addr -- )
tags=test

```
: bdbreak
```
#endif
#include "align.i65"
_bdbreak
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word _dotfourh
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word bang
#include "page.i65"
    .word _doth
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDLINE
stack=( addr -- )
tags=test

```
: bdline
```
#endif
#include "align.i65"
_bdline
    jsr enter
#include "pass.i65"
    .word _pdq
    .byt <(bdline01-*-1)
    .asc "    ",$B3,"        ",$AB,"  ",CR
bdline01
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=BDUMP
stack=( addr -- )
tags=test

#endif
#include "align.i65"
_bdump
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word _bdline
#include "pass.i65"
    .word clit
    .byt 11
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(bdump03-*+1)
#include "page.i65"
bdump01
    .word _bdbreak
#include "page.i65"
    .word _bdline
#include "pass.i65"
    .word ploop
    .byt <(bdump01-*+1)
#include "page.i65"
bdump03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WDBREAK
stack=( addr -- )
tags=test

```
: wdbreak
```
#endif
#include "align.i65"
_wdbreak
    jsr enter
#include "page.i65"
    .word dup
#include "page.i65"
    .word dup
#include "page.i65"
    .word benjamin
#include "page.i65"
    .word ult
#include "pass.i65"
    .word pquerycolon
    .word _doth
    .word _dotfourh
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word dup
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word space
#include "page.i65"
    .word cfetchplus
#include "pass.i65"
    .word dup
#include "pass.i65"
    .word _dotb
#include "pass.i65"
    .word bang
#include "pass.i65"
    .word cjoin
#include "page.i65"
    .word _dotfourh
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=!XY
stack=( addr|offset -- )
tags=test
Set hardware cursor from either a `vidram` address (or `offset`, ignores high bit)

$AF   $C6  $D5  ($C4)     $D8
DFLTN,PNTR,TBLX,PNT,PNT+1,LNMX
       ^        ( ^ )      ^
set three things:
    LNMX = x position
    PNTR = y position
    (PNT) = line address

```
auf BASIC;  PRINT @X,Y
```
#endif
#include "align.i65"
_setxy
    jsr enter
#include "page.i65"
    .word minusone
#include "page.i65"
    .word twoslash
#include "page.i65"
    .word over
#include "page.i65"
    .word andx
#include "page.i65"
    .word slashmod40
#include "pass.i65"
    .word setxy01
setxy01
    lda tos
    sta PNTR
    lda stackl,x
    sta LNMX
    inx
    lda #0
    sta tos+1
    lda #PNTR
    sta tos
    jmp store

;--------------------------------------------------------------
#if 0
name=.VLINE
stack=( n -- )
tags=test
draw a vertical bar n pixels from left edge of cursor

#endif
vline
    lda LNMX                    ; cursor column
    lda tos
    lsr
    lsr
    lsr                         ; column / 8
    clc
    stx z
    adc z

    jsr plugh
    jmp drop

;--------------------------------------------------------------
#if 0
name=WDLINE
stack=( addr -- )
tags=test

```
: wdline
```
#endif
#include "align.i65"
_wdline
    jsr enter
#include "pass.i65"
    .word dlit
    .byt 92,20
#include "page.i65"
    .word vline
#include "page.i65"
    .word vline
#include "page.i65"
    .word bang
#include "page.i65"
    .word cr
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=WDUMP
stack=( addr -- )
tags=test

#endif
#include "align.i65"
_wdump
    jsr enter
#include "page.i65"
    .word homescr
#include "page.i65"
    .word _wdline
#include "pass.i65"
    .word clit
    .byt 11
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pdo
    .byt <(wdump03-*+1)
#include "page.i65"
wdump01
    .word _wdbreak
#include "page.i65"
    .word _wdline
#include "pass.i65"
    .word ploop
    .byt <(wdump01-*+1)
#include "page.i65"
wdump03
    .word drop
#include "pass.i65"
    .word exit

;--------------------------------------------------------------
#if 0
name=INDEX
stack=( -- )
tags=secondary,extra

```
: index
    #blk @ 0 do i block 40 type loop ;
```
#endif
#include "align.i65"
_index
    jsr enter
#include "page.i65"
    .word numblk
#include "page.i65"
    .word fetch
#include "page.i65"
    .word zero
#include "pass.i65"
    .word pqdo
    .byt <(index02-*+1)
#include "page.i65"
index01
    .word i
#include "page.i65"
    .word _block
#include "page.i65"
    .word vidram
#include "page.i65"
    .word i
#include "page.i65"
    .word fortytimes
#include "page.i65"
    .word plus
#include "page.i65"
    .word forty
#include "page.i65"
    .word cmove
#include "pass.i65"
    .word ploop
    .byt <(index01-*+1)
#include "pass.i65"
index02
    .word exit

#print (*-_petscii)
