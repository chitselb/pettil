; core-test.a65
#echo .       core-test.a65             Test area
;--------------------------------------------------------------
#if 0
name=FOO
stack=( -- )
tags=test
Test word, does nothing
#endif
foo
    jmp next

;--------------------------------------------------------------
#if 0
name=40/MODY
stack=( u -- u%40 u/40 )
tags=math,test
[[Y - Mike's take 1|http://forum.6502.org/viewtopic.php?f=2&t=3051#p34802]]

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
ylmod40
    jsr slip
    lda #0
    ldy #16
ylmod40b
    asl tos
    rol tos+1
    rol
    cmp #40
    bcc ylmod40c
    sbc #40
    inc tos
ylmod40c
    dey
    bne ylmod40b
    sta stackl,x
    sty stackh,x
    jmp next

;--------------------------------------------------------------
#if 0
name=40/MODZ
stack=( u -- u%40 u/40 )
tags=math,test
[[Z - Mike's take 2, slightly faster & smaller|http://forum.6502.org/viewtopic.php?f=2&t=3051#p36767]]

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
zlmod40
        jsr slip    ; make room for the remainder
        lda #0
        ldy #16
zlmod40b
        cmp #20
        bcc zlmod40c
        sbc #20
zlmod40c
        rol tos
        rol tos+1
        rol
        dey
        bne zlmod40b
        sta stackl,x
        sty stackh,x
        jmp next

;--------------------------------------------------------------
#if 0
name=40MOD
stack=( u -- u%40 )
tags=math,test
[[X - Bogax|http://forum.6502.org/viewtopic.php?f=2&t=3051&sid=bdc673ded3a873ad58c77e63ea92aeea&start=15#p37056]]

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
mod_40
    lda tos+1
    asl
    asl
    asl
    asl
    clc
    adc tos
    bcc mod40b
    adc #$0F
mod40b
    sta n
    lda tos+1
    and #$F0
    adc n
    bcc mod40c
    adc #$0F
mod40c
    sec
div_loop
    sbc #$28
    bcs div_loop
    adc #$28
    sta tos
    lda #0
    sta tos+1
    jmp next

;--------------------------------------------------------------
#if 0
name=%40B
stack=( u -- u%40 )
tags=math,test
[[V - Omegamatrix' enhancement|http://forum.6502.org/viewtopic.php?f=2&t=3051&sid=bdc673ded3a873ad58c77e63ea92aeea&start=15#p37116]]

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
mod_40b
    lda tos+1
    and #$f0
    sta n
    eor tos+1
    asl
    asl
    asl
    asl
    adc tos
    bcc skipAdd16A
    adc #$0f
skipAdd16A
    adc n
    bcc skipAdd16B
    adc #$0F
skipAdd16B
    sec
div_loopMod
    sbc #40
    bcs div_loopMod
    adc #40
    sta tos
    lda #0
    sta tos+1
    jmp next

;--------------------------------------------------------------
#if 0
name=40/MODW
stack=( u -- u%40 u/40 )
tags=math,test
W - uses JSR with N preloaded with the divisor, so the divisor could be
something other than 40 (e.g. BASE @), based on
[[Y - Mike's take 1|http://forum.6502.org/viewtopic.php?f=2&t=3051#p34802]]

Perform a divide by 40 and a modulo 40, useful for screen positioning and
[[Radix50|http://en.wikipedia.org/wiki/DEC_Radix-50]]
#endif
wlmodn
    jsr slip
    lda #40
    sta n
    sta stackl,x
    sta stackh,x
    jsr wlmodna ; any way to skip the first 16 iterations, all 0s?
    sta stackl,x
    sty stackh,x
    jmp next

; unsigned 32/8 division for 40/mod and '#'
wlmodna
    ldy #32
    lda #0
wlmodnb
    asl stackl,x
    rol stackh,x
    rol tos
    rol tos+1
    rol
    cmp n
    bcc wlmodnc
    sbc n
    inc stackl,x
wlmodnc
    dey
    bne wlmodnb
    rts




;--------------------------------------------------------------
#if 0
name=UM/MODB
stack=( ud1 u2 -- u3 ud4 )
tags=numword
; - - - - - - - - - - - - - - - - - - - - - - - - - - -
; UM/MOD  ( ud u1 -- u2 u3 )
; Dividend ud is 32-bits unsigned.  Divisor u1,
; Remainder u2 and Quotient u3 are 16-bits unsigned
; Invalid inputs and/or outputs are silently ignored
; 1823 cycles (+ NEXT) best case (zero quotient)
; 2239 cycles (+ NEXT) worst case (zero divisor)
;
#endif
umdivmod
    jsr xudivmod   ; (do the dirty work)
    inx            ; NIP
    jmp swap       ; SWAP

;--------------------------------------------------------------
#if 0
name=UD/MODB
stack=( ud1 u2 -- u3 ud4 )
tags=numword

http://www.bradrodriguez.com/papers/camel09.txt
\   High level: numeric output                   (c) 31mar95 bjr
: UD/MOD      \ ud1 u2 -- u3 ud4     32/16->32 divide
    >R 0 R@ UM/MOD  ROT ROT R> UM/MOD ROT ;

; - - - - - - - - - - - - - - - - - - - - - - - - - - -
; UD/MOD  ( ud1 u1 -- u2 ud2 )
; Dividend ud1 and Quotient ud2 are 32-bits unsigned
; Divisor u1 and Remainder u2 are 16-bits unsigned
; Invalid inputs and/or outputs are silently ignored
; 1856 cycles (+ NEXT) best case (zero quotient)
; 2272 cycles (+ NEXT) worst case (zero divisor)
;
#endif
uddivmod
    jsr xudivmod   ; (do the dirty work)
    jmp dashrot    ; -ROT

; - - - - - - - - - - - - - - - - - - - - - - - - - - -
; Internal divmod routine used by UM/MOD and UD/MOD
; ( ud1 u1 -- ud2 u2 )
; ud1 is dividend, u1 is divisor
; ud2 is quotient, u2 is remainder
xudivmod
    ldy #32        ;[2] init loop counter
    lda #0         ;[2] init partial remainder
    sta n          ;[3]   in N-A (h-l)
xudm2
    asl stackl+1,x ;[6] dividend in NOS-3OS (h-l)
    rol stackh+1,x ;[6]   is gradually replaced
    rol stackl,x   ;[6]   with the quotient
    rol stackh,x   ;[6]
    rol            ;[2] N-A is gradually replaced
    rol n          ;[5]   with the remainder
    pha            ;[3]
    cmp tos        ;[3] TOS holds divisor
    lda n          ;[3] partial remainder >= TOS?
    sbc tos+1      ;[3]
    bcc xudm3      ;[3]*
    sta n          ;[3]   yes--update the partial
    pla            ;[4]     remainder and set the
    sbc tos        ;[3]     low bit in the partial
    inc stackl+1,x ;[6]     quotient
    .byt $c9       ;[2]*  cmp# naked opcode
xudm3
    pla            ;[4]*
    dey            ;[2] loop 32 times
    bne xudm2      ;[3]*
    sta tos        ;[3]
    ldy n          ;[3]
    sty tos+1      ;[3]
    rts            ;[6]



;--------------------------------------------------------------
#if 0
name=UD/MODC
stack=( ud1 u2 -- u3 ud4 )
tags=numword

[[Mike's take 2|http://forum.6502.org/viewtopic.php?f=9&t=1652&start=30#p36933]]
; - - - - - - - - - - - - - - - - - - - - - - - - - - -
; UD/MOD  ( ud1 u1 -- u2 ud2 )
; Dividend ud1 and Quotient ud2 are 32-bits unsigned
; Divisor u1 and Remainder u2 are 16-bits unsigned
; Invalid inputs and/or outputs are silently ignored
;
#endif
udsm
    ldy #32        ; init loop counter
    lda #0         ; init partial remainder
    sta n          ;   in N-A (h-l)
udsm2
    asl stackl+1,x ; dividend in NOS-3OS (h-l)
    rol stackh+1,x ;   is gradually replaced
    rol stackl,x   ;   with the quotient
    rol stackh,x
    rol            ; N-A is gradually replaced
    rol n          ;   with the remainder
    pha
    cmp tos        ; TOS holds the divisor
    lda n          ; partial remainder >= TOS?
    sbc tos+1
    bcc udsm3
    sta n          ;   yes--update the partial
    pla            ;     remainder and set the
    sbc tos        ;     low bit in the partial
    pha            ;     quotient
    inc stackl+1,x
udsm3
    pla
    dey
    bne udsm2      ; loop 32 times
    ldy n
    jmp pushya
    ;needs a -rot here




;--------------------------------------------------------------
#if 0
name=UD/MODD
stack=( ud1 u2 -- u3 ud4 )
tags=numword

[[Mike's take 3|http://forum.6502.org/viewtopic.php?f=9&t=1652&start=30#p36941]]
; - - - - - - - - - - - - - - - - - - - - - - - - - - -
; UD/MOD  ( ud1 u1 -- u2 ud2 )
; Dividend ud1 and Quotient ud2 are 32-bits unsigned
; Divisor u1 and Remainder u2 are 16-bits unsigned
; Invalid inputs and/or outputs are silently ignored
;
#endif
udsmd
    ldy #32        ; init loop counter
    lda #0         ; init partial remainder
    sta n          ;   in N-A (h-l)
udsmd2
    asl stackl+1,x ; dividend in NOS-3OS (h-l)
    rol stackh+1,x ;   is gradually replaced
    rol stackl,x   ;   with the quotient
    rol stackh,x
    rol            ; N-A is gradually replaced
    rol n          ;   with the remainder
    pha
    cmp tos        ; TOS holds the divisor
    lda n          ; partial remainder >= TOS?
    sbc tos+1
    bcc udsmd3
    sta n          ;   yes--update the partial
    pla            ;     remainder and set the
    sbc tos        ;     low bit in the partial
    inc stackl+1,x ;     quotient
    .byt $24       ;   BIT zp naked opcode
udsmd3
    pla
    dey
    bne udsmd2     ; loop 32 times
    ldy n
    jmp pushya
    ; needs stack -rot here

;--------------------------------------------------------------
#if 0
name=40/
stack=( u -- u/40 )
tags=nucleus,text
#endif
slash40
    lda #0
    sta n
    sta n+1
    sta n+2
    sta n+3

    jsr slash40c
    jsr slash40c
    jsr slash40c

    lda #5
    adc n+1
    lda #0
    adc n+2
    pha
    lda #0
    adc n+3
    tay
    pla

    jmp put

slash40c
    jsr slash40b
    jsr slash40b
    jsr slash40a
    jmp slash40a

slash40a
    lda tos
    adc n
    sta n
    lda tos+1
    adc n+1
    sta n+1
slash40b
    asl n
    rol n+1
    rol n+2
    rol n+3
    rts

;--------------------------------------------------------------
#if 0
name=33*
stack=( u -- u*$3333 )
tags=nucleus,test
#endif
times33
    stx storex
    lda tos             ; [3]  n..n+3 = u*$0003
    asl                 ; [2]  n+4..n+7 = u*$3333
    sta n+3             ; [3]
    lda tos+1           ; [3]
    rol                 ; [2]      ABCD*2
    sta n+2             ; [3]
    lda #0              ; [2]
    sta n+8             ; [3]
    rol                 ; [2]
    ;clc
    sta n+1             ; [3]
    lda n+3             ; [3]     +ABCD
    adc tos             ; [3]
    sta n+3             ; [3]
    lda n+2             ; [3]
    adc tos+1           ; [3]
    sta n+2             ; [3]
    bcc times33c        ; [3]     =ABCD*3
    inc n+1
    clc                         ; [44]
times33c
    lda n+3             ; [3]         3 AB CD
    sta n+7             ; [3]     +3 AB CD 00
    adc n+2             ; [3]     =ABCD*0303
    sta n+6             ; [3]
    lda n+2             ; [3]
    adc n+1             ; [3]
    sta n+5             ; [3]
    lda n+1             ; [3]
    adc #0              ; [2]
    sta n+4             ; [3]   ; [29] u*$0303
    ;clc

    ;   89abcdef
    ; + 90b0d0f0
    ldx #3              ; [2]
times33d
    lda n+4,x           ; [4]
    and #$0f            ; [2]
    tay                 ; [2]
    lda timeses,y       ; [4]
    adc n+4,x           ; [4]
    sta n,x             ; [4]
    dex                 ; [2]
    bpl times33d        ; [3]       ; [25]*4
    ;clc


    ;   89abcdef
    ;   +a0c0e00
    ldx #3              ; [2]
times33e
    php                 ; [3]
    lda n+5,x           ; [4]
    lsr                 ; [2]
    lsr                 ; [2]
    lsr                 ; [2]
    lsr                 ; [2]
    plp                 ; [4]
    adc n,x             ; [4]
    sta n,x             ; [4]
    dex                 ; [2]
    bpl times33e        ; [3]       [32]*4

    lsr tos+1
    ror tos

    lda tos+1
    lsr
    pha
    lda tos
    ror
    adc n+3
    pla
    bcc times33g
    adc n+2
    bcc times33g
    inc n+1
    bne times33g
    inc n
times33g
    lda n+1
    lsr n
    ror
    lsr n
    ror
    lsr n
    ror
    ldy n
    ldx storex
    jmp put
;3332cccd
timeses
    .byt 0,$10,$20,$30,$40,$50,$60,$70,$80,$90,$a0,$b0,$c0,$d0,$e0,$f0

;--------------------------------------------------------------
#if 0
name=5/
stack=( u -- u*$3333 )
tags=nucleus,test
#endif
fiveslash
    stx storex          ; [3]
    lda tos+1
    lsr
    lsr
    lsr
    lsr
    sta n+5
    lda tos+1
    and #$0f
    tax
    lda timeses,x
    sta n+6
    lda tos
    lsr
    lsr
    lsr
    lsr
    ora n+6
    tay
    lda tos
    and #$0f
    tax
    lda timeses,x
    clc
    adc tos
    sta n+7
    tya
    adc tos+1
    sta n+6
    bcc fivesla
    clc
    inc n+5
fivesla
    lda n+7
    asl
    tax
    lda n+6
    rol
    tay
    lda n+5
    rol
    ;clc
    pha
    txa
    adc n+7
    sta n+7
    tya
    adc n+6
    sta n+6
    pla
    adc n+5
    ;clc
    sta n+5

        lda tos+1
        lsr
        lsr
    ;clc ?
        adc n+7
;    lda n+7

;    sta tos
    adc n+6
;    sta tos+1
    lda n+6
    adc n+5
;    pha
    sta tos
    lda n+5
    adc #0
    lsr
    ror tos
    lsr
    ror tos
    lsr
    ror tos
    sta tos+1
;    tay
;    pla
    ldx storex
    jmp next
