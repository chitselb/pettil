#!/bin/bash
# usage: nohup pettil/tools/mkdisturb
#

#    sudo service nginx stop
    cd ~/pettil >/dev/null

    for disturbance in obj/perturb/*.[01234567]
    do
        echo $disturbance
        feat=$(basename ${disturbance#*/})
        echo $feat
        targetid=${feat: -1}
        echo $targetid
        ls ./obj/perturb/$feat
        PERTURB=${feat} ./tools/mkpet2 ${targetid}
    done
    exit

while true
do

#move into your git repo where your jekyll site is
cd ~/a_folder_created_off_home/the_git_repo_folder_you_cloned_in;

git fetch;
LOCAL=$(git rev-parse HEAD);
REMOTE=$(git rev-parse @{u});

#if our local revision id doesn't match the remote, we will need to pull the changes
if [ $LOCAL != $REMOTE ]; then
    #pull and merge changes
    git pull origin master;

    #build the new site, you must install jekyll on the server, alternatively you could put the built _site
    #repo under version control and just update based off the changes in that folder. Jekyll outputs build into /_site
    jekyll build;

    #change back to home directory
    cd


    #remove current site directory
    sudo rm -rf /var/www/site.com/public_html;

    #copy the newly built site into the directory nginx will serve it from
    sudo cp -r a_folder_created_off_home/the_git_repo_folder_you_cloned_in/_site /var/www/site.com/public_html

    sudo service nginx start;
fi
sleep 5
done
